{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport unifiedAuthService from '@/services/unifiedAuthService';\nimport adminDocumentService from '@/services/adminDocumentService';\nimport notificationService from '@/services/notificationService';\nimport AdminHeader from './AdminHeader.vue';\nimport AdminSidebar from './AdminSidebar.vue';\nexport default {\n  name: 'AdminDashboard',\n  components: {\n    AdminHeader,\n    AdminSidebar\n  },\n  data() {\n    return {\n      loading: true,\n      // UI State\n      sidebarCollapsed: false,\n      showUserDropdown: false,\n      isMobile: false,\n      adminData: null,\n      // Dashboard Data\n      stats: {\n        totalRequests: 0,\n        pendingRequests: 0,\n        approvedRequests: 0,\n        completedRequests: 0,\n        processingRequests: 0,\n        urgentRequests: 0,\n        totalRevenue: 0,\n        todayRequests: 0,\n        todayRevenue: 0,\n        totalUsers: 0,\n        activeRequests: 0,\n        completedToday: 0,\n        pendingApproval: 0\n      },\n      recentActivity: [],\n      priorityRequests: [],\n      recentRequests: [],\n      errorMessage: ''\n    };\n  },\n  async mounted() {\n    // Check authentication\n    if (!unifiedAuthService.isLoggedIn() || unifiedAuthService.getUserType() !== 'admin') {\n      this.$router.push('/login');\n      return;\n    }\n\n    // Initialize UI state\n    this.initializeUI();\n\n    // Load dashboard data\n    await this.loadDashboardData();\n\n    // Initialize real-time features\n    this.initializeRealTimeFeatures();\n  },\n  beforeUnmount() {\n    if (this.handleResize) {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    if (this.refreshInterval) {\n      clearInterval(this.refreshInterval);\n    }\n\n    // Clean up real-time features\n    this.cleanupRealTimeFeatures();\n  },\n  computed: {\n    activeMenu() {\n      const path = this.$route.path;\n      if (path.includes('/admin/users')) return 'users';\n      if (path.includes('/admin/requests')) return 'requests';\n      if (path.includes('/admin/reports')) return 'reports';\n      if (path.includes('/admin/settings')) return 'settings';\n      if (path.includes('/admin/activity-logs')) return 'activity';\n      if (path.includes('/admin/profile')) return 'profile';\n      return 'dashboard';\n    }\n  },\n  methods: {\n    // Initialize UI state\n    initializeUI() {\n      this.isMobile = window.innerWidth <= 768;\n\n      // Load saved sidebar state (only on desktop)\n      if (!this.isMobile) {\n        const saved = localStorage.getItem('adminSidebarCollapsed');\n        this.sidebarCollapsed = saved ? JSON.parse(saved) : false;\n      } else {\n        this.sidebarCollapsed = true; // Always collapsed on mobile\n      }\n\n      // Setup resize listener\n      this.handleResize = () => {\n        const wasMobile = this.isMobile;\n        this.isMobile = window.innerWidth <= 768;\n        if (this.isMobile && !wasMobile) {\n          this.sidebarCollapsed = true; // Collapse when switching to mobile\n        } else if (!this.isMobile && wasMobile) {\n          // Restore saved state when switching to desktop\n          const saved = localStorage.getItem('adminSidebarCollapsed');\n          this.sidebarCollapsed = saved ? JSON.parse(saved) : false;\n        }\n      };\n      window.addEventListener('resize', this.handleResize);\n    },\n    // Sidebar toggle\n    handleSidebarToggle() {\n      this.sidebarCollapsed = !this.sidebarCollapsed;\n      localStorage.setItem('adminSidebarCollapsed', JSON.stringify(this.sidebarCollapsed));\n    },\n    // Menu navigation\n    handleMenuChange(menu) {\n      const routes = {\n        'dashboard': '/admin/dashboard',\n        'users': '/admin/users',\n        'requests': '/admin/requests',\n        'reports': '/admin/reports',\n        'settings': '/admin/settings',\n        'activity': '/admin/activity-logs',\n        'profile': '/admin/profile'\n      };\n\n      // Close sidebar on mobile after navigation\n      if (this.isMobile) {\n        this.sidebarCollapsed = true;\n      }\n      if (routes[menu]) {\n        this.$router.push(routes[menu]);\n      }\n    },\n    // User dropdown toggle\n    handleUserDropdownToggle() {\n      this.showUserDropdown = !this.showUserDropdown;\n    },\n    // Menu actions\n    handleMenuAction(action) {\n      if (action === 'profile') {\n        this.$router.push('/admin/profile');\n      } else if (action === 'settings') {\n        this.$router.push('/admin/settings');\n      }\n      this.showUserDropdown = false;\n    },\n    // Close mobile sidebar\n    closeMobileSidebar() {\n      if (this.isMobile) {\n        this.sidebarCollapsed = true;\n      }\n    },\n    // Logout\n    handleLogout() {\n      unifiedAuthService.logout();\n      this.$router.push('/login');\n    },\n    // Load dashboard data\n    async loadDashboardData() {\n      this.loading = true;\n      try {\n        // Load admin profile\n        await this.loadAdminProfile();\n\n        // Load dashboard statistics\n        await this.loadDashboardStats();\n\n        // Load recent activity\n        await this.loadRecentActivity();\n      } catch (error) {\n        console.error('Failed to load dashboard data:', error);\n        const errorData = unifiedAuthService.parseError(error);\n        this.errorMessage = errorData.message || 'Failed to load dashboard data';\n\n        // If unauthorized, redirect to login\n        if (errorData.status === 401) {\n          unifiedAuthService.logout();\n          this.$router.push('/login');\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    // Load admin profile\n    async loadAdminProfile() {\n      try {\n        const currentUser = unifiedAuthService.getCurrentUser();\n        if (currentUser && currentUser.profile) {\n          this.adminData = currentUser.profile;\n        } else {\n          // Fallback to basic user data\n          this.adminData = {\n            first_name: currentUser?.username || 'Admin',\n            role: currentUser?.role || 'admin'\n          };\n        }\n      } catch (error) {\n        console.error('Failed to load admin profile:', error);\n        const currentUser = unifiedAuthService.getCurrentUser();\n        this.adminData = {\n          first_name: currentUser?.username || 'Admin',\n          role: currentUser?.role || 'admin'\n        };\n      }\n    },\n    // Load dashboard statistics\n    async loadDashboardStats() {\n      try {\n        const response = await adminDocumentService.getDashboardStats();\n        if (response.success) {\n          // Update stats with enhanced request management data\n          this.stats = {\n            totalRequests: response.data.totalRequests || 0,\n            pendingRequests: response.data.pendingRequests || 0,\n            approvedRequests: response.data.approvedRequests || 0,\n            completedRequests: response.data.completedRequests || 0,\n            processingRequests: response.data.processingRequests || 0,\n            urgentRequests: response.data.urgentRequests || 0,\n            totalRevenue: response.data.totalRevenue || 0,\n            todayRequests: response.data.todayRequests || 0,\n            todayRevenue: response.data.todayRevenue || 0,\n            // Keep legacy fields for backward compatibility\n            totalUsers: response.data.totalUsers || 0,\n            activeRequests: response.data.pendingRequests || 0,\n            completedToday: response.data.todayRequests || 0,\n            pendingApproval: response.data.pendingRequests || 0\n          };\n        }\n\n        // Load priority and recent requests\n        await this.loadPriorityRequests();\n        await this.loadRecentRequests();\n      } catch (error) {\n        console.error('Failed to load dashboard stats:', error);\n        const errorData = adminDocumentService.parseError(error);\n        this.errorMessage = errorData.message || 'Failed to load dashboard statistics';\n      }\n    },\n    // Load priority requests\n    async loadPriorityRequests() {\n      try {\n        const response = await adminDocumentService.getAllRequests({\n          priority: 'high',\n          limit: 5,\n          status: 'pending'\n        });\n        if (response.success) {\n          this.priorityRequests = response.data.requests || [];\n        }\n      } catch (error) {\n        console.error('Failed to load priority requests:', error);\n        this.priorityRequests = [];\n      }\n    },\n    // Load recent requests\n    async loadRecentRequests() {\n      try {\n        const response = await adminDocumentService.getAllRequests({\n          limit: 5,\n          sort: 'requested_at',\n          order: 'desc'\n        });\n        if (response.success) {\n          this.recentRequests = response.data.requests || [];\n        }\n      } catch (error) {\n        console.error('Failed to load recent requests:', error);\n        this.recentRequests = [];\n      }\n    },\n    // Load recent activity\n    async loadRecentActivity() {\n      try {\n        const response = await adminDocumentService.getRecentActivity(10);\n        if (response.success) {\n          this.recentActivity = response.data || [];\n        }\n      } catch (error) {\n        console.error('Failed to load recent activity:', error);\n        const errorData = adminDocumentService.parseError(error);\n        console.error('Recent activity error details:', errorData);\n        this.recentActivity = [];\n      }\n    },\n    // Navigate to specific route\n    navigateTo(route) {\n      try {\n        console.log('Navigating to:', route);\n        this.$router.push(route);\n      } catch (error) {\n        console.error('Navigation error:', error);\n        this.errorMessage = 'Navigation failed. Please try again.';\n      }\n    },\n    // Format date for display\n    formatDate(dateString) {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      const now = new Date();\n      const diffInMinutes = Math.floor((now - date) / (1000 * 60));\n      if (diffInMinutes < 1) {\n        return 'Just now';\n      } else if (diffInMinutes < 60) {\n        return `${diffInMinutes} minute${diffInMinutes > 1 ? 's' : ''} ago`;\n      } else if (diffInMinutes < 1440) {\n        const hours = Math.floor(diffInMinutes / 60);\n        return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n      } else {\n        const days = Math.floor(diffInMinutes / 1440);\n        return `${days} day${days > 1 ? 's' : ''} ago`;\n      }\n    },\n    // Format time for display\n    formatTime(dateString) {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      return date.toLocaleTimeString('en-US', {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: true\n      });\n    },\n    // Refresh dashboard data\n    async refreshDashboard() {\n      await this.loadDashboardData();\n    },\n    // Export activity logs\n    exportActivity() {\n      // Implement export functionality\n      console.log('Exporting activity logs...');\n      // This would typically generate and download a CSV/Excel file\n    },\n    // Get activity icon based on type\n    getActivityIcon(type) {\n      const icons = {\n        'user_registration': 'fas fa-user-plus',\n        'document_request': 'fas fa-file-alt',\n        'document_approved': 'fas fa-check-circle',\n        'document_rejected': 'fas fa-times-circle',\n        'system_update': 'fas fa-cog',\n        'login': 'fas fa-sign-in-alt',\n        'logout': 'fas fa-sign-out-alt',\n        'default': 'fas fa-info-circle'\n      };\n      return icons[type] || icons.default;\n    },\n    // Get activity icon circle class based on type\n    getActivityIconClass(type) {\n      const classes = {\n        'user_registration': 'bg-success',\n        'document_request': 'bg-primary',\n        'document_approved': 'bg-success',\n        'document_rejected': 'bg-danger',\n        'system_update': 'bg-warning',\n        'login': 'bg-info',\n        'logout': 'bg-secondary',\n        'default': 'bg-primary'\n      };\n      return classes[type] || classes.default;\n    },\n    // Get activity badge class based on status\n    getActivityBadgeClass(status) {\n      const classes = {\n        'completed': 'badge-success',\n        'pending': 'badge-warning',\n        'failed': 'badge-danger',\n        'in_progress': 'badge-info',\n        'default': 'badge-secondary'\n      };\n      return classes[status?.toLowerCase()] || classes.default;\n    },\n    // Enhanced Request Management Methods\n\n    // Format time ago for display\n    formatTimeAgo(dateString) {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      const now = new Date();\n      const diffInMinutes = Math.floor((now - date) / (1000 * 60));\n      if (diffInMinutes < 1) {\n        return 'Just now';\n      } else if (diffInMinutes < 60) {\n        return `${diffInMinutes}m ago`;\n      } else if (diffInMinutes < 1440) {\n        const hours = Math.floor(diffInMinutes / 60);\n        return `${hours}h ago`;\n      } else {\n        const days = Math.floor(diffInMinutes / 1440);\n        return `${days}d ago`;\n      }\n    },\n    // Filter requests by status and navigate\n    filterRequestsByStatus(status) {\n      this.$router.push({\n        path: '/admin/requests',\n        query: {\n          status: status\n        }\n      });\n    },\n    // Filter requests by date and navigate\n    filterRequestsByDate(period) {\n      const query = {};\n      const today = new Date();\n      if (period === 'today') {\n        query.date_from = today.toISOString().split('T')[0];\n        query.date_to = today.toISOString().split('T')[0];\n      }\n      this.$router.push({\n        path: '/admin/requests',\n        query: query\n      });\n    },\n    // Navigate to requests with specific filters\n    navigateToRequests(filter) {\n      const query = {};\n      switch (filter) {\n        case 'pending':\n          query.status = 'pending';\n          break;\n        case 'urgent':\n          query.priority = 'high';\n          query.status = 'pending';\n          break;\n        case 'processing':\n          query.status = 'processing';\n          break;\n        case 'recent':\n          query.sort = 'requested_at';\n          query.order = 'desc';\n          break;\n      }\n      this.$router.push({\n        path: '/admin/requests',\n        query: query\n      });\n    },\n    // View request details\n    viewRequestDetails(requestId) {\n      this.$router.push({\n        path: '/admin/requests',\n        query: {\n          view: requestId\n        }\n      });\n    },\n    // Get progress percentage for processing overview\n    getProgressPercentage(type) {\n      const total = this.stats.totalRequests || 1; // Avoid division by zero\n\n      switch (type) {\n        case 'pending':\n          return Math.round(this.stats.pendingRequests / total * 100);\n        case 'processing':\n          return Math.round(this.stats.processingRequests / total * 100);\n        case 'completed':\n          return Math.round(this.stats.completedRequests / total * 100);\n        default:\n          return 0;\n      }\n    },\n    // Format currency for display\n    formatCurrency(amount) {\n      if (!amount) return '0.00';\n      return parseFloat(amount).toLocaleString('en-US', {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n      });\n    },\n    // Real-time features\n    async initializeRealTimeFeatures() {\n      console.log('Initializing real-time features for AdminDashboard');\n      try {\n        // Initialize notification service\n        await notificationService.init('admin');\n\n        // Listen for dashboard-relevant notifications\n        notificationService.on('notification', this.handleRealTimeNotification);\n        notificationService.on('new_request', this.handleNewRequest);\n        notificationService.on('request_status_changed', this.handleStatusChange);\n        notificationService.on('dashboard_update', this.handleDashboardUpdate);\n      } catch (error) {\n        console.error('Failed to initialize real-time features:', error);\n      }\n    },\n    cleanupRealTimeFeatures() {\n      console.log('Cleaning up real-time features for AdminDashboard');\n\n      // Remove notification listeners\n      notificationService.off('notification', this.handleRealTimeNotification);\n      notificationService.off('new_request', this.handleNewRequest);\n      notificationService.off('request_status_changed', this.handleStatusChange);\n      notificationService.off('dashboard_update', this.handleDashboardUpdate);\n\n      // Cleanup (simplified)\n      notificationService.cleanup();\n    },\n    handleRealTimeNotification(notification) {\n      console.log('Dashboard received real-time notification:', notification);\n\n      // Handle different notification types\n      switch (notification.type) {\n        case 'new_request':\n          this.handleNewRequest(notification.data);\n          break;\n        case 'request_status_changed':\n          this.handleStatusChange(notification.data);\n          break;\n        case 'dashboard_update':\n          this.handleDashboardUpdate(notification.data);\n          break;\n        default:\n          console.log('Unhandled notification type:', notification.type);\n      }\n    },\n    handleNewRequest(data) {\n      console.log('New request received on dashboard:', data);\n\n      // Update statistics\n      this.stats.totalRequests++;\n      this.stats.pendingRequests++;\n      this.stats.todayRequests++;\n\n      // Refresh dashboard data to get accurate counts\n      this.loadDashboardStats();\n      this.loadRecentActivity();\n      this.loadRecentRequests();\n    },\n    handleStatusChange(data) {\n      console.log('Request status changed on dashboard:', data);\n\n      // Refresh dashboard statistics and recent activity\n      this.loadDashboardStats();\n      this.loadRecentActivity();\n      this.loadPriorityRequests();\n      this.loadRecentRequests();\n    },\n    handleDashboardUpdate(data) {\n      console.log('Dashboard update received:', data);\n\n      // Refresh all dashboard data\n      this.loadDashboardData();\n    }\n  },\n  // Auto-refresh dashboard data every 5 minutes\n  created() {\n    this.refreshInterval = setInterval(() => {\n      this.loadDashboardStats();\n      this.loadRecentActivity();\n      this.loadPriorityRequests();\n      this.loadRecentRequests();\n    }, 5 * 60 * 1000); // 5 minutes\n  }\n};","map":{"version":3,"names":["unifiedAuthService","adminDocumentService","notificationService","AdminHeader","AdminSidebar","name","components","data","loading","sidebarCollapsed","showUserDropdown","isMobile","adminData","stats","totalRequests","pendingRequests","approvedRequests","completedRequests","processingRequests","urgentRequests","totalRevenue","todayRequests","todayRevenue","totalUsers","activeRequests","completedToday","pendingApproval","recentActivity","priorityRequests","recentRequests","errorMessage","mounted","isLoggedIn","getUserType","$router","push","initializeUI","loadDashboardData","initializeRealTimeFeatures","beforeUnmount","handleResize","window","removeEventListener","refreshInterval","clearInterval","cleanupRealTimeFeatures","computed","activeMenu","path","$route","includes","methods","innerWidth","saved","localStorage","getItem","JSON","parse","wasMobile","addEventListener","handleSidebarToggle","setItem","stringify","handleMenuChange","menu","routes","handleUserDropdownToggle","handleMenuAction","action","closeMobileSidebar","handleLogout","logout","loadAdminProfile","loadDashboardStats","loadRecentActivity","error","console","errorData","parseError","message","status","currentUser","getCurrentUser","profile","first_name","username","role","response","getDashboardStats","success","loadPriorityRequests","loadRecentRequests","getAllRequests","priority","limit","requests","sort","order","getRecentActivity","navigateTo","route","log","formatDate","dateString","date","Date","now","diffInMinutes","Math","floor","hours","days","formatTime","toLocaleTimeString","hour","minute","hour12","refreshDashboard","exportActivity","getActivityIcon","type","icons","default","getActivityIconClass","classes","getActivityBadgeClass","toLowerCase","formatTimeAgo","filterRequestsByStatus","query","filterRequestsByDate","period","today","date_from","toISOString","split","date_to","navigateToRequests","filter","viewRequestDetails","requestId","view","getProgressPercentage","total","round","formatCurrency","amount","parseFloat","toLocaleString","minimumFractionDigits","maximumFractionDigits","init","on","handleRealTimeNotification","handleNewRequest","handleStatusChange","handleDashboardUpdate","off","cleanup","notification","created","setInterval"],"sources":["D:\\brgy_docu_hub\\BOSFDR\\src\\components\\admin\\AdminDashboard.vue"],"sourcesContent":["<template>\n  <div class=\"admin-dashboard\">\n    <AdminHeader\n      :userName=\"adminData?.first_name || 'Admin'\"\n      :showUserDropdown=\"showUserDropdown\"\n      :sidebarCollapsed=\"sidebarCollapsed\"\n      :activeMenu=\"activeMenu\"\n      @sidebar-toggle=\"handleSidebarToggle\"\n      @user-dropdown-toggle=\"handleUserDropdownToggle\"\n      @menu-action=\"handleMenuAction\"\n      @logout=\"handleLogout\"\n    />\n\n    <!-- Mobile Overlay -->\n    <div\n      class=\"mobile-overlay\"\n      :class=\"{ active: !sidebarCollapsed && isMobile }\"\n      @click=\"closeMobileSidebar\"\n    ></div>\n\n    <div class=\"dashboard-container\">\n      <AdminSidebar\n        :collapsed=\"sidebarCollapsed\"\n        :activeMenu=\"activeMenu\"\n        :totalUsers=\"stats.totalUsers\"\n        :pendingRequests=\"stats.activeRequests\"\n        :totalReports=\"stats.completedToday\"\n        @menu-change=\"handleMenuChange\"\n        @logout=\"handleLogout\"\n        @toggle-sidebar=\"handleSidebarToggle\"\n      />\n      <main class=\"main-content\" :class=\"{ 'sidebar-collapsed': sidebarCollapsed }\">\n        <div class=\"container-fluid p-4\">\n\n          <!-- I comment these buttosn because I dont need it -->\n          <!-- <div class=\"row mb-4\">\n            <div class=\"col-12\">\n              <div class=\"d-flex justify-content-between align-items-center flex-wrap\">\n\n                <div class=\"d-flex gap-2\">\n                  <button class=\"btn btn-outline-success btn-sm\" @click=\"refreshDashboard\" :disabled=\"loading\">\n                    <i class=\"fas fa-sync-alt me-1\" :class=\"{ 'fa-spin': loading }\"></i>\n                    Refresh\n                  </button>\n                  <div class=\"dropdown\">\n                    <button class=\"btn btn-success btn-sm dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\">\n                      <i class=\"fas fa-plus me-1\"></i>\n                      Quick Actions\n                    </button>\n                    <ul class=\"dropdown-menu\">\n                      <li><a class=\"dropdown-item\" href=\"#\" @click=\"navigateTo('/admin/users')\">\n                        <i class=\"fas fa-user-plus me-2\"></i>Add User\n                      </a></li>\n                      <li><a class=\"dropdown-item\" href=\"#\" @click=\"navigateTo('/admin/requests')\">\n                        <i class=\"fas fa-file-alt me-2\"></i>New Request\n                      </a></li>\n                      <li><hr class=\"dropdown-divider\"></li>\n                      <li><a class=\"dropdown-item\" href=\"#\" @click=\"navigateTo('/admin/reports')\">\n                        <i class=\"fas fa-chart-bar me-2\"></i>Generate Report\n                      </a></li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div> -->\n\n          <!-- I comment these because I dont need it -->\n          <!-- Enhanced Request Management Dashboard Stats -->\n          <!-- <div class=\"row mb-4\">\n            <div class=\"col-xl-3 col-md-6 mb-4\">\n              <div class=\"card border-left-primary shadow h-100 py-2 stat-card\" @click=\"navigateTo('/admin/requests')\">\n                <div class=\"card-body\">\n                  <div class=\"row no-gutters align-items-center\">\n                    <div class=\"col mr-2\">\n                      <div class=\"text-xs font-weight-bold text-primary text-uppercase mb-1\">\n                        Total Requests\n                      </div>\n                      <div class=\"h5 mb-0 font-weight-bold text-gray-800\">{{ stats.totalRequests || 0 }}</div>\n                      <div class=\"text-xs text-muted mt-1\">\n                        <i class=\"fas fa-file-alt text-primary me-1\"></i>\n                        All document requests\n                      </div>\n                    </div>\n                    <div class=\"col-auto\">\n                      <div class=\"icon-circle bg-primary\">\n                        <i class=\"fas fa-file-alt text-white\"></i>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n     \n            <div class=\"col-xl-3 col-md-6 mb-4\">\n              <div class=\"card border-left-warning shadow h-100 py-2 stat-card\" @click=\"filterRequestsByStatus('pending')\">\n                <div class=\"card-body\">\n                  <div class=\"row no-gutters align-items-center\">\n                    <div class=\"col mr-2\">\n                      <div class=\"text-xs font-weight-bold text-warning text-uppercase mb-1\">\n                        Pending Requests\n                      </div>\n                      <div class=\"h5 mb-0 font-weight-bold text-gray-800\">{{ stats.pendingRequests || 0 }}</div>\n                      <div class=\"text-xs text-muted mt-1\">\n                        <i class=\"fas fa-clock text-warning me-1\"></i>\n                        <span class=\"badge badge-danger ms-1\" v-if=\"stats.urgentRequests > 0\">{{ stats.urgentRequests }} urgent</span>\n                        <span v-else>Awaiting review</span>\n                      </div>\n                    </div>\n                    <div class=\"col-auto\">\n                      <div class=\"icon-circle bg-warning\">\n                        <i class=\"fas fa-clock text-white\"></i>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"col-xl-3 col-md-6 mb-4\">\n              <div class=\"card border-left-info shadow h-100 py-2 stat-card\" @click=\"filterRequestsByStatus('processing')\">\n                <div class=\"card-body\">\n                  <div class=\"row no-gutters align-items-center\">\n                    <div class=\"col mr-2\">\n                      <div class=\"text-xs font-weight-bold text-info text-uppercase mb-1\">\n                        Processing\n                      </div>\n                      <div class=\"h5 mb-0 font-weight-bold text-gray-800\">{{ stats.processingRequests || 0 }}</div>\n                      <div class=\"text-xs text-muted mt-1\">\n                        <i class=\"fas fa-cog text-info me-1\"></i>\n                        Currently being processed\n                      </div>\n                    </div>\n                    <div class=\"col-auto\">\n                      <div class=\"icon-circle bg-info\">\n                        <i class=\"fas fa-cog text-white\"></i>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"col-xl-3 col-md-6 mb-4\">\n              <div class=\"card border-left-success shadow h-100 py-2 stat-card\" @click=\"filterRequestsByDate('today')\">\n                <div class=\"card-body\">\n                  <div class=\"row no-gutters align-items-center\">\n                    <div class=\"col mr-2\">\n                      <div class=\"text-xs font-weight-bold text-success text-uppercase mb-1\">\n                        Completed Today\n                      </div>\n                      <div class=\"h5 mb-0 font-weight-bold text-gray-800\">{{ stats.todayRequests || 0 }}</div>\n                      <div class=\"text-xs text-muted mt-1\">\n                        <i class=\"fas fa-check-circle text-success me-1\"></i>\n                        ₱{{ (stats.todayRevenue || 0).toLocaleString() }} revenue\n                      </div>\n                    </div>\n                    <div class=\"col-auto\">\n                      <div class=\"icon-circle bg-success\">\n                        <i class=\"fas fa-check-circle text-white\"></i>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div> -->\n\n          <!-- Request Management Quick Actions -->\n          <div class=\"row mb-4\">\n            <div class=\"col-12\">\n              <div class=\"card shadow\">\n                <div class=\"card-header py-3 d-flex justify-content-between align-items-center\">\n                  <h6 class=\"m-0 font-weight-bold text-primary\">\n                    <i class=\"fas fa-tasks me-2\"></i>\n                    Request Management Center\n                  </h6>\n\n              <!-- I comment these buttosn because I dont need it -->\n                  <!-- <div class=\"d-flex gap-2\">\n                    <button class=\"btn btn-outline-primary btn-sm\" @click=\"refreshDashboard\" :disabled=\"loading\">\n                      <i class=\"fas fa-sync-alt me-1\" :class=\"{ 'fa-spin': loading }\"></i>\n                      Refresh\n                    </button>\n                    <div class=\"dropdown\">\n                      <button class=\"btn btn-primary btn-sm dropdown-toggle\" type=\"button\" data-bs-toggle=\"dropdown\">\n                        <i class=\"fas fa-bolt me-1\"></i>\n                        Quick Actions\n                      </button>\n                      <ul class=\"dropdown-menu\">\n                        <li><a class=\"dropdown-item\" href=\"#\" @click=\"navigateToRequests('pending')\">\n                          <i class=\"fas fa-clock me-2 text-warning\"></i>Review Pending Requests\n                        </a></li>\n                        <li><a class=\"dropdown-item\" href=\"#\" @click=\"navigateToRequests('urgent')\">\n                          <i class=\"fas fa-exclamation-triangle me-2 text-danger\"></i>Handle Urgent Requests\n                        </a></li>\n                        <li><a class=\"dropdown-item\" href=\"#\" @click=\"navigateToRequests('processing')\">\n                          <i class=\"fas fa-cog me-2 text-info\"></i>Monitor Processing\n                        </a></li>\n                        <li><hr class=\"dropdown-divider\"></li>\n                        <li><a class=\"dropdown-item\" href=\"#\" @click=\"navigateTo('/admin/reports')\">\n                          <i class=\"fas fa-chart-bar me-2 text-success\"></i>Generate Reports\n                        </a></li>\n                      </ul>\n                    </div>\n                  </div> -->\n                </div>\n                <div class=\"card-body\">\n                  <div class=\"row\">\n                    <!-- i comment the priority request for now -->\n                    <!-- Priority Requests -->\n                    <!-- <div class=\"col-lg-4 mb-3\">\n                      <div class=\"border rounded p-3 h-100\">\n                        <h6 class=\"text-danger mb-3\">\n                          <i class=\"fas fa-exclamation-triangle me-2\"></i>\n                          Priority Requests\n                        </h6>\n                        <div v-if=\"priorityRequests.length === 0\" class=\"text-center text-muted py-3\">\n                          <i class=\"fas fa-check-circle fa-2x mb-2 text-success\"></i>\n                          <p class=\"mb-0\">No urgent requests</p>\n                        </div>\n                        <div v-else>\n                          <div v-for=\"request in priorityRequests.slice(0, 3)\" :key=\"request.id\"\n                               class=\"d-flex justify-content-between align-items-center mb-2 p-2 bg-light rounded\">\n                            <div>\n                              <small class=\"text-muted\">{{ request.request_number }}</small>\n                              <div class=\"fw-bold\">{{ request.document_type }}</div>\n                              <small class=\"text-danger\">{{ request.priority }} Priority</small>\n                            </div>\n                            <button class=\"btn btn-sm btn-outline-primary\" @click=\"viewRequestDetails(request.id)\">\n                              <i class=\"fas fa-eye\"></i>\n                            </button>\n                          </div>\n                          <div v-if=\"priorityRequests.length > 3\" class=\"text-center mt-2\">\n                            <button class=\"btn btn-sm btn-outline-danger\" @click=\"navigateToRequests('urgent')\">\n                              View {{ priorityRequests.length - 3 }} more urgent\n                            </button>\n                          </div>\n                        </div>\n                      </div>\n                    </div> -->\n\n                    <!-- Recent Submissions -->\n                    <div class=\"col-lg-4 mb-3\">\n                      <div class=\"border rounded p-3 h-100\">\n                        <h6 class=\"text-info mb-3\">\n                          <i class=\"fas fa-clock me-2\"></i>\n                          Recent Submissions\n                        </h6>\n                        <div v-if=\"recentRequests.length === 0\" class=\"text-center text-muted py-3\">\n                          <i class=\"fas fa-inbox fa-2x mb-2 text-gray-300\"></i>\n                          <p class=\"mb-0\">No recent submissions</p>\n                        </div>\n                        <div v-else>\n                          <div v-for=\"request in recentRequests.slice(0, 3)\" :key=\"request.id\"\n                               class=\"d-flex justify-content-between align-items-center mb-2 p-2 bg-light rounded\">\n                            <div>\n                              <small class=\"text-muted\">{{ formatTimeAgo(request.requested_at) }}</small>\n                              <div class=\"fw-bold\">{{ request.document_type }}</div>\n                              <small class=\"text-info\">{{ request.client_name }}</small>\n                            </div>\n                            <button class=\"btn btn-sm btn-outline-primary\" @click=\"viewRequestDetails(request.id)\">\n                              <i class=\"fas fa-eye\"></i>\n                            </button>\n                          </div>\n                          <div v-if=\"recentRequests.length > 3\" class=\"text-center mt-2\">\n                            <button class=\"btn btn-sm btn-outline-info\" @click=\"navigateToRequests('recent')\">\n                              View {{ recentRequests.length - 3 }} more recent\n                            </button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    <!-- Processing Overview -->\n                    <div class=\"col-lg-4 mb-3\">\n                      <div class=\"border rounded p-3 h-100\">\n                        <h6 class=\"text-success mb-3\">\n                          <i class=\"fas fa-cogs me-2\"></i>\n                          Processing Overview\n                        </h6>\n                        <div class=\"mb-2\">\n                          <div class=\"d-flex justify-content-between\">\n                            <span class=\"small\">Pending Review</span>\n                            <span class=\"badge bg-warning\">{{ stats.pendingRequests || 0 }}</span>\n                          </div>\n                          <div class=\"progress mb-2\" style=\"height: 4px;\">\n                            <div class=\"progress-bar bg-warning\" :style=\"{ width: getProgressPercentage('pending') + '%' }\"></div>\n                          </div>\n                        </div>\n                        <div class=\"mb-2\">\n                          <div class=\"d-flex justify-content-between\">\n                            <span class=\"small\">Processing</span>\n                            <span class=\"badge bg-info\">{{ stats.processingRequests || 0 }}</span>\n                          </div>\n                          <div class=\"progress mb-2\" style=\"height: 4px;\">\n                            <div class=\"progress-bar bg-info\" :style=\"{ width: getProgressPercentage('processing') + '%' }\"></div>\n                          </div>\n                        </div>\n                        <div class=\"mb-2\">\n                          <div class=\"d-flex justify-content-between\">\n                            <span class=\"small\">Completed</span>\n                            <span class=\"badge bg-success\">{{ stats.completedRequests || 0 }}</span>\n                          </div>\n                          <div class=\"progress mb-2\" style=\"height: 4px;\">\n                            <div class=\"progress-bar bg-success\" :style=\"{ width: getProgressPercentage('completed') + '%' }\"></div>\n                          </div>\n                        </div>\n                        <div class=\"text-center mt-3\">\n                          <button class=\"btn btn-sm btn-success\" @click=\"navigateTo('/admin/requests')\">\n                            <i class=\"fas fa-list me-1\"></i>\n                            View All Requests\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n        </div>\n      </main>\n    </div>\n  </div>\n</template>\n\n<script>\nimport unifiedAuthService from '@/services/unifiedAuthService';\nimport adminDocumentService from '@/services/adminDocumentService';\nimport notificationService from '@/services/notificationService';\nimport AdminHeader from './AdminHeader.vue';\nimport AdminSidebar from './AdminSidebar.vue';\n\nexport default {\n  name: 'AdminDashboard',\n  components: {\n    AdminHeader,\n    AdminSidebar\n  },\n  data() {\n    return {\n      loading: true,\n      // UI State\n      sidebarCollapsed: false,\n      showUserDropdown: false,\n      isMobile: false,\n      adminData: null,\n      // Dashboard Data\n      stats: {\n        totalRequests: 0,\n        pendingRequests: 0,\n        approvedRequests: 0,\n        completedRequests: 0,\n        processingRequests: 0,\n        urgentRequests: 0,\n        totalRevenue: 0,\n        todayRequests: 0,\n        todayRevenue: 0,\n        totalUsers: 0,\n        activeRequests: 0,\n        completedToday: 0,\n        pendingApproval: 0\n      },\n      recentActivity: [],\n      priorityRequests: [],\n      recentRequests: [],\n      errorMessage: ''\n    };\n  },\n\n  async mounted() {\n    // Check authentication\n    if (!unifiedAuthService.isLoggedIn() || unifiedAuthService.getUserType() !== 'admin') {\n      this.$router.push('/login');\n      return;\n    }\n\n    // Initialize UI state\n    this.initializeUI();\n\n    // Load dashboard data\n    await this.loadDashboardData();\n\n    // Initialize real-time features\n    this.initializeRealTimeFeatures();\n  },\n\n  beforeUnmount() {\n    if (this.handleResize) {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    if (this.refreshInterval) {\n      clearInterval(this.refreshInterval);\n    }\n\n    // Clean up real-time features\n    this.cleanupRealTimeFeatures();\n  },\n\n  computed: {\n    activeMenu() {\n      const path = this.$route.path;\n      if (path.includes('/admin/users')) return 'users';\n      if (path.includes('/admin/requests')) return 'requests';\n      if (path.includes('/admin/reports')) return 'reports';\n      if (path.includes('/admin/settings')) return 'settings';\n      if (path.includes('/admin/activity-logs')) return 'activity';\n      if (path.includes('/admin/profile')) return 'profile';\n      return 'dashboard';\n    }\n  },\n\n  methods: {\n    // Initialize UI state\n    initializeUI() {\n      this.isMobile = window.innerWidth <= 768;\n\n      // Load saved sidebar state (only on desktop)\n      if (!this.isMobile) {\n        const saved = localStorage.getItem('adminSidebarCollapsed');\n        this.sidebarCollapsed = saved ? JSON.parse(saved) : false;\n      } else {\n        this.sidebarCollapsed = true; // Always collapsed on mobile\n      }\n\n      // Setup resize listener\n      this.handleResize = () => {\n        const wasMobile = this.isMobile;\n        this.isMobile = window.innerWidth <= 768;\n\n        if (this.isMobile && !wasMobile) {\n          this.sidebarCollapsed = true; // Collapse when switching to mobile\n        } else if (!this.isMobile && wasMobile) {\n          // Restore saved state when switching to desktop\n          const saved = localStorage.getItem('adminSidebarCollapsed');\n          this.sidebarCollapsed = saved ? JSON.parse(saved) : false;\n        }\n      };\n      window.addEventListener('resize', this.handleResize);\n    },\n\n    // Sidebar toggle\n    handleSidebarToggle() {\n      this.sidebarCollapsed = !this.sidebarCollapsed;\n      localStorage.setItem('adminSidebarCollapsed', JSON.stringify(this.sidebarCollapsed));\n    },\n\n    // Menu navigation\n    handleMenuChange(menu) {\n      const routes = {\n        'dashboard': '/admin/dashboard',\n        'users': '/admin/users',\n        'requests': '/admin/requests',\n        'reports': '/admin/reports',\n        'settings': '/admin/settings',\n        'activity': '/admin/activity-logs',\n        'profile': '/admin/profile'\n      };\n\n      // Close sidebar on mobile after navigation\n      if (this.isMobile) {\n        this.sidebarCollapsed = true;\n      }\n\n      if (routes[menu]) {\n        this.$router.push(routes[menu]);\n      }\n    },\n\n    // User dropdown toggle\n    handleUserDropdownToggle() {\n      this.showUserDropdown = !this.showUserDropdown;\n    },\n\n    // Menu actions\n    handleMenuAction(action) {\n      if (action === 'profile') {\n        this.$router.push('/admin/profile');\n      } else if (action === 'settings') {\n        this.$router.push('/admin/settings');\n      }\n      this.showUserDropdown = false;\n    },\n\n    // Close mobile sidebar\n    closeMobileSidebar() {\n      if (this.isMobile) {\n        this.sidebarCollapsed = true;\n      }\n    },\n\n    // Logout\n    handleLogout() {\n      unifiedAuthService.logout();\n      this.$router.push('/login');\n    },\n\n    // Load dashboard data\n    async loadDashboardData() {\n      this.loading = true;\n\n      try {\n        // Load admin profile\n        await this.loadAdminProfile();\n\n        // Load dashboard statistics\n        await this.loadDashboardStats();\n\n        // Load recent activity\n        await this.loadRecentActivity();\n\n      } catch (error) {\n        console.error('Failed to load dashboard data:', error);\n        const errorData = unifiedAuthService.parseError(error);\n        this.errorMessage = errorData.message || 'Failed to load dashboard data';\n\n        // If unauthorized, redirect to login\n        if (errorData.status === 401) {\n          unifiedAuthService.logout();\n          this.$router.push('/login');\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    // Load admin profile\n    async loadAdminProfile() {\n      try {\n        const currentUser = unifiedAuthService.getCurrentUser();\n        if (currentUser && currentUser.profile) {\n          this.adminData = currentUser.profile;\n        } else {\n          // Fallback to basic user data\n          this.adminData = {\n            first_name: currentUser?.username || 'Admin',\n            role: currentUser?.role || 'admin'\n          };\n        }\n      } catch (error) {\n        console.error('Failed to load admin profile:', error);\n        const currentUser = unifiedAuthService.getCurrentUser();\n        this.adminData = {\n          first_name: currentUser?.username || 'Admin',\n          role: currentUser?.role || 'admin'\n        };\n      }\n    },\n\n\n\n    // Load dashboard statistics\n    async loadDashboardStats() {\n      try {\n        const response = await adminDocumentService.getDashboardStats();\n        if (response.success) {\n          // Update stats with enhanced request management data\n          this.stats = {\n            totalRequests: response.data.totalRequests || 0,\n            pendingRequests: response.data.pendingRequests || 0,\n            approvedRequests: response.data.approvedRequests || 0,\n            completedRequests: response.data.completedRequests || 0,\n            processingRequests: response.data.processingRequests || 0,\n            urgentRequests: response.data.urgentRequests || 0,\n            totalRevenue: response.data.totalRevenue || 0,\n            todayRequests: response.data.todayRequests || 0,\n            todayRevenue: response.data.todayRevenue || 0,\n            // Keep legacy fields for backward compatibility\n            totalUsers: response.data.totalUsers || 0,\n            activeRequests: response.data.pendingRequests || 0,\n            completedToday: response.data.todayRequests || 0,\n            pendingApproval: response.data.pendingRequests || 0\n          };\n        }\n\n        // Load priority and recent requests\n        await this.loadPriorityRequests();\n        await this.loadRecentRequests();\n      } catch (error) {\n        console.error('Failed to load dashboard stats:', error);\n        const errorData = adminDocumentService.parseError(error);\n        this.errorMessage = errorData.message || 'Failed to load dashboard statistics';\n      }\n    },\n\n    // Load priority requests\n    async loadPriorityRequests() {\n      try {\n        const response = await adminDocumentService.getAllRequests({\n          priority: 'high',\n          limit: 5,\n          status: 'pending'\n        });\n        if (response.success) {\n          this.priorityRequests = response.data.requests || [];\n        }\n      } catch (error) {\n        console.error('Failed to load priority requests:', error);\n        this.priorityRequests = [];\n      }\n    },\n\n    // Load recent requests\n    async loadRecentRequests() {\n      try {\n        const response = await adminDocumentService.getAllRequests({\n          limit: 5,\n          sort: 'requested_at',\n          order: 'desc'\n        });\n        if (response.success) {\n          this.recentRequests = response.data.requests || [];\n        }\n      } catch (error) {\n        console.error('Failed to load recent requests:', error);\n        this.recentRequests = [];\n      }\n    },\n\n    // Load recent activity\n    async loadRecentActivity() {\n      try {\n        const response = await adminDocumentService.getRecentActivity(10);\n        if (response.success) {\n          this.recentActivity = response.data || [];\n        }\n      } catch (error) {\n        console.error('Failed to load recent activity:', error);\n        const errorData = adminDocumentService.parseError(error);\n        console.error('Recent activity error details:', errorData);\n        this.recentActivity = [];\n      }\n    },\n\n    // Navigate to specific route\n    navigateTo(route) {\n      try {\n        console.log('Navigating to:', route);\n        this.$router.push(route);\n      } catch (error) {\n        console.error('Navigation error:', error);\n        this.errorMessage = 'Navigation failed. Please try again.';\n      }\n    },\n\n    // Format date for display\n    formatDate(dateString) {\n      if (!dateString) return '';\n\n      const date = new Date(dateString);\n      const now = new Date();\n      const diffInMinutes = Math.floor((now - date) / (1000 * 60));\n\n      if (diffInMinutes < 1) {\n        return 'Just now';\n      } else if (diffInMinutes < 60) {\n        return `${diffInMinutes} minute${diffInMinutes > 1 ? 's' : ''} ago`;\n      } else if (diffInMinutes < 1440) {\n        const hours = Math.floor(diffInMinutes / 60);\n        return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n      } else {\n        const days = Math.floor(diffInMinutes / 1440);\n        return `${days} day${days > 1 ? 's' : ''} ago`;\n      }\n    },\n\n    // Format time for display\n    formatTime(dateString) {\n      if (!dateString) return '';\n\n      const date = new Date(dateString);\n      return date.toLocaleTimeString('en-US', {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: true\n      });\n    },\n\n    // Refresh dashboard data\n    async refreshDashboard() {\n      await this.loadDashboardData();\n    },\n\n    // Export activity logs\n    exportActivity() {\n      // Implement export functionality\n      console.log('Exporting activity logs...');\n      // This would typically generate and download a CSV/Excel file\n    },\n\n    // Get activity icon based on type\n    getActivityIcon(type) {\n      const icons = {\n        'user_registration': 'fas fa-user-plus',\n        'document_request': 'fas fa-file-alt',\n        'document_approved': 'fas fa-check-circle',\n        'document_rejected': 'fas fa-times-circle',\n        'system_update': 'fas fa-cog',\n        'login': 'fas fa-sign-in-alt',\n        'logout': 'fas fa-sign-out-alt',\n        'default': 'fas fa-info-circle'\n      };\n      return icons[type] || icons.default;\n    },\n\n    // Get activity icon circle class based on type\n    getActivityIconClass(type) {\n      const classes = {\n        'user_registration': 'bg-success',\n        'document_request': 'bg-primary',\n        'document_approved': 'bg-success',\n        'document_rejected': 'bg-danger',\n        'system_update': 'bg-warning',\n        'login': 'bg-info',\n        'logout': 'bg-secondary',\n        'default': 'bg-primary'\n      };\n      return classes[type] || classes.default;\n    },\n\n    // Get activity badge class based on status\n    getActivityBadgeClass(status) {\n      const classes = {\n        'completed': 'badge-success',\n        'pending': 'badge-warning',\n        'failed': 'badge-danger',\n        'in_progress': 'badge-info',\n        'default': 'badge-secondary'\n      };\n      return classes[status?.toLowerCase()] || classes.default;\n    },\n\n    // Enhanced Request Management Methods\n\n    // Format time ago for display\n    formatTimeAgo(dateString) {\n      if (!dateString) return '';\n\n      const date = new Date(dateString);\n      const now = new Date();\n      const diffInMinutes = Math.floor((now - date) / (1000 * 60));\n\n      if (diffInMinutes < 1) {\n        return 'Just now';\n      } else if (diffInMinutes < 60) {\n        return `${diffInMinutes}m ago`;\n      } else if (diffInMinutes < 1440) {\n        const hours = Math.floor(diffInMinutes / 60);\n        return `${hours}h ago`;\n      } else {\n        const days = Math.floor(diffInMinutes / 1440);\n        return `${days}d ago`;\n      }\n    },\n\n    // Filter requests by status and navigate\n    filterRequestsByStatus(status) {\n      this.$router.push({\n        path: '/admin/requests',\n        query: { status: status }\n      });\n    },\n\n    // Filter requests by date and navigate\n    filterRequestsByDate(period) {\n      const query = {};\n      const today = new Date();\n\n      if (period === 'today') {\n        query.date_from = today.toISOString().split('T')[0];\n        query.date_to = today.toISOString().split('T')[0];\n      }\n\n      this.$router.push({\n        path: '/admin/requests',\n        query: query\n      });\n    },\n\n    // Navigate to requests with specific filters\n    navigateToRequests(filter) {\n      const query = {};\n\n      switch (filter) {\n        case 'pending':\n          query.status = 'pending';\n          break;\n        case 'urgent':\n          query.priority = 'high';\n          query.status = 'pending';\n          break;\n        case 'processing':\n          query.status = 'processing';\n          break;\n        case 'recent':\n          query.sort = 'requested_at';\n          query.order = 'desc';\n          break;\n      }\n\n      this.$router.push({\n        path: '/admin/requests',\n        query: query\n      });\n    },\n\n    // View request details\n    viewRequestDetails(requestId) {\n      this.$router.push({\n        path: '/admin/requests',\n        query: { view: requestId }\n      });\n    },\n\n    // Get progress percentage for processing overview\n    getProgressPercentage(type) {\n      const total = this.stats.totalRequests || 1; // Avoid division by zero\n\n      switch (type) {\n        case 'pending':\n          return Math.round((this.stats.pendingRequests / total) * 100);\n        case 'processing':\n          return Math.round((this.stats.processingRequests / total) * 100);\n        case 'completed':\n          return Math.round((this.stats.completedRequests / total) * 100);\n        default:\n          return 0;\n      }\n    },\n\n    // Format currency for display\n    formatCurrency(amount) {\n      if (!amount) return '0.00';\n      return parseFloat(amount).toLocaleString('en-US', {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n      });\n    },\n\n    // Real-time features\n    async initializeRealTimeFeatures() {\n      console.log('Initializing real-time features for AdminDashboard');\n\n      try {\n        // Initialize notification service\n        await notificationService.init('admin');\n\n        // Listen for dashboard-relevant notifications\n        notificationService.on('notification', this.handleRealTimeNotification);\n        notificationService.on('new_request', this.handleNewRequest);\n        notificationService.on('request_status_changed', this.handleStatusChange);\n        notificationService.on('dashboard_update', this.handleDashboardUpdate);\n      } catch (error) {\n        console.error('Failed to initialize real-time features:', error);\n      }\n    },\n\n    cleanupRealTimeFeatures() {\n      console.log('Cleaning up real-time features for AdminDashboard');\n\n      // Remove notification listeners\n      notificationService.off('notification', this.handleRealTimeNotification);\n      notificationService.off('new_request', this.handleNewRequest);\n      notificationService.off('request_status_changed', this.handleStatusChange);\n      notificationService.off('dashboard_update', this.handleDashboardUpdate);\n\n      // Cleanup (simplified)\n      notificationService.cleanup();\n    },\n\n    handleRealTimeNotification(notification) {\n      console.log('Dashboard received real-time notification:', notification);\n\n      // Handle different notification types\n      switch (notification.type) {\n        case 'new_request':\n          this.handleNewRequest(notification.data);\n          break;\n        case 'request_status_changed':\n          this.handleStatusChange(notification.data);\n          break;\n        case 'dashboard_update':\n          this.handleDashboardUpdate(notification.data);\n          break;\n        default:\n          console.log('Unhandled notification type:', notification.type);\n      }\n    },\n\n    handleNewRequest(data) {\n      console.log('New request received on dashboard:', data);\n\n      // Update statistics\n      this.stats.totalRequests++;\n      this.stats.pendingRequests++;\n      this.stats.todayRequests++;\n\n      // Refresh dashboard data to get accurate counts\n      this.loadDashboardStats();\n      this.loadRecentActivity();\n      this.loadRecentRequests();\n    },\n\n    handleStatusChange(data) {\n      console.log('Request status changed on dashboard:', data);\n\n      // Refresh dashboard statistics and recent activity\n      this.loadDashboardStats();\n      this.loadRecentActivity();\n      this.loadPriorityRequests();\n      this.loadRecentRequests();\n    },\n\n    handleDashboardUpdate(data) {\n      console.log('Dashboard update received:', data);\n\n      // Refresh all dashboard data\n      this.loadDashboardData();\n    }\n\n  },\n\n  // Auto-refresh dashboard data every 5 minutes\n  created() {\n    this.refreshInterval = setInterval(() => {\n      this.loadDashboardStats();\n      this.loadRecentActivity();\n      this.loadPriorityRequests();\n      this.loadRecentRequests();\n    }, 5 * 60 * 1000); // 5 minutes\n  }\n};\n</script>\n\n<style scoped>\n@import './css/adminDashboard.css';\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}