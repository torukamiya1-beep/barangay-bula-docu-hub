{"ast":null,"code":"import { unfilterAverage, unfilterNone, unfilterPaeth, unfilterSub, unfilterUp } from './unfilter';\nconst uint16 = new Uint16Array([0x00ff]);\nconst uint8 = new Uint8Array(uint16.buffer);\nconst osIsLittleEndian = uint8[0] === 0xff;\nconst empty = new Uint8Array(0);\nexport function decodeInterlaceNull(params) {\n  const {\n    data,\n    width,\n    height,\n    channels,\n    depth\n  } = params;\n  const bytesPerPixel = Math.ceil(depth / 8) * channels;\n  const bytesPerLine = Math.ceil(depth / 8 * channels * width);\n  const newData = new Uint8Array(height * bytesPerLine);\n  let prevLine = empty;\n  let offset = 0;\n  let currentLine;\n  let newLine;\n  for (let i = 0; i < height; i++) {\n    currentLine = data.subarray(offset + 1, offset + 1 + bytesPerLine);\n    newLine = newData.subarray(i * bytesPerLine, (i + 1) * bytesPerLine);\n    switch (data[offset]) {\n      case 0:\n        unfilterNone(currentLine, newLine, bytesPerLine);\n        break;\n      case 1:\n        unfilterSub(currentLine, newLine, bytesPerLine, bytesPerPixel);\n        break;\n      case 2:\n        unfilterUp(currentLine, newLine, prevLine, bytesPerLine);\n        break;\n      case 3:\n        unfilterAverage(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel);\n        break;\n      case 4:\n        unfilterPaeth(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel);\n        break;\n      default:\n        throw new Error(`Unsupported filter: ${data[offset]}`);\n    }\n    prevLine = newLine;\n    offset += bytesPerLine + 1;\n  }\n  if (depth === 16) {\n    const uint16Data = new Uint16Array(newData.buffer);\n    if (osIsLittleEndian) {\n      for (let k = 0; k < uint16Data.length; k++) {\n        // PNG is always big endian. Swap the bytes.\n        uint16Data[k] = swap16(uint16Data[k]);\n      }\n    }\n    return uint16Data;\n  } else {\n    return newData;\n  }\n}\nfunction swap16(val) {\n  return (val & 0xff) << 8 | val >> 8 & 0xff;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}