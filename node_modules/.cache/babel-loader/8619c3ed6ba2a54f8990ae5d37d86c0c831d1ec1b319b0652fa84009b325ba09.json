{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport api from '@/services/api';\nimport jsPDF from 'jspdf';\nexport default {\n  name: 'ClientTransactions',\n  data() {\n    return {\n      transactions: [],\n      allTransactions: [],\n      // Store all transactions for client-side search\n      statistics: null,\n      loading: false,\n      error: null,\n      showTransactionModal: false,\n      selectedTransaction: null,\n      downloadingReceipt: false,\n      // Can be boolean or transaction ID for specific loading\n      searchQuery: '',\n      searchTimeout: null,\n      pagination: {\n        page: 1,\n        limit: 10,\n        total: 0,\n        totalPages: 0,\n        hasNext: false,\n        hasPrev: false\n      }\n    };\n  },\n  computed: {\n    visiblePages() {\n      const current = this.pagination.page;\n      const total = this.pagination.totalPages;\n      const delta = 1;\n      const pages = [];\n      const left = current - delta;\n      const right = current + delta;\n      let last;\n      for (let i = 1; i <= total; i++) {\n        if (i === 1 || i === total || i >= left && i <= right) {\n          if (last && i - last > 1) {\n            pages.push('...');\n          }\n          pages.push(i);\n          last = i;\n        }\n      }\n      return pages;\n    }\n  },\n  async mounted() {\n    await this.loadTransactions();\n    await this.loadStatistics();\n  },\n  methods: {\n    async loadTransactions() {\n      try {\n        this.loading = true;\n        this.error = null;\n        const params = {\n          page: this.pagination.page,\n          limit: this.pagination.limit,\n          sortBy: 'receipt_date',\n          sortOrder: 'DESC'\n        };\n        const response = await api.get('/client/receipts', {\n          params\n        });\n        if (response.data.success) {\n          this.allTransactions = response.data.data.receipts || [];\n          this.applySearchAndPagination();\n        } else {\n          throw new Error(response.data.message || 'Failed to load transactions');\n        }\n      } catch (error) {\n        console.error('Failed to load transactions:', error);\n        this.error = error.response?.data?.message || error.message || 'Failed to load transactions';\n        this.transactions = [];\n        this.allTransactions = [];\n      } finally {\n        this.loading = false;\n      }\n    },\n    async loadStatistics() {\n      try {\n        const response = await api.get('/client/receipts/statistics');\n        if (response.data.success) {\n          this.statistics = response.data.data;\n        }\n      } catch (error) {\n        console.error('Failed to load statistics:', error);\n        // Don't show error for statistics, it's not critical\n      }\n    },\n    goBack() {\n      this.$router.go(-1);\n    },\n    applySearchAndPagination() {\n      // Filter transactions based on search query\n      let filteredTransactions = this.allTransactions;\n      if (this.searchQuery.trim()) {\n        const query = this.searchQuery.toLowerCase().trim();\n        filteredTransactions = this.allTransactions.filter(transaction => {\n          return transaction.receipt_number?.toLowerCase().includes(query) || transaction.amount?.toString().includes(query) || transaction.status?.toLowerCase().includes(query) || transaction.payment_method?.toLowerCase().includes(query) || transaction.document_type?.toLowerCase().includes(query);\n        });\n      }\n\n      // Calculate pagination\n      const total = filteredTransactions.length;\n      const totalPages = Math.ceil(total / this.pagination.limit);\n      const startIndex = (this.pagination.page - 1) * this.pagination.limit;\n      const endIndex = startIndex + this.pagination.limit;\n\n      // Update pagination info\n      this.pagination.total = total;\n      this.pagination.totalPages = totalPages;\n\n      // Ensure current page is valid\n      if (this.pagination.page > totalPages && totalPages > 0) {\n        this.pagination.page = totalPages;\n        this.applySearchAndPagination(); // Recursive call with corrected page\n        return;\n      }\n\n      // Set current page transactions\n      this.transactions = filteredTransactions.slice(startIndex, endIndex);\n    },\n    handleSearch() {\n      // Clear existing timeout\n      if (this.searchTimeout) {\n        clearTimeout(this.searchTimeout);\n      }\n\n      // Debounce search to avoid excessive filtering\n      this.searchTimeout = setTimeout(() => {\n        this.pagination.page = 1; // Reset to first page when searching\n        this.applySearchAndPagination();\n      }, 300);\n    },\n    clearSearch() {\n      this.searchQuery = '';\n      this.pagination.page = 1;\n      this.applySearchAndPagination();\n    },\n    changePage(page) {\n      if (page >= 1 && page <= this.pagination.totalPages && page !== this.pagination.page) {\n        this.pagination.page = page;\n        this.applySearchAndPagination();\n      }\n    },\n    async viewTransaction(transaction) {\n      try {\n        this.loading = true;\n        const response = await api.get(`/client/receipts/${transaction.id}`);\n        if (response.data.success) {\n          this.selectedTransaction = response.data.data;\n          this.showTransactionModal = true;\n        } else {\n          throw new Error(response.data.message || 'Failed to load transaction details');\n        }\n      } catch (error) {\n        console.error('Failed to load transaction details:', error);\n        this.$toast.error(error.response?.data?.message || 'Failed to load transaction details');\n      } finally {\n        this.loading = false;\n      }\n    },\n    closeTransactionModal() {\n      this.showTransactionModal = false;\n      this.selectedTransaction = null;\n    },\n    async downloadReceipt() {\n      if (!this.selectedTransaction) return;\n      await this.generatePDF(this.selectedTransaction);\n    },\n    async downloadReceiptDirect(transaction) {\n      await this.generatePDF(transaction);\n    },\n    async generatePDF(transaction) {\n      try {\n        this.downloadingReceipt = transaction.id;\n\n        // Get complete transaction details if not already available\n        let transactionData = transaction;\n        if (!transaction.client_email) {\n          const response = await api.get(`/client/receipts/${transaction.id}`);\n          if (response.data.success) {\n            transactionData = response.data.data;\n          }\n        }\n\n        // Create PDF\n        const pdf = new jsPDF();\n\n        // Set up fonts and colors\n        const primaryColor = [45, 55, 72]; // #2d3748\n        const accentColor = [102, 126, 234]; // #667eea\n        const textColor = [74, 85, 104]; // #4a5568\n\n        // Header\n        pdf.setFillColor(...primaryColor);\n        pdf.rect(0, 0, 210, 40, 'F');\n\n        // Title\n        pdf.setTextColor(255, 255, 255);\n        pdf.setFontSize(24);\n        pdf.setFont('helvetica', 'bold');\n        pdf.text('PAYMENT RECEIPT', 105, 20, {\n          align: 'center'\n        });\n        pdf.setFontSize(12);\n        pdf.setFont('helvetica', 'normal');\n        pdf.text('Barangay Online Services for Document Requests', 105, 30, {\n          align: 'center'\n        });\n\n        // Reset text color\n        pdf.setTextColor(...textColor);\n\n        // Receipt Information Section\n        let yPos = 60;\n        pdf.setFontSize(16);\n        pdf.setFont('helvetica', 'bold');\n        pdf.setTextColor(...accentColor);\n        pdf.text('Receipt Information', 20, yPos);\n        yPos += 15;\n        pdf.setFontSize(11);\n        pdf.setFont('helvetica', 'normal');\n        pdf.setTextColor(...textColor);\n        const receiptInfo = [['Receipt Number:', transactionData.receipt_number || 'N/A'], ['Receipt Date:', this.formatDate(transactionData.receipt_date)], ['Payment Date:', this.formatDate(transactionData.payment_date || transactionData.receipt_date)], ['Status:', this.formatStatus(transactionData.payment_status)]];\n        receiptInfo.forEach(([label, value]) => {\n          pdf.setFont('helvetica', 'bold');\n          pdf.text(label, 20, yPos);\n          pdf.setFont('helvetica', 'normal');\n          pdf.text(value, 80, yPos);\n          yPos += 8;\n        });\n\n        // Client Information Section\n        yPos += 10;\n        pdf.setFontSize(16);\n        pdf.setFont('helvetica', 'bold');\n        pdf.setTextColor(...accentColor);\n        pdf.text('Client Information', 20, yPos);\n        yPos += 15;\n        pdf.setFontSize(11);\n        pdf.setFont('helvetica', 'normal');\n        pdf.setTextColor(...textColor);\n        const clientInfo = [['Client Name:', transactionData.client_name || 'N/A'], ['Email:', transactionData.client_email || 'N/A'], ['Phone:', transactionData.client_phone || 'N/A']];\n        clientInfo.forEach(([label, value]) => {\n          pdf.setFont('helvetica', 'bold');\n          pdf.text(label, 20, yPos);\n          pdf.setFont('helvetica', 'normal');\n          pdf.text(value, 80, yPos);\n          yPos += 8;\n        });\n\n        // Document Information Section\n        yPos += 10;\n        pdf.setFontSize(16);\n        pdf.setFont('helvetica', 'bold');\n        pdf.setTextColor(...accentColor);\n        pdf.text('Document Information', 20, yPos);\n        yPos += 15;\n        pdf.setFontSize(11);\n        pdf.setFont('helvetica', 'normal');\n        pdf.setTextColor(...textColor);\n        const documentInfo = [['Request Number:', transactionData.request_number || 'N/A'], ['Document Type:', transactionData.document_type || 'N/A'], ['Description:', transactionData.description || 'Payment for document request']];\n        documentInfo.forEach(([label, value]) => {\n          pdf.setFont('helvetica', 'bold');\n          pdf.text(label, 20, yPos);\n          pdf.setFont('helvetica', 'normal');\n          // Handle long text wrapping\n          const splitText = pdf.splitTextToSize(value, 110);\n          pdf.text(splitText, 80, yPos);\n          yPos += splitText.length * 6;\n        });\n\n        // Payment Information Section\n        yPos += 10;\n        pdf.setFontSize(16);\n        pdf.setFont('helvetica', 'bold');\n        pdf.setTextColor(...accentColor);\n        pdf.text('Payment Information', 20, yPos);\n        yPos += 15;\n        pdf.setFontSize(11);\n        pdf.setFont('helvetica', 'normal');\n        pdf.setTextColor(...textColor);\n        const paymentInfo = [['Payment Method:', transactionData.payment_method || 'Online Payment'], ['Amount:', `₱${this.formatAmount(transactionData.amount)}`], ['Processing Fee:', `₱${this.formatAmount(transactionData.processing_fee || 0)}`], ['Net Amount:', `₱${this.formatAmount(transactionData.net_amount || transactionData.amount)}`], ['Currency:', transactionData.currency || 'PHP']];\n        paymentInfo.forEach(([label, value]) => {\n          pdf.setFont('helvetica', 'bold');\n          pdf.text(label, 20, yPos);\n          pdf.setFont('helvetica', 'normal');\n          pdf.text(value, 80, yPos);\n          yPos += 8;\n        });\n\n        // Total Amount Highlight\n        yPos += 5;\n        pdf.setFillColor(248, 250, 252); // Light gray background\n        pdf.rect(15, yPos - 5, 180, 15, 'F');\n        pdf.setFontSize(14);\n        pdf.setFont('helvetica', 'bold');\n        pdf.setTextColor(...primaryColor);\n        pdf.text('Total Amount Paid:', 20, yPos + 5);\n        pdf.setTextColor(...accentColor);\n        pdf.text(`₱${this.formatAmount(transactionData.net_amount || transactionData.amount)}`, 120, yPos + 5);\n\n        // Footer\n        yPos += 25; // Position footer after content with a gap\n        if (yPos < 270) {\n          // Ensure footer is at least at the bottom\n          yPos = 270;\n        }\n        pdf.setFontSize(10);\n        pdf.setFont('helvetica', 'normal');\n        pdf.setTextColor(128, 128, 128);\n        pdf.text('This is a computer-generated receipt. No signature required.', 105, yPos, {\n          align: 'center'\n        });\n        pdf.text(`Generated on: ${new Date().toLocaleString()}`, 105, yPos + 8, {\n          align: 'center'\n        });\n\n        // Transaction ID footer\n        if (transactionData.external_transaction_id) {\n          pdf.text(`Transaction ID: ${transactionData.external_transaction_id}`, 105, yPos + 16, {\n            align: 'center'\n          });\n        }\n\n        // Generate filename\n        const filename = `Receipt_${transactionData.receipt_number || transactionData.id}_${new Date().toISOString().split('T')[0]}.pdf`;\n\n        // Save the PDF\n        pdf.save(filename);\n\n        // Show success message\n        if (this.$toast) {\n          this.$toast.success('Receipt downloaded successfully!');\n        }\n      } catch (error) {\n        console.error('Failed to generate PDF:', error);\n        if (this.$toast) {\n          this.$toast.error('Failed to generate PDF receipt');\n        }\n      } finally {\n        this.downloadingReceipt = false;\n      }\n    },\n    formatAmount(amount) {\n      if (!amount) return '0.00';\n      return parseFloat(amount).toFixed(2);\n    },\n    formatDate(dateString) {\n      if (!dateString) return 'N/A';\n      const date = new Date(dateString);\n      return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      });\n    },\n    formatDateTime(dateString) {\n      if (!dateString) return 'N/A';\n      const date = new Date(dateString);\n      return date.toLocaleString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    formatStatus(status) {\n      const statusMap = {\n        'succeeded': 'Successful',\n        'pending': 'Pending',\n        'processing': 'Processing',\n        'failed': 'Failed',\n        'cancelled': 'Cancelled',\n        'refunded': 'Refunded'\n      };\n      return statusMap[status] || status;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}