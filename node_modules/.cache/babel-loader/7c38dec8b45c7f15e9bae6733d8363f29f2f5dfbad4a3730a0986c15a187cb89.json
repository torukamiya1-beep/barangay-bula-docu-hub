{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport clientAuthService from '@/services/clientAuthService';\nimport { validators, formatApiErrors, clearFieldError } from '@/utils/validation';\nimport AddressSelector from '@/components/common/AddressSelector.vue';\nexport default {\n  name: 'ClientRegistration',\n  components: {\n    AddressSelector\n  },\n  data() {\n    return {\n      currentStep: 1,\n      loading: false,\n      resendLoading: false,\n      resendCooldown: 0,\n      showPassword: false,\n      errorMessage: '',\n      successMessage: '',\n      accountId: null,\n      verificationMethodSelected: false,\n      // Account form data\n      accountForm: {\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: ''\n      },\n      // Profile form data\n      profileForm: {\n        first_name: '',\n        middle_name: '',\n        last_name: '',\n        suffix: '',\n        birth_date: '',\n        gender: '',\n        civil_status_id: '',\n        nationality: 'Filipino',\n        phone_number: '',\n        email: '',\n        house_number: '',\n        street: '',\n        subdivision: '',\n        barangay: '',\n        city_municipality: '',\n        province: '',\n        region: '',\n        region_code: '',\n        province_code: '',\n        city_code: '',\n        barangay_code: '',\n        postal_code: '',\n        years_of_residency: null,\n        months_of_residency: null\n      },\n      // Document upload data\n      uploadedFiles: {\n        utility_bill: [],\n        barangay_certificate: [],\n        valid_id: [],\n        lease_contract: [],\n        other: []\n      },\n      // Verification form data\n      verificationForm: {\n        otp: ''\n      },\n      // Address data\n      addressData: {\n        region_code: '',\n        province_code: '',\n        city_code: '',\n        barangay_code: '',\n        region_name: '',\n        province_name: '',\n        city_name: '',\n        barangay_name: ''\n      },\n      // Form errors\n      errors: {},\n      addressErrors: {}\n    };\n  },\n  computed: {\n    hasUploadedFiles() {\n      return Object.values(this.uploadedFiles).some(files => files.length > 0);\n    }\n  },\n  mounted() {\n    // Ensure profileForm is properly initialized\n    if (!this.profileForm) {\n      this.profileForm = {\n        first_name: '',\n        middle_name: '',\n        last_name: '',\n        suffix: '',\n        birth_date: '',\n        gender: '',\n        civil_status_id: '',\n        nationality: 'Filipino',\n        phone_number: '',\n        email: '',\n        house_number: '',\n        street: '',\n        subdivision: '',\n        barangay: '',\n        city_municipality: '',\n        province: '',\n        region: '',\n        region_code: '',\n        province_code: '',\n        city_code: '',\n        barangay_code: '',\n        postal_code: '',\n        years_of_residency: null,\n        months_of_residency: null\n      };\n    }\n  },\n  methods: {\n    // Validate individual field\n    validateField(fieldName) {\n      let error = null;\n      const value = this.getFieldValue(fieldName);\n      switch (fieldName) {\n        case 'username':\n          error = validators.required(value, 'Username') || validators.username(value);\n          break;\n        case 'email':\n          error = validators.required(value, 'Email') || validators.email(value);\n          break;\n        case 'password':\n          error = validators.required(value, 'Password') || validators.password(value);\n          break;\n        case 'confirmPassword':\n          error = validators.required(value, 'Confirm Password') || validators.confirmPassword(value, this.accountForm.password);\n          break;\n        case 'first_name':\n          error = validators.required(value, 'First Name') || validators.name(value, 'First Name');\n          break;\n        case 'last_name':\n          error = validators.required(value, 'Last Name') || validators.name(value, 'Last Name');\n          break;\n        case 'birth_date':\n          error = validators.required(value, 'Birth Date') || validators.birthDate(value);\n          break;\n        case 'gender':\n          error = validators.required(value, 'Gender');\n          break;\n        case 'civil_status_id':\n          error = validators.required(value, 'Civil Status');\n          break;\n        case 'nationality':\n          error = validators.required(value, 'Nationality') || validators.name(value, 'Nationality');\n          break;\n        case 'phone_number':\n          error = validators.required(value, 'Phone Number') || validators.phoneNumber(value);\n          break;\n        case 'barangay':\n          error = validators.required(value, 'Barangay') || validators.address(value, 'Barangay');\n          break;\n        case 'city_municipality':\n          error = validators.required(value, 'City/Municipality') || validators.address(value, 'City/Municipality');\n          break;\n        case 'province':\n          error = validators.required(value, 'Province') || validators.address(value, 'Province');\n          break;\n        case 'otp':\n          error = validators.required(value, 'Verification Code') || validators.otp(value);\n          break;\n      }\n      if (error) {\n        this.errors = {\n          ...this.errors,\n          [fieldName]: error\n        };\n      } else {\n        this.clearFieldError(fieldName);\n      }\n      return !error;\n    },\n    // Get field value from appropriate form\n    getFieldValue(fieldName) {\n      if (Object.prototype.hasOwnProperty.call(this.accountForm, fieldName)) {\n        return this.accountForm[fieldName];\n      } else if (Object.prototype.hasOwnProperty.call(this.profileForm, fieldName)) {\n        return this.profileForm[fieldName];\n      } else if (Object.prototype.hasOwnProperty.call(this.verificationForm, fieldName)) {\n        return this.verificationForm[fieldName];\n      }\n      return '';\n    },\n    // Clear field error\n    clearFieldError(fieldName) {\n      this.errors = clearFieldError(this.errors, fieldName);\n    },\n    // Handle gender change - clear suffix field when female is selected\n    handleGenderChange() {\n      this.clearFieldError('gender');\n\n      // Clear suffix field when female is selected\n      if (this.profileForm.gender === 'female') {\n        this.profileForm.suffix = '';\n      }\n    },\n    // Handle phone number input to restrict to digits only\n    handlePhoneInput(event) {\n      const value = event.target.value;\n      // Remove any non-digit characters\n      const digitsOnly = value.replace(/\\D/g, '');\n      // Limit to 11 digits\n      const limitedValue = digitsOnly.substring(0, 11);\n      this.profileForm.phone_number = limitedValue;\n      this.clearFieldError('phone_number');\n    },\n    // Clear all messages\n    clearMessages() {\n      this.errorMessage = '';\n      this.successMessage = '';\n    },\n    // Submit account form (Step 1)\n    async submitAccountForm() {\n      this.clearMessages();\n\n      // Validate all account fields\n      const fieldsToValidate = ['username', 'email', 'password', 'confirmPassword'];\n      let isValid = true;\n      fieldsToValidate.forEach(field => {\n        if (!this.validateField(field)) {\n          isValid = false;\n        }\n      });\n      if (!isValid) {\n        this.errorMessage = 'Please fix the errors above';\n        return;\n      }\n      this.loading = true;\n      try {\n        const response = await clientAuthService.registerAccount({\n          username: this.accountForm.username,\n          email: this.accountForm.email,\n          password: this.accountForm.password,\n          confirmPassword: this.accountForm.confirmPassword\n        });\n        if (response.success) {\n          this.accountId = response.data.accountId;\n          this.profileForm.email = this.accountForm.email;\n          this.successMessage = response.message;\n          this.currentStep = 2;\n        }\n      } catch (error) {\n        const errorData = clientAuthService.parseError(error);\n        this.errorMessage = errorData.message;\n        if (errorData.errors && errorData.errors.length > 0) {\n          this.errors = {\n            ...this.errors,\n            ...formatApiErrors(errorData.errors)\n          };\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    // Submit profile form (Step 2)\n    async submitProfileForm() {\n      this.clearMessages();\n\n      // Validate address selection first\n      if (!this.validateAddressSelection()) {\n        this.errorMessage = 'Please select a complete address (Region, Province, City, and Barangay)';\n        return;\n      }\n\n      // Validate all required profile fields\n      const fieldsToValidate = ['first_name', 'last_name', 'birth_date', 'gender', 'civil_status_id', 'nationality', 'phone_number', 'barangay', 'city_municipality', 'province', 'region'];\n      let isValid = true;\n      fieldsToValidate.forEach(field => {\n        if (!this.validateField(field)) {\n          isValid = false;\n        }\n      });\n      if (!isValid) {\n        this.errorMessage = 'Please fix the errors above';\n        return;\n      }\n      this.loading = true;\n      try {\n        const response = await clientAuthService.completeRegistration(this.accountId, {\n          ...this.profileForm,\n          civil_status_id: parseInt(this.profileForm.civil_status_id)\n        });\n        if (response.success) {\n          this.successMessage = response.message;\n          this.currentStep = 3;\n\n          // Start resend cooldown\n          this.startResendCooldown();\n        }\n      } catch (error) {\n        const errorData = clientAuthService.parseError(error);\n        this.errorMessage = errorData.message;\n        if (errorData.errors && errorData.errors.length > 0) {\n          this.errors = {\n            ...this.errors,\n            ...formatApiErrors(errorData.errors)\n          };\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    // Handle address change from AddressSelector component\n    onAddressChange(addressData) {\n      this.addressData = {\n        region_code: addressData.region.code,\n        province_code: addressData.province.code,\n        city_code: addressData.city.code,\n        barangay_code: addressData.barangay.code,\n        region_name: addressData.region.name,\n        province_name: addressData.province.name,\n        city_name: addressData.city.name,\n        barangay_name: addressData.barangay.name\n      };\n\n      // Update profile form with address data\n      this.profileForm.barangay = addressData.barangay.name;\n      this.profileForm.city_municipality = addressData.city.name;\n      this.profileForm.province = addressData.province.name;\n      this.profileForm.region = addressData.region.name;\n      this.profileForm.region_code = addressData.region.code;\n      this.profileForm.province_code = addressData.province.code;\n      this.profileForm.city_code = addressData.city.code;\n      this.profileForm.barangay_code = addressData.barangay.code;\n\n      // Clear address errors\n      this.addressErrors = {};\n    },\n    // Handle file upload\n    handleFileUpload(event, documentType) {\n      const files = Array.from(event.target.files);\n\n      // Validate file types and sizes\n      const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'application/pdf', 'image/webp'];\n      const maxSize = 5 * 1024 * 1024; // 5MB\n\n      const validFiles = files.filter(file => {\n        if (!validTypes.includes(file.type)) {\n          this.errorMessage = `Invalid file type: ${file.name}. Only JPG, PNG, PDF, and WebP files are allowed.`;\n          return false;\n        }\n        if (file.size > maxSize) {\n          this.errorMessage = `File too large: ${file.name}. Maximum size is 5MB.`;\n          return false;\n        }\n        return true;\n      });\n      if (validFiles.length > 0) {\n        // For single file types, replace existing files\n        if (['barangay_certificate', 'lease_contract'].includes(documentType)) {\n          this.uploadedFiles[documentType] = validFiles.slice(0, 1);\n        } else {\n          // For multiple file types, add to existing files\n          this.uploadedFiles[documentType] = [...this.uploadedFiles[documentType], ...validFiles];\n        }\n        this.clearMessages();\n      }\n\n      // Clear the input\n      event.target.value = '';\n    },\n    // Remove uploaded file\n    removeFile(documentType, index) {\n      this.uploadedFiles[documentType].splice(index, 1);\n    },\n    // Submit document form (Step 3)\n    async submitDocumentForm() {\n      this.clearMessages();\n      if (!this.hasUploadedFiles) {\n        this.errorMessage = 'Please upload at least one proof of residency document';\n        return;\n      }\n      this.loading = true;\n      try {\n        // Create FormData for file upload\n        const formData = new FormData();\n        formData.append('account_id', this.accountId);\n\n        // Add all uploaded files to FormData\n        Object.keys(this.uploadedFiles).forEach(documentType => {\n          this.uploadedFiles[documentType].forEach(file => {\n            formData.append(documentType, file);\n          });\n        });\n\n        // Upload documents using the residency service\n        const response = await this.uploadResidencyDocuments(formData);\n        if (response.success) {\n          this.successMessage = response.message;\n          this.currentStep = 4; // Move to verification step\n          // Automatically send both email and SMS OTP\n          await this.sendBothOTPs();\n        }\n      } catch (error) {\n        const errorData = clientAuthService.parseError(error);\n        this.errorMessage = errorData.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    // Upload residency documents (API call)\n    async uploadResidencyDocuments(formData) {\n      // Use the proper API base URL to avoid proxy issues\n      const API_BASE_URL = process.env.VUE_APP_API_URL || 'http://localhost:7000/api';\n\n      // Use the registration-specific endpoint that doesn't require authentication\n      const response = await fetch(`${API_BASE_URL}/residency/upload-registration`, {\n        method: 'POST',\n        // No Authorization header needed for registration uploads\n        body: formData\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to upload documents');\n      }\n      return data;\n    },\n    // Submit verification form (Step 4)\n    async submitVerificationForm() {\n      this.clearMessages();\n      if (!this.validateField('otp')) {\n        this.errorMessage = 'Please enter a valid verification code';\n        return;\n      }\n      this.loading = true;\n      try {\n        let response;\n        let verificationSuccessful = false;\n\n        // Try to verify OTP with email first\n        try {\n          response = await clientAuthService.verifyEmail(this.accountForm.email, this.verificationForm.otp);\n          if (response.success) {\n            verificationSuccessful = true;\n            this.successMessage = response.message + ' (verified via email)';\n          }\n        } catch (emailError) {\n          // Email verification failed, try SMS if phone number exists\n          if (this.profileForm.phone_number) {\n            try {\n              response = await clientAuthService.verifySMSOTP(this.profileForm.phone_number, this.verificationForm.otp);\n              if (response.success) {\n                verificationSuccessful = true;\n                this.successMessage = response.message + ' (verified via SMS)';\n              }\n            } catch (smsError) {\n              // Both failed\n              this.errorMessage = `Invalid verification code. Please check your email or SMS for the correct code.`;\n            }\n          } else {\n            // Only email verification available\n            const errorData = clientAuthService.parseError(emailError);\n            this.errorMessage = errorData.message;\n          }\n        }\n        if (verificationSuccessful) {\n          this.currentStep = 5; // Registration complete\n        }\n      } catch (error) {\n        const errorData = clientAuthService.parseError(error);\n        this.errorMessage = errorData.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    // Resend unified verification code (same code via both email and SMS)\n    async resendVerificationCode() {\n      if (this.resendCooldown > 0) return;\n      this.resendLoading = true;\n      this.clearMessages();\n      try {\n        // Resend unified OTP (same code to both email and SMS)\n        const result = await clientAuthService.resendUnifiedOTP(this.accountForm.email, this.profileForm.phone_number, 'registration', this.profileForm.first_name);\n        if (result.success) {\n          let successMessages = [];\n          if (result.data.emailSent) {\n            successMessages.push('Email verification code resent');\n          }\n          if (result.data.smsSent) {\n            successMessages.push('SMS verification code resent');\n          }\n          if (successMessages.length > 0) {\n            this.successMessage = `${successMessages.join(' and ')}! The same verification code has been resent to both channels - you can use it from either your email or SMS.`;\n            this.startResendCooldown();\n          } else {\n            this.errorMessage = 'Failed to resend verification codes. Please try again.';\n          }\n        } else {\n          this.errorMessage = result.message || 'Failed to resend verification codes. Please try again.';\n        }\n      } catch (error) {\n        console.error('Failed to resend verification codes:', error);\n        const errorData = clientAuthService.parseError(error);\n        this.errorMessage = errorData.message || 'Failed to resend verification codes. Please try again.';\n      } finally {\n        this.resendLoading = false;\n      }\n    },\n    // Start resend cooldown timer\n    startResendCooldown() {\n      this.resendCooldown = 60;\n      const timer = setInterval(() => {\n        this.resendCooldown--;\n        if (this.resendCooldown <= 0) {\n          clearInterval(timer);\n        }\n      }, 1000);\n    },\n    // Validate address selection\n    validateAddressSelection() {\n      const addressErrors = {};\n      if (!this.addressData.region_code) {\n        addressErrors.region = 'Region is required';\n      }\n      if (!this.addressData.province_code) {\n        addressErrors.province = 'Province is required';\n      }\n      if (!this.addressData.city_code) {\n        addressErrors.city = 'City/Municipality is required';\n      }\n      if (!this.addressData.barangay_code) {\n        addressErrors.barangay = 'Barangay is required';\n      }\n      this.addressErrors = addressErrors;\n      return Object.keys(addressErrors).length === 0;\n    },\n    // Go to previous step\n    goToPreviousStep() {\n      if (this.currentStep > 1) {\n        this.currentStep--;\n        this.clearMessages();\n      }\n    },\n    // Go to login page\n    goToLogin() {\n      this.$router.push('/client/login');\n    },\n    // Automatically send unified OTP (same code via both email and SMS)\n    async sendBothOTPs() {\n      this.verificationMethodSelected = true;\n      try {\n        this.loading = true;\n        this.errorMessage = '';\n\n        // Send unified OTP (same code to both email and SMS)\n        const result = await clientAuthService.sendUnifiedOTP(this.accountForm.email, this.profileForm.phone_number, 'registration', this.profileForm.first_name);\n        if (result.success) {\n          let successMessages = [];\n          if (result.data.emailSent) {\n            successMessages.push('Email verification code sent');\n          }\n          if (result.data.smsSent) {\n            successMessages.push('SMS verification code sent');\n          }\n          if (successMessages.length > 0) {\n            this.successMessage = `${successMessages.join(' and ')}! The same verification code has been sent to both channels - you can use it from either your email or SMS.`;\n            this.startResendCooldown();\n          } else {\n            this.errorMessage = 'Failed to send verification codes. Please try again.';\n          }\n        } else {\n          this.errorMessage = result.message || 'Failed to send verification codes. Please try again.';\n        }\n      } catch (error) {\n        console.error('Failed to send verification codes:', error);\n        const errorData = clientAuthService.parseError(error);\n        this.errorMessage = errorData.message || 'Failed to send verification codes. Please try again.';\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["clientAuthService","validators","formatApiErrors","clearFieldError","AddressSelector","name","components","data","currentStep","loading","resendLoading","resendCooldown","showPassword","errorMessage","successMessage","accountId","verificationMethodSelected","accountForm","username","email","password","confirmPassword","profileForm","first_name","middle_name","last_name","suffix","birth_date","gender","civil_status_id","nationality","phone_number","house_number","street","subdivision","barangay","city_municipality","province","region","region_code","province_code","city_code","barangay_code","postal_code","years_of_residency","months_of_residency","uploadedFiles","utility_bill","barangay_certificate","valid_id","lease_contract","other","verificationForm","otp","addressData","region_name","province_name","city_name","barangay_name","errors","addressErrors","computed","hasUploadedFiles","Object","values","some","files","length","mounted","methods","validateField","fieldName","error","value","getFieldValue","required","birthDate","phoneNumber","address","prototype","hasOwnProperty","call","handleGenderChange","handlePhoneInput","event","target","digitsOnly","replace","limitedValue","substring","clearMessages","submitAccountForm","fieldsToValidate","isValid","forEach","field","response","registerAccount","success","message","errorData","parseError","submitProfileForm","validateAddressSelection","completeRegistration","parseInt","startResendCooldown","onAddressChange","code","city","handleFileUpload","documentType","Array","from","validTypes","maxSize","validFiles","filter","file","includes","type","size","slice","removeFile","index","splice","submitDocumentForm","formData","FormData","append","keys","uploadResidencyDocuments","sendBothOTPs","API_BASE_URL","process","env","VUE_APP_API_URL","fetch","method","body","json","ok","Error","submitVerificationForm","verificationSuccessful","verifyEmail","emailError","verifySMSOTP","smsError","resendVerificationCode","result","resendUnifiedOTP","successMessages","emailSent","push","smsSent","join","console","timer","setInterval","clearInterval","goToPreviousStep","goToLogin","$router","sendUnifiedOTP"],"sources":["D:/brgy_docu_hub/BOSFDR/src/components/client/js/clientRegistration.js"],"sourcesContent":["import clientAuthService from '@/services/clientAuthService';\nimport { validators, formatApiErrors, clearFieldError } from '@/utils/validation';\nimport AddressSelector from '@/components/common/AddressSelector.vue';\n\nexport default {\n  name: 'ClientRegistration',\n  components: {\n    AddressSelector\n  },\n  data() {\n    return {\n      currentStep: 1,\n      loading: false,\n      resendLoading: false,\n      resendCooldown: 0,\n      showPassword: false,\n      errorMessage: '',\n      successMessage: '',\n      accountId: null,\n\n      verificationMethodSelected: false,\n      \n      // Account form data\n      accountForm: {\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: ''\n      },\n      \n      // Profile form data\n      profileForm: {\n        first_name: '',\n        middle_name: '',\n        last_name: '',\n        suffix: '',\n        birth_date: '',\n        gender: '',\n        civil_status_id: '',\n        nationality: 'Filipino',\n        phone_number: '',\n        email: '',\n        house_number: '',\n        street: '',\n        subdivision: '',\n        barangay: '',\n        city_municipality: '',\n        province: '',\n        region: '',\n        region_code: '',\n        province_code: '',\n        city_code: '',\n        barangay_code: '',\n        postal_code: '',\n        years_of_residency: null,\n        months_of_residency: null\n      },\n      \n      // Document upload data\n      uploadedFiles: {\n        utility_bill: [],\n        barangay_certificate: [],\n        valid_id: [],\n        lease_contract: [],\n        other: []\n      },\n\n      // Verification form data\n      verificationForm: {\n        otp: ''\n      },\n\n      // Address data\n      addressData: {\n        region_code: '',\n        province_code: '',\n        city_code: '',\n        barangay_code: '',\n        region_name: '',\n        province_name: '',\n        city_name: '',\n        barangay_name: ''\n      },\n\n      // Form errors\n      errors: {},\n      addressErrors: {}\n    };\n  },\n\n  computed: {\n    hasUploadedFiles() {\n      return Object.values(this.uploadedFiles).some(files => files.length > 0);\n    }\n  },\n\n  mounted() {\n    // Ensure profileForm is properly initialized\n    if (!this.profileForm) {\n      this.profileForm = {\n        first_name: '',\n        middle_name: '',\n        last_name: '',\n        suffix: '',\n        birth_date: '',\n        gender: '',\n        civil_status_id: '',\n        nationality: 'Filipino',\n        phone_number: '',\n        email: '',\n        house_number: '',\n        street: '',\n        subdivision: '',\n        barangay: '',\n        city_municipality: '',\n        province: '',\n        region: '',\n        region_code: '',\n        province_code: '',\n        city_code: '',\n        barangay_code: '',\n        postal_code: '',\n        years_of_residency: null,\n        months_of_residency: null\n      };\n    }\n  },\n\n  methods: {\n    // Validate individual field\n    validateField(fieldName) {\n      let error = null;\n      const value = this.getFieldValue(fieldName);\n      \n      switch (fieldName) {\n        case 'username':\n          error = validators.required(value, 'Username') || validators.username(value);\n          break;\n        case 'email':\n          error = validators.required(value, 'Email') || validators.email(value);\n          break;\n        case 'password':\n          error = validators.required(value, 'Password') || validators.password(value);\n          break;\n        case 'confirmPassword':\n          error = validators.required(value, 'Confirm Password') || \n                  validators.confirmPassword(value, this.accountForm.password);\n          break;\n        case 'first_name':\n          error = validators.required(value, 'First Name') || validators.name(value, 'First Name');\n          break;\n        case 'last_name':\n          error = validators.required(value, 'Last Name') || validators.name(value, 'Last Name');\n          break;\n        case 'birth_date':\n          error = validators.required(value, 'Birth Date') || validators.birthDate(value);\n          break;\n        case 'gender':\n          error = validators.required(value, 'Gender');\n          break;\n        case 'civil_status_id':\n          error = validators.required(value, 'Civil Status');\n          break;\n        case 'nationality':\n          error = validators.required(value, 'Nationality') || validators.name(value, 'Nationality');\n          break;\n        case 'phone_number':\n          error = validators.required(value, 'Phone Number') || validators.phoneNumber(value);\n          break;\n        case 'barangay':\n          error = validators.required(value, 'Barangay') || validators.address(value, 'Barangay');\n          break;\n        case 'city_municipality':\n          error = validators.required(value, 'City/Municipality') || \n                  validators.address(value, 'City/Municipality');\n          break;\n        case 'province':\n          error = validators.required(value, 'Province') || validators.address(value, 'Province');\n          break;\n        case 'otp':\n          error = validators.required(value, 'Verification Code') || validators.otp(value);\n          break;\n      }\n      \n      if (error) {\n        this.errors = { ...this.errors, [fieldName]: error };\n      } else {\n        this.clearFieldError(fieldName);\n      }\n      \n      return !error;\n    },\n    \n    // Get field value from appropriate form\n    getFieldValue(fieldName) {\n      if (Object.prototype.hasOwnProperty.call(this.accountForm, fieldName)) {\n        return this.accountForm[fieldName];\n      } else if (Object.prototype.hasOwnProperty.call(this.profileForm, fieldName)) {\n        return this.profileForm[fieldName];\n      } else if (Object.prototype.hasOwnProperty.call(this.verificationForm, fieldName)) {\n        return this.verificationForm[fieldName];\n      }\n      return '';\n    },\n    \n    // Clear field error\n    clearFieldError(fieldName) {\n      this.errors = clearFieldError(this.errors, fieldName);\n    },\n\n    // Handle gender change - clear suffix field when female is selected\n    handleGenderChange() {\n      this.clearFieldError('gender');\n\n      // Clear suffix field when female is selected\n      if (this.profileForm.gender === 'female') {\n        this.profileForm.suffix = '';\n      }\n    },\n\n    // Handle phone number input to restrict to digits only\n    handlePhoneInput(event) {\n      const value = event.target.value;\n      // Remove any non-digit characters\n      const digitsOnly = value.replace(/\\D/g, '');\n      // Limit to 11 digits\n      const limitedValue = digitsOnly.substring(0, 11);\n      this.profileForm.phone_number = limitedValue;\n      this.clearFieldError('phone_number');\n    },\n    \n    // Clear all messages\n    clearMessages() {\n      this.errorMessage = '';\n      this.successMessage = '';\n    },\n    \n    // Submit account form (Step 1)\n    async submitAccountForm() {\n      this.clearMessages();\n      \n      // Validate all account fields\n      const fieldsToValidate = ['username', 'email', 'password', 'confirmPassword'];\n      let isValid = true;\n      \n      fieldsToValidate.forEach(field => {\n        if (!this.validateField(field)) {\n          isValid = false;\n        }\n      });\n      \n      if (!isValid) {\n        this.errorMessage = 'Please fix the errors above';\n        return;\n      }\n      \n      this.loading = true;\n      \n      try {\n        const response = await clientAuthService.registerAccount({\n          username: this.accountForm.username,\n          email: this.accountForm.email,\n          password: this.accountForm.password,\n          confirmPassword: this.accountForm.confirmPassword\n        });\n        \n        if (response.success) {\n          this.accountId = response.data.accountId;\n          this.profileForm.email = this.accountForm.email;\n          this.successMessage = response.message;\n          this.currentStep = 2;\n        }\n      } catch (error) {\n        const errorData = clientAuthService.parseError(error);\n        this.errorMessage = errorData.message;\n        \n        if (errorData.errors && errorData.errors.length > 0) {\n          this.errors = { ...this.errors, ...formatApiErrors(errorData.errors) };\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    // Submit profile form (Step 2)\n    async submitProfileForm() {\n      this.clearMessages();\n\n      // Validate address selection first\n      if (!this.validateAddressSelection()) {\n        this.errorMessage = 'Please select a complete address (Region, Province, City, and Barangay)';\n        return;\n      }\n\n      // Validate all required profile fields\n      const fieldsToValidate = [\n        'first_name', 'last_name', 'birth_date', 'gender',\n        'civil_status_id', 'nationality', 'phone_number', 'barangay',\n        'city_municipality', 'province', 'region'\n      ];\n\n      let isValid = true;\n\n      fieldsToValidate.forEach(field => {\n        if (!this.validateField(field)) {\n          isValid = false;\n        }\n      });\n\n      if (!isValid) {\n        this.errorMessage = 'Please fix the errors above';\n        return;\n      }\n      \n      this.loading = true;\n      \n      try {\n        const response = await clientAuthService.completeRegistration(this.accountId, {\n          ...this.profileForm,\n          civil_status_id: parseInt(this.profileForm.civil_status_id)\n        });\n        \n        if (response.success) {\n          this.successMessage = response.message;\n          this.currentStep = 3;\n          \n          // Start resend cooldown\n          this.startResendCooldown();\n        }\n      } catch (error) {\n        const errorData = clientAuthService.parseError(error);\n        this.errorMessage = errorData.message;\n        \n        if (errorData.errors && errorData.errors.length > 0) {\n          this.errors = { ...this.errors, ...formatApiErrors(errorData.errors) };\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    // Handle address change from AddressSelector component\n    onAddressChange(addressData) {\n      this.addressData = {\n        region_code: addressData.region.code,\n        province_code: addressData.province.code,\n        city_code: addressData.city.code,\n        barangay_code: addressData.barangay.code,\n        region_name: addressData.region.name,\n        province_name: addressData.province.name,\n        city_name: addressData.city.name,\n        barangay_name: addressData.barangay.name\n      };\n\n      // Update profile form with address data\n      this.profileForm.barangay = addressData.barangay.name;\n      this.profileForm.city_municipality = addressData.city.name;\n      this.profileForm.province = addressData.province.name;\n      this.profileForm.region = addressData.region.name;\n      this.profileForm.region_code = addressData.region.code;\n      this.profileForm.province_code = addressData.province.code;\n      this.profileForm.city_code = addressData.city.code;\n      this.profileForm.barangay_code = addressData.barangay.code;\n\n      // Clear address errors\n      this.addressErrors = {};\n    },\n\n    // Handle file upload\n    handleFileUpload(event, documentType) {\n      const files = Array.from(event.target.files);\n\n      // Validate file types and sizes\n      const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'application/pdf', 'image/webp'];\n      const maxSize = 5 * 1024 * 1024; // 5MB\n\n      const validFiles = files.filter(file => {\n        if (!validTypes.includes(file.type)) {\n          this.errorMessage = `Invalid file type: ${file.name}. Only JPG, PNG, PDF, and WebP files are allowed.`;\n          return false;\n        }\n\n        if (file.size > maxSize) {\n          this.errorMessage = `File too large: ${file.name}. Maximum size is 5MB.`;\n          return false;\n        }\n\n        return true;\n      });\n\n      if (validFiles.length > 0) {\n        // For single file types, replace existing files\n        if (['barangay_certificate', 'lease_contract'].includes(documentType)) {\n          this.uploadedFiles[documentType] = validFiles.slice(0, 1);\n        } else {\n          // For multiple file types, add to existing files\n          this.uploadedFiles[documentType] = [...this.uploadedFiles[documentType], ...validFiles];\n        }\n\n        this.clearMessages();\n      }\n\n      // Clear the input\n      event.target.value = '';\n    },\n\n    // Remove uploaded file\n    removeFile(documentType, index) {\n      this.uploadedFiles[documentType].splice(index, 1);\n    },\n\n    // Submit document form (Step 3)\n    async submitDocumentForm() {\n      this.clearMessages();\n\n      if (!this.hasUploadedFiles) {\n        this.errorMessage = 'Please upload at least one proof of residency document';\n        return;\n      }\n\n      this.loading = true;\n\n      try {\n        // Create FormData for file upload\n        const formData = new FormData();\n        formData.append('account_id', this.accountId);\n\n        // Add all uploaded files to FormData\n        Object.keys(this.uploadedFiles).forEach(documentType => {\n          this.uploadedFiles[documentType].forEach(file => {\n            formData.append(documentType, file);\n          });\n        });\n\n        // Upload documents using the residency service\n        const response = await this.uploadResidencyDocuments(formData);\n\n        if (response.success) {\n          this.successMessage = response.message;\n          this.currentStep = 4; // Move to verification step\n          // Automatically send both email and SMS OTP\n          await this.sendBothOTPs();\n        }\n      } catch (error) {\n        const errorData = clientAuthService.parseError(error);\n        this.errorMessage = errorData.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    // Upload residency documents (API call)\n    async uploadResidencyDocuments(formData) {\n      // Use the proper API base URL to avoid proxy issues\n      const API_BASE_URL = process.env.VUE_APP_API_URL || 'http://localhost:7000/api';\n\n      // Use the registration-specific endpoint that doesn't require authentication\n      const response = await fetch(`${API_BASE_URL}/residency/upload-registration`, {\n        method: 'POST',\n        // No Authorization header needed for registration uploads\n        body: formData\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to upload documents');\n      }\n\n      return data;\n    },\n\n    // Submit verification form (Step 4)\n    async submitVerificationForm() {\n      this.clearMessages();\n      \n      if (!this.validateField('otp')) {\n        this.errorMessage = 'Please enter a valid verification code';\n        return;\n      }\n      \n      this.loading = true;\n      \n      try {\n        let response;\n        let verificationSuccessful = false;\n\n        // Try to verify OTP with email first\n        try {\n          response = await clientAuthService.verifyEmail(\n            this.accountForm.email,\n            this.verificationForm.otp\n          );\n          if (response.success) {\n            verificationSuccessful = true;\n            this.successMessage = response.message + ' (verified via email)';\n          }\n        } catch (emailError) {\n          // Email verification failed, try SMS if phone number exists\n          if (this.profileForm.phone_number) {\n            try {\n              response = await clientAuthService.verifySMSOTP(\n                this.profileForm.phone_number,\n                this.verificationForm.otp\n              );\n              if (response.success) {\n                verificationSuccessful = true;\n                this.successMessage = response.message + ' (verified via SMS)';\n              }\n            } catch (smsError) {\n              // Both failed\n              this.errorMessage = `Invalid verification code. Please check your email or SMS for the correct code.`;\n            }\n          } else {\n            // Only email verification available\n            const errorData = clientAuthService.parseError(emailError);\n            this.errorMessage = errorData.message;\n          }\n        }\n\n        if (verificationSuccessful) {\n          this.currentStep = 5; // Registration complete\n        }\n      } catch (error) {\n        const errorData = clientAuthService.parseError(error);\n        this.errorMessage = errorData.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    // Resend unified verification code (same code via both email and SMS)\n    async resendVerificationCode() {\n      if (this.resendCooldown > 0) return;\n\n      this.resendLoading = true;\n      this.clearMessages();\n\n      try {\n        // Resend unified OTP (same code to both email and SMS)\n        const result = await clientAuthService.resendUnifiedOTP(\n          this.accountForm.email,\n          this.profileForm.phone_number,\n          'registration',\n          this.profileForm.first_name\n        );\n\n        if (result.success) {\n          let successMessages = [];\n\n          if (result.data.emailSent) {\n            successMessages.push('Email verification code resent');\n          }\n\n          if (result.data.smsSent) {\n            successMessages.push('SMS verification code resent');\n          }\n\n          if (successMessages.length > 0) {\n            this.successMessage = `${successMessages.join(' and ')}! The same verification code has been resent to both channels - you can use it from either your email or SMS.`;\n            this.startResendCooldown();\n          } else {\n            this.errorMessage = 'Failed to resend verification codes. Please try again.';\n          }\n        } else {\n          this.errorMessage = result.message || 'Failed to resend verification codes. Please try again.';\n        }\n\n      } catch (error) {\n        console.error('Failed to resend verification codes:', error);\n        const errorData = clientAuthService.parseError(error);\n        this.errorMessage = errorData.message || 'Failed to resend verification codes. Please try again.';\n      } finally {\n        this.resendLoading = false;\n      }\n    },\n    \n    // Start resend cooldown timer\n    startResendCooldown() {\n      this.resendCooldown = 60;\n      const timer = setInterval(() => {\n        this.resendCooldown--;\n        if (this.resendCooldown <= 0) {\n          clearInterval(timer);\n        }\n      }, 1000);\n    },\n\n    // Validate address selection\n    validateAddressSelection() {\n      const addressErrors = {};\n\n      if (!this.addressData.region_code) {\n        addressErrors.region = 'Region is required';\n      }\n\n      if (!this.addressData.province_code) {\n        addressErrors.province = 'Province is required';\n      }\n\n      if (!this.addressData.city_code) {\n        addressErrors.city = 'City/Municipality is required';\n      }\n\n      if (!this.addressData.barangay_code) {\n        addressErrors.barangay = 'Barangay is required';\n      }\n\n      this.addressErrors = addressErrors;\n      return Object.keys(addressErrors).length === 0;\n    },\n\n    // Go to previous step\n    goToPreviousStep() {\n      if (this.currentStep > 1) {\n        this.currentStep--;\n        this.clearMessages();\n      }\n    },\n    \n    // Go to login page\n    goToLogin() {\n      this.$router.push('/client/login');\n    },\n\n    // Automatically send unified OTP (same code via both email and SMS)\n    async sendBothOTPs() {\n      this.verificationMethodSelected = true;\n\n      try {\n        this.loading = true;\n        this.errorMessage = '';\n\n        // Send unified OTP (same code to both email and SMS)\n        const result = await clientAuthService.sendUnifiedOTP(\n          this.accountForm.email,\n          this.profileForm.phone_number,\n          'registration',\n          this.profileForm.first_name\n        );\n\n        if (result.success) {\n          let successMessages = [];\n\n          if (result.data.emailSent) {\n            successMessages.push('Email verification code sent');\n          }\n\n          if (result.data.smsSent) {\n            successMessages.push('SMS verification code sent');\n          }\n\n          if (successMessages.length > 0) {\n            this.successMessage = `${successMessages.join(' and ')}! The same verification code has been sent to both channels - you can use it from either your email or SMS.`;\n            this.startResendCooldown();\n          } else {\n            this.errorMessage = 'Failed to send verification codes. Please try again.';\n          }\n        } else {\n          this.errorMessage = result.message || 'Failed to send verification codes. Please try again.';\n        }\n\n      } catch (error) {\n        console.error('Failed to send verification codes:', error);\n        const errorData = clientAuthService.parseError(error);\n        this.errorMessage = errorData.message || 'Failed to send verification codes. Please try again.';\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}