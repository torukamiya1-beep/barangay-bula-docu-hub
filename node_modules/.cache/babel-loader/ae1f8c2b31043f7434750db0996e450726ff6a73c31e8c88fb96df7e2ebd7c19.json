{"ast":null,"code":"import { writeCrc } from './crc';\n// https://www.w3.org/TR/png/#11tEXt\nexport const textChunkName = 'tEXt';\nconst NULL = 0;\nconst latin1Decoder = new TextDecoder('latin1');\nfunction validateKeyword(keyword) {\n  validateLatin1(keyword);\n  if (keyword.length === 0 || keyword.length > 79) {\n    throw new Error('keyword length must be between 1 and 79');\n  }\n}\n// eslint-disable-next-line no-control-regex\nconst latin1Regex = /^[\\u0000-\\u00FF]*$/;\nfunction validateLatin1(text) {\n  if (!latin1Regex.test(text)) {\n    throw new Error('invalid latin1 text');\n  }\n}\nexport function decodetEXt(text, buffer, length) {\n  const keyword = readKeyword(buffer);\n  text[keyword] = readLatin1(buffer, length - keyword.length - 1);\n}\nexport function encodetEXt(buffer, keyword, text) {\n  validateKeyword(keyword);\n  validateLatin1(text);\n  const length = keyword.length + 1 /* NULL */ + text.length;\n  buffer.writeUint32(length);\n  buffer.writeChars(textChunkName);\n  buffer.writeChars(keyword);\n  buffer.writeByte(NULL);\n  buffer.writeChars(text);\n  writeCrc(buffer, length + 4);\n}\n// https://www.w3.org/TR/png/#11keywords\nexport function readKeyword(buffer) {\n  buffer.mark();\n  while (buffer.readByte() !== NULL) {\n    /* advance */\n  }\n  const end = buffer.offset;\n  buffer.reset();\n  const keyword = latin1Decoder.decode(buffer.readBytes(end - buffer.offset - 1));\n  // NULL\n  buffer.skip(1);\n  validateKeyword(keyword);\n  return keyword;\n}\nexport function readLatin1(buffer, length) {\n  return latin1Decoder.decode(buffer.readBytes(length));\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}