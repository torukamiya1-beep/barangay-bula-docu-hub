{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport api from './api';\n\n/**\n * Payment Service for PayMongo Integration\n * Handles online payments and payment verification\n */\nclass PaymentService {\n  /**\n   * Get PayMongo configuration for frontend\n   * @returns {Promise<Object>} PayMongo configuration\n   */\n  async getPaymentConfig() {\n    try {\n      const response = await api.get('/payments/config');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get payment config:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initiate payment process\n   * @param {Object} paymentData - Payment information\n   * @param {number} paymentData.request_id - Document request ID\n   * @param {number} paymentData.payment_method_id - Payment method ID\n   * @param {string} paymentData.customer_email - Customer email (optional)\n   * @returns {Promise<Object>} Payment initiation response\n   */\n  async initiatePayment(paymentData) {\n    try {\n      const response = await api.post('/payments/initiate', paymentData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to initiate payment:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get payment status\n   * @param {string} transactionId - Transaction ID\n   * @returns {Promise<Object>} Payment status\n   */\n  async getPaymentStatus(transactionId) {\n    try {\n      const response = await api.get(`/payments/status/${transactionId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get payment status:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get payment verification queue (Admin only)\n   * @returns {Promise<Object>} Pending payment verifications\n   */\n  async getPaymentVerificationQueue() {\n    try {\n      const response = await api.get('/admin/documents/payment-verification-queue');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get payment verification queue:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Verify in-person payment (Admin only)\n   * @param {number} requestId - Document request ID\n   * @param {Object} paymentDetails - Payment verification details\n   * @param {number} paymentDetails.amount_received - Amount received\n   * @param {number} paymentDetails.payment_method_id - Payment method ID\n   * @param {string} paymentDetails.receipt_number - Receipt number (optional)\n   * @param {string} paymentDetails.notes - Verification notes (optional)\n   * @returns {Promise<Object>} Verification response\n   */\n  async verifyInPersonPayment(requestId, paymentDetails) {\n    try {\n      const response = await api.post(`/admin/documents/requests/${requestId}/verify-payment`, paymentDetails);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to verify in-person payment:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Handle PayMongo checkout redirect\n   * @param {string} checkoutUrl - PayMongo checkout URL\n   */\n  redirectToPayMongo(checkoutUrl) {\n    if (checkoutUrl) {\n      window.location.href = checkoutUrl;\n    } else {\n      throw new Error('Invalid checkout URL');\n    }\n  }\n\n  /**\n   * Format amount for display\n   * @param {number} amount - Amount in PHP\n   * @returns {string} Formatted amount\n   */\n  formatAmount(amount) {\n    return new Intl.NumberFormat('en-PH', {\n      style: 'currency',\n      currency: 'PHP'\n    }).format(amount);\n  }\n\n  /**\n   * Get payment method display name\n   * @param {string} methodCode - Payment method code\n   * @returns {string} Display name\n   */\n  getPaymentMethodDisplayName(methodCode) {\n    const methodNames = {\n      'CASH': 'Cash Payment',\n      'ONLINE_PAYMENT_GROUP': 'Online Payment',\n      'PAYMONGO_CARD': 'Credit/Debit Card',\n      'PAYMONGO_GCASH': 'GCash',\n      'PAYMONGO_GRABPAY': 'GrabPay',\n      'PAYMONGO_PAYMAYA': 'Maya (PayMaya)',\n      'PAYMONGO_BANK': 'Bank Transfer'\n    };\n    return methodNames[methodCode] || methodCode;\n  }\n\n  /**\n   * Group payment methods for simplified UI display\n   * @param {Array} paymentMethods - Array of payment method objects from backend\n   * @returns {Array} Grouped payment methods\n   */\n  groupPaymentMethods(paymentMethods) {\n    if (!Array.isArray(paymentMethods)) return [];\n    const cashMethods = [];\n    const onlineMethods = [];\n    paymentMethods.forEach(method => {\n      if (this.isOnlinePaymentMethod(method.method_code)) {\n        onlineMethods.push(method);\n      } else {\n        cashMethods.push(method);\n      }\n    });\n    const groupedMethods = [];\n\n    // Add cash payment methods (typically just one)\n    cashMethods.forEach(method => {\n      groupedMethods.push({\n        id: method.id,\n        method_name: method.method_name,\n        method_code: method.method_code,\n        description: method.description,\n        is_online: method.is_online,\n        is_active: method.is_active,\n        processing_fee_percentage: method.processing_fee_percentage,\n        processing_fee_fixed: method.processing_fee_fixed,\n        group_type: 'individual'\n      });\n    });\n\n    // Add grouped online payment option if there are online methods\n    if (onlineMethods.length > 0) {\n      groupedMethods.push({\n        id: 'ONLINE_PAYMENT_GROUP',\n        method_name: 'Online Payment',\n        method_code: 'ONLINE_PAYMENT_GROUP',\n        description: 'Pay securely online using credit/debit card, GCash, GrabPay, Maya, or bank transfer',\n        is_online: true,\n        is_active: true,\n        processing_fee_percentage: onlineMethods[0]?.processing_fee_percentage || 0,\n        processing_fee_fixed: onlineMethods[0]?.processing_fee_fixed || 0,\n        group_type: 'group',\n        grouped_methods: onlineMethods\n      });\n    }\n    return groupedMethods;\n  }\n\n  /**\n   * Get the actual payment method ID for backend submission\n   * @param {string|number} selectedMethodId - Selected method ID (could be group ID)\n   * @param {Array} originalMethods - Original payment methods from backend\n   * @returns {number|null} Actual payment method ID for backend\n   */\n  getActualPaymentMethodId(selectedMethodId, originalMethods) {\n    // If it's the online payment group, return the preferred online method ID\n    // Priority: Card > GCash > GrabPay > Maya > Bank Transfer\n    if (selectedMethodId === 'ONLINE_PAYMENT_GROUP') {\n      const methodPriority = ['PAYMONGO_CARD', 'PAYMONGO_GCASH', 'PAYMONGO_GRABPAY', 'PAYMONGO_PAYMAYA', 'PAYMONGO_BANK'];\n      for (const methodCode of methodPriority) {\n        const method = originalMethods.find(m => m.method_code === methodCode && m.is_active);\n        if (method) {\n          return method.id;\n        }\n      }\n\n      // Fallback to first available online method\n      const firstOnlineMethod = originalMethods.find(method => this.isOnlinePaymentMethod(method.method_code) && method.is_active);\n      return firstOnlineMethod ? firstOnlineMethod.id : null;\n    }\n\n    // For individual methods, return the ID as-is\n    return parseInt(selectedMethodId);\n  }\n\n  /**\n   * Check if payment method is online\n   * @param {string} methodCode - Payment method code\n   * @returns {boolean} True if online payment method\n   */\n  isOnlinePaymentMethod(methodCode) {\n    return methodCode && methodCode.startsWith('PAYMONGO_');\n  }\n\n  /**\n   * Get payment status display info\n   * @param {string} status - Payment status\n   * @returns {Object} Status display information\n   */\n  getPaymentStatusDisplay(status) {\n    const statusInfo = {\n      'pending': {\n        text: 'Pending',\n        color: 'warning',\n        icon: 'clock'\n      },\n      'succeeded': {\n        text: 'Paid',\n        color: 'success',\n        icon: 'check-circle'\n      },\n      'failed': {\n        text: 'Failed',\n        color: 'danger',\n        icon: 'x-circle'\n      },\n      'cancelled': {\n        text: 'Cancelled',\n        color: 'secondary',\n        icon: 'x'\n      }\n    };\n    return statusInfo[status] || {\n      text: status,\n      color: 'secondary',\n      icon: 'help-circle'\n    };\n  }\n\n  /**\n   * Calculate processing fee\n   * @param {number} baseAmount - Base amount\n   * @param {number} feePercentage - Fee percentage\n   * @param {number} feeFixed - Fixed fee\n   * @returns {number} Processing fee\n   */\n  calculateProcessingFee(baseAmount, feePercentage = 0, feeFixed = 0) {\n    const percentageFee = baseAmount * feePercentage / 100;\n    return percentageFee + feeFixed;\n  }\n\n  /**\n   * Calculate total amount including fees\n   * @param {number} baseAmount - Base amount\n   * @param {number} feePercentage - Fee percentage\n   * @param {number} feeFixed - Fixed fee\n   * @returns {Object} Amount breakdown\n   */\n  calculateTotalAmount(baseAmount, feePercentage = 0, feeFixed = 0) {\n    const processingFee = this.calculateProcessingFee(baseAmount, feePercentage, feeFixed);\n    const totalAmount = baseAmount + processingFee;\n    return {\n      baseAmount,\n      processingFee,\n      totalAmount,\n      formattedBase: this.formatAmount(baseAmount),\n      formattedFee: this.formatAmount(processingFee),\n      formattedTotal: this.formatAmount(totalAmount)\n    };\n  }\n\n  /**\n   * Validate payment data before submission\n   * @param {Object} paymentData - Payment data to validate\n   * @returns {Object} Validation result\n   */\n  validatePaymentData(paymentData) {\n    const errors = [];\n    if (!paymentData.request_id) {\n      errors.push('Request ID is required');\n    }\n    if (!paymentData.payment_method_id) {\n      errors.push('Payment method is required');\n    }\n    if (paymentData.customer_email && !this.isValidEmail(paymentData.customer_email)) {\n      errors.push('Invalid email format');\n    }\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Validate email format\n   * @param {string} email - Email to validate\n   * @returns {boolean} True if valid email\n   */\n  isValidEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  /**\n   * Handle payment errors with user-friendly messages\n   * @param {Error} error - Error object\n   * @returns {string} User-friendly error message\n   */\n  getErrorMessage(error) {\n    if (error.response?.data?.message) {\n      return error.response.data.message;\n    }\n    if (error.response?.status === 400) {\n      return 'Invalid payment information. Please check your details and try again.';\n    }\n    if (error.response?.status === 401) {\n      return 'You need to be logged in to make a payment.';\n    }\n    if (error.response?.status === 404) {\n      return 'Payment service not found. Please contact support.';\n    }\n    if (error.response?.status >= 500) {\n      return 'Payment service is temporarily unavailable. Please try again later.';\n    }\n    return error.message || 'An unexpected error occurred during payment processing.';\n  }\n}\nexport default new PaymentService();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}