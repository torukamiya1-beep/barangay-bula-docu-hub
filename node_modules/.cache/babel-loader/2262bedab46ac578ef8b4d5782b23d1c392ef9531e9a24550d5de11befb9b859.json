{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { getAdminNotificationService } from '../../services/notificationService';\nimport notificationNavigationService from '../../services/notificationNavigationService';\nexport default {\n  name: 'AdminNotifications',\n  data() {\n    return {\n      showPanel: false,\n      notifications: [],\n      unreadCount: 0,\n      loading: false,\n      loadingMore: false,\n      markingAllRead: false,\n      currentPage: 1,\n      hasMore: true,\n      limit: 10,\n      notificationService: null // Store the admin-specific service instance\n    };\n  },\n  mounted() {\n    this.initializeNotifications();\n  },\n  beforeUnmount() {\n    this.cleanup();\n  },\n  methods: {\n    async initializeNotifications() {\n      try {\n        console.log('üöÄ AdminNotifications: Initializing admin notification service');\n\n        // Get the admin-specific notification service\n        this.notificationService = getAdminNotificationService();\n\n        // Request notification permission\n        await this.notificationService.requestNotificationPermission();\n\n        // Initialize the admin notification service\n        await this.notificationService.init();\n\n        // Set up event listeners\n        this.notificationService.on('notification', this.handleNewNotification);\n        this.notificationService.on('connected', this.onConnected);\n        this.notificationService.on('error', this.onError);\n\n        // Load initial data\n        await this.loadUnreadCount();\n        console.log('‚úÖ AdminNotifications: Admin notification service initialized successfully');\n      } catch (error) {\n        console.error('‚ùå AdminNotifications: Failed to initialize notifications:', error);\n        this.error = error.message || 'Failed to initialize notifications';\n      }\n    },\n    cleanup() {\n      if (this.notificationService) {\n        this.notificationService.off('notification', this.handleNewNotification);\n        this.notificationService.off('connected', this.onConnected);\n        this.notificationService.off('error', this.onError);\n      }\n    },\n    async toggleNotificationPanel() {\n      this.showPanel = !this.showPanel;\n      if (this.showPanel && this.notifications.length === 0) {\n        await this.loadNotifications();\n      }\n    },\n    async loadNotifications(page = 1) {\n      try {\n        if (page === 1) {\n          this.loading = true;\n          this.notifications = [];\n          this.currentPage = 1;\n        } else {\n          this.loadingMore = true;\n        }\n        console.log('üîç AdminNotifications: Loading notifications, page:', page, 'limit:', this.limit);\n        const response = await this.notificationService.getNotifications(page, this.limit);\n        console.log('üì® AdminNotifications: Raw API response:', response);\n\n        // Handle the correct response structure from backend\n        let notifications = [];\n        let pagination = {};\n        if (response.data && response.data.notifications) {\n          // Backend returns: { success: true, data: { notifications: [...], pagination: {...} } }\n          if (Array.isArray(response.data.notifications)) {\n            notifications = response.data.notifications;\n            pagination = response.data.pagination || {};\n            console.log('‚úÖ AdminNotifications: Parsed notifications:', notifications.length, 'items');\n            console.log('üìä AdminNotifications: Pagination:', pagination);\n          } else {\n            console.warn('‚ö†Ô∏è AdminNotifications: Invalid response structure - notifications is not an array');\n            console.log('üìä AdminNotifications: response.data.notifications:', response.data.notifications);\n          }\n        } else {\n          console.warn('‚ö†Ô∏è AdminNotifications: Invalid response structure - no data.notifications found');\n          console.log('üìä AdminNotifications: response.data:', response.data);\n        }\n        if (page === 1) {\n          this.notifications = notifications;\n        } else {\n          this.notifications.push(...notifications);\n        }\n        this.hasMore = pagination.page < pagination.pages;\n        this.currentPage = page;\n        console.log('üìã AdminNotifications: Final notifications array:', this.notifications);\n        console.log('üìÑ AdminNotifications: Has more pages:', this.hasMore);\n      } catch (error) {\n        console.error('‚ùå AdminNotifications: Failed to load notifications:', error);\n        this.$emit('error', 'Failed to load notifications');\n      } finally {\n        this.loading = false;\n        this.loadingMore = false;\n      }\n    },\n    async loadMore() {\n      if (this.hasMore && !this.loadingMore) {\n        await this.loadNotifications(this.currentPage + 1);\n      }\n    },\n    async loadUnreadCount() {\n      try {\n        this.unreadCount = await this.notificationService.getUnreadCount();\n      } catch (error) {\n        console.error('Failed to load unread count:', error);\n      }\n    },\n    async markAllAsRead() {\n      try {\n        this.markingAllRead = true;\n        await this.notificationService.markAllAsRead();\n\n        // Update local state\n        this.notifications.forEach(notification => {\n          notification.is_read = true;\n        });\n        this.unreadCount = 0;\n        this.$emit('notifications-read');\n      } catch (error) {\n        console.error('Failed to mark all as read:', error);\n        this.$emit('error', 'Failed to mark notifications as read');\n      } finally {\n        this.markingAllRead = false;\n      }\n    },\n    async handleNotificationClick(notification) {\n      console.log('üîî Admin notification clicked:', notification);\n\n      // Show loading state\n      this.showLoadingState(notification);\n      try {\n        // Mark as read if not already read\n        if (!notification.is_read) {\n          await this.notificationService.markAsRead(notification.id);\n          notification.is_read = true;\n          this.unreadCount = Math.max(0, this.unreadCount - 1);\n          this.$emit('notification-read', notification);\n        }\n\n        // Navigate based on notification type and data\n        await this.navigateToRelevantPage(notification);\n\n        // Close notification panel after successful navigation\n        this.showPanel = false;\n      } catch (error) {\n        console.error('‚ùå Failed to handle notification click:', error);\n        this.showErrorToast('Failed to process notification');\n      } finally {\n        this.hideLoadingState(notification);\n      }\n\n      // Emit click event for parent components to handle\n      this.$emit('notification-click', notification);\n    },\n    /**\n     * Navigate to the relevant page based on notification type and data\n     */\n    async navigateToRelevantPage(notification) {\n      console.log('üß≠ Determining navigation for notification:', notification.type, notification.data);\n      try {\n        const notificationData = typeof notification.data === 'string' ? JSON.parse(notification.data) : notification.data || {};\n        let targetRoute = null;\n        switch (notification.type) {\n          case 'new_request':\n            targetRoute = await this.handleNewRequestNavigation(notificationData);\n            break;\n          case 'status_change':\n          case 'request_update':\n            targetRoute = await this.handleRequestUpdateNavigation(notificationData);\n            break;\n          case 'request_cancelled':\n            targetRoute = await this.handleRequestCancellationNavigation(notificationData);\n            break;\n          case 'payment_confirmed':\n            targetRoute = await this.handlePaymentConfirmationNavigation(notificationData);\n            break;\n          case 'payment_update':\n            targetRoute = await this.handlePaymentNavigation(notificationData);\n            break;\n          case 'system_alert':\n          case 'urgent_request':\n            targetRoute = await this.handleSystemAlertNavigation(notificationData);\n            break;\n          case 'user_registration':\n          case 'new_user':\n          case 'new_client_registration':\n            targetRoute = await this.handleUserNavigation(notificationData);\n            break;\n          default:\n            console.log('ü§∑ Unknown notification type, using default navigation');\n            targetRoute = await this.handleDefaultNavigation(notificationData);\n        }\n        if (targetRoute) {\n          console.log('üöÄ Navigating to:', targetRoute);\n\n          // Add timeout to prevent hanging navigation\n          const navigationPromise = this.$router.push(targetRoute);\n          const timeoutPromise = new Promise((_, reject) => {\n            setTimeout(() => reject(new Error('Navigation timeout')), 5000);\n          });\n          await Promise.race([navigationPromise, timeoutPromise]);\n        } else {\n          console.log('‚ÑπÔ∏è No navigation target determined for notification');\n        }\n      } catch (error) {\n        console.error('‚ùå Navigation error:', error);\n        throw new Error('Failed to navigate to notification target');\n      }\n    },\n    /**\n     * Handle navigation for new request notifications\n     */\n    async handleNewRequestNavigation(data) {\n      if (data.request_id) {\n        // Check if request still exists\n        const exists = await this.checkRequestExists(data.request_id);\n        if (exists) {\n          // Open request details modal directly for better UX\n          return await this.openRequestDetailsModal(data.request_id);\n        } else {\n          this.showErrorToast('Request no longer exists');\n          return {\n            name: 'AdminRequests'\n          };\n        }\n      }\n      return {\n        name: 'AdminRequests'\n      };\n    },\n    /**\n     * Handle navigation for request update notifications\n     */\n    async handleRequestUpdateNavigation(data) {\n      if (data.request_id) {\n        const exists = await this.checkRequestExists(data.request_id);\n        if (exists) {\n          // Open request details modal directly for better UX\n          return await this.openRequestDetailsModal(data.request_id);\n        } else {\n          this.showErrorToast('Request no longer exists');\n          return {\n            name: 'AdminRequests'\n          };\n        }\n      }\n      return {\n        name: 'AdminRequests'\n      };\n    },\n    /**\n     * Handle navigation for request cancellation notifications\n     */\n    async handleRequestCancellationNavigation(data) {\n      if (data.request_id) {\n        const exists = await this.checkRequestExists(data.request_id);\n        if (exists) {\n          // Open request details modal to show the cancelled request\n          // Focus on status section to highlight the cancellation\n          return await this.openRequestDetailsModal(data.request_id, 'status');\n        } else {\n          this.showErrorToast('Request no longer exists');\n          return {\n            name: 'AdminRequests'\n          };\n        }\n      }\n      // If no specific request, show cancelled requests filter\n      return {\n        name: 'AdminRequests',\n        query: {\n          filter: 'cancelled'\n        }\n      };\n    },\n    /**\n     * Handle navigation for payment confirmation notifications\n     */\n    async handlePaymentConfirmationNavigation(data) {\n      if (data.request_id) {\n        const exists = await this.checkRequestExists(data.request_id);\n        if (exists) {\n          // Open request details modal to show the payment confirmation\n          // Focus on payment section to highlight the confirmation\n          return await this.openRequestDetailsModal(data.request_id, 'payment');\n        } else {\n          this.showErrorToast('Request no longer exists');\n          return {\n            name: 'AdminRequests'\n          };\n        }\n      }\n      // If no specific request, show payment confirmed requests filter\n      return {\n        name: 'AdminRequests',\n        query: {\n          filter: 'payment_confirmed'\n        }\n      };\n    },\n    /**\n     * Handle navigation for payment-related notifications\n     */\n    async handlePaymentNavigation(data) {\n      if (data.request_id) {\n        const exists = await this.checkRequestExists(data.request_id);\n        if (exists) {\n          // Open request details modal with focus on payment section\n          return await this.openRequestDetailsModal(data.request_id, 'payment');\n        }\n      }\n      // Fallback to reports page for payment overview\n      return {\n        name: 'AdminReports',\n        query: {\n          section: 'revenue'\n        }\n      };\n    },\n    /**\n     * Handle navigation for system alerts and urgent requests\n     */\n    async handleSystemAlertNavigation(data) {\n      if (data.request_id) {\n        return {\n          name: 'AdminRequests',\n          query: {\n            highlight: data.request_id,\n            filter: 'urgent'\n          }\n        };\n      }\n      // For general system alerts, go to dashboard\n      return {\n        name: 'AdminDashboard'\n      };\n    },\n    /**\n     * Handle navigation for user-related notifications\n     */\n    async handleUserNavigation(data) {\n      if (data.user_id || data.client_id) {\n        const userId = data.user_id || data.client_id;\n        const exists = await this.checkUserExists(userId);\n        if (exists) {\n          // For new client registrations, open user details modal for better UX\n          return await this.openUserDetailsModal(userId, data.user_type || 'client');\n        } else {\n          this.showErrorToast('User no longer exists');\n          return {\n            name: 'AdminUsers'\n          };\n        }\n      }\n      return {\n        name: 'AdminUsers'\n      };\n    },\n    /**\n     * Handle default navigation when type is unknown\n     */\n    async handleDefaultNavigation(data) {\n      // Priority order: request_id > user_id > dashboard\n      if (data.request_id) {\n        const exists = await this.checkRequestExists(data.request_id);\n        if (exists) {\n          // Open modal for request-related notifications for better UX\n          return await this.openRequestDetailsModal(data.request_id);\n        }\n      }\n      if (data.user_id || data.client_id) {\n        const userId = data.user_id || data.client_id;\n        const exists = await this.checkUserExists(userId);\n        if (exists) {\n          return {\n            name: 'AdminUsers',\n            query: {\n              highlight: userId,\n              type: data.user_type || 'client'\n            }\n          };\n        } else {\n          this.showErrorToast('User no longer exists');\n          return {\n            name: 'AdminUsers'\n          };\n        }\n      }\n      return {\n        name: 'AdminDashboard'\n      };\n    },\n    /**\n     * Check if a request still exists in the system\n     */\n    async checkRequestExists(requestId) {\n      return await notificationNavigationService.checkRequestExists(requestId, 'admin');\n    },\n    /**\n     * Check if a user still exists in the system\n     */\n    async checkUserExists(userId) {\n      return await notificationNavigationService.checkUserExists(userId);\n    },\n    /**\n     * Show loading state for a notification\n     */\n    showLoadingState(notification) {\n      // Add loading class to notification item\n      const notificationElement = document.querySelector(`[data-notification-id=\"${notification.id}\"]`);\n      if (notificationElement) {\n        notificationElement.classList.add('loading');\n      }\n    },\n    /**\n     * Hide loading state for a notification\n     */\n    hideLoadingState(notification) {\n      const notificationElement = document.querySelector(`[data-notification-id=\"${notification.id}\"]`);\n      if (notificationElement) {\n        notificationElement.classList.remove('loading');\n      }\n    },\n    /**\n     * Show error toast message\n     */\n    showErrorToast(message) {\n      notificationNavigationService.showNavigationError(message, this.$emit.bind(this));\n    },\n    /**\n     * Open request details modal by communicating with parent component\n     * This provides better UX by keeping context and avoiding page navigation\n     */\n    async openRequestDetailsModal(requestId, focusTab = null) {\n      try {\n        console.log('üîî Opening request details modal for ID:', requestId, 'Focus tab:', focusTab);\n\n        // Emit event to parent component to open the modal\n        // The parent (AdminRequests or AdminHeader) will handle the modal opening\n        this.$emit('open-request-modal', {\n          requestId: requestId,\n          focusTab: focusTab\n        });\n\n        // Return null to indicate no navigation is needed\n        // The modal will be opened by the parent component\n        return null;\n      } catch (error) {\n        console.error('‚ùå Error opening request modal:', error);\n        // Fallback to page navigation if modal opening fails\n        return {\n          name: 'AdminRequests',\n          query: {\n            highlight: requestId,\n            tab: focusTab\n          }\n        };\n      }\n    },\n    /**\n     * Open user details modal by communicating with parent component\n     * This provides better UX for new client registration notifications\n     */\n    async openUserDetailsModal(userId, userType = 'client') {\n      try {\n        console.log('üîî Opening user details modal for ID:', userId, 'Type:', userType);\n\n        // Emit event to parent component to open the user modal\n        // The parent (AdminUsers or AdminHeader) will handle the modal opening\n        this.$emit('open-user-modal', {\n          userId: userId,\n          userType: userType\n        });\n\n        // Return null to indicate no navigation is needed\n        // The modal will be opened by the parent component\n        return null;\n      } catch (error) {\n        console.error('‚ùå Error opening user modal:', error);\n        // Fallback to page navigation if modal opening fails\n        return {\n          name: 'AdminUsers',\n          query: {\n            highlight: userId,\n            type: userType\n          }\n        };\n      }\n    },\n    handleNewNotification(notification, context = null) {\n      // Validate this is an admin notification\n      if (context && context.userType && context.userType !== 'admin') {\n        console.log('üö´ AdminNotifications: Ignoring non-admin notification:', context.userType);\n        return;\n      }\n\n      // Additional validation: check notification recipient type\n      if (notification.recipient_type && notification.recipient_type !== 'admin') {\n        console.log('üö´ AdminNotifications: Ignoring notification for:', notification.recipient_type);\n        return;\n      }\n      console.log('üì¢ AdminNotifications: Processing admin notification:', notification);\n\n      // Handle unread count updates from polling\n      if (notification.type === 'unread_count_update') {\n        this.unreadCount = notification.count || 0;\n        return;\n      }\n\n      // Handle notification read status updates\n      if (notification.type === 'notification_read') {\n        const notificationIndex = this.notifications.findIndex(n => n.id === notification.notification_id);\n        if (notificationIndex !== -1) {\n          this.notifications[notificationIndex].is_read = true;\n          this.unreadCount = Math.max(0, this.unreadCount - 1);\n        }\n        return;\n      }\n\n      // Handle all notifications marked as read\n      if (notification.type === 'all_notifications_read') {\n        this.notifications.forEach(n => n.is_read = true);\n        this.unreadCount = 0;\n        return;\n      }\n\n      // Add to beginning of list if panel is open\n      if (this.showPanel) {\n        this.notifications.unshift(notification);\n      }\n\n      // Update unread count for new notifications\n      if (!notification.is_read) {\n        this.unreadCount++;\n      }\n\n      // Emit event for parent components\n      this.$emit('new-notification', notification);\n    },\n    onConnected() {\n      console.log('Connected to notification stream');\n      this.$emit('connected');\n    },\n    onError(error) {\n      console.error('Notification stream error:', error);\n      this.$emit('error', 'Connection to notification stream failed');\n    },\n    getNotificationIcon(type) {\n      const icons = {\n        'status_change': 'fas fa-sync-alt text-info',\n        'new_request': 'fas fa-file-alt text-success',\n        'request_update': 'fas fa-edit text-warning',\n        'system_alert': 'fas fa-exclamation-triangle text-danger',\n        'user_registration': 'fas fa-user-plus text-info',\n        'new_user': 'fas fa-user-check text-success',\n        'new_client_registration': 'fas fa-user-plus text-info',\n        'test': 'fas fa-vial text-secondary',\n        'connection': 'fas fa-plug text-success'\n      };\n      return icons[type] || 'fas fa-bell text-primary';\n    },\n    formatTime(timestamp) {\n      const date = new Date(timestamp);\n      const now = new Date();\n      const diffInMinutes = Math.floor((now - date) / (1000 * 60));\n      if (diffInMinutes < 1) return 'Just now';\n      if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n      if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;\n      return date.toLocaleDateString();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}