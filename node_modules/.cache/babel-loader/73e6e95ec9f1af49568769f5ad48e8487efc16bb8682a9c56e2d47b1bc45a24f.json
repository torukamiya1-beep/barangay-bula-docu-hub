{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\n// Philippine Address Service\n// Uses data from https://github.com/isaacdarcilla/philippine-addresses\n\nclass AddressService {\n  constructor() {\n    // Use absolute URL if proxy is not working, otherwise use relative URL\n    this.baseUrl = process.env.NODE_ENV === 'development' ? 'http://localhost:7000/api/address' : '/api/address';\n    this.cache = {\n      regions: null,\n      provinces: null,\n      cities: null,\n      barangays: null\n    };\n  }\n\n  // Get all regions\n  async getRegions() {\n    if (this.cache.regions) {\n      return this.cache.regions;\n    }\n    try {\n      const response = await fetch(`${this.baseUrl}/regions`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch regions: ${response.status} ${response.statusText}`);\n      }\n      const result = await response.json();\n      // Handle API response format: {success: true, data: [...]}\n      const regions = result.success ? result.data : result;\n      if (!Array.isArray(regions)) {\n        throw new Error('Invalid regions data format');\n      }\n      this.cache.regions = regions;\n      return regions;\n    } catch (error) {\n      console.error('Error fetching regions:', error);\n      throw error;\n    }\n  }\n\n  // Get provinces by region\n  async getProvincesByRegion(regionCode) {\n    try {\n      if (!this.cache.provinces) {\n        const response = await fetch(`${this.baseUrl}/provinces`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch provinces');\n        }\n        const result = await response.json();\n        const provinces = result.success ? result.data : result;\n        if (!Array.isArray(provinces)) {\n          throw new Error('Invalid provinces data format');\n        }\n        this.cache.provinces = provinces;\n      }\n      return this.cache.provinces.filter(province => province.region_code === regionCode).sort((a, b) => a.province_name.localeCompare(b.province_name));\n    } catch (error) {\n      console.error('Error fetching provinces:', error);\n      throw error;\n    }\n  }\n\n  // Get cities/municipalities by province\n  async getCitiesByProvince(provinceCode) {\n    try {\n      if (!this.cache.cities) {\n        const response = await fetch(`${this.baseUrl}/cities`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch cities');\n        }\n        const result = await response.json();\n        const cities = result.success ? result.data : result;\n        if (!Array.isArray(cities)) {\n          throw new Error('Invalid cities data format');\n        }\n        this.cache.cities = cities;\n      }\n      return this.cache.cities.filter(city => city.province_code === provinceCode).sort((a, b) => a.city_name.localeCompare(b.city_name));\n    } catch (error) {\n      console.error('Error fetching cities:', error);\n      throw error;\n    }\n  }\n\n  // Get barangays by city\n  async getBarangaysByCity(cityCode) {\n    try {\n      if (!this.cache.barangays) {\n        const response = await fetch(`${this.baseUrl}/barangays`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch barangays');\n        }\n        const result = await response.json();\n        const barangays = result.success ? result.data : result;\n        if (!Array.isArray(barangays)) {\n          throw new Error('Invalid barangays data format');\n        }\n        this.cache.barangays = barangays;\n      }\n      return this.cache.barangays.filter(barangay => barangay.city_code === cityCode).sort((a, b) => a.brgy_name.localeCompare(b.brgy_name));\n    } catch (error) {\n      console.error('Error fetching barangays:', error);\n      throw error;\n    }\n  }\n\n  // Search for Barangay Bula specifically\n  async findBarangayBula() {\n    try {\n      if (!this.cache.barangays) {\n        const response = await fetch(`${this.baseUrl}/barangays`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch barangays');\n        }\n        this.cache.barangays = await response.json();\n      }\n      const bulaBarangays = this.cache.barangays.filter(barangay => barangay.brgy_name.toLowerCase().includes('bula'));\n\n      // Get additional details for each Barangay Bula found\n      const detailedResults = [];\n      for (const barangay of bulaBarangays) {\n        try {\n          const city = this.cache.cities?.find(c => c.city_code === barangay.city_code);\n          const province = this.cache.provinces?.find(p => p.province_code === barangay.province_code);\n          const region = this.cache.regions?.find(r => r.region_code === barangay.region_code);\n          detailedResults.push({\n            ...barangay,\n            city_name: city?.city_name || 'Unknown City',\n            province_name: province?.province_name || 'Unknown Province',\n            region_name: region?.region_name || 'Unknown Region'\n          });\n        } catch (error) {\n          console.warn('Error getting details for barangay:', barangay.brgy_name, error);\n          detailedResults.push(barangay);\n        }\n      }\n      return detailedResults;\n    } catch (error) {\n      console.error('Error finding Barangay Bula:', error);\n      throw error;\n    }\n  }\n\n  // Get complete address hierarchy for a barangay\n  async getCompleteAddress(barangayCode) {\n    try {\n      if (!this.cache.barangays) {\n        await this.getBarangaysByCity(''); // This will load all barangays\n      }\n      const barangay = this.cache.barangays.find(b => b.brgy_code === barangayCode);\n      if (!barangay) {\n        throw new Error('Barangay not found');\n      }\n      const city = this.cache.cities?.find(c => c.city_code === barangay.city_code);\n      const province = this.cache.provinces?.find(p => p.province_code === barangay.province_code);\n      const region = this.cache.regions?.find(r => r.region_code === barangay.region_code);\n      return {\n        barangay: barangay.brgy_name,\n        city: city?.city_name || 'Unknown City',\n        province: province?.province_name || 'Unknown Province',\n        region: region?.region_name || 'Unknown Region',\n        codes: {\n          barangay: barangayCode,\n          city: barangay.city_code,\n          province: barangay.province_code,\n          region: barangay.region_code\n        }\n      };\n    } catch (error) {\n      console.error('Error getting complete address:', error);\n      throw error;\n    }\n  }\n\n  // Clear cache (useful for refreshing data)\n  clearCache() {\n    this.cache = {\n      regions: null,\n      provinces: null,\n      cities: null,\n      barangays: null\n    };\n  }\n\n  // Preload all address data (useful for better performance)\n  async preloadAddressData() {\n    try {\n      await Promise.all([this.getRegions(), this.getProvincesByRegion('01'),\n      // Load at least one province set\n      this.getCitiesByProvince('0128'),\n      // Load at least one city set\n      this.getBarangaysByCity('012801') // Load at least one barangay set\n      ]);\n      console.log('Address data preloaded successfully');\n    } catch (error) {\n      console.warn('Failed to preload address data:', error);\n    }\n  }\n\n  // Validate if an address combination is valid\n  async validateAddress(regionCode, provinceCode, cityCode, barangayCode) {\n    try {\n      const regions = await this.getRegions();\n      const region = regions.find(r => r.region_code === regionCode);\n      if (!region) return {\n        valid: false,\n        error: 'Invalid region'\n      };\n      const provinces = await this.getProvincesByRegion(regionCode);\n      const province = provinces.find(p => p.province_code === provinceCode);\n      if (!province) return {\n        valid: false,\n        error: 'Invalid province for selected region'\n      };\n      const cities = await this.getCitiesByProvince(provinceCode);\n      const city = cities.find(c => c.city_code === cityCode);\n      if (!city) return {\n        valid: false,\n        error: 'Invalid city for selected province'\n      };\n      const barangays = await this.getBarangaysByCity(cityCode);\n      const barangay = barangays.find(b => b.brgy_code === barangayCode);\n      if (!barangay) return {\n        valid: false,\n        error: 'Invalid barangay for selected city'\n      };\n      return {\n        valid: true\n      };\n    } catch (error) {\n      return {\n        valid: false,\n        error: error.message\n      };\n    }\n  }\n}\n\n// Create and export a singleton instance\nconst addressService = new AddressService();\nexport default addressService;","map":{"version":3,"names":["AddressService","constructor","baseUrl","process","env","NODE_ENV","cache","regions","provinces","cities","barangays","getRegions","response","fetch","ok","Error","status","statusText","result","json","success","data","Array","isArray","error","console","getProvincesByRegion","regionCode","filter","province","region_code","sort","a","b","province_name","localeCompare","getCitiesByProvince","provinceCode","city","province_code","city_name","getBarangaysByCity","cityCode","barangay","city_code","brgy_name","findBarangayBula","bulaBarangays","toLowerCase","includes","detailedResults","find","c","p","region","r","push","region_name","warn","getCompleteAddress","barangayCode","brgy_code","codes","clearCache","preloadAddressData","Promise","all","log","validateAddress","valid","message","addressService"],"sources":["D:/brgy_docu_hub/BOSFDR/src/services/addressService.js"],"sourcesContent":["// Philippine Address Service\n// Uses data from https://github.com/isaacdarcilla/philippine-addresses\n\nclass AddressService {\n  constructor() {\n    // Use absolute URL if proxy is not working, otherwise use relative URL\n    this.baseUrl = process.env.NODE_ENV === 'development'\n      ? 'http://localhost:7000/api/address'\n      : '/api/address';\n    this.cache = {\n      regions: null,\n      provinces: null,\n      cities: null,\n      barangays: null\n    };\n  }\n\n  // Get all regions\n  async getRegions() {\n    if (this.cache.regions) {\n      return this.cache.regions;\n    }\n\n    try {\n      const response = await fetch(`${this.baseUrl}/regions`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch regions: ${response.status} ${response.statusText}`);\n      }\n\n      const result = await response.json();\n      // Handle API response format: {success: true, data: [...]}\n      const regions = result.success ? result.data : result;\n\n      if (!Array.isArray(regions)) {\n        throw new Error('Invalid regions data format');\n      }\n\n      this.cache.regions = regions;\n      return regions;\n    } catch (error) {\n      console.error('Error fetching regions:', error);\n      throw error;\n    }\n  }\n\n  // Get provinces by region\n  async getProvincesByRegion(regionCode) {\n    try {\n      if (!this.cache.provinces) {\n        const response = await fetch(`${this.baseUrl}/provinces`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch provinces');\n        }\n        const result = await response.json();\n        const provinces = result.success ? result.data : result;\n\n        if (!Array.isArray(provinces)) {\n          throw new Error('Invalid provinces data format');\n        }\n\n        this.cache.provinces = provinces;\n      }\n\n      return this.cache.provinces.filter(province =>\n        province.region_code === regionCode\n      ).sort((a, b) => a.province_name.localeCompare(b.province_name));\n    } catch (error) {\n      console.error('Error fetching provinces:', error);\n      throw error;\n    }\n  }\n\n  // Get cities/municipalities by province\n  async getCitiesByProvince(provinceCode) {\n    try {\n      if (!this.cache.cities) {\n        const response = await fetch(`${this.baseUrl}/cities`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch cities');\n        }\n        const result = await response.json();\n        const cities = result.success ? result.data : result;\n\n        if (!Array.isArray(cities)) {\n          throw new Error('Invalid cities data format');\n        }\n\n        this.cache.cities = cities;\n      }\n\n      return this.cache.cities.filter(city =>\n        city.province_code === provinceCode\n      ).sort((a, b) => a.city_name.localeCompare(b.city_name));\n    } catch (error) {\n      console.error('Error fetching cities:', error);\n      throw error;\n    }\n  }\n\n  // Get barangays by city\n  async getBarangaysByCity(cityCode) {\n    try {\n      if (!this.cache.barangays) {\n        const response = await fetch(`${this.baseUrl}/barangays`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch barangays');\n        }\n        const result = await response.json();\n        const barangays = result.success ? result.data : result;\n\n        if (!Array.isArray(barangays)) {\n          throw new Error('Invalid barangays data format');\n        }\n\n        this.cache.barangays = barangays;\n      }\n\n      return this.cache.barangays.filter(barangay =>\n        barangay.city_code === cityCode\n      ).sort((a, b) => a.brgy_name.localeCompare(b.brgy_name));\n    } catch (error) {\n      console.error('Error fetching barangays:', error);\n      throw error;\n    }\n  }\n\n  // Search for Barangay Bula specifically\n  async findBarangayBula() {\n    try {\n      if (!this.cache.barangays) {\n        const response = await fetch(`${this.baseUrl}/barangays`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch barangays');\n        }\n        this.cache.barangays = await response.json();\n      }\n\n      const bulaBarangays = this.cache.barangays.filter(barangay => \n        barangay.brgy_name.toLowerCase().includes('bula')\n      );\n\n      // Get additional details for each Barangay Bula found\n      const detailedResults = [];\n      for (const barangay of bulaBarangays) {\n        try {\n          const city = this.cache.cities?.find(c => c.city_code === barangay.city_code);\n          const province = this.cache.provinces?.find(p => p.province_code === barangay.province_code);\n          const region = this.cache.regions?.find(r => r.region_code === barangay.region_code);\n\n          detailedResults.push({\n            ...barangay,\n            city_name: city?.city_name || 'Unknown City',\n            province_name: province?.province_name || 'Unknown Province',\n            region_name: region?.region_name || 'Unknown Region'\n          });\n        } catch (error) {\n          console.warn('Error getting details for barangay:', barangay.brgy_name, error);\n          detailedResults.push(barangay);\n        }\n      }\n\n      return detailedResults;\n    } catch (error) {\n      console.error('Error finding Barangay Bula:', error);\n      throw error;\n    }\n  }\n\n  // Get complete address hierarchy for a barangay\n  async getCompleteAddress(barangayCode) {\n    try {\n      if (!this.cache.barangays) {\n        await this.getBarangaysByCity(''); // This will load all barangays\n      }\n\n      const barangay = this.cache.barangays.find(b => b.brgy_code === barangayCode);\n      if (!barangay) {\n        throw new Error('Barangay not found');\n      }\n\n      const city = this.cache.cities?.find(c => c.city_code === barangay.city_code);\n      const province = this.cache.provinces?.find(p => p.province_code === barangay.province_code);\n      const region = this.cache.regions?.find(r => r.region_code === barangay.region_code);\n\n      return {\n        barangay: barangay.brgy_name,\n        city: city?.city_name || 'Unknown City',\n        province: province?.province_name || 'Unknown Province',\n        region: region?.region_name || 'Unknown Region',\n        codes: {\n          barangay: barangayCode,\n          city: barangay.city_code,\n          province: barangay.province_code,\n          region: barangay.region_code\n        }\n      };\n    } catch (error) {\n      console.error('Error getting complete address:', error);\n      throw error;\n    }\n  }\n\n  // Clear cache (useful for refreshing data)\n  clearCache() {\n    this.cache = {\n      regions: null,\n      provinces: null,\n      cities: null,\n      barangays: null\n    };\n  }\n\n  // Preload all address data (useful for better performance)\n  async preloadAddressData() {\n    try {\n      await Promise.all([\n        this.getRegions(),\n        this.getProvincesByRegion('01'), // Load at least one province set\n        this.getCitiesByProvince('0128'), // Load at least one city set\n        this.getBarangaysByCity('012801') // Load at least one barangay set\n      ]);\n      console.log('Address data preloaded successfully');\n    } catch (error) {\n      console.warn('Failed to preload address data:', error);\n    }\n  }\n\n  // Validate if an address combination is valid\n  async validateAddress(regionCode, provinceCode, cityCode, barangayCode) {\n    try {\n      const regions = await this.getRegions();\n      const region = regions.find(r => r.region_code === regionCode);\n      if (!region) return { valid: false, error: 'Invalid region' };\n\n      const provinces = await this.getProvincesByRegion(regionCode);\n      const province = provinces.find(p => p.province_code === provinceCode);\n      if (!province) return { valid: false, error: 'Invalid province for selected region' };\n\n      const cities = await this.getCitiesByProvince(provinceCode);\n      const city = cities.find(c => c.city_code === cityCode);\n      if (!city) return { valid: false, error: 'Invalid city for selected province' };\n\n      const barangays = await this.getBarangaysByCity(cityCode);\n      const barangay = barangays.find(b => b.brgy_code === barangayCode);\n      if (!barangay) return { valid: false, error: 'Invalid barangay for selected city' };\n\n      return { valid: true };\n    } catch (error) {\n      return { valid: false, error: error.message };\n    }\n  }\n}\n\n// Create and export a singleton instance\nconst addressService = new AddressService();\nexport default addressService;\n"],"mappings":";;;;AAAA;AACA;;AAEA,MAAMA,cAAc,CAAC;EACnBC,WAAWA,CAAA,EAAG;IACZ;IACA,IAAI,CAACC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,GACjD,mCAAmC,GACnC,cAAc;IAClB,IAAI,CAACC,KAAK,GAAG;MACXC,OAAO,EAAE,IAAI;MACbC,SAAS,EAAE,IAAI;MACfC,MAAM,EAAE,IAAI;MACZC,SAAS,EAAE;IACb,CAAC;EACH;;EAEA;EACA,MAAMC,UAAUA,CAAA,EAAG;IACjB,IAAI,IAAI,CAACL,KAAK,CAACC,OAAO,EAAE;MACtB,OAAO,IAAI,CAACD,KAAK,CAACC,OAAO;IAC3B;IAEA,IAAI;MACF,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACX,OAAO,UAAU,CAAC;MACvD,IAAI,CAACU,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,4BAA4BH,QAAQ,CAACI,MAAM,IAAIJ,QAAQ,CAACK,UAAU,EAAE,CAAC;MACvF;MAEA,MAAMC,MAAM,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MACpC;MACA,MAAMZ,OAAO,GAAGW,MAAM,CAACE,OAAO,GAAGF,MAAM,CAACG,IAAI,GAAGH,MAAM;MAErD,IAAI,CAACI,KAAK,CAACC,OAAO,CAAChB,OAAO,CAAC,EAAE;QAC3B,MAAM,IAAIQ,KAAK,CAAC,6BAA6B,CAAC;MAChD;MAEA,IAAI,CAACT,KAAK,CAACC,OAAO,GAAGA,OAAO;MAC5B,OAAOA,OAAO;IAChB,CAAC,CAAC,OAAOiB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAME,oBAAoBA,CAACC,UAAU,EAAE;IACrC,IAAI;MACF,IAAI,CAAC,IAAI,CAACrB,KAAK,CAACE,SAAS,EAAE;QACzB,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACX,OAAO,YAAY,CAAC;QACzD,IAAI,CAACU,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;QAC9C;QACA,MAAMG,MAAM,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;QACpC,MAAMX,SAAS,GAAGU,MAAM,CAACE,OAAO,GAAGF,MAAM,CAACG,IAAI,GAAGH,MAAM;QAEvD,IAAI,CAACI,KAAK,CAACC,OAAO,CAACf,SAAS,CAAC,EAAE;UAC7B,MAAM,IAAIO,KAAK,CAAC,+BAA+B,CAAC;QAClD;QAEA,IAAI,CAACT,KAAK,CAACE,SAAS,GAAGA,SAAS;MAClC;MAEA,OAAO,IAAI,CAACF,KAAK,CAACE,SAAS,CAACoB,MAAM,CAACC,QAAQ,IACzCA,QAAQ,CAACC,WAAW,KAAKH,UAC3B,CAAC,CAACI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,aAAa,CAACC,aAAa,CAACF,CAAC,CAACC,aAAa,CAAC,CAAC;IAClE,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMY,mBAAmBA,CAACC,YAAY,EAAE;IACtC,IAAI;MACF,IAAI,CAAC,IAAI,CAAC/B,KAAK,CAACG,MAAM,EAAE;QACtB,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACX,OAAO,SAAS,CAAC;QACtD,IAAI,CAACU,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;QAC3C;QACA,MAAMG,MAAM,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;QACpC,MAAMV,MAAM,GAAGS,MAAM,CAACE,OAAO,GAAGF,MAAM,CAACG,IAAI,GAAGH,MAAM;QAEpD,IAAI,CAACI,KAAK,CAACC,OAAO,CAACd,MAAM,CAAC,EAAE;UAC1B,MAAM,IAAIM,KAAK,CAAC,4BAA4B,CAAC;QAC/C;QAEA,IAAI,CAACT,KAAK,CAACG,MAAM,GAAGA,MAAM;MAC5B;MAEA,OAAO,IAAI,CAACH,KAAK,CAACG,MAAM,CAACmB,MAAM,CAACU,IAAI,IAClCA,IAAI,CAACC,aAAa,KAAKF,YACzB,CAAC,CAACN,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACQ,SAAS,CAACL,aAAa,CAACF,CAAC,CAACO,SAAS,CAAC,CAAC;IAC1D,CAAC,CAAC,OAAOhB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMiB,kBAAkBA,CAACC,QAAQ,EAAE;IACjC,IAAI;MACF,IAAI,CAAC,IAAI,CAACpC,KAAK,CAACI,SAAS,EAAE;QACzB,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACX,OAAO,YAAY,CAAC;QACzD,IAAI,CAACU,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;QAC9C;QACA,MAAMG,MAAM,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;QACpC,MAAMT,SAAS,GAAGQ,MAAM,CAACE,OAAO,GAAGF,MAAM,CAACG,IAAI,GAAGH,MAAM;QAEvD,IAAI,CAACI,KAAK,CAACC,OAAO,CAACb,SAAS,CAAC,EAAE;UAC7B,MAAM,IAAIK,KAAK,CAAC,+BAA+B,CAAC;QAClD;QAEA,IAAI,CAACT,KAAK,CAACI,SAAS,GAAGA,SAAS;MAClC;MAEA,OAAO,IAAI,CAACJ,KAAK,CAACI,SAAS,CAACkB,MAAM,CAACe,QAAQ,IACzCA,QAAQ,CAACC,SAAS,KAAKF,QACzB,CAAC,CAACX,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACa,SAAS,CAACV,aAAa,CAACF,CAAC,CAACY,SAAS,CAAC,CAAC;IAC1D,CAAC,CAAC,OAAOrB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMsB,gBAAgBA,CAAA,EAAG;IACvB,IAAI;MACF,IAAI,CAAC,IAAI,CAACxC,KAAK,CAACI,SAAS,EAAE;QACzB,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACX,OAAO,YAAY,CAAC;QACzD,IAAI,CAACU,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;QAC9C;QACA,IAAI,CAACT,KAAK,CAACI,SAAS,GAAG,MAAME,QAAQ,CAACO,IAAI,CAAC,CAAC;MAC9C;MAEA,MAAM4B,aAAa,GAAG,IAAI,CAACzC,KAAK,CAACI,SAAS,CAACkB,MAAM,CAACe,QAAQ,IACxDA,QAAQ,CAACE,SAAS,CAACG,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,MAAM,CAClD,CAAC;;MAED;MACA,MAAMC,eAAe,GAAG,EAAE;MAC1B,KAAK,MAAMP,QAAQ,IAAII,aAAa,EAAE;QACpC,IAAI;UACF,MAAMT,IAAI,GAAG,IAAI,CAAChC,KAAK,CAACG,MAAM,EAAE0C,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACR,SAAS,KAAKD,QAAQ,CAACC,SAAS,CAAC;UAC7E,MAAMf,QAAQ,GAAG,IAAI,CAACvB,KAAK,CAACE,SAAS,EAAE2C,IAAI,CAACE,CAAC,IAAIA,CAAC,CAACd,aAAa,KAAKI,QAAQ,CAACJ,aAAa,CAAC;UAC5F,MAAMe,MAAM,GAAG,IAAI,CAAChD,KAAK,CAACC,OAAO,EAAE4C,IAAI,CAACI,CAAC,IAAIA,CAAC,CAACzB,WAAW,KAAKa,QAAQ,CAACb,WAAW,CAAC;UAEpFoB,eAAe,CAACM,IAAI,CAAC;YACnB,GAAGb,QAAQ;YACXH,SAAS,EAAEF,IAAI,EAAEE,SAAS,IAAI,cAAc;YAC5CN,aAAa,EAAEL,QAAQ,EAAEK,aAAa,IAAI,kBAAkB;YAC5DuB,WAAW,EAAEH,MAAM,EAAEG,WAAW,IAAI;UACtC,CAAC,CAAC;QACJ,CAAC,CAAC,OAAOjC,KAAK,EAAE;UACdC,OAAO,CAACiC,IAAI,CAAC,qCAAqC,EAAEf,QAAQ,CAACE,SAAS,EAAErB,KAAK,CAAC;UAC9E0B,eAAe,CAACM,IAAI,CAACb,QAAQ,CAAC;QAChC;MACF;MAEA,OAAOO,eAAe;IACxB,CAAC,CAAC,OAAO1B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMmC,kBAAkBA,CAACC,YAAY,EAAE;IACrC,IAAI;MACF,IAAI,CAAC,IAAI,CAACtD,KAAK,CAACI,SAAS,EAAE;QACzB,MAAM,IAAI,CAAC+B,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC;MACrC;MAEA,MAAME,QAAQ,GAAG,IAAI,CAACrC,KAAK,CAACI,SAAS,CAACyC,IAAI,CAAClB,CAAC,IAAIA,CAAC,CAAC4B,SAAS,KAAKD,YAAY,CAAC;MAC7E,IAAI,CAACjB,QAAQ,EAAE;QACb,MAAM,IAAI5B,KAAK,CAAC,oBAAoB,CAAC;MACvC;MAEA,MAAMuB,IAAI,GAAG,IAAI,CAAChC,KAAK,CAACG,MAAM,EAAE0C,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACR,SAAS,KAAKD,QAAQ,CAACC,SAAS,CAAC;MAC7E,MAAMf,QAAQ,GAAG,IAAI,CAACvB,KAAK,CAACE,SAAS,EAAE2C,IAAI,CAACE,CAAC,IAAIA,CAAC,CAACd,aAAa,KAAKI,QAAQ,CAACJ,aAAa,CAAC;MAC5F,MAAMe,MAAM,GAAG,IAAI,CAAChD,KAAK,CAACC,OAAO,EAAE4C,IAAI,CAACI,CAAC,IAAIA,CAAC,CAACzB,WAAW,KAAKa,QAAQ,CAACb,WAAW,CAAC;MAEpF,OAAO;QACLa,QAAQ,EAAEA,QAAQ,CAACE,SAAS;QAC5BP,IAAI,EAAEA,IAAI,EAAEE,SAAS,IAAI,cAAc;QACvCX,QAAQ,EAAEA,QAAQ,EAAEK,aAAa,IAAI,kBAAkB;QACvDoB,MAAM,EAAEA,MAAM,EAAEG,WAAW,IAAI,gBAAgB;QAC/CK,KAAK,EAAE;UACLnB,QAAQ,EAAEiB,YAAY;UACtBtB,IAAI,EAAEK,QAAQ,CAACC,SAAS;UACxBf,QAAQ,EAAEc,QAAQ,CAACJ,aAAa;UAChCe,MAAM,EAAEX,QAAQ,CAACb;QACnB;MACF,CAAC;IACH,CAAC,CAAC,OAAON,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,MAAMA,KAAK;IACb;EACF;;EAEA;EACAuC,UAAUA,CAAA,EAAG;IACX,IAAI,CAACzD,KAAK,GAAG;MACXC,OAAO,EAAE,IAAI;MACbC,SAAS,EAAE,IAAI;MACfC,MAAM,EAAE,IAAI;MACZC,SAAS,EAAE;IACb,CAAC;EACH;;EAEA;EACA,MAAMsD,kBAAkBA,CAAA,EAAG;IACzB,IAAI;MACF,MAAMC,OAAO,CAACC,GAAG,CAAC,CAChB,IAAI,CAACvD,UAAU,CAAC,CAAC,EACjB,IAAI,CAACe,oBAAoB,CAAC,IAAI,CAAC;MAAE;MACjC,IAAI,CAACU,mBAAmB,CAAC,MAAM,CAAC;MAAE;MAClC,IAAI,CAACK,kBAAkB,CAAC,QAAQ,CAAC,CAAC;MAAA,CACnC,CAAC;MACFhB,OAAO,CAAC0C,GAAG,CAAC,qCAAqC,CAAC;IACpD,CAAC,CAAC,OAAO3C,KAAK,EAAE;MACdC,OAAO,CAACiC,IAAI,CAAC,iCAAiC,EAAElC,KAAK,CAAC;IACxD;EACF;;EAEA;EACA,MAAM4C,eAAeA,CAACzC,UAAU,EAAEU,YAAY,EAAEK,QAAQ,EAAEkB,YAAY,EAAE;IACtE,IAAI;MACF,MAAMrD,OAAO,GAAG,MAAM,IAAI,CAACI,UAAU,CAAC,CAAC;MACvC,MAAM2C,MAAM,GAAG/C,OAAO,CAAC4C,IAAI,CAACI,CAAC,IAAIA,CAAC,CAACzB,WAAW,KAAKH,UAAU,CAAC;MAC9D,IAAI,CAAC2B,MAAM,EAAE,OAAO;QAAEe,KAAK,EAAE,KAAK;QAAE7C,KAAK,EAAE;MAAiB,CAAC;MAE7D,MAAMhB,SAAS,GAAG,MAAM,IAAI,CAACkB,oBAAoB,CAACC,UAAU,CAAC;MAC7D,MAAME,QAAQ,GAAGrB,SAAS,CAAC2C,IAAI,CAACE,CAAC,IAAIA,CAAC,CAACd,aAAa,KAAKF,YAAY,CAAC;MACtE,IAAI,CAACR,QAAQ,EAAE,OAAO;QAAEwC,KAAK,EAAE,KAAK;QAAE7C,KAAK,EAAE;MAAuC,CAAC;MAErF,MAAMf,MAAM,GAAG,MAAM,IAAI,CAAC2B,mBAAmB,CAACC,YAAY,CAAC;MAC3D,MAAMC,IAAI,GAAG7B,MAAM,CAAC0C,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACR,SAAS,KAAKF,QAAQ,CAAC;MACvD,IAAI,CAACJ,IAAI,EAAE,OAAO;QAAE+B,KAAK,EAAE,KAAK;QAAE7C,KAAK,EAAE;MAAqC,CAAC;MAE/E,MAAMd,SAAS,GAAG,MAAM,IAAI,CAAC+B,kBAAkB,CAACC,QAAQ,CAAC;MACzD,MAAMC,QAAQ,GAAGjC,SAAS,CAACyC,IAAI,CAAClB,CAAC,IAAIA,CAAC,CAAC4B,SAAS,KAAKD,YAAY,CAAC;MAClE,IAAI,CAACjB,QAAQ,EAAE,OAAO;QAAE0B,KAAK,EAAE,KAAK;QAAE7C,KAAK,EAAE;MAAqC,CAAC;MAEnF,OAAO;QAAE6C,KAAK,EAAE;MAAK,CAAC;IACxB,CAAC,CAAC,OAAO7C,KAAK,EAAE;MACd,OAAO;QAAE6C,KAAK,EAAE,KAAK;QAAE7C,KAAK,EAAEA,KAAK,CAAC8C;MAAQ,CAAC;IAC/C;EACF;AACF;;AAEA;AACA,MAAMC,cAAc,GAAG,IAAIvE,cAAc,CAAC,CAAC;AAC3C,eAAeuE,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}