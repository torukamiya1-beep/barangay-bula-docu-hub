{"ast":null,"code":"import unifiedAuthService from '@/services/unifiedAuthService';\nimport axios from 'axios';\nexport default {\n  name: 'DocumentServicesSection',\n  props: {\n    documentTypes: {\n      type: Array,\n      default: () => []\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    error: {\n      type: String,\n      default: null\n    },\n    canRequestDocuments: {\n      type: Boolean,\n      default: true\n    },\n    statusMessage: {\n      type: String,\n      default: ''\n    },\n    refreshingStatus: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: ['select-document', 'retry-load', 'open-faq', 'contact-support', 'refresh-status'],\n  data() {\n    return {\n      showHelpDialog: false,\n      frequencyChecks: {},\n      // Store frequency check results for each document type\n      helpData: {\n        requirements: [{\n          id: 1,\n          text: 'Complete and accurate profile information'\n        }, {\n          id: 2,\n          text: 'Valid government-issued ID ready for upload'\n        }, {\n          id: 3,\n          text: 'Supporting documents (if required)'\n        }, {\n          id: 4,\n          text: 'Payment method for processing fees'\n        }],\n        processSteps: [{\n          number: 1,\n          title: 'Select Document',\n          description: 'Choose the document type you need'\n        }, {\n          number: 2,\n          title: 'Fill Application',\n          description: 'Complete the required information'\n        }, {\n          number: 3,\n          title: 'Submit & Pay',\n          description: 'Review and submit with payment'\n        }, {\n          number: 4,\n          title: 'Track Progress',\n          description: 'Monitor your request status'\n        }]\n      }\n    };\n  },\n  computed: {\n    clientData() {\n      return unifiedAuthService.getCurrentUser();\n    },\n    isAccountActive() {\n      return this.clientData?.status === 'active';\n    }\n  },\n  methods: {\n    async handleSelectDocument(documentType) {\n      if (this.canRequestDocument(documentType)) {\n        // Check frequency limits before allowing selection\n        const frequencyCheck = await this.checkRequestFrequency(documentType.id);\n        if (frequencyCheck && !frequencyCheck.canRequest) {\n          // Show frequency limit message\n          alert(frequencyCheck.message);\n          return;\n        }\n        this.$emit('select-document', documentType);\n      }\n    },\n    canRequestDocument(documentType) {\n      const basicCheck = documentType.is_active && this.isAccountActive && this.canRequestDocuments;\n\n      // Also check frequency limits if we have the data\n      const frequencyCheck = this.frequencyChecks[documentType.id];\n      if (frequencyCheck && !frequencyCheck.canRequest) {\n        return false;\n      }\n      return basicCheck;\n    },\n    async checkRequestFrequency(documentTypeId) {\n      try {\n        const token = unifiedAuthService.getToken();\n        const response = await axios.get(`${process.env.VUE_APP_API_BASE_URL}/api/client/document-requests/frequency-check/${documentTypeId}`, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (response.data.success) {\n          // Store the result for future reference\n          this.$set(this.frequencyChecks, documentTypeId, response.data.data);\n          return response.data.data;\n        }\n      } catch (error) {\n        console.error('Error checking request frequency:', error);\n        if (error.response?.status === 429) {\n          // Frequency limit exceeded\n          const errorData = error.response.data;\n          this.$set(this.frequencyChecks, documentTypeId, errorData);\n          return errorData;\n        }\n      }\n      return null;\n    },\n    getStatusText(documentType) {\n      if (!this.isAccountActive) {\n        return 'Account Verification Required';\n      }\n      if (!this.canRequestDocuments) {\n        return 'Residency Verification Required';\n      }\n\n      // Check frequency limits\n      const frequencyCheck = this.frequencyChecks[documentType.id];\n      if (frequencyCheck && !frequencyCheck.canRequest) {\n        return `Next request allowed: ${new Date(frequencyCheck.nextAllowedDate).toLocaleDateString()}`;\n      }\n      return documentType.is_active ? 'Available' : 'Unavailable';\n    },\n    getStatusBadgeClass(documentType) {\n      if (!this.isAccountActive) {\n        return 'account-pending';\n      }\n      if (!this.canRequestDocuments) {\n        return 'residency-pending';\n      }\n\n      // Check frequency limits\n      const frequencyCheck = this.frequencyChecks[documentType.id];\n      if (frequencyCheck && !frequencyCheck.canRequest) {\n        return 'frequency-limited';\n      }\n      return {\n        'available': documentType.is_active,\n        'unavailable': !documentType.is_active\n      };\n    },\n    handleRetry() {\n      this.$emit('retry-load');\n    },\n    getDocumentIcon(typeName) {\n      const icons = {\n        'Barangay Clearance': 'fas fa-certificate',\n        'Cedula': 'fas fa-id-card',\n        'Business Permit': 'fas fa-briefcase',\n        'Residence Certificate': 'fas fa-home',\n        'Indigency Certificate': 'fas fa-hand-holding-heart'\n      };\n      return icons[typeName] || 'fas fa-file-alt';\n    },\n    getProcessingTime(typeName) {\n      const times = {\n        'Barangay Clearance': '3-5 business days',\n        'Cedula': '1-2 business days',\n        'Business Permit': '5-7 business days',\n        'Residence Certificate': '2-3 business days',\n        'Indigency Certificate': '1-2 business days'\n      };\n      return times[typeName] || '3-5 business days';\n    },\n    formatCurrency(amount) {\n      return amount.toFixed(2);\n    },\n    closeDialog() {\n      this.showHelpDialog = false;\n    },\n    handleOpenFAQ() {\n      this.$emit('open-faq');\n      this.closeDialog();\n    },\n    handleContactSupport() {\n      this.$emit('contact-support');\n      this.closeDialog();\n    },\n    async checkAllDocumentFrequencies() {\n      for (const documentType of this.documentTypes) {\n        await this.checkRequestFrequency(documentType.id);\n      }\n    }\n  },\n  async mounted() {\n    // Handle ESC key to close dialog\n    document.addEventListener('keydown', e => {\n      if (e.key === 'Escape' && this.showHelpDialog) {\n        this.closeDialog();\n      }\n    });\n\n    // Check frequency limits for all document types when component mounts\n    if (this.isAccountActive && this.canRequestDocuments && this.documentTypes.length > 0) {\n      await this.checkAllDocumentFrequencies();\n    }\n  },\n  watch: {\n    // Watch for changes in document types and recheck frequencies\n    documentTypes: {\n      handler: async function (newTypes) {\n        if (this.isAccountActive && this.canRequestDocuments && newTypes.length > 0) {\n          await this.checkAllDocumentFrequencies();\n        }\n      },\n      immediate: false\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}