{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport api from './api';\n\n/**\n * Document Request Service\n * Handles all document request related API calls\n */\nclass DocumentRequestService {\n  /**\n   * Get available document types\n   */\n  async getDocumentTypes() {\n    try {\n      const response = await api.get('/client/document-requests/document-types');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching document types:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get purpose categories\n   */\n  async getPurposeCategories() {\n    try {\n      const response = await api.get('/client/document-requests/purpose-categories');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching purpose categories:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get payment methods\n   */\n  async getPaymentMethods() {\n    try {\n      const response = await api.get('/client/document-requests/payment-methods');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching payment methods:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Submit a new document request\n   */\n  async submitRequest(requestData) {\n    try {\n      const response = await api.post('/client/document-requests', requestData);\n      return response.data;\n    } catch (error) {\n      console.error('Error submitting request:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get client's requests\n   */\n  async getMyRequests(filters = {}) {\n    try {\n      const params = new URLSearchParams();\n      Object.keys(filters).forEach(key => {\n        if (filters[key] !== null && filters[key] !== undefined && filters[key] !== '') {\n          params.append(key, filters[key]);\n        }\n      });\n      const response = await api.get(`/client/document-requests?${params.toString()}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching requests:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get specific request details\n   */\n  async getRequestDetails(requestId) {\n    try {\n      const response = await api.get(`/client/document-requests/${requestId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching request details:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update request (for additional information)\n   */\n  async updateRequest(requestId, updateData) {\n    try {\n      const response = await api.put(`/client/document-requests/${requestId}`, updateData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating request:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Cancel a request\n   */\n  async cancelRequest(requestId, reason) {\n    try {\n      const response = await api.put(`/client/document-requests/${requestId}/cancel`, {\n        reason\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error cancelling request:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get request status history\n   */\n  async getRequestHistory(requestId) {\n    try {\n      const response = await api.get(`/client/document-requests/${requestId}/history`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching request history:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Process payment for a request\n   */\n  async processPayment(requestId, paymentData) {\n    try {\n      const response = await api.post(`/client/document-requests/${requestId}/payment`, paymentData);\n      return response.data;\n    } catch (error) {\n      console.error('Error processing payment:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get payment status\n   */\n  async getPaymentStatus(requestId) {\n    try {\n      const response = await api.get(`/client/document-requests/${requestId}/payment/status`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching payment status:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Calculate fees for a request\n   */\n  async calculateFees(requestData) {\n    try {\n      const response = await api.post('/client/document-requests/calculate-cedula-tax', requestData);\n      return response.data;\n    } catch (error) {\n      console.error('Error calculating fees:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get dashboard statistics\n   * TODO: Implement client dashboard endpoints in backend\n   */\n  async getDashboardStats() {\n    // TODO: Uncomment when backend endpoint is implemented\n    // try {\n    //   const response = await api.get('/client/dashboard/stats');\n    //   return response.data;\n    // } catch (error) {\n    //   console.error('Error fetching dashboard stats:', error);\n    //   throw error;\n    // }\n\n    // Temporary placeholder until backend endpoint is implemented\n    return {\n      success: true,\n      data: {\n        total_requests: 0,\n        pending_requests: 0,\n        completed_requests: 0,\n        recent_activity: []\n      },\n      message: 'Dashboard stats placeholder'\n    };\n  }\n\n  /**\n   * Get recent activity\n   * TODO: Implement client dashboard endpoints in backend\n   */\n  async getRecentActivity(limit = 10) {\n    try {\n      // const response = await api.get(`/client/dashboard/activity?limit=${limit}`);\n      // return response.data;\n\n      // Temporary placeholder until backend endpoint is implemented\n      // eslint-disable-next-line no-unused-vars\n      const activityLimit = limit; // Acknowledge the parameter for future use\n      return {\n        success: true,\n        data: [],\n        message: 'Recent activity placeholder'\n      };\n    } catch (error) {\n      console.error('Error fetching recent activity:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Upload supporting documents for a request\n   */\n  async uploadDocuments(requestId, files) {\n    try {\n      const formData = new FormData();\n\n      // Add each file to the form data\n      files.forEach(({\n        type,\n        file\n      }) => {\n        formData.append(type, file);\n      });\n      const response = await api.post(`/client/document-requests/${requestId}/documents`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error uploading documents:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get uploaded documents for a request\n   */\n  async getDocuments(requestId) {\n    try {\n      const response = await api.get(`/client/document-requests/${requestId}/documents`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching documents:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete an uploaded document\n   */\n  async deleteDocument(requestId, documentId) {\n    try {\n      const response = await api.delete(`/client/document-requests/${requestId}/documents/${documentId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting document:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Fetch verification image as blob with authentication\n   */\n  async fetchVerificationImageBlob(requestId, imageType, filename) {\n    try {\n      // Check if user is authenticated before making request\n      const authToken = localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token');\n      if (!authToken) {\n        throw new Error('Please log in to view images');\n      }\n      console.log('🔗 Fetching verification image:', {\n        requestId,\n        imageType,\n        filename,\n        hasToken: !!authToken\n      });\n      const response = await api.get(`/client/document-requests/${requestId}/verification-image/${imageType}/${filename}`, {\n        responseType: 'blob'\n      });\n      console.log('✅ Image fetched successfully:', {\n        filename,\n        size: response.data.size,\n        type: response.data.type\n      });\n      return response.data;\n    } catch (error) {\n      console.error(`❌ Error fetching ${imageType} verification image:`, {\n        status: error.response?.status,\n        statusText: error.response?.statusText,\n        data: error.response?.data,\n        filename,\n        imageType,\n        requestId,\n        message: error.message\n      });\n\n      // Provide descriptive error messages based on status code\n      if (error.response?.status === 404) {\n        throw new Error(`Image not found: ${filename}`);\n      } else if (error.response?.status === 401) {\n        throw new Error('Please log in to view images');\n      } else if (error.response?.status === 403) {\n        throw new Error('Access denied to this image');\n      } else if (error.response?.status === 500) {\n        throw new Error('Server error - please contact support');\n      } else if (error.response?.status >= 500) {\n        throw new Error('Server error - please contact support');\n      } else if (error.code === 'NETWORK_ERROR' || error.message.includes('Network Error')) {\n        throw new Error('Network error - check your connection');\n      } else if (error.message.includes('log in')) {\n        throw new Error(error.message); // Pass through authentication messages\n      } else {\n        throw new Error(error.response?.data?.message || error.message || 'Failed to load image');\n      }\n    }\n  }\n\n  /**\n   * Create object URL for verification image\n   */\n  async getVerificationImageObjectUrl(requestId, imageType, filename) {\n    try {\n      const blob = await this.fetchVerificationImageBlob(requestId, imageType, filename);\n      return URL.createObjectURL(blob);\n    } catch (error) {\n      console.error(`Error creating object URL for ${imageType} image:`, error);\n      throw error;\n    }\n  }\n}\nexport default new DocumentRequestService();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}