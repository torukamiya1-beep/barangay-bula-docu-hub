{"ast":null,"code":"import api from '@/services/api';\nexport default {\n  name: 'DocumentViewer',\n  props: {\n    document: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      loading: true,\n      error: null,\n      documentUrl: null,\n      zoomLevel: 1,\n      canZoom: false\n    };\n  },\n  computed: {\n    isImage() {\n      const imageTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\n      return imageTypes.includes(this.document.mime_type?.toLowerCase());\n    },\n    isPDF() {\n      return this.document.mime_type?.toLowerCase() === 'application/pdf';\n    }\n  },\n  async mounted() {\n    await this.loadDocument();\n  },\n  methods: {\n    async loadDocument() {\n      this.loading = true;\n      this.error = null;\n      try {\n        const response = await api.get(`/residency/documents/${this.document.id}/file`, {\n          responseType: 'blob'\n        });\n\n        // Create blob URL for the document\n        const blob = new Blob([response.data], {\n          type: this.document.mime_type\n        });\n        this.documentUrl = URL.createObjectURL(blob);\n\n        // Enable zoom for images\n        this.canZoom = this.isImage;\n      } catch (error) {\n        console.error('Error loading document:', error);\n        this.error = error.response?.data?.message || 'Failed to load document';\n      } finally {\n        this.loading = false;\n      }\n    },\n    async downloadDocument() {\n      try {\n        const response = await api.get(`/residency/documents/${this.document.id}/file`, {\n          responseType: 'blob'\n        });\n\n        // Create download link\n        const blob = new Blob([response.data], {\n          type: this.document.mime_type\n        });\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = this.document.document_name;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n      } catch (error) {\n        console.error('Error downloading document:', error);\n        // Use a simple alert instead of $toast which might not be available\n        alert('Failed to download document');\n      }\n    },\n    handleOverlayClick() {\n      this.$emit('close');\n    },\n    zoomIn() {\n      if (this.zoomLevel < 3) {\n        this.zoomLevel += 0.25;\n      }\n    },\n    zoomOut() {\n      if (this.zoomLevel > 0.5) {\n        this.zoomLevel -= 0.25;\n      }\n    },\n    onImageLoad() {\n      this.loading = false;\n    },\n    onImageError() {\n      this.error = 'Failed to load image';\n      this.loading = false;\n    },\n    onPDFLoad() {\n      this.loading = false;\n    },\n    onPDFError() {\n      this.error = 'Failed to load PDF';\n      this.loading = false;\n    },\n    formatDocumentType(type) {\n      const typeMap = {\n        'utility_bill': 'Utility Bill',\n        'barangay_certificate': 'Barangay Certificate',\n        'valid_id': 'Valid ID',\n        'lease_contract': 'Lease Contract',\n        'other': 'Other Document'\n      };\n      return typeMap[type] || type;\n    },\n    getDocumentIcon(type) {\n      const iconMap = {\n        'utility_bill': 'fas fa-file-invoice text-warning',\n        'barangay_certificate': 'fas fa-certificate text-success',\n        'valid_id': 'fas fa-id-card text-info',\n        'lease_contract': 'fas fa-file-contract text-primary',\n        'other': 'fas fa-file text-secondary'\n      };\n      return iconMap[type] || 'fas fa-file text-secondary';\n    },\n    formatFileSize(bytes) {\n      if (!bytes) return 'Unknown size';\n      const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n      const i = Math.floor(Math.log(bytes) / Math.log(1024));\n      return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n    },\n    formatDate(dateString) {\n      return new Date(dateString).toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    }\n  },\n  beforeUnmount() {\n    // Clean up blob URL\n    if (this.documentUrl) {\n      URL.revokeObjectURL(this.documentUrl);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}