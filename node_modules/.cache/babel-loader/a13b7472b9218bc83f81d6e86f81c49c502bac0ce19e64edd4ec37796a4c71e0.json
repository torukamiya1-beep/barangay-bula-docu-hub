{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n/**\n * Document Types Composable\n * Manages document types data and operations\n * Implements error handling, loading states, and data transformation\n */\n\nimport { ref, computed } from 'vue';\nimport documentRequestService from '@/services/documentRequestService';\nexport function useDocumentTypes() {\n  // Reactive state\n  const documentTypes = ref([]);\n  const loading = ref(false);\n  const error = ref(null);\n  const lastUpdated = ref(null);\n\n  // Computed properties\n  const activeDocumentTypes = computed(() => {\n    return documentTypes.value.filter(doc => doc.is_active);\n  });\n  const inactiveDocumentTypes = computed(() => {\n    return documentTypes.value.filter(doc => !doc.is_active);\n  });\n  const documentTypesCount = computed(() => ({\n    total: documentTypes.value.length,\n    active: activeDocumentTypes.value.length,\n    inactive: inactiveDocumentTypes.value.length\n  }));\n  const documentTypesByCategory = computed(() => {\n    const categories = {};\n    documentTypes.value.forEach(doc => {\n      const category = doc.category || 'General';\n      if (!categories[category]) {\n        categories[category] = [];\n      }\n      categories[category].push(doc);\n    });\n    return categories;\n  });\n\n  // Methods\n  const loadDocumentTypes = async (forceRefresh = false) => {\n    // Avoid unnecessary API calls if data is fresh (within 5 minutes)\n    const fiveMinutesAgo = Date.now() - 5 * 60 * 1000;\n    if (!forceRefresh && lastUpdated.value && lastUpdated.value > fiveMinutesAgo) {\n      return;\n    }\n    try {\n      loading.value = true;\n      error.value = null;\n      const response = await documentRequestService.getDocumentTypes();\n      if (response && response.data) {\n        documentTypes.value = response.data.map(transformDocumentType);\n        lastUpdated.value = Date.now();\n      } else {\n        throw new Error('Invalid response format');\n      }\n    } catch (err) {\n      console.error('Error loading document types:', err);\n      error.value = err.response?.data?.message || 'Failed to load available services';\n\n      // Set empty array on error to prevent UI issues\n      documentTypes.value = [];\n    } finally {\n      loading.value = false;\n    }\n  };\n  const transformDocumentType = docType => {\n    return {\n      ...docType,\n      // Ensure required fields have defaults\n      id: docType.id || `doc-${Date.now()}-${Math.random()}`,\n      type_name: docType.type_name || 'Unknown Document',\n      description: docType.description || 'No description available',\n      base_fee: parseFloat(docType.base_fee) || 0,\n      is_active: Boolean(docType.is_active),\n      category: docType.category || 'General',\n      // Add computed properties\n      icon: getDocumentIcon(docType.type_name),\n      processingTime: getProcessingTime(docType.type_name),\n      formattedFee: formatCurrency(docType.base_fee)\n    };\n  };\n  const getDocumentIcon = typeName => {\n    const iconMap = {\n      'Barangay Clearance': 'fas fa-certificate',\n      'Cedula': 'fas fa-id-card',\n      'Business Permit': 'fas fa-briefcase',\n      'Residence Certificate': 'fas fa-home',\n      'Indigency Certificate': 'fas fa-hand-holding-heart',\n      'Good Moral Certificate': 'fas fa-award'\n    };\n    return iconMap[typeName] || 'fas fa-file-alt';\n  };\n  const getProcessingTime = typeName => {\n    const timeMap = {\n      'Barangay Clearance': '3-5 business days',\n      'Cedula': '1-2 business days',\n      'Business Permit': '5-7 business days',\n      'Residence Certificate': '2-3 business days',\n      'Indigency Certificate': '1-2 business days',\n      'Good Moral Certificate': '3-5 business days'\n    };\n    return timeMap[typeName] || '3-5 business days';\n  };\n  const formatCurrency = amount => {\n    const numAmount = parseFloat(amount) || 0;\n    return numAmount.toFixed(2);\n  };\n  const getDocumentTypeById = id => {\n    return documentTypes.value.find(doc => doc.id === id);\n  };\n  const getDocumentTypeByName = name => {\n    return documentTypes.value.find(doc => doc.type_name.toLowerCase() === name.toLowerCase());\n  };\n  const searchDocumentTypes = query => {\n    if (!query || query.trim().length === 0) {\n      return documentTypes.value;\n    }\n    const searchTerm = query.toLowerCase().trim();\n    return documentTypes.value.filter(doc => doc.type_name.toLowerCase().includes(searchTerm) || doc.description.toLowerCase().includes(searchTerm) || doc.category && doc.category.toLowerCase().includes(searchTerm));\n  };\n  const refreshDocumentTypes = () => {\n    return loadDocumentTypes(true);\n  };\n  const clearError = () => {\n    error.value = null;\n  };\n\n  // Return public API\n  return {\n    // State\n    documentTypes,\n    loading,\n    error,\n    lastUpdated,\n    // Computed\n    activeDocumentTypes,\n    inactiveDocumentTypes,\n    documentTypesCount,\n    documentTypesByCategory,\n    // Methods\n    loadDocumentTypes,\n    refreshDocumentTypes,\n    getDocumentTypeById,\n    getDocumentTypeByName,\n    searchDocumentTypes,\n    clearError,\n    // Utility methods\n    getDocumentIcon,\n    getProcessingTime,\n    formatCurrency\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}