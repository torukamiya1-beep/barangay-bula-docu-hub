{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nexport default {\n  name: 'FileUpload',\n  props: {\n    label: {\n      type: String,\n      required: true\n    },\n    placeholder: {\n      type: String,\n      default: 'Click to select file or drag and drop'\n    },\n    required: {\n      type: Boolean,\n      default: false\n    },\n    acceptedTypes: {\n      type: String,\n      default: 'image/*'\n    },\n    acceptedTypesText: {\n      type: String,\n      default: 'Accepted: JPEG, PNG, GIF (Max 5MB)'\n    },\n    helpText: {\n      type: String,\n      default: ''\n    },\n    maxSize: {\n      type: Number,\n      default: 5 * 1024 * 1024 // 5MB\n    },\n    uploadUrl: {\n      type: String,\n      default: ''\n    },\n    autoUpload: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      selectedFile: null,\n      uploadedFile: null,\n      uploading: false,\n      uploadProgress: 0,\n      errorMessage: '',\n      inputId: `file-input-${Math.random().toString(36).substr(2, 9)}`\n    };\n  },\n  methods: {\n    triggerFileInput() {\n      this.$refs.fileInput.click();\n    },\n    handleFileSelect(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n\n      // Validate file\n      const validation = this.validateFile(file);\n      if (!validation.valid) {\n        this.errorMessage = validation.message;\n        return;\n      }\n      this.errorMessage = '';\n      this.selectedFile = file;\n      this.uploadedFile = null;\n\n      // Emit file selected event\n      this.$emit('file-selected', file);\n\n      // Auto upload if enabled\n      if (this.autoUpload && this.uploadUrl) {\n        this.uploadFile();\n      }\n    },\n    validateFile(file) {\n      // Check file size\n      if (file.size > this.maxSize) {\n        return {\n          valid: false,\n          message: `File size too large. Maximum size is ${this.formatFileSize(this.maxSize)}.`\n        };\n      }\n\n      // Check file type\n      const acceptedTypes = this.acceptedTypes.split(',').map(type => type.trim());\n      const isValidType = acceptedTypes.some(type => {\n        if (type === 'image/*') {\n          return file.type.startsWith('image/');\n        }\n        if (type === 'application/*') {\n          return file.type.startsWith('application/');\n        }\n        return file.type === type;\n      });\n      if (!isValidType) {\n        return {\n          valid: false,\n          message: 'Invalid file type. ' + this.acceptedTypesText\n        };\n      }\n      return {\n        valid: true\n      };\n    },\n    async uploadFile() {\n      if (!this.selectedFile || !this.uploadUrl) return;\n      this.uploading = true;\n      this.uploadProgress = 0;\n      this.errorMessage = '';\n      try {\n        const formData = new FormData();\n        formData.append('file', this.selectedFile);\n        const response = await this.$http.post(this.uploadUrl, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          },\n          onUploadProgress: progressEvent => {\n            this.uploadProgress = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          }\n        });\n        if (response.data.success) {\n          this.uploadedFile = {\n            name: this.selectedFile.name,\n            ...response.data.data\n          };\n          this.selectedFile = null;\n          this.$emit('upload-success', this.uploadedFile);\n        } else {\n          throw new Error(response.data.message || 'Upload failed');\n        }\n      } catch (error) {\n        this.errorMessage = error.response?.data?.message || error.message || 'Upload failed';\n        this.$emit('upload-error', error);\n      } finally {\n        this.uploading = false;\n        this.uploadProgress = 0;\n      }\n    },\n    removeFile() {\n      this.selectedFile = null;\n      this.uploadedFile = null;\n      this.errorMessage = '';\n      this.$refs.fileInput.value = '';\n      this.$emit('file-removed');\n    },\n    replaceFile() {\n      this.uploadedFile = null;\n      this.triggerFileInput();\n    },\n    getFileIcon(mimeType) {\n      if (mimeType.startsWith('image/')) {\n        return 'fas fa-image text-primary';\n      } else if (mimeType === 'application/pdf') {\n        return 'fas fa-file-pdf text-danger';\n      } else if (mimeType.includes('word')) {\n        return 'fas fa-file-word text-primary';\n      } else {\n        return 'fas fa-file text-secondary';\n      }\n    },\n    formatFileSize(bytes) {\n      if (bytes === 0) return '0 Bytes';\n      const k = 1024;\n      const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n      const i = Math.floor(Math.log(bytes) / Math.log(k));\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    }\n  }\n};","map":{"version":3,"names":["name","props","label","type","String","required","placeholder","default","Boolean","acceptedTypes","acceptedTypesText","helpText","maxSize","Number","uploadUrl","autoUpload","data","selectedFile","uploadedFile","uploading","uploadProgress","errorMessage","inputId","Math","random","toString","substr","methods","triggerFileInput","$refs","fileInput","click","handleFileSelect","event","file","target","files","validation","validateFile","valid","message","$emit","uploadFile","size","formatFileSize","split","map","trim","isValidType","some","startsWith","formData","FormData","append","response","$http","post","headers","onUploadProgress","progressEvent","round","loaded","total","success","Error","error","removeFile","value","replaceFile","getFileIcon","mimeType","includes","bytes","k","sizes","i","floor","log","parseFloat","pow","toFixed"],"sources":["D:\\brgy_docu_hub\\BOSFDR\\src\\components\\common\\FileUpload.vue"],"sourcesContent":["<template>\n  <div class=\"file-upload-component\">\n    <div class=\"form-group\">\n      <label :for=\"inputId\" class=\"form-label\">\n        {{ label }}\n        <span v-if=\"required\" class=\"text-danger\">*</span>\n      </label>\n      \n      <!-- File input -->\n      <div class=\"file-input-wrapper\">\n        <input\n          :id=\"inputId\"\n          type=\"file\"\n          :accept=\"acceptedTypes\"\n          :required=\"required\"\n          class=\"file-input\"\n          @change=\"handleFileSelect\"\n          ref=\"fileInput\"\n        >\n        \n        <!-- Custom file input display -->\n        <div class=\"file-input-display\" @click=\"triggerFileInput\">\n          <div v-if=\"!selectedFile && !uploadedFile\" class=\"file-input-placeholder\">\n            <i class=\"fas fa-cloud-upload-alt\"></i>\n            <span>{{ placeholder }}</span>\n            <small class=\"text-muted d-block mt-1\">{{ acceptedTypesText }}</small>\n          </div>\n          \n          <div v-else-if=\"selectedFile\" class=\"file-selected\">\n            <i :class=\"getFileIcon(selectedFile.type)\"></i>\n            <div class=\"file-info\">\n              <span class=\"file-name\">{{ selectedFile.name }}</span>\n              <small class=\"file-size text-muted\">{{ formatFileSize(selectedFile.size) }}</small>\n            </div>\n            <button type=\"button\" class=\"btn btn-sm btn-outline-danger\" @click.stop=\"removeFile\">\n              <i class=\"fas fa-times\"></i>\n            </button>\n          </div>\n          \n          <div v-else-if=\"uploadedFile\" class=\"file-uploaded\">\n            <i class=\"fas fa-check-circle text-success\"></i>\n            <div class=\"file-info\">\n              <span class=\"file-name\">{{ uploadedFile.name }}</span>\n              <small class=\"text-success\">Uploaded successfully</small>\n            </div>\n            <button type=\"button\" class=\"btn btn-sm btn-outline-secondary\" @click.stop=\"replaceFile\">\n              <i class=\"fas fa-edit\"></i> Replace\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      <!-- Upload progress -->\n      <div v-if=\"uploading\" class=\"upload-progress mt-2\">\n        <div class=\"progress\">\n          <div class=\"progress-bar\" :style=\"{ width: uploadProgress + '%' }\"></div>\n        </div>\n        <small class=\"text-muted\">Uploading... {{ uploadProgress }}%</small>\n      </div>\n      \n      <!-- Error message -->\n      <div v-if=\"errorMessage\" class=\"alert alert-danger mt-2\">\n        <i class=\"fas fa-exclamation-triangle\"></i>\n        {{ errorMessage }}\n      </div>\n      \n      <!-- Help text -->\n      <small v-if=\"helpText\" class=\"form-text text-muted\">{{ helpText }}</small>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'FileUpload',\n  props: {\n    label: {\n      type: String,\n      required: true\n    },\n    placeholder: {\n      type: String,\n      default: 'Click to select file or drag and drop'\n    },\n    required: {\n      type: Boolean,\n      default: false\n    },\n    acceptedTypes: {\n      type: String,\n      default: 'image/*'\n    },\n    acceptedTypesText: {\n      type: String,\n      default: 'Accepted: JPEG, PNG, GIF (Max 5MB)'\n    },\n    helpText: {\n      type: String,\n      default: ''\n    },\n    maxSize: {\n      type: Number,\n      default: 5 * 1024 * 1024 // 5MB\n    },\n    uploadUrl: {\n      type: String,\n      default: ''\n    },\n    autoUpload: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      selectedFile: null,\n      uploadedFile: null,\n      uploading: false,\n      uploadProgress: 0,\n      errorMessage: '',\n      inputId: `file-input-${Math.random().toString(36).substr(2, 9)}`\n    };\n  },\n  methods: {\n    triggerFileInput() {\n      this.$refs.fileInput.click();\n    },\n    \n    handleFileSelect(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n      \n      // Validate file\n      const validation = this.validateFile(file);\n      if (!validation.valid) {\n        this.errorMessage = validation.message;\n        return;\n      }\n      \n      this.errorMessage = '';\n      this.selectedFile = file;\n      this.uploadedFile = null;\n      \n      // Emit file selected event\n      this.$emit('file-selected', file);\n      \n      // Auto upload if enabled\n      if (this.autoUpload && this.uploadUrl) {\n        this.uploadFile();\n      }\n    },\n    \n    validateFile(file) {\n      // Check file size\n      if (file.size > this.maxSize) {\n        return {\n          valid: false,\n          message: `File size too large. Maximum size is ${this.formatFileSize(this.maxSize)}.`\n        };\n      }\n      \n      // Check file type\n      const acceptedTypes = this.acceptedTypes.split(',').map(type => type.trim());\n      const isValidType = acceptedTypes.some(type => {\n        if (type === 'image/*') {\n          return file.type.startsWith('image/');\n        }\n        if (type === 'application/*') {\n          return file.type.startsWith('application/');\n        }\n        return file.type === type;\n      });\n      \n      if (!isValidType) {\n        return {\n          valid: false,\n          message: 'Invalid file type. ' + this.acceptedTypesText\n        };\n      }\n      \n      return { valid: true };\n    },\n    \n    async uploadFile() {\n      if (!this.selectedFile || !this.uploadUrl) return;\n      \n      this.uploading = true;\n      this.uploadProgress = 0;\n      this.errorMessage = '';\n      \n      try {\n        const formData = new FormData();\n        formData.append('file', this.selectedFile);\n        \n        const response = await this.$http.post(this.uploadUrl, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          },\n          onUploadProgress: (progressEvent) => {\n            this.uploadProgress = Math.round(\n              (progressEvent.loaded * 100) / progressEvent.total\n            );\n          }\n        });\n        \n        if (response.data.success) {\n          this.uploadedFile = {\n            name: this.selectedFile.name,\n            ...response.data.data\n          };\n          this.selectedFile = null;\n          this.$emit('upload-success', this.uploadedFile);\n        } else {\n          throw new Error(response.data.message || 'Upload failed');\n        }\n        \n      } catch (error) {\n        this.errorMessage = error.response?.data?.message || error.message || 'Upload failed';\n        this.$emit('upload-error', error);\n      } finally {\n        this.uploading = false;\n        this.uploadProgress = 0;\n      }\n    },\n    \n    removeFile() {\n      this.selectedFile = null;\n      this.uploadedFile = null;\n      this.errorMessage = '';\n      this.$refs.fileInput.value = '';\n      this.$emit('file-removed');\n    },\n    \n    replaceFile() {\n      this.uploadedFile = null;\n      this.triggerFileInput();\n    },\n    \n    getFileIcon(mimeType) {\n      if (mimeType.startsWith('image/')) {\n        return 'fas fa-image text-primary';\n      } else if (mimeType === 'application/pdf') {\n        return 'fas fa-file-pdf text-danger';\n      } else if (mimeType.includes('word')) {\n        return 'fas fa-file-word text-primary';\n      } else {\n        return 'fas fa-file text-secondary';\n      }\n    },\n    \n    formatFileSize(bytes) {\n      if (bytes === 0) return '0 Bytes';\n      const k = 1024;\n      const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n      const i = Math.floor(Math.log(bytes) / Math.log(k));\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    }\n  }\n};\n</script>\n\n<style scoped>\n.file-upload-component {\n  margin-bottom: 1rem;\n}\n\n.file-input-wrapper {\n  position: relative;\n}\n\n.file-input {\n  display: none;\n}\n\n.file-input-display {\n  border: 2px dashed #dee2e6;\n  border-radius: 0.375rem;\n  padding: 1.5rem;\n  text-align: center;\n  cursor: pointer;\n  transition: all 0.3s ease;\n  background-color: #f8f9fa;\n}\n\n.file-input-display:hover {\n  border-color: #0d6efd;\n  background-color: #e7f1ff;\n}\n\n.file-input-placeholder i {\n  font-size: 2rem;\n  color: #6c757d;\n  margin-bottom: 0.5rem;\n  display: block;\n}\n\n.file-selected,\n.file-uploaded {\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n  text-align: left;\n  background-color: white;\n  border: 1px solid #dee2e6;\n  border-radius: 0.375rem;\n  padding: 1rem;\n}\n\n.file-selected i,\n.file-uploaded i {\n  font-size: 1.5rem;\n}\n\n.file-info {\n  flex: 1;\n}\n\n.file-name {\n  font-weight: 500;\n  display: block;\n}\n\n.file-size {\n  font-size: 0.875rem;\n}\n\n.upload-progress {\n  margin-top: 0.5rem;\n}\n\n.progress {\n  height: 0.5rem;\n  background-color: #e9ecef;\n  border-radius: 0.25rem;\n  overflow: hidden;\n}\n\n.progress-bar {\n  height: 100%;\n  background-color: #0d6efd;\n  transition: width 0.3s ease;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}