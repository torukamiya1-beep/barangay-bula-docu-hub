{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport adminAuthService from '@/services/adminAuthService';\nimport { validators, clearFieldError } from '@/utils/validation';\nexport default {\n  name: 'AdminRegistration',\n  data() {\n    return {\n      currentStep: 1,\n      loading: false,\n      resendLoading: false,\n      resendCooldown: 0,\n      showPassword: false,\n      errorMessage: '',\n      successMessage: '',\n      // Account form data (Step 1)\n      accountForm: {\n        username: '',\n        email: '',\n        role: '',\n        password: '',\n        confirmPassword: ''\n      },\n      // Profile form data (Step 2)\n      profileForm: {\n        first_name: '',\n        middle_name: '',\n        last_name: '',\n        suffix: '',\n        employee_id: '',\n        phone_number: '',\n        position: '',\n        department: '',\n        hire_date: ''\n      },\n      // Verification form data (Step 3)\n      verificationForm: {\n        otp: ''\n      },\n      // Form errors\n      errors: {},\n      // Store account ID for profile completion\n      accountId: null\n    };\n  },\n  mounted() {\n    console.log('AdminRegistration component mounted');\n\n    // Check if admin is already logged in\n    try {\n      if (adminAuthService && typeof adminAuthService.isLoggedIn === 'function' && adminAuthService.isLoggedIn()) {\n        this.$router.push('/admin/dashboard');\n      }\n    } catch (error) {\n      console.warn('Admin auth check failed:', error);\n    }\n  },\n  methods: {\n    // Validate individual field\n    validateField(fieldName) {\n      let error = null;\n      let value;\n\n      // Determine which form the field belongs to\n      if (fieldName in this.accountForm) {\n        value = this.accountForm[fieldName];\n      } else if (fieldName in this.profileForm) {\n        value = this.profileForm[fieldName];\n      } else if (fieldName in this.verificationForm) {\n        value = this.verificationForm[fieldName];\n      }\n      switch (fieldName) {\n        case 'username':\n          error = validators.required(value, 'Username') || validators.minLength(value, 3, 'Username') || validators.maxLength(value, 50, 'Username');\n          break;\n        case 'email':\n          error = validators.required(value, 'Email') || validators.email(value);\n          break;\n        case 'role':\n          error = validators.required(value, 'Role');\n          break;\n        case 'password':\n          error = validators.required(value, 'Password') || validators.password(value);\n          break;\n        case 'confirmPassword':\n          error = validators.required(value, 'Confirm Password') || validators.passwordMatch(value, this.accountForm.password);\n          break;\n        case 'first_name':\n          error = validators.required(value, 'First Name') || validators.maxLength(value, 100, 'First Name');\n          break;\n        case 'last_name':\n          error = validators.required(value, 'Last Name') || validators.maxLength(value, 100, 'Last Name');\n          break;\n        case 'phone_number':\n          error = validators.required(value, 'Phone Number') || validators.phone(value);\n          break;\n        case 'otp':\n          error = validators.required(value, 'Verification Code') || validators.exactLength(value, 6, 'Verification Code');\n          break;\n      }\n      if (error) {\n        this.errors = {\n          ...this.errors,\n          [fieldName]: error\n        };\n      } else {\n        this.clearFieldError(fieldName);\n      }\n      return !error;\n    },\n    // Clear field error\n    clearFieldError(fieldName) {\n      this.errors = clearFieldError(this.errors, fieldName);\n    },\n    // Clear all messages\n    clearMessages() {\n      this.errorMessage = '';\n      this.successMessage = '';\n    },\n    // Handle phone number input to restrict to digits only\n    handlePhoneInput(event) {\n      const value = event.target.value;\n      // Remove any non-digit characters\n      const digitsOnly = value.replace(/\\D/g, '');\n      // Limit to 11 digits\n      const limitedValue = digitsOnly.substring(0, 11);\n      this.profileForm.phone_number = limitedValue;\n      this.clearFieldError('phone_number');\n    },\n    // Submit account form (Step 1)\n    async submitAccountForm() {\n      this.clearMessages();\n\n      // Validate account form fields\n      const fieldsToValidate = ['username', 'email', 'role', 'password', 'confirmPassword'];\n      let isValid = true;\n      fieldsToValidate.forEach(field => {\n        if (!this.validateField(field)) {\n          isValid = false;\n        }\n      });\n      if (!isValid) {\n        this.errorMessage = 'Please fill in all required fields correctly';\n        return;\n      }\n      this.loading = true;\n      try {\n        const response = await adminAuthService.registerAccount({\n          username: this.accountForm.username,\n          email: this.accountForm.email,\n          role: this.accountForm.role,\n          password: this.accountForm.password,\n          confirmPassword: this.accountForm.confirmPassword\n        });\n        if (response.success) {\n          this.accountId = response.data.accountId;\n          this.currentStep = 2;\n          this.successMessage = 'Account created successfully! Please complete your profile.';\n        }\n      } catch (error) {\n        const errorData = adminAuthService.parseError(error);\n        this.errorMessage = errorData.message;\n\n        // Handle field-specific errors\n        if (errorData.errors && errorData.errors.length > 0) {\n          errorData.errors.forEach(err => {\n            if (err.field) {\n              this.errors = {\n                ...this.errors,\n                [err.field]: err.message\n              };\n            }\n          });\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    // Submit profile form (Step 2)\n    async submitProfileForm() {\n      this.clearMessages();\n\n      // Validate profile form fields\n      const fieldsToValidate = ['first_name', 'last_name', 'phone_number'];\n      let isValid = true;\n      fieldsToValidate.forEach(field => {\n        if (!this.validateField(field)) {\n          isValid = false;\n        }\n      });\n      if (!isValid) {\n        this.errorMessage = 'Please fill in all required fields correctly';\n        return;\n      }\n      this.loading = true;\n      try {\n        const response = await adminAuthService.completeRegistration(this.accountId, {\n          email: this.accountForm.email,\n          // Include email from step 1\n          first_name: this.profileForm.first_name,\n          middle_name: this.profileForm.middle_name,\n          last_name: this.profileForm.last_name,\n          suffix: this.profileForm.suffix,\n          employee_id: this.profileForm.employee_id,\n          phone_number: this.profileForm.phone_number,\n          position: this.profileForm.position,\n          department: this.profileForm.department,\n          hire_date: this.profileForm.hire_date\n        });\n        if (response.success) {\n          // Send OTP for email verification\n          await this.sendVerificationOTP();\n          this.currentStep = 3;\n          this.successMessage = 'Profile completed! Please verify your email address.';\n        }\n      } catch (error) {\n        const errorData = adminAuthService.parseError(error);\n        this.errorMessage = errorData.message;\n\n        // Handle field-specific errors\n        if (errorData.errors && errorData.errors.length > 0) {\n          errorData.errors.forEach(err => {\n            if (err.field) {\n              this.errors = {\n                ...this.errors,\n                [err.field]: err.message\n              };\n            }\n          });\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    // Send verification OTP\n    async sendVerificationOTP() {\n      try {\n        await adminAuthService.sendOTP(this.accountForm.email, 'registration', this.profileForm.first_name);\n      } catch (error) {\n        console.error('Failed to send OTP:', error);\n        // Don't throw error here as profile was already saved\n      }\n    },\n    // Submit verification form (Step 3)\n    async submitVerificationForm() {\n      this.clearMessages();\n      if (!this.validateField('otp')) {\n        this.errorMessage = 'Please enter a valid verification code';\n        return;\n      }\n      this.loading = true;\n      try {\n        const response = await adminAuthService.verifyEmail(this.accountForm.email, this.verificationForm.otp);\n        if (response.success) {\n          this.currentStep = 4;\n          this.successMessage = 'Email verified successfully!';\n        }\n      } catch (error) {\n        const errorData = adminAuthService.parseError(error);\n        this.errorMessage = errorData.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    // Resend verification code\n    async resendVerificationCode() {\n      if (this.resendCooldown > 0) return;\n      this.resendLoading = true;\n      try {\n        await this.sendVerificationOTP();\n        this.successMessage = 'Verification code sent successfully!';\n        this.startResendCooldown();\n      } catch (error) {\n        const errorData = adminAuthService.parseError(error);\n        this.errorMessage = errorData.message || 'Failed to resend verification code';\n      } finally {\n        this.resendLoading = false;\n      }\n    },\n    // Start resend cooldown\n    startResendCooldown() {\n      this.resendCooldown = 60;\n      const interval = setInterval(() => {\n        this.resendCooldown--;\n        if (this.resendCooldown <= 0) {\n          clearInterval(interval);\n        }\n      }, 1000);\n    },\n    // Go to previous step\n    goToPreviousStep() {\n      if (this.currentStep > 1) {\n        this.currentStep--;\n        this.clearMessages();\n      }\n    },\n    // Go to login page\n    goToLogin() {\n      this.$router.push('/admin/login?registered=true');\n    }\n  }\n};","map":{"version":3,"names":["adminAuthService","validators","clearFieldError","name","data","currentStep","loading","resendLoading","resendCooldown","showPassword","errorMessage","successMessage","accountForm","username","email","role","password","confirmPassword","profileForm","first_name","middle_name","last_name","suffix","employee_id","phone_number","position","department","hire_date","verificationForm","otp","errors","accountId","mounted","console","log","isLoggedIn","$router","push","error","warn","methods","validateField","fieldName","value","required","minLength","maxLength","passwordMatch","phone","exactLength","clearMessages","handlePhoneInput","event","target","digitsOnly","replace","limitedValue","substring","submitAccountForm","fieldsToValidate","isValid","forEach","field","response","registerAccount","success","errorData","parseError","message","length","err","submitProfileForm","completeRegistration","sendVerificationOTP","sendOTP","submitVerificationForm","verifyEmail","resendVerificationCode","startResendCooldown","interval","setInterval","clearInterval","goToPreviousStep","goToLogin"],"sources":["D:\\brgy_docu_hub\\BOSFDR\\src\\components\\admin\\AdminRegistration.vue"],"sourcesContent":["<template>\n  <div class=\"admin-registration\">\n    <div class=\"container-fluid min-vh-100 d-flex align-items-center justify-content-center bg-light\">\n      <div class=\"row w-100 justify-content-center\">\n        <div class=\"col-12 col-md-8 col-lg-6 col-xl-5\">\n          <div class=\"card shadow-lg border-0\">\n            <div class=\"card-header bg-success text-white text-center py-4\">\n              <h3 class=\"mb-0\">\n                <i class=\"fas fa-user-plus me-2\"></i>\n                Admin Registration\n              </h3>\n              <p class=\"mb-0 mt-2\">Barangay Bula Management System</p>\n            </div>\n            \n            <div class=\"card-body p-4\">\n              <!-- Registration Steps Indicator -->\n              <div class=\"row mb-4\">\n                <div class=\"col-12\">\n                  <div class=\"d-flex justify-content-between align-items-center\">\n                    <div class=\"step-indicator\" :class=\"{ active: currentStep >= 1, completed: currentStep > 1 }\">\n                      <div class=\"step-number\">1</div>\n                      <div class=\"step-label\">Account</div>\n                    </div>\n                    <div class=\"step-line\" :class=\"{ active: currentStep > 1 }\"></div>\n                    <div class=\"step-indicator\" :class=\"{ active: currentStep >= 2, completed: currentStep > 2 }\">\n                      <div class=\"step-number\">2</div>\n                      <div class=\"step-label\">Profile</div>\n                    </div>\n                    <div class=\"step-line\" :class=\"{ active: currentStep > 2 }\"></div>\n                    <div class=\"step-indicator\" :class=\"{ active: currentStep >= 3, completed: currentStep > 3 }\">\n                      <div class=\"step-number\">3</div>\n                      <div class=\"step-label\">Verify</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <!-- Step 1: Account Creation -->\n              <div v-if=\"currentStep === 1\" class=\"step-content\">\n                <h5 class=\"mb-3\">Create Admin Account</h5>\n                <form @submit.prevent=\"submitAccountForm\">\n                  <div class=\"mb-3\">\n                    <label for=\"username\" class=\"form-label\">Username</label>\n                    <input\n                      type=\"text\"\n                      class=\"form-control\"\n                      :class=\"{ 'is-invalid': errors.username }\"\n                      id=\"username\"\n                      v-model=\"accountForm.username\"\n                      @blur=\"validateField('username')\"\n                      @input=\"clearFieldError('username')\"\n                      placeholder=\"Enter your username\"\n                      required\n                    >\n                    <div v-if=\"errors.username\" class=\"invalid-feedback\">\n                      {{ errors.username }}\n                    </div>\n                  </div>\n\n                  <div class=\"mb-3\">\n                    <label for=\"email\" class=\"form-label\">Email Address</label>\n                    <input\n                      type=\"email\"\n                      class=\"form-control\"\n                      :class=\"{ 'is-invalid': errors.email }\"\n                      id=\"email\"\n                      v-model=\"accountForm.email\"\n                      @blur=\"validateField('email')\"\n                      @input=\"clearFieldError('email')\"\n                      placeholder=\"Enter your email address\"\n                      required\n                    >\n                    <div v-if=\"errors.email\" class=\"invalid-feedback\">\n                      {{ errors.email }}\n                    </div>\n                  </div>\n\n                  <div class=\"mb-3\">\n                    <label for=\"role\" class=\"form-label\">Role</label>\n                    <select\n                      class=\"form-select\"\n                      :class=\"{ 'is-invalid': errors.role }\"\n                      id=\"role\"\n                      v-model=\"accountForm.role\"\n                      @change=\"clearFieldError('role')\"\n                      required\n                    >\n                      <option value=\"\">Select Role</option>\n                      <option value=\"admin\">System Administrator</option>\n                      <option value=\"employee\">Barangay Employee</option>\n                      <option value=\"staff\">Support Staff</option>\n                    </select>\n                    <div v-if=\"errors.role\" class=\"invalid-feedback\">\n                      {{ errors.role }}\n                    </div>\n                    <div class=\"form-text\">\n                      Choose the appropriate role for this admin account.\n                    </div>\n                  </div>\n\n                  <div class=\"mb-3\">\n                    <label for=\"password\" class=\"form-label\">Password</label>\n                    <div class=\"input-group\">\n                      <input\n                        :type=\"showPassword ? 'text' : 'password'\"\n                        class=\"form-control\"\n                        :class=\"{ 'is-invalid': errors.password }\"\n                        id=\"password\"\n                        v-model=\"accountForm.password\"\n                        @blur=\"validateField('password')\"\n                        @input=\"clearFieldError('password')\"\n                        placeholder=\"Enter your password\"\n                        required\n                      >\n                      <button\n                        type=\"button\"\n                        class=\"btn btn-outline-secondary\"\n                        @click=\"showPassword = !showPassword\"\n                      >\n                        <i :class=\"showPassword ? 'fas fa-eye-slash' : 'fas fa-eye'\"></i>\n                      </button>\n                    </div>\n                    <div v-if=\"errors.password\" class=\"invalid-feedback d-block\">\n                      {{ errors.password }}\n                    </div>\n                    <div class=\"form-text\">\n                      Password must be at least 8 characters with uppercase, lowercase, and number.\n                    </div>\n                  </div>\n\n                  <div class=\"mb-4\">\n                    <label for=\"confirmPassword\" class=\"form-label\">Confirm Password</label>\n                    <input\n                      type=\"password\"\n                      class=\"form-control\"\n                      :class=\"{ 'is-invalid': errors.confirmPassword }\"\n                      id=\"confirmPassword\"\n                      v-model=\"accountForm.confirmPassword\"\n                      @blur=\"validateField('confirmPassword')\"\n                      @input=\"clearFieldError('confirmPassword')\"\n                      placeholder=\"Confirm your password\"\n                      required\n                    >\n                    <div v-if=\"errors.confirmPassword\" class=\"invalid-feedback\">\n                      {{ errors.confirmPassword }}\n                    </div>\n                  </div>\n\n                  <div class=\"d-grid gap-2\">\n                    <button\n                      type=\"submit\"\n                      class=\"btn btn-success\"\n                      :disabled=\"loading\"\n                    >\n                      <span v-if=\"loading\" class=\"spinner-border spinner-border-sm me-2\"></span>\n                      {{ loading ? 'Creating Account...' : 'Create Account' }}\n                    </button>\n                  </div>\n                </form>\n              </div>\n\n              <!-- Step 2: Profile Information -->\n              <div v-if=\"currentStep === 2\" class=\"step-content\">\n                <h5 class=\"mb-3\">Complete Your Profile</h5>\n                <form @submit.prevent=\"submitProfileForm\">\n                  <!-- Personal Information -->\n                  <div class=\"row\">\n                    <div class=\"col-md-6 mb-3\">\n                      <label for=\"firstName\" class=\"form-label\">First Name</label>\n                      <input\n                        type=\"text\"\n                        class=\"form-control\"\n                        :class=\"{ 'is-invalid': errors.first_name }\"\n                        id=\"firstName\"\n                        v-model=\"profileForm.first_name\"\n                        @blur=\"validateField('first_name')\"\n                        @input=\"clearFieldError('first_name')\"\n                        required\n                      >\n                      <div v-if=\"errors.first_name\" class=\"invalid-feedback\">\n                        {{ errors.first_name }}\n                      </div>\n                    </div>\n                    <div class=\"col-md-6 mb-3\">\n                      <label for=\"lastName\" class=\"form-label\">Last Name</label>\n                      <input\n                        type=\"text\"\n                        class=\"form-control\"\n                        :class=\"{ 'is-invalid': errors.last_name }\"\n                        id=\"lastName\"\n                        v-model=\"profileForm.last_name\"\n                        @blur=\"validateField('last_name')\"\n                        @input=\"clearFieldError('last_name')\"\n                        required\n                      >\n                      <div v-if=\"errors.last_name\" class=\"invalid-feedback\">\n                        {{ errors.last_name }}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div class=\"row\">\n                    <div class=\"col-md-6 mb-3\">\n                      <label for=\"middleName\" class=\"form-label\">Middle Name (Optional)</label>\n                      <input\n                        type=\"text\"\n                        class=\"form-control\"\n                        id=\"middleName\"\n                        v-model=\"profileForm.middle_name\"\n                      >\n                    </div>\n                    <div class=\"col-md-6 mb-3\">\n                      <label for=\"suffix\" class=\"form-label\">Suffix (Optional)</label>\n                      <input\n                        type=\"text\"\n                        class=\"form-control\"\n                        id=\"suffix\"\n                        v-model=\"profileForm.suffix\"\n                        placeholder=\"Jr., Sr., III, etc.\"\n                      >\n                    </div>\n                  </div>\n\n                  <div class=\"row\">\n                    <div class=\"col-md-6 mb-3\">\n                      <label for=\"employeeId\" class=\"form-label\">Employee ID (Optional)</label>\n                      <input\n                        type=\"text\"\n                        class=\"form-control\"\n                        id=\"employeeId\"\n                        v-model=\"profileForm.employee_id\"\n                        placeholder=\"Enter employee ID\"\n                      >\n                    </div>\n                    <div class=\"col-md-6 mb-3\">\n                      <label for=\"phoneNumber\" class=\"form-label\">Phone Number</label>\n                      <input\n                        type=\"tel\"\n                        class=\"form-control\"\n                        :class=\"{ 'is-invalid': errors.phone_number }\"\n                        id=\"phoneNumber\"\n                        v-model=\"profileForm.phone_number\"\n                        @blur=\"validateField('phone_number')\"\n                        @input=\"handlePhoneInput\"\n                        placeholder=\"09123456789\"\n                        maxlength=\"11\"\n                        pattern=\"[0-9]*\"\n                        required\n                      >\n                      <div v-if=\"errors.phone_number\" class=\"invalid-feedback\">\n                        {{ errors.phone_number }}\n                      </div>\n                    </div>\n                  </div>\n\n                  <!-- Work Information -->\n                  <h6 class=\"mt-4 mb-3\">Work Information</h6>\n                  <div class=\"row\">\n                    <div class=\"col-md-6 mb-3\">\n                      <label for=\"position\" class=\"form-label\">Position</label>\n                      <input\n                        type=\"text\"\n                        class=\"form-control\"\n                        id=\"position\"\n                        v-model=\"profileForm.position\"\n                        placeholder=\"Enter your position\"\n                      >\n                    </div>\n                    <div class=\"col-md-6 mb-3\">\n                      <label for=\"department\" class=\"form-label\">Department</label>\n                      <input\n                        type=\"text\"\n                        class=\"form-control\"\n                        id=\"department\"\n                        v-model=\"profileForm.department\"\n                        placeholder=\"Enter your department\"\n                      >\n                    </div>\n                  </div>\n\n                  <div class=\"row\">\n                    <div class=\"col-md-6 mb-3\">\n                      <label for=\"hireDate\" class=\"form-label\">Hire Date (Optional)</label>\n                      <input\n                        type=\"date\"\n                        class=\"form-control\"\n                        id=\"hireDate\"\n                        v-model=\"profileForm.hire_date\"\n                      >\n                    </div>\n                  </div>\n\n                  <div class=\"d-grid gap-2 d-md-flex justify-content-md-between\">\n                    <button\n                      type=\"button\"\n                      class=\"btn btn-outline-secondary\"\n                      @click=\"goToPreviousStep\"\n                    >\n                      <i class=\"fas fa-arrow-left me-2\"></i>\n                      Back\n                    </button>\n                    <button\n                      type=\"submit\"\n                      class=\"btn btn-success\"\n                      :disabled=\"loading\"\n                    >\n                      <span v-if=\"loading\" class=\"spinner-border spinner-border-sm me-2\"></span>\n                      {{ loading ? 'Saving Profile...' : 'Complete Registration' }}\n                    </button>\n                  </div>\n                </form>\n              </div>\n\n              <!-- Step 3: Email Verification -->\n              <div v-if=\"currentStep === 3\" class=\"step-content\">\n                <div class=\"text-center\">\n                  <div class=\"mb-4\">\n                    <i class=\"fas fa-envelope-open-text text-success\" style=\"font-size: 3rem;\"></i>\n                  </div>\n                  <h5 class=\"mb-3\">Verify Your Email</h5>\n                  <p class=\"text-muted mb-4\">\n                    We've sent a 6-digit verification code to <strong>{{ accountForm.email }}</strong>.\n                    Please check your email and enter the code below to complete your registration.\n                  </p>\n                </div>\n\n                <form @submit.prevent=\"submitVerificationForm\">\n                  <div class=\"mb-3\">\n                    <label for=\"otp\" class=\"form-label\">Verification Code</label>\n                    <input\n                      type=\"text\"\n                      class=\"form-control text-center\"\n                      :class=\"{ 'is-invalid': errors.otp }\"\n                      id=\"otp\"\n                      v-model=\"verificationForm.otp\"\n                      @input=\"clearFieldError('otp')\"\n                      placeholder=\"Enter 6-digit code\"\n                      maxlength=\"6\"\n                      required\n                    >\n                    <div v-if=\"errors.otp\" class=\"invalid-feedback\">\n                      {{ errors.otp }}\n                    </div>\n                  </div>\n\n                  <div class=\"d-grid gap-2 mb-3\">\n                    <button\n                      type=\"submit\"\n                      class=\"btn btn-success\"\n                      :disabled=\"loading\"\n                    >\n                      <span v-if=\"loading\" class=\"spinner-border spinner-border-sm me-2\"></span>\n                      {{ loading ? 'Verifying...' : 'Verify Email' }}\n                    </button>\n                  </div>\n\n                  <div class=\"text-center\">\n                    <p class=\"text-muted mb-2\">Didn't receive the code?</p>\n                    <button\n                      type=\"button\"\n                      class=\"btn btn-link p-0\"\n                      @click=\"resendVerificationCode\"\n                      :disabled=\"resendLoading || resendCooldown > 0\"\n                    >\n                      <span v-if=\"resendLoading\" class=\"spinner-border spinner-border-sm me-2\"></span>\n                      {{ resendCooldown > 0 ? `Resend in ${resendCooldown}s` : 'Resend Code' }}\n                    </button>\n                  </div>\n                </form>\n              </div>\n\n              <!-- Success Message -->\n              <div v-if=\"currentStep === 4\" class=\"step-content text-center\">\n                <div class=\"mb-4\">\n                  <i class=\"fas fa-check-circle text-success\" style=\"font-size: 4rem;\"></i>\n                </div>\n                <h4 class=\"text-success mb-3\">Registration Successful!</h4>\n                <p class=\"text-muted mb-4\">\n                  Your admin account has been created and verified successfully.\n                  You can now log in to access the admin panel.\n                </p>\n                <div class=\"d-grid gap-2\">\n                  <button\n                    type=\"button\"\n                    class=\"btn btn-success\"\n                    @click=\"goToLogin\"\n                  >\n                    <i class=\"fas fa-sign-in-alt me-2\"></i>\n                    Go to Login\n                  </button>\n                </div>\n              </div>\n\n              <!-- Error Alert -->\n              <div v-if=\"errorMessage\" class=\"alert alert-danger mt-3\" role=\"alert\">\n                <i class=\"fas fa-exclamation-triangle me-2\"></i>\n                {{ errorMessage }}\n              </div>\n\n              <!-- Success Alert -->\n              <div v-if=\"successMessage\" class=\"alert alert-success mt-3\" role=\"alert\">\n                <i class=\"fas fa-check-circle me-2\"></i>\n                {{ successMessage }}\n              </div>\n            </div>\n\n            <div class=\"card-footer text-center py-3\">\n              <p class=\"mb-0 text-muted\">\n                Already have an account?\n                <router-link to=\"/admin/login\" class=\"text-decoration-none\">\n                  Sign in here\n                </router-link>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport adminAuthService from '@/services/adminAuthService';\nimport { validators, clearFieldError } from '@/utils/validation';\n\nexport default {\n  name: 'AdminRegistration',\n  data() {\n    return {\n      currentStep: 1,\n      loading: false,\n      resendLoading: false,\n      resendCooldown: 0,\n      showPassword: false,\n      errorMessage: '',\n      successMessage: '',\n\n      // Account form data (Step 1)\n      accountForm: {\n        username: '',\n        email: '',\n        role: '',\n        password: '',\n        confirmPassword: ''\n      },\n\n      // Profile form data (Step 2)\n      profileForm: {\n        first_name: '',\n        middle_name: '',\n        last_name: '',\n        suffix: '',\n        employee_id: '',\n        phone_number: '',\n        position: '',\n        department: '',\n        hire_date: ''\n      },\n\n      // Verification form data (Step 3)\n      verificationForm: {\n        otp: ''\n      },\n\n      // Form errors\n      errors: {},\n\n      // Store account ID for profile completion\n      accountId: null\n    };\n  },\n\n  mounted() {\n    console.log('AdminRegistration component mounted');\n\n    // Check if admin is already logged in\n    try {\n      if (adminAuthService && typeof adminAuthService.isLoggedIn === 'function' && adminAuthService.isLoggedIn()) {\n        this.$router.push('/admin/dashboard');\n      }\n    } catch (error) {\n      console.warn('Admin auth check failed:', error);\n    }\n  },\n\n  methods: {\n    // Validate individual field\n    validateField(fieldName) {\n      let error = null;\n      let value;\n\n      // Determine which form the field belongs to\n      if (fieldName in this.accountForm) {\n        value = this.accountForm[fieldName];\n      } else if (fieldName in this.profileForm) {\n        value = this.profileForm[fieldName];\n      } else if (fieldName in this.verificationForm) {\n        value = this.verificationForm[fieldName];\n      }\n\n      switch (fieldName) {\n        case 'username':\n          error = validators.required(value, 'Username') ||\n                  validators.minLength(value, 3, 'Username') ||\n                  validators.maxLength(value, 50, 'Username');\n          break;\n        case 'email':\n          error = validators.required(value, 'Email') ||\n                  validators.email(value);\n          break;\n        case 'role':\n          error = validators.required(value, 'Role');\n          break;\n        case 'password':\n          error = validators.required(value, 'Password') ||\n                  validators.password(value);\n          break;\n        case 'confirmPassword':\n          error = validators.required(value, 'Confirm Password') ||\n                  validators.passwordMatch(value, this.accountForm.password);\n          break;\n        case 'first_name':\n          error = validators.required(value, 'First Name') ||\n                  validators.maxLength(value, 100, 'First Name');\n          break;\n        case 'last_name':\n          error = validators.required(value, 'Last Name') ||\n                  validators.maxLength(value, 100, 'Last Name');\n          break;\n        case 'phone_number':\n          error = validators.required(value, 'Phone Number') ||\n                  validators.phone(value);\n          break;\n        case 'otp':\n          error = validators.required(value, 'Verification Code') ||\n                  validators.exactLength(value, 6, 'Verification Code');\n          break;\n      }\n\n      if (error) {\n        this.errors = { ...this.errors, [fieldName]: error };\n      } else {\n        this.clearFieldError(fieldName);\n      }\n\n      return !error;\n    },\n\n    // Clear field error\n    clearFieldError(fieldName) {\n      this.errors = clearFieldError(this.errors, fieldName);\n    },\n\n    // Clear all messages\n    clearMessages() {\n      this.errorMessage = '';\n      this.successMessage = '';\n    },\n\n    // Handle phone number input to restrict to digits only\n    handlePhoneInput(event) {\n      const value = event.target.value;\n      // Remove any non-digit characters\n      const digitsOnly = value.replace(/\\D/g, '');\n      // Limit to 11 digits\n      const limitedValue = digitsOnly.substring(0, 11);\n      this.profileForm.phone_number = limitedValue;\n      this.clearFieldError('phone_number');\n    },\n\n    // Submit account form (Step 1)\n    async submitAccountForm() {\n      this.clearMessages();\n\n      // Validate account form fields\n      const fieldsToValidate = ['username', 'email', 'role', 'password', 'confirmPassword'];\n      let isValid = true;\n\n      fieldsToValidate.forEach(field => {\n        if (!this.validateField(field)) {\n          isValid = false;\n        }\n      });\n\n      if (!isValid) {\n        this.errorMessage = 'Please fill in all required fields correctly';\n        return;\n      }\n\n      this.loading = true;\n\n      try {\n        const response = await adminAuthService.registerAccount({\n          username: this.accountForm.username,\n          email: this.accountForm.email,\n          role: this.accountForm.role,\n          password: this.accountForm.password,\n          confirmPassword: this.accountForm.confirmPassword\n        });\n\n        if (response.success) {\n          this.accountId = response.data.accountId;\n          this.currentStep = 2;\n          this.successMessage = 'Account created successfully! Please complete your profile.';\n        }\n      } catch (error) {\n        const errorData = adminAuthService.parseError(error);\n        this.errorMessage = errorData.message;\n\n        // Handle field-specific errors\n        if (errorData.errors && errorData.errors.length > 0) {\n          errorData.errors.forEach(err => {\n            if (err.field) {\n              this.errors = { ...this.errors, [err.field]: err.message };\n            }\n          });\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    // Submit profile form (Step 2)\n    async submitProfileForm() {\n      this.clearMessages();\n\n      // Validate profile form fields\n      const fieldsToValidate = ['first_name', 'last_name', 'phone_number'];\n      let isValid = true;\n\n      fieldsToValidate.forEach(field => {\n        if (!this.validateField(field)) {\n          isValid = false;\n        }\n      });\n\n      if (!isValid) {\n        this.errorMessage = 'Please fill in all required fields correctly';\n        return;\n      }\n\n      this.loading = true;\n\n      try {\n        const response = await adminAuthService.completeRegistration(this.accountId, {\n          email: this.accountForm.email, // Include email from step 1\n          first_name: this.profileForm.first_name,\n          middle_name: this.profileForm.middle_name,\n          last_name: this.profileForm.last_name,\n          suffix: this.profileForm.suffix,\n          employee_id: this.profileForm.employee_id,\n          phone_number: this.profileForm.phone_number,\n          position: this.profileForm.position,\n          department: this.profileForm.department,\n          hire_date: this.profileForm.hire_date\n        });\n\n        if (response.success) {\n          // Send OTP for email verification\n          await this.sendVerificationOTP();\n          this.currentStep = 3;\n          this.successMessage = 'Profile completed! Please verify your email address.';\n        }\n      } catch (error) {\n        const errorData = adminAuthService.parseError(error);\n        this.errorMessage = errorData.message;\n\n        // Handle field-specific errors\n        if (errorData.errors && errorData.errors.length > 0) {\n          errorData.errors.forEach(err => {\n            if (err.field) {\n              this.errors = { ...this.errors, [err.field]: err.message };\n            }\n          });\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    // Send verification OTP\n    async sendVerificationOTP() {\n      try {\n        await adminAuthService.sendOTP(\n          this.accountForm.email,\n          'registration',\n          this.profileForm.first_name\n        );\n      } catch (error) {\n        console.error('Failed to send OTP:', error);\n        // Don't throw error here as profile was already saved\n      }\n    },\n\n    // Submit verification form (Step 3)\n    async submitVerificationForm() {\n      this.clearMessages();\n\n      if (!this.validateField('otp')) {\n        this.errorMessage = 'Please enter a valid verification code';\n        return;\n      }\n\n      this.loading = true;\n\n      try {\n        const response = await adminAuthService.verifyEmail(\n          this.accountForm.email,\n          this.verificationForm.otp\n        );\n\n        if (response.success) {\n          this.currentStep = 4;\n          this.successMessage = 'Email verified successfully!';\n        }\n      } catch (error) {\n        const errorData = adminAuthService.parseError(error);\n        this.errorMessage = errorData.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    // Resend verification code\n    async resendVerificationCode() {\n      if (this.resendCooldown > 0) return;\n\n      this.resendLoading = true;\n\n      try {\n        await this.sendVerificationOTP();\n        this.successMessage = 'Verification code sent successfully!';\n        this.startResendCooldown();\n      } catch (error) {\n        const errorData = adminAuthService.parseError(error);\n        this.errorMessage = errorData.message || 'Failed to resend verification code';\n      } finally {\n        this.resendLoading = false;\n      }\n    },\n\n    // Start resend cooldown\n    startResendCooldown() {\n      this.resendCooldown = 60;\n      const interval = setInterval(() => {\n        this.resendCooldown--;\n        if (this.resendCooldown <= 0) {\n          clearInterval(interval);\n        }\n      }, 1000);\n    },\n\n    // Go to previous step\n    goToPreviousStep() {\n      if (this.currentStep > 1) {\n        this.currentStep--;\n        this.clearMessages();\n      }\n    },\n\n    // Go to login page\n    goToLogin() {\n      this.$router.push('/admin/login?registered=true');\n    }\n  }\n};\n</script>\n\n<style scoped src=\"./css/adminRegistration.css\"></style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}