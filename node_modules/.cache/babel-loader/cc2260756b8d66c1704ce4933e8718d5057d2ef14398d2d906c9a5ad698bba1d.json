{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, computed, onMounted, onUnmounted, nextTick } from 'vue';\nimport { useRouter } from 'vue-router';\nimport ClientHeader from './ClientHeader.vue';\nimport DocumentServicesSection from './components/DocumentServicesSection.vue';\nimport { useUserData } from '@/composables/useUserData';\nimport { useDocumentTypes } from '@/composables/useDocumentTypes';\nimport { useUserStats } from '@/composables/useUserStats';\nimport { useUIState } from '@/composables/useUIState';\nimport { useNavigation } from '@/composables/useNavigation';\nimport { useErrorHandler } from '@/composables/useErrorHandler';\nexport default {\n  name: 'NewDocumentRequest',\n  components: {\n    ClientHeader,\n    DocumentServicesSection\n  },\n  setup() {\n    const router = useRouter();\n    const servicesSection = ref(null);\n\n    // Help Dialog State\n    const showHelpDialog = ref(false);\n\n    // Help Data\n    const helpData = ref({\n      requirements: [{\n        id: 1,\n        text: 'Valid government-issued ID (original and photocopy)'\n      }, {\n        id: 2,\n        text: 'Proof of residency (utility bill, lease agreement, etc.)'\n      }, {\n        id: 3,\n        text: 'Completed application form with accurate information'\n      }, {\n        id: 4,\n        text: 'Payment for processing fees'\n      }, {\n        id: 5,\n        text: 'Additional documents as specified for each document type'\n      }],\n      processSteps: [{\n        number: 1,\n        title: 'Choose Document Type',\n        description: 'Select the document you need from the available services'\n      }, {\n        number: 2,\n        title: 'Fill Application Form',\n        description: 'Complete all required fields with accurate information'\n      }, {\n        number: 3,\n        title: 'Upload Requirements',\n        description: 'Attach all necessary documents and supporting files'\n      }, {\n        number: 4,\n        title: 'Submit & Pay',\n        description: 'Review your application and proceed with payment'\n      }, {\n        number: 5,\n        title: 'Track Progress',\n        description: 'Monitor your request status and receive notifications'\n      }, {\n        number: 6,\n        title: 'Collect Document',\n        description: 'Pick up your processed document at the barangay office'\n      }]\n    });\n\n    // Composables\n    const {\n      userData,\n      loadUserData,\n      resetUserData\n    } = useUserData();\n    const {\n      documentTypes,\n      loading,\n      error,\n      loadDocumentTypes\n    } = useDocumentTypes();\n    const {\n      userStats,\n      loadUserStats\n    } = useUserStats();\n    const {\n      uiState,\n      toggleSidebar,\n      toggleUserDropdown\n    } = useUIState();\n    const {\n      navigateToRoute,\n      scrollToElement\n    } = useNavigation();\n    const {\n      handleError\n    } = useErrorHandler();\n\n    // Computed properties for header\n    const headerUserData = computed(() => {\n      console.log('=== NewDocumentRequest - userData from composable ===');\n      console.log('userData:', userData);\n      console.log('userData keys:', Object.keys(userData));\n      const result = {\n        userName: userData.userName,\n        userEmail: userData.userEmail,\n        userAvatar: userData.userAvatar,\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        middleName: userData.middleName,\n        suffix: userData.suffix,\n        profile: userData.profile\n      };\n      console.log('headerUserData result:', result);\n      return result;\n    });\n    const headerUIState = computed(() => ({\n      showUserDropdown: uiState.showUserDropdown,\n      sidebarCollapsed: uiState.sidebarCollapsed,\n      activeMenu: 'services'\n    }));\n\n    // Account status computed property\n    const isAccountActive = computed(() => {\n      const unifiedAuthService = require('@/services/unifiedAuthService').default;\n      const currentUser = unifiedAuthService.getCurrentUser();\n\n      // Check if account is verified (OTP/email verification)\n      const isAccountVerified = currentUser?.status === 'active';\n\n      // For document requests, we need to check residency verification status\n      // If user has pending residency verification, they should still be able to request documents\n      // Only block if account is not verified at all\n      return isAccountVerified;\n    });\n\n    // Residency verification status\n    const residencyStatus = ref({\n      status: 'loading',\n      canRequestDocuments: false,\n      message: 'Checking residency verification status...',\n      documents: []\n    });\n\n    // Load residency verification status\n    const loadResidencyStatus = async () => {\n      try {\n        const residencyVerificationService = require('@/services/residencyVerificationService').default;\n        const status = await residencyVerificationService.getResidencyVerificationStatus();\n        residencyStatus.value = status;\n      } catch (error) {\n        console.error('Error loading residency status:', error);\n        residencyStatus.value = {\n          status: 'error',\n          canRequestDocuments: false,\n          message: 'Unable to check residency verification status',\n          documents: []\n        };\n      }\n    };\n\n    // Refresh residency status (can be called manually)\n    const refreshingStatus = ref(false);\n    const refreshResidencyStatus = async () => {\n      if (refreshingStatus.value) return; // Prevent multiple simultaneous refreshes\n\n      console.log('Refreshing residency verification status...');\n      refreshingStatus.value = true;\n      try {\n        await loadResidencyStatus();\n        // Show a brief success message if status changed\n        if (residencyStatus.value.canRequestDocuments) {\n          console.log('âœ… Residency verification approved! You can now request documents.');\n        }\n      } finally {\n        refreshingStatus.value = false;\n      }\n    };\n\n    // Computed property for document request availability\n    const canRequestDocuments = computed(() => {\n      return isAccountActive.value && residencyStatus.value.canRequestDocuments;\n    });\n\n    // Computed property for status message\n    const statusMessage = computed(() => {\n      if (!isAccountActive.value) {\n        return 'Account verification required';\n      }\n      return residencyStatus.value.message;\n    });\n\n    // Set up periodic residency status check\n    let statusCheckInterval = null;\n\n    // Initialize data on mount\n    onMounted(async () => {\n      try {\n        await Promise.all([loadUserData(), loadDocumentTypes(), loadUserStats(), loadResidencyStatus()]);\n\n        // Set up periodic check for residency status updates (every 30 seconds)\n        // This helps catch status changes made by admins\n        statusCheckInterval = setInterval(async () => {\n          if (residencyStatus.value.status === 'pending') {\n            console.log('Checking for residency status updates...');\n            await loadResidencyStatus();\n          }\n        }, 30000); // Check every 30 seconds\n      } catch (error) {\n        handleError(error, 'Failed to initialize page data');\n      }\n    });\n\n    // Cleanup on unmount\n    onUnmounted(() => {\n      if (statusCheckInterval) {\n        clearInterval(statusCheckInterval);\n      }\n    });\n    // Event handlers\n    const handleSidebarToggle = () => {\n      toggleSidebar();\n    };\n    const handleUserDropdownToggle = () => {\n      toggleUserDropdown();\n    };\n    const handleMenuAction = action => {\n      navigateToRoute(action);\n    };\n    const handleLogout = async () => {\n      try {\n        // Import the auth service\n        const unifiedAuthService = await import('@/services/unifiedAuthService');\n\n        // Clear authentication data\n        unifiedAuthService.default.logout();\n\n        // Reset user data\n        resetUserData();\n\n        // Clear any cached data\n        localStorage.clear();\n        sessionStorage.clear();\n\n        // Redirect to welcome page\n        await router.push({\n          name: 'WelcomePage'\n        });\n\n        // Force page reload to ensure clean state\n        window.location.reload();\n      } catch (error) {\n        console.error('Logout error:', error);\n        handleError(error, 'Logout failed');\n\n        // Force redirect even if there's an error\n        window.location.href = '/login';\n      }\n    };\n    const handleSearch = query => {\n      // TODO: Implement search functionality\n      console.log('Search query:', query);\n    };\n\n    // Navigation methods\n    const scrollToServices = async () => {\n      await nextTick();\n      scrollToElement(servicesSection.value);\n    };\n    const goToMyRequests = () => {\n      router.push({\n        name: 'MyRequests'\n      });\n    };\n    const goToTransactions = () => {\n      router.push({\n        name: 'ClientTransactions'\n      });\n    };\n    const goToProfile = () => {\n      router.push({\n        name: 'ClientProfile'\n      });\n    };\n\n    // Help Dialog Functions\n    const openHelp = () => {\n      showHelpDialog.value = true;\n    };\n    const closeDialog = () => {\n      showHelpDialog.value = false;\n    };\n    const handleOpenFAQ = () => {\n      // TODO: Navigate to FAQ page or open FAQ modal\n      console.log('Opening FAQ...');\n    };\n    const handleContactSupport = () => {\n      // TODO: Implement contact support functionality\n      console.log('Contacting support...');\n    };\n    const contactSupport = () => {\n      handleContactSupport();\n    };\n    const selectDocumentType = documentType => {\n      if (!documentType.is_active) return;\n      const routeMap = {\n        'Barangay Clearance': 'BarangayClearanceRequest',\n        'Cedula': 'CedulaRequest'\n      };\n      const routeName = routeMap[documentType.type_name];\n      if (routeName) {\n        router.push({\n          name: routeName,\n          params: {\n            documentTypeId: documentType.id\n          }\n        });\n      }\n    };\n    return {\n      // Refs\n      servicesSection,\n      // Reactive data\n      userData,\n      documentTypes,\n      userStats,\n      uiState,\n      loading,\n      error,\n      // Computed\n      headerUserData,\n      headerUIState,\n      isAccountActive,\n      canRequestDocuments,\n      statusMessage,\n      // Residency status\n      residencyStatus,\n      refreshingStatus,\n      // Methods\n      handleSidebarToggle,\n      handleUserDropdownToggle,\n      handleMenuAction,\n      handleLogout,\n      handleError,\n      handleSearch,\n      scrollToServices,\n      goToMyRequests,\n      goToTransactions,\n      goToProfile,\n      openHelp,\n      closeDialog,\n      handleOpenFAQ,\n      handleContactSupport,\n      contactSupport,\n      selectDocumentType,\n      loadResidencyStatus,\n      refreshResidencyStatus,\n      // Help Dialog Data\n      showHelpDialog,\n      helpData,\n      loadDocumentTypes\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}