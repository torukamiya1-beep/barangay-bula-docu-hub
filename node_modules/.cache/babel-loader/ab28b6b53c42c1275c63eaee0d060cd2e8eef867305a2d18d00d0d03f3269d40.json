{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport api from '@/services/api';\nclass ActivityLogService {\n  /**\n   * Get activity logs with filtering and pagination (legacy endpoint)\n   * @param {Object} filters - Filter parameters\n   * @param {number} page - Page number\n   * @param {number} limit - Items per page\n   * @returns {Promise} Activity logs response\n   */\n  async getActivityLogs(filters = {}, page = 1, limit = 20) {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n        ...Object.fromEntries(Object.entries(filters).filter(([, value]) => value !== '' && value !== null && value !== undefined))\n      });\n      const response = await api.get(`/admin/activity-logs?${params}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get comprehensive activity logs from audit_logs table\n   * @param {Object} filters - Filter parameters\n   * @param {number} page - Page number\n   * @param {number} limit - Items per page\n   * @returns {Promise} Comprehensive activity logs response\n   */\n  async getComprehensiveActivityLogs(filters = {}, page = 1, limit = 50) {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n        ...Object.fromEntries(Object.entries(filters).filter(([, value]) => value !== '' && value !== null && value !== undefined))\n      });\n      const response = await api.get(`/admin/activity-logs/comprehensive?${params}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get recent activity (simplified version for dashboard)\n   * @param {number} limit - Number of recent activities to fetch\n   * @returns {Promise} Recent activity response\n   */\n  async getRecentActivity(limit = 10) {\n    try {\n      const response = await api.get(`/admin/dashboard/activity?limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get activity log details by ID\n   * @param {number} id - Activity log ID\n   * @returns {Promise} Activity log details\n   */\n  async getActivityLogDetails(id) {\n    try {\n      const response = await api.get(`/admin/activity-logs/${id}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Export activity logs as CSV\n   * @param {Object} filters - Filter parameters\n   * @returns {Promise} CSV export response\n   */\n  async exportActivityLogs(filters = {}) {\n    try {\n      const params = new URLSearchParams(Object.fromEntries(Object.entries(filters).filter(([, value]) => value !== '' && value !== null && value !== undefined)));\n      const response = await api.get(`/admin/activity-logs/export?${params}`, {\n        responseType: 'blob'\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get activity statistics\n   * @param {string} period - Time period (day, week, month)\n   * @returns {Promise} Activity statistics\n   */\n  async getActivityStats(period = 'week') {\n    try {\n      const response = await api.get(`/admin/activity-logs/stats?period=${period}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Transform request status history data to activity log format\n   * @param {Array} statusHistory - Raw status history data\n   * @returns {Array} Formatted activity logs\n   */\n  transformStatusHistoryToActivityLogs(statusHistory) {\n    return statusHistory.map(item => ({\n      id: item.id,\n      timestamp: item.changed_at,\n      user_name: item.changed_by_name || 'System',\n      user_role: this.getUserRole(item.changed_by_name),\n      user_type: this.getUserType(item.changed_by_name),\n      activity: this.generateActivityDescription(item),\n      type: 'status_change',\n      document_type: item.document_type,\n      status_change: item.new_status,\n      ip_address: item.ip_address || 'N/A',\n      details: this.generateDetailedDescription(item)\n    }));\n  }\n\n  /**\n   * Generate activity description from status history\n   * @param {Object} item - Status history item\n   * @returns {string} Activity description\n   */\n  generateActivityDescription(item) {\n    const action = item.old_status ? `changed status from \"${item.old_status}\" to \"${item.new_status}\"` : `set status to \"${item.new_status}\"`;\n    return `${item.changed_by_name || 'System'} ${action} for ${item.document_type} request ${item.request_number}`;\n  }\n\n  /**\n   * Generate detailed description\n   * @param {Object} item - Status history item\n   * @returns {string} Detailed description\n   */\n  generateDetailedDescription(item) {\n    let details = `Request: ${item.request_number}\\n`;\n    details += `Document Type: ${item.document_type}\\n`;\n    details += `Client: ${item.client_name || 'Unknown'}\\n`;\n    if (item.old_status) {\n      details += `Status Changed: ${item.old_status} â†’ ${item.new_status}\\n`;\n    } else {\n      details += `Status Set: ${item.new_status}\\n`;\n    }\n    if (item.change_reason) {\n      details += `Reason: ${item.change_reason}\\n`;\n    }\n    details += `Changed At: ${new Date(item.changed_at).toLocaleString()}\\n`;\n    details += `Changed By: ${item.changed_by_name || 'System'}`;\n    return details;\n  }\n\n  /**\n   * Determine user role from name\n   * @param {string} userName - User name\n   * @returns {string} User role\n   */\n  getUserRole(userName) {\n    if (!userName || userName === 'System') return 'System';\n    // This is a simplified approach - in a real system, you'd get this from the database\n    return 'Administrator'; // Default for now\n  }\n\n  /**\n   * Determine user type from name\n   * @param {string} userName - User name\n   * @returns {string} User type\n   */\n  getUserType(userName) {\n    if (!userName || userName === 'System') return 'system';\n    // This is a simplified approach - in a real system, you'd get this from the database\n    return 'admin'; // Default for now\n  }\n\n  /**\n   * Handle API errors\n   * @param {Error} error - API error\n   * @returns {Object} Formatted error\n   */\n  handleError(error) {\n    console.error('ActivityLogService error:', error);\n    if (error.response) {\n      return {\n        success: false,\n        message: error.response.data?.message || 'An error occurred',\n        errors: error.response.data?.errors || [],\n        status: error.response.status\n      };\n    }\n    return {\n      success: false,\n      message: error.message || 'Network error occurred',\n      errors: [],\n      status: 0\n    };\n  }\n\n  /**\n   * Parse error response\n   * @param {Error} error - Error object\n   * @returns {Object} Parsed error data\n   */\n  parseError(error) {\n    return this.handleError(error);\n  }\n}\nexport default new ActivityLogService();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}