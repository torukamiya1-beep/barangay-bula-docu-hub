{"ast":null,"code":"import { unfilterAverage, unfilterNone, unfilterPaeth, unfilterSub, unfilterUp } from './unfilter';\nconst uint16 = new Uint16Array([0x00ff]);\nconst uint8 = new Uint8Array(uint16.buffer);\nconst osIsLittleEndian = uint8[0] === 0xff;\nconst empty = new Uint8Array(0);\nexport function decodeInterlaceNull(params) {\n  const {\n    data,\n    width,\n    height,\n    channels,\n    depth\n  } = params;\n  const bytesPerPixel = Math.ceil(depth / 8) * channels;\n  const bytesPerLine = Math.ceil(depth / 8 * channels * width);\n  const newData = new Uint8Array(height * bytesPerLine);\n  let prevLine = empty;\n  let offset = 0;\n  let currentLine;\n  let newLine;\n  for (let i = 0; i < height; i++) {\n    currentLine = data.subarray(offset + 1, offset + 1 + bytesPerLine);\n    newLine = newData.subarray(i * bytesPerLine, (i + 1) * bytesPerLine);\n    switch (data[offset]) {\n      case 0:\n        unfilterNone(currentLine, newLine, bytesPerLine);\n        break;\n      case 1:\n        unfilterSub(currentLine, newLine, bytesPerLine, bytesPerPixel);\n        break;\n      case 2:\n        unfilterUp(currentLine, newLine, prevLine, bytesPerLine);\n        break;\n      case 3:\n        unfilterAverage(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel);\n        break;\n      case 4:\n        unfilterPaeth(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel);\n        break;\n      default:\n        throw new Error(`Unsupported filter: ${data[offset]}`);\n    }\n    prevLine = newLine;\n    offset += bytesPerLine + 1;\n  }\n  if (depth === 16) {\n    const uint16Data = new Uint16Array(newData.buffer);\n    if (osIsLittleEndian) {\n      for (let k = 0; k < uint16Data.length; k++) {\n        // PNG is always big endian. Swap the bytes.\n        uint16Data[k] = swap16(uint16Data[k]);\n      }\n    }\n    return uint16Data;\n  } else {\n    return newData;\n  }\n}\nfunction swap16(val) {\n  return (val & 0xff) << 8 | val >> 8 & 0xff;\n}","map":{"version":3,"names":["unfilterAverage","unfilterNone","unfilterPaeth","unfilterSub","unfilterUp","uint16","Uint16Array","uint8","Uint8Array","buffer","osIsLittleEndian","empty","decodeInterlaceNull","params","data","width","height","channels","depth","bytesPerPixel","Math","ceil","bytesPerLine","newData","prevLine","offset","currentLine","newLine","i","subarray","Error","uint16Data","k","length","swap16","val"],"sources":["../../src/helpers/decodeInterlaceNull.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}