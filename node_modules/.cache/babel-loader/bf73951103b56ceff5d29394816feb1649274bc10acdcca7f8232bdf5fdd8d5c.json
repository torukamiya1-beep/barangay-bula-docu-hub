{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport unifiedAuthService from '@/services/unifiedAuthService';\nimport { validators, clearFieldError } from '@/utils/validation';\nexport default {\n  name: 'UnifiedLogin',\n  data() {\n    return {\n      loading: false,\n      showPassword: false,\n      showStatusInfo: false,\n      errorMessage: '',\n      successMessage: '',\n      // Login form data\n      loginForm: {\n        username: '',\n        password: '',\n        rememberMe: false\n      },\n      // Form errors\n      errors: {}\n    };\n  },\n  mounted() {\n    // Check if user is already logged in\n    if (unifiedAuthService.isLoggedIn()) {\n      const user = unifiedAuthService.getCurrentUser();\n      const redirectUrl = unifiedAuthService.getRedirectUrl(user);\n      console.log('User already logged in, redirecting to:', redirectUrl);\n      try {\n        this.$router.push(redirectUrl);\n      } catch (error) {\n        console.error('Router push error in mounted:', error);\n        window.location.href = redirectUrl;\n      }\n    }\n\n    // Show success message if redirected from registration\n    if (this.$route.query.registered === 'true') {\n      this.successMessage = 'Registration completed successfully! Please log in.';\n    }\n  },\n  methods: {\n    // Validate individual field\n    validateField(fieldName) {\n      let error = null;\n      const value = this.loginForm[fieldName];\n      switch (fieldName) {\n        case 'username':\n          error = validators.required(value, 'Username');\n          break;\n        case 'password':\n          error = validators.required(value, 'Password');\n          break;\n      }\n      if (error) {\n        this.errors = {\n          ...this.errors,\n          [fieldName]: error\n        };\n      } else {\n        this.clearFieldError(fieldName);\n      }\n      return !error;\n    },\n    // Clear field error\n    clearFieldError(fieldName) {\n      this.errors = clearFieldError(this.errors, fieldName);\n    },\n    // Clear all messages\n    clearMessages() {\n      this.errorMessage = '';\n      this.successMessage = '';\n      this.showStatusInfo = false;\n    },\n    // Submit login form\n    async submitLogin() {\n      this.clearMessages();\n\n      // Validate fields\n      const fieldsToValidate = ['username', 'password'];\n      let isValid = true;\n      fieldsToValidate.forEach(field => {\n        if (!this.validateField(field)) {\n          isValid = false;\n        }\n      });\n      if (!isValid) {\n        this.errorMessage = 'Please fill in all required fields';\n        return;\n      }\n      this.loading = true;\n      try {\n        const response = await unifiedAuthService.login({\n          username: this.loginForm.username,\n          password: this.loginForm.password\n        });\n        if (response.success) {\n          this.successMessage = 'Login successful! Redirecting...';\n          console.log('Login successful, user:', response.user);\n          console.log('Redirect URL:', response.redirectUrl);\n\n          // Verify authentication state is set and redirect\n          setTimeout(() => {\n            console.log('Verifying auth state before redirect:');\n            console.log('- isLoggedIn:', unifiedAuthService.isLoggedIn());\n            console.log('- getCurrentUser:', unifiedAuthService.getCurrentUser());\n            console.log('- getUserType:', unifiedAuthService.getUserType());\n\n            // Force a small additional delay to ensure state is persisted\n            setTimeout(() => {\n              console.log('Final redirect attempt to:', response.redirectUrl);\n              try {\n                this.$router.push(response.redirectUrl);\n              } catch (error) {\n                console.error('Router push error:', error);\n                // Fallback to window.location\n                window.location.href = response.redirectUrl;\n              }\n            }, 100);\n          }, 1000);\n        }\n      } catch (error) {\n        const errorData = unifiedAuthService.parseError(error);\n        this.errorMessage = errorData.message;\n\n        // Show status info for specific error types\n        if (errorData.message.includes('pending') || errorData.message.includes('suspended') || errorData.message.includes('inactive')) {\n          this.showStatusInfo = true;\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    // Show forgot password (placeholder)\n    showForgotPassword() {\n      alert('Forgot password functionality will be implemented soon.');\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}