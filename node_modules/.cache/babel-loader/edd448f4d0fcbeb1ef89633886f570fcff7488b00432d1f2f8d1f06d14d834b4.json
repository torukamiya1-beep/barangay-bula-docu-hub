{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport DocumentViewer from './DocumentViewer.vue';\nimport residencyService from '@/services/residencyService';\nimport api from '@/services/api';\nexport default {\n  name: 'ResidencyDocumentsModal',\n  components: {\n    DocumentViewer\n  },\n  props: {\n    user: {\n      type: Object,\n      default: null\n    },\n    processing: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      documents: [],\n      loading: false,\n      error: null,\n      selectedDocument: null,\n      documentBlobUrls: {},\n      // Store blob URLs for thumbnails\n      isDestroyed: false // Track component lifecycle\n    };\n  },\n  watch: {\n    user: {\n      handler(newUser) {\n        if (newUser) {\n          this.loadDocuments();\n        }\n      },\n      immediate: true\n    }\n  },\n  computed: {\n    // Check if all documents are already approved\n    allDocumentsApproved() {\n      if (!this.documents || this.documents.length === 0) return false;\n      // Check if all documents are approved OR if user's residency verification status is approved\n      return this.documents.every(doc => doc.verification_status === 'approved') || this.user?.residency_verification_status === 'approved';\n    }\n  },\n  beforeUnmount() {\n    // Mark component as destroyed\n    this.isDestroyed = true;\n\n    // Clean up blob URLs to prevent memory leaks\n    Object.values(this.documentBlobUrls).forEach(url => {\n      URL.revokeObjectURL(url);\n    });\n  },\n  methods: {\n    async loadDocuments() {\n      if (!this.user || this.isDestroyed) return;\n      this.loading = true;\n      this.error = null;\n      this.documents = [];\n      try {\n        // Use the actual account ID, not the composite ID\n        const accountId = this.user.original_id || this.user.id;\n\n        // Extract numeric ID if it's in format like 'client_32'\n        const numericId = typeof accountId === 'string' && accountId.includes('_') ? accountId.split('_')[1] : accountId;\n        const response = await residencyService.getAccountDocuments(numericId);\n\n        // Check if component is still mounted before updating state\n        if (this.isDestroyed) return;\n        if (response.success) {\n          this.documents = response.data || [];\n          // Load blob URLs for image documents\n          await this.loadDocumentThumbnails();\n        } else {\n          throw new Error(response.message || 'Failed to load documents');\n        }\n      } catch (error) {\n        console.error('Failed to load residency documents:', error);\n\n        // Check if component is still mounted before updating state\n        if (!this.isDestroyed) {\n          this.error = error.message || 'Failed to load documents';\n        }\n      } finally {\n        // Check if component is still mounted before updating state\n        if (!this.isDestroyed) {\n          this.loading = false;\n        }\n      }\n    },\n    viewDocument(document) {\n      this.selectedDocument = document;\n    },\n    closeDocumentViewer() {\n      this.selectedDocument = null;\n    },\n    async loadDocumentThumbnails() {\n      // Load blob URLs for image documents\n      for (const document of this.documents) {\n        // Check if component is still mounted\n        if (this.isDestroyed) return;\n        if (this.isImageDocument(document)) {\n          try {\n            const response = await api.get(`/residency/documents/${document.id}/file`, {\n              responseType: 'blob'\n            });\n\n            // Check if component is still mounted before updating state\n            if (!this.isDestroyed) {\n              const blob = new Blob([response.data], {\n                type: document.mime_type\n              });\n              this.documentBlobUrls[document.id] = URL.createObjectURL(blob);\n            }\n          } catch (error) {\n            console.error(`Failed to load thumbnail for document ${document.id}:`, error);\n            // Don't set a blob URL, the template will show loading spinner\n          }\n        }\n      }\n    },\n    isImageDocument(document) {\n      const imageTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\n      return imageTypes.includes(document.mime_type?.toLowerCase());\n    },\n    getDocumentPreviewUrl(documentId) {\n      return residencyService.getDocumentFileUrl(documentId);\n    },\n    handleImageError(event) {\n      console.error('Image failed to load:', event.target.src);\n      // You could set a placeholder image here\n      event.target.style.display = 'none';\n    },\n    getDocumentIcon(type) {\n      const iconMap = {\n        'utility_bill': 'fas fa-file-invoice text-warning',\n        'barangay_certificate': 'fas fa-certificate text-success',\n        'valid_id': 'fas fa-id-card text-info',\n        'lease_contract': 'fas fa-file-contract text-primary',\n        'other': 'fas fa-file text-secondary'\n      };\n      return iconMap[type] || 'fas fa-file text-secondary';\n    },\n    formatDocumentType(type) {\n      return residencyService.formatDocumentType(type);\n    },\n    formatDocumentStatus(status) {\n      return residencyService.formatVerificationStatus(status);\n    },\n    getDocumentStatusBadgeClass(status) {\n      return residencyService.getStatusBadgeClass(status);\n    },\n    getStatusBadgeClass(status) {\n      const classes = {\n        'active': 'bg-success',\n        'inactive': 'bg-secondary',\n        'pending': 'bg-warning',\n        'suspended': 'bg-danger',\n        'pending_verification': 'bg-warning',\n        'pending_residency_verification': 'bg-info',\n        'residency_rejected': 'bg-danger',\n        'residency_approved': 'bg-success',\n        'no_residency_documents': 'bg-warning'\n      };\n      return classes[status] || 'bg-secondary';\n    },\n    formatStatus(status) {\n      return status?.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase()) || 'Unknown';\n    },\n    formatDate(dateString) {\n      return new Date(dateString).toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    formatFileSize(bytes) {\n      if (!bytes) return 'Unknown size';\n      const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n      const i = Math.floor(Math.log(bytes) / Math.log(1024));\n      return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}