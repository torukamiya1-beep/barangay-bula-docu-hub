{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport unifiedAuthService from '@/services/unifiedAuthService';\nimport { validators, clearFieldError } from '@/utils/validation';\nexport default {\n  name: 'UnifiedLogin',\n  data() {\n    return {\n      loading: false,\n      showPassword: false,\n      showStatusInfo: false,\n      errorMessage: '',\n      successMessage: '',\n      // Login form data\n      loginForm: {\n        username: '',\n        password: '',\n        rememberMe: false\n      },\n      // Form errors\n      errors: {}\n    };\n  },\n  mounted() {\n    // Check if user is already logged in\n    if (unifiedAuthService.isLoggedIn()) {\n      const user = unifiedAuthService.getCurrentUser();\n      const redirectUrl = unifiedAuthService.getRedirectUrl(user);\n      console.log('User already logged in, redirecting to:', redirectUrl);\n      try {\n        this.$router.push(redirectUrl);\n      } catch (error) {\n        console.error('Router push error in mounted:', error);\n        window.location.href = redirectUrl;\n      }\n    }\n\n    // Show success message if redirected from registration\n    if (this.$route.query.registered === 'true') {\n      this.successMessage = 'Registration completed successfully! Please log in.';\n    }\n  },\n  methods: {\n    // Validate individual field\n    validateField(fieldName) {\n      let error = null;\n      const value = this.loginForm[fieldName];\n      switch (fieldName) {\n        case 'username':\n          error = validators.required(value, 'Username');\n          break;\n        case 'password':\n          error = validators.required(value, 'Password');\n          break;\n      }\n      if (error) {\n        this.errors = {\n          ...this.errors,\n          [fieldName]: error\n        };\n      } else {\n        this.clearFieldError(fieldName);\n      }\n      return !error;\n    },\n    // Clear field error\n    clearFieldError(fieldName) {\n      this.errors = clearFieldError(this.errors, fieldName);\n    },\n    // Clear all messages\n    clearMessages() {\n      this.errorMessage = '';\n      this.successMessage = '';\n      this.showStatusInfo = false;\n    },\n    // Submit login form\n    async submitLogin() {\n      this.clearMessages();\n\n      // Validate fields\n      const fieldsToValidate = ['username', 'password'];\n      let isValid = true;\n      fieldsToValidate.forEach(field => {\n        if (!this.validateField(field)) {\n          isValid = false;\n        }\n      });\n      if (!isValid) {\n        this.errorMessage = 'Please fill in all required fields';\n        return;\n      }\n      this.loading = true;\n      try {\n        const response = await unifiedAuthService.login({\n          username: this.loginForm.username,\n          password: this.loginForm.password\n        });\n        if (response.success) {\n          this.successMessage = 'Login successful! Redirecting...';\n          console.log('Login successful, user:', response.user);\n          console.log('Redirect URL:', response.redirectUrl);\n\n          // Verify authentication state is set and redirect\n          setTimeout(() => {\n            console.log('Verifying auth state before redirect:');\n            console.log('- isLoggedIn:', unifiedAuthService.isLoggedIn());\n            console.log('- getCurrentUser:', unifiedAuthService.getCurrentUser());\n            console.log('- getUserType:', unifiedAuthService.getUserType());\n\n            // Force a small additional delay to ensure state is persisted\n            setTimeout(() => {\n              console.log('Final redirect attempt to:', response.redirectUrl);\n              try {\n                this.$router.push(response.redirectUrl);\n              } catch (error) {\n                console.error('Router push error:', error);\n                // Fallback to window.location\n                window.location.href = response.redirectUrl;\n              }\n            }, 100);\n          }, 1000);\n        }\n      } catch (error) {\n        const errorData = unifiedAuthService.parseError(error);\n        this.errorMessage = errorData.message;\n\n        // Show status info for specific error types\n        if (errorData.message.includes('pending') || errorData.message.includes('suspended') || errorData.message.includes('inactive')) {\n          this.showStatusInfo = true;\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    // Show forgot password (placeholder)\n    showForgotPassword() {\n      alert('Forgot password functionality will be implemented soon.');\n    }\n  }\n};","map":{"version":3,"names":["unifiedAuthService","validators","clearFieldError","name","data","loading","showPassword","showStatusInfo","errorMessage","successMessage","loginForm","username","password","rememberMe","errors","mounted","isLoggedIn","user","getCurrentUser","redirectUrl","getRedirectUrl","console","log","$router","push","error","window","location","href","$route","query","registered","methods","validateField","fieldName","value","required","clearMessages","submitLogin","fieldsToValidate","isValid","forEach","field","response","login","success","setTimeout","getUserType","errorData","parseError","message","includes","showForgotPassword","alert"],"sources":["D:\\brgy_docu_hub\\BOSFDR\\src\\components\\UnifiedLogin.vue"],"sourcesContent":["<template>\n  <div class=\"unified-login\">\n    <div class=\"container-fluid min-vh-100 d-flex align-items-center justify-content-center bg-light\">\n      <div class=\"row w-100 justify-content-center\">\n        <div class=\"col-12 col-md-6 col-lg-5 col-xl-4\">\n          <div class=\"card shadow-lg border-0\">\n            <!-- Header with Logo -->\n            <div class=\"card-header bg-primary text-white text-center py-4\">\n              <img\n                src=\"@/assets/icon-of-bula.jpg\"\n                alt=\"Barangay Bula Council official seal\"\n                class=\"logo mb-2\"\n              />\n              <h3 class=\"mb-0\">\n                Barangay Bula Document Hub\n              </h3>\n              <p class=\"mb-0 mt-2\">\n                <i class=\"fas fa-sign-in-alt me-2\"></i>\n                Login\n              </p>\n            </div>\n            \n            <div class=\"card-body p-4\">\n              <form @submit.prevent=\"submitLogin\">\n                <div class=\"mb-3\">\n                  <label for=\"username\" class=\"form-label\">Username</label>\n                  <div class=\"input-group\">\n                    <span class=\"input-group-text\">\n                      <i class=\"fas fa-user\"></i>\n                    </span>\n                    <input\n                      type=\"text\"\n                      class=\"form-control\"\n                      :class=\"{ 'is-invalid': errors.username }\"\n                      id=\"username\"\n                      v-model=\"loginForm.username\"\n                      @blur=\"validateField('username')\"\n                      @input=\"clearFieldError('username')\"\n                      placeholder=\"Enter your username\"\n                      required\n                      autocomplete=\"username\"\n                    >\n                  </div>\n                  <div v-if=\"errors.username\" class=\"invalid-feedback d-block\">\n                    {{ errors.username }}\n                  </div>\n                </div>\n\n                <div class=\"mb-4\">\n                  <label for=\"password\" class=\"form-label\">Password</label>\n                  <div class=\"input-group\">\n                    <span class=\"input-group-text\">\n                      <i class=\"fas fa-lock\"></i>\n                    </span>\n                    <input\n                      :type=\"showPassword ? 'text' : 'password'\"\n                      class=\"form-control\"\n                      :class=\"{ 'is-invalid': errors.password }\"\n                      id=\"password\"\n                      v-model=\"loginForm.password\"\n                      @blur=\"validateField('password')\"\n                      @input=\"clearFieldError('password')\"\n                      placeholder=\"Enter your password\"\n                      required\n                      autocomplete=\"current-password\"\n                    >\n                    <button\n                      type=\"button\"\n                      class=\"btn btn-outline-secondary\"\n                      @click=\"showPassword = !showPassword\"\n                      tabindex=\"-1\"\n                    >\n                      <i :class=\"showPassword ? 'fas fa-eye-slash' : 'fas fa-eye'\"></i>\n                    </button>\n                  </div>\n                  <div v-if=\"errors.password\" class=\"invalid-feedback d-block\">\n                    {{ errors.password }}\n                  </div>\n                </div>\n\n                <!-- Ill commenr this for now -->\n                <!-- <div class=\"mb-3\">\n                  <div class=\"form-check\">\n                    <input\n                      class=\"form-check-input\"\n                      type=\"checkbox\"\n                      id=\"rememberMe\"\n                      v-model=\"loginForm.rememberMe\"\n                    >\n                    <label class=\"form-check-label\" for=\"rememberMe\">\n                      Remember me\n                    </label>\n                  </div>\n                </div> -->\n\n                <div class=\"d-grid gap-2 mb-3\">\n                  <button\n                    type=\"submit\"\n                    class=\"btn btn-primary btn-lg\"\n                    :disabled=\"loading\"\n                  >\n                    <span v-if=\"loading\" class=\"spinner-border spinner-border-sm me-2\"></span>\n                    {{ loading ? 'Signing In...' : 'Sign In' }}\n                  </button>\n                </div>\n\n                <!-- <div class=\"text-center\">\n                  <a href=\"#\" class=\"text-decoration-none text-muted\" @click.prevent=\"showForgotPassword\">\n                    <i class=\"fas fa-key me-1\"></i>\n                    Forgot your password?\n                  </a>\n                </div> -->\n              </form>\n\n              <!-- Error Alert -->\n              <div v-if=\"errorMessage\" class=\"alert alert-danger mt-3\" role=\"alert\">\n                <i class=\"fas fa-exclamation-triangle me-2\"></i>\n                {{ errorMessage }}\n              </div>\n\n              <!-- Success Alert -->\n              <div v-if=\"successMessage\" class=\"alert alert-success mt-3\" role=\"alert\">\n                <i class=\"fas fa-check-circle me-2\"></i>\n                {{ successMessage }}\n              </div>\n            </div>\n\n            <div class=\"card-footer text-center py-3 bg-light\">\n              <p class=\"mb-0 text-muted\">\n                Don't have an account? \n                <router-link to=\"/client/register\" class=\"text-decoration-none\">\n                  Register Here\n                </router-link>\n              </p>\n            </div>\n          </div>\n\n          <!-- Account Status Info -->\n          <div v-if=\"showStatusInfo\" class=\"card mt-3 border-warning\">\n            <div class=\"card-body\">\n              <h6 class=\"card-title text-warning\">\n                <i class=\"fas fa-info-circle me-2\"></i>\n                Account Status Information\n              </h6>\n              <div class=\"small text-muted\">\n                <p class=\"mb-2\">\n                  <strong>Pending Verification:</strong> Complete your email verification to activate your account.\n                </p>\n                <p class=\"mb-2\">\n                  <strong>Suspended:</strong> Your account has been temporarily suspended. Contact the administrator.\n                </p>\n                <p class=\"mb-0\">\n                  <strong>Inactive:</strong> Your account is inactive. Contact the administrator for assistance.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport unifiedAuthService from '@/services/unifiedAuthService';\nimport { validators, clearFieldError } from '@/utils/validation';\n\nexport default {\n  name: 'UnifiedLogin',\n  data() {\n    return {\n      loading: false,\n      showPassword: false,\n      showStatusInfo: false,\n      errorMessage: '',\n      successMessage: '',\n      \n      // Login form data\n      loginForm: {\n        username: '',\n        password: '',\n        rememberMe: false\n      },\n      \n      // Form errors\n      errors: {}\n    };\n  },\n  \n  mounted() {\n    // Check if user is already logged in\n    if (unifiedAuthService.isLoggedIn()) {\n      const user = unifiedAuthService.getCurrentUser();\n      const redirectUrl = unifiedAuthService.getRedirectUrl(user);\n      console.log('User already logged in, redirecting to:', redirectUrl);\n      try {\n        this.$router.push(redirectUrl);\n      } catch (error) {\n        console.error('Router push error in mounted:', error);\n        window.location.href = redirectUrl;\n      }\n    }\n    \n    // Show success message if redirected from registration\n    if (this.$route.query.registered === 'true') {\n      this.successMessage = 'Registration completed successfully! Please log in.';\n    }\n  },\n  \n  methods: {\n    // Validate individual field\n    validateField(fieldName) {\n      let error = null;\n      const value = this.loginForm[fieldName];\n      \n      switch (fieldName) {\n        case 'username':\n          error = validators.required(value, 'Username');\n          break;\n        case 'password':\n          error = validators.required(value, 'Password');\n          break;\n      }\n      \n      if (error) {\n        this.errors = { ...this.errors, [fieldName]: error };\n      } else {\n        this.clearFieldError(fieldName);\n      }\n      \n      return !error;\n    },\n    \n    // Clear field error\n    clearFieldError(fieldName) {\n      this.errors = clearFieldError(this.errors, fieldName);\n    },\n    \n    // Clear all messages\n    clearMessages() {\n      this.errorMessage = '';\n      this.successMessage = '';\n      this.showStatusInfo = false;\n    },\n    \n    // Submit login form\n    async submitLogin() {\n      this.clearMessages();\n      \n      // Validate fields\n      const fieldsToValidate = ['username', 'password'];\n      let isValid = true;\n      \n      fieldsToValidate.forEach(field => {\n        if (!this.validateField(field)) {\n          isValid = false;\n        }\n      });\n      \n      if (!isValid) {\n        this.errorMessage = 'Please fill in all required fields';\n        return;\n      }\n      \n      this.loading = true;\n      \n      try {\n        const response = await unifiedAuthService.login({\n          username: this.loginForm.username,\n          password: this.loginForm.password\n        });\n        \n        if (response.success) {\n          this.successMessage = 'Login successful! Redirecting...';\n\n          console.log('Login successful, user:', response.user);\n          console.log('Redirect URL:', response.redirectUrl);\n\n          // Verify authentication state is set and redirect\n          setTimeout(() => {\n            console.log('Verifying auth state before redirect:');\n            console.log('- isLoggedIn:', unifiedAuthService.isLoggedIn());\n            console.log('- getCurrentUser:', unifiedAuthService.getCurrentUser());\n            console.log('- getUserType:', unifiedAuthService.getUserType());\n\n            // Force a small additional delay to ensure state is persisted\n            setTimeout(() => {\n              console.log('Final redirect attempt to:', response.redirectUrl);\n              try {\n                this.$router.push(response.redirectUrl);\n              } catch (error) {\n                console.error('Router push error:', error);\n                // Fallback to window.location\n                window.location.href = response.redirectUrl;\n              }\n            }, 100);\n          }, 1000);\n        }\n      } catch (error) {\n        const errorData = unifiedAuthService.parseError(error);\n        this.errorMessage = errorData.message;\n        \n        // Show status info for specific error types\n        if (errorData.message.includes('pending') || \n            errorData.message.includes('suspended') || \n            errorData.message.includes('inactive')) {\n          this.showStatusInfo = true;\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    // Show forgot password (placeholder)\n    showForgotPassword() {\n      alert('Forgot password functionality will be implemented soon.');\n    }\n  }\n};\n</script>\n\n<style scoped>\n.unified-login {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  min-height: 100vh;\n}\n\n.logo {\n  width: 60px;\n  height: 60px;\n  border-radius: 50%;\n  border: 2px solid rgba(255, 255, 255, 0.3);\n}\n\n.card {\n  border-radius: 15px;\n  overflow: hidden;\n}\n\n.card-header {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;\n}\n\n.btn-primary {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  border: none;\n  border-radius: 8px;\n  font-weight: 600;\n  transition: all 0.3s ease;\n}\n\n.btn-primary:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);\n}\n\n.form-control {\n  border-radius: 8px;\n  border: 1px solid #e1e5e9;\n  transition: all 0.3s ease;\n}\n\n.form-control:focus {\n  border-color: #667eea;\n  box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);\n}\n\n.input-group-text {\n  background-color: #f8f9fa;\n  border-color: #e1e5e9;\n  color: #6c757d;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}