{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\n// Form validation utilities\nexport const validators = {\n  // Required field validator\n  required: (value, fieldName = 'Field') => {\n    if (!value || typeof value === 'string' && value.trim() === '') {\n      return `${fieldName} is required`;\n    }\n    return null;\n  },\n  // Email validator\n  email: value => {\n    if (!value) return null;\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(value)) {\n      return 'Please enter a valid email address';\n    }\n    return null;\n  },\n  // Username validator\n  username: value => {\n    if (!value) return null;\n    if (value.length < 3 || value.length > 50) {\n      return 'Username must be between 3 and 50 characters';\n    }\n    if (!/^[a-zA-Z0-9_]+$/.test(value)) {\n      return 'Username can only contain letters, numbers, and underscores';\n    }\n    return null;\n  },\n  // Password validator\n  password: value => {\n    if (!value) return null;\n    if (value.length < 8) {\n      return 'Password must be at least 8 characters long';\n    }\n    if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/.test(value)) {\n      return 'Password must contain at least one uppercase letter, one lowercase letter, and one number';\n    }\n    return null;\n  },\n  // Confirm password validator\n  confirmPassword: (value, originalPassword) => {\n    if (!value) return null;\n    if (value !== originalPassword) {\n      return 'Passwords do not match';\n    }\n    return null;\n  },\n  // Phone number validator (Philippine format)\n  phoneNumber: value => {\n    if (!value) return null;\n    // Remove any spaces or special characters except digits\n    const cleanValue = value.replace(/\\s/g, '');\n    const phoneRegex = /^09\\d{9}$/;\n    if (!phoneRegex.test(cleanValue)) {\n      return 'Please enter a valid Philippine phone number (09XXXXXXXXX - 11 digits starting with 09)';\n    }\n    return null;\n  },\n  // Name validator\n  name: (value, fieldName = 'Name') => {\n    if (!value) return null;\n    if (value.length < 1 || value.length > 100) {\n      return `${fieldName} must be between 1 and 100 characters`;\n    }\n    if (!/^[a-zA-Z\\s\\-.]+$/.test(value)) {\n      return `${fieldName} can only contain letters, spaces, hyphens, and periods`;\n    }\n    return null;\n  },\n  // Date validator\n  date: (value, fieldName = 'Date') => {\n    if (!value) return null;\n    const date = new Date(value);\n    if (isNaN(date.getTime())) {\n      return `Please enter a valid ${fieldName.toLowerCase()}`;\n    }\n    return null;\n  },\n  // Birth date validator (must be in the past and reasonable age)\n  birthDate: value => {\n    if (!value) return null;\n    const date = new Date(value);\n    const today = new Date();\n    if (isNaN(date.getTime())) {\n      return 'Please enter a valid birth date';\n    }\n    if (date >= today) {\n      return 'Birth date must be in the past';\n    }\n    const age = today.getFullYear() - date.getFullYear();\n    if (age > 150) {\n      return 'Please enter a valid birth date';\n    }\n    if (age < 13) {\n      return 'You must be at least 13 years old to register';\n    }\n    return null;\n  },\n  // OTP validator\n  otp: value => {\n    if (!value) return null;\n    if (!/^\\d{4,10}$/.test(value)) {\n      return 'OTP must be a 4-10 digit number';\n    }\n    return null;\n  },\n  // Address field validator\n  address: (value, fieldName = 'Address') => {\n    if (!value) return null;\n    if (value.length < 1 || value.length > 100) {\n      return `${fieldName} must be between 1 and 100 characters`;\n    }\n    return null;\n  },\n  // Postal code validator\n  postalCode: value => {\n    if (!value) return null;\n    if (!/^\\d{4}$/.test(value)) {\n      return 'Postal code must be 4 digits';\n    }\n    return null;\n  },\n  // Min length validator\n  minLength: (value, min, fieldName = 'Field') => {\n    if (!value) return null;\n    if (value.length < min) {\n      return `${fieldName} must be at least ${min} characters`;\n    }\n    return null;\n  },\n  // Max length validator\n  maxLength: (value, max, fieldName = 'Field') => {\n    if (!value) return null;\n    if (value.length > max) {\n      return `${fieldName} must be less than ${max} characters`;\n    }\n    return null;\n  },\n  // Exact length validator\n  exactLength: (value, length, fieldName = 'Field') => {\n    if (!value) return null;\n    if (value.length !== length) {\n      return `${fieldName} must be exactly ${length} characters`;\n    }\n    return null;\n  },\n  // Password match validator\n  passwordMatch: (value, password) => {\n    if (!value) return null;\n    if (value !== password) {\n      return 'Passwords do not match';\n    }\n    return null;\n  },\n  // Phone validator (alias for phoneNumber)\n  phone: value => validators.phoneNumber(value)\n};\n\n// Validate multiple fields\nexport const validateForm = (formData, validationRules) => {\n  const errors = {};\n  let isValid = true;\n  for (const [fieldName, rules] of Object.entries(validationRules)) {\n    const value = formData[fieldName];\n    for (const rule of rules) {\n      let error = null;\n      if (typeof rule === 'function') {\n        error = rule(value);\n      } else if (typeof rule === 'object' && rule.validator) {\n        error = rule.validator(value, ...(rule.params || []));\n      }\n      if (error) {\n        errors[fieldName] = error;\n        isValid = false;\n        break; // Stop at first error for this field\n      }\n    }\n  }\n  return {\n    isValid,\n    errors\n  };\n};\n\n// Format error messages from API\nexport const formatApiErrors = apiErrors => {\n  if (!Array.isArray(apiErrors)) return {};\n  const formattedErrors = {};\n  apiErrors.forEach(error => {\n    if (error.path) {\n      formattedErrors[error.path] = error.msg || error.message;\n    }\n  });\n  return formattedErrors;\n};\n\n// Clear specific field errors\nexport const clearFieldError = (errors, fieldName) => {\n  const newErrors = {\n    ...errors\n  };\n  delete newErrors[fieldName];\n  return newErrors;\n};\n\n// Check if form has any errors\nexport const hasErrors = errors => {\n  return Object.keys(errors).length > 0;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}