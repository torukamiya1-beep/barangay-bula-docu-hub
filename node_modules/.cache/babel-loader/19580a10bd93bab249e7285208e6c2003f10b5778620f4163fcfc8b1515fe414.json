{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * Navigation Composable\n * Handles routing, navigation actions, and scroll behaviors\n * Implements proper error handling and accessibility features\n */\n\nimport { nextTick } from 'vue';\nimport { useRouter } from 'vue-router';\nexport function useNavigation() {\n  const router = useRouter();\n\n  // Route mapping for menu actions\n  const routeMap = {\n    dashboard: 'ClientDashboard',\n    services: 'NewDocumentRequest',\n    requests: 'MyRequests',\n    documents: 'MyDocuments',\n    profile: 'ClientProfile',\n    settings: 'ClientSettings',\n    history: 'RequestHistory',\n    notifications: 'ClientNotifications',\n    help: 'HelpSupport',\n    account: 'ClientProfile'\n  };\n\n  // Navigation methods\n  const navigateToRoute = async (routeNameOrAction, params = {}, query = {}) => {\n    try {\n      // Handle both direct route names and action mappings\n      const routeName = routeMap[routeNameOrAction] || routeNameOrAction;\n      if (!routeName) {\n        console.warn(`No route found for action: ${routeNameOrAction}`);\n        return false;\n      }\n      await router.push({\n        name: routeName,\n        params,\n        query\n      });\n      return true;\n    } catch (error) {\n      console.error('Navigation error:', error);\n      return false;\n    }\n  };\n  const navigateBack = () => {\n    try {\n      if (window.history.length > 1) {\n        router.back();\n      } else {\n        // Fallback to dashboard if no history\n        navigateToRoute('dashboard');\n      }\n    } catch (error) {\n      console.error('Error navigating back:', error);\n      navigateToRoute('dashboard');\n    }\n  };\n  const navigateForward = () => {\n    try {\n      router.forward();\n    } catch (error) {\n      console.error('Error navigating forward:', error);\n    }\n  };\n  const navigateToExternal = (url, newTab = true) => {\n    try {\n      if (newTab) {\n        window.open(url, '_blank', 'noopener,noreferrer');\n      } else {\n        window.location.href = url;\n      }\n    } catch (error) {\n      console.error('Error navigating to external URL:', error);\n    }\n  };\n  const reloadCurrentRoute = async () => {\n    try {\n      const currentRoute = router.currentRoute.value;\n      await router.replace({\n        path: '/loading'\n      });\n      await nextTick();\n      await router.replace(currentRoute);\n    } catch (error) {\n      console.error('Error reloading route:', error);\n    }\n  };\n\n  // Scroll utilities\n  const scrollToElement = (element, options = {}) => {\n    if (!element) {\n      console.warn('Element not found for scrolling');\n      return;\n    }\n    const defaultOptions = {\n      behavior: 'smooth',\n      block: 'start',\n      inline: 'nearest'\n    };\n    const scrollOptions = {\n      ...defaultOptions,\n      ...options\n    };\n    try {\n      if (element.scrollIntoView) {\n        element.scrollIntoView(scrollOptions);\n      } else {\n        // Fallback for older browsers\n        element.scrollTop = 0;\n      }\n    } catch (error) {\n      console.error('Error scrolling to element:', error);\n    }\n  };\n  const scrollToTop = (smooth = true) => {\n    try {\n      window.scrollTo({\n        top: 0,\n        left: 0,\n        behavior: smooth ? 'smooth' : 'auto'\n      });\n    } catch (error) {\n      console.error('Error scrolling to top:', error);\n    }\n  };\n  const scrollToBottom = (smooth = true) => {\n    try {\n      window.scrollTo({\n        top: document.body.scrollHeight,\n        left: 0,\n        behavior: smooth ? 'smooth' : 'auto'\n      });\n    } catch (error) {\n      console.error('Error scrolling to bottom:', error);\n    }\n  };\n  const scrollToSection = (sectionId, offset = 0) => {\n    try {\n      const element = document.getElementById(sectionId);\n      if (element) {\n        const elementPosition = element.offsetTop - offset;\n        window.scrollTo({\n          top: elementPosition,\n          behavior: 'smooth'\n        });\n      } else {\n        console.warn(`Section with ID '${sectionId}' not found`);\n      }\n    } catch (error) {\n      console.error('Error scrolling to section:', error);\n    }\n  };\n\n  // URL utilities\n  const getCurrentPath = () => {\n    return router.currentRoute.value.path;\n  };\n  const getCurrentRouteName = () => {\n    return router.currentRoute.value.name;\n  };\n  const getRouteParams = () => {\n    return router.currentRoute.value.params;\n  };\n  const getRouteQuery = () => {\n    return router.currentRoute.value.query;\n  };\n  const buildRouteUrl = (routeName, params = {}, query = {}) => {\n    try {\n      return router.resolve({\n        name: routeName,\n        params,\n        query\n      }).href;\n    } catch (error) {\n      console.error('Error building route URL:', error);\n      return '#';\n    }\n  };\n\n  // Navigation guards\n  const canNavigateAway = () => {\n    // Add logic to check if user can leave current page\n    // For example, check for unsaved changes\n    return true;\n  };\n  const confirmNavigation = (message = 'Are you sure you want to leave this page?') => {\n    return window.confirm(message);\n  };\n\n  // Breadcrumb utilities\n  const generateBreadcrumbs = () => {\n    const route = router.currentRoute.value;\n    const breadcrumbs = [];\n\n    // Add home/dashboard\n    breadcrumbs.push({\n      name: 'Dashboard',\n      path: '/client/dashboard',\n      active: false\n    });\n\n    // Add current page\n    if (route.meta?.title && route.path !== '/client/dashboard') {\n      breadcrumbs.push({\n        name: route.meta.title,\n        path: route.path,\n        active: true\n      });\n    }\n    return breadcrumbs;\n  };\n\n  // Return public API\n  return {\n    // Navigation\n    navigateToRoute,\n    navigateBack,\n    navigateForward,\n    navigateToExternal,\n    reloadCurrentRoute,\n    // Scrolling\n    scrollToElement,\n    scrollToTop,\n    scrollToBottom,\n    scrollToSection,\n    // URL utilities\n    getCurrentPath,\n    getCurrentRouteName,\n    getRouteParams,\n    getRouteQuery,\n    buildRouteUrl,\n    // Navigation guards\n    canNavigateAway,\n    confirmNavigation,\n    // Breadcrumbs\n    generateBreadcrumbs,\n    // Route map\n    routeMap\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}