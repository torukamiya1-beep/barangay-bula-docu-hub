{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport unifiedAuthService from '@/services/unifiedAuthService';\nimport adminDocumentService from '@/services/adminDocumentService';\nimport notificationService from '@/services/notificationService';\nimport AdminHeader from './AdminHeader.vue';\nimport AdminSidebar from './AdminSidebar.vue';\nexport default {\n  name: 'AdminDashboard',\n  components: {\n    AdminHeader,\n    AdminSidebar\n  },\n  data() {\n    return {\n      loading: true,\n      // UI State\n      sidebarCollapsed: false,\n      showUserDropdown: false,\n      isMobile: false,\n      adminData: null,\n      // Dashboard Data\n      stats: {\n        totalRequests: 0,\n        pendingRequests: 0,\n        approvedRequests: 0,\n        completedRequests: 0,\n        processingRequests: 0,\n        urgentRequests: 0,\n        totalRevenue: 0,\n        todayRequests: 0,\n        todayRevenue: 0,\n        totalUsers: 0,\n        activeRequests: 0,\n        completedToday: 0,\n        pendingApproval: 0\n      },\n      recentActivity: [],\n      priorityRequests: [],\n      recentRequests: [],\n      errorMessage: ''\n    };\n  },\n  async mounted() {\n    // Check authentication\n    if (!unifiedAuthService.isLoggedIn() || unifiedAuthService.getUserType() !== 'admin') {\n      this.$router.push('/login');\n      return;\n    }\n\n    // Initialize UI state\n    this.initializeUI();\n\n    // Load dashboard data\n    await this.loadDashboardData();\n\n    // Initialize real-time features\n    this.initializeRealTimeFeatures();\n  },\n  beforeUnmount() {\n    if (this.handleResize) {\n      window.removeEventListener('resize', this.handleResize);\n    }\n    if (this.refreshInterval) {\n      clearInterval(this.refreshInterval);\n    }\n\n    // Clean up real-time features\n    this.cleanupRealTimeFeatures();\n  },\n  computed: {\n    activeMenu() {\n      const path = this.$route.path;\n      if (path.includes('/admin/users')) return 'users';\n      if (path.includes('/admin/requests')) return 'requests';\n      if (path.includes('/admin/reports')) return 'reports';\n      if (path.includes('/admin/settings')) return 'settings';\n      if (path.includes('/admin/activity-logs')) return 'activity';\n      if (path.includes('/admin/profile')) return 'profile';\n      return 'dashboard';\n    }\n  },\n  methods: {\n    // Initialize UI state\n    initializeUI() {\n      this.isMobile = window.innerWidth <= 768;\n\n      // Load saved sidebar state (only on desktop)\n      if (!this.isMobile) {\n        const saved = localStorage.getItem('adminSidebarCollapsed');\n        this.sidebarCollapsed = saved ? JSON.parse(saved) : false;\n      } else {\n        this.sidebarCollapsed = true; // Always collapsed on mobile\n      }\n\n      // Setup resize listener\n      this.handleResize = () => {\n        const wasMobile = this.isMobile;\n        this.isMobile = window.innerWidth <= 768;\n        if (this.isMobile && !wasMobile) {\n          this.sidebarCollapsed = true; // Collapse when switching to mobile\n        } else if (!this.isMobile && wasMobile) {\n          // Restore saved state when switching to desktop\n          const saved = localStorage.getItem('adminSidebarCollapsed');\n          this.sidebarCollapsed = saved ? JSON.parse(saved) : false;\n        }\n      };\n      window.addEventListener('resize', this.handleResize);\n    },\n    // Sidebar toggle\n    handleSidebarToggle() {\n      this.sidebarCollapsed = !this.sidebarCollapsed;\n      localStorage.setItem('adminSidebarCollapsed', JSON.stringify(this.sidebarCollapsed));\n    },\n    // Menu navigation\n    handleMenuChange(menu) {\n      const routes = {\n        'dashboard': '/admin/dashboard',\n        'users': '/admin/users',\n        'requests': '/admin/requests',\n        'reports': '/admin/reports',\n        'settings': '/admin/settings',\n        'activity': '/admin/activity-logs',\n        'profile': '/admin/profile'\n      };\n\n      // Close sidebar on mobile after navigation\n      if (this.isMobile) {\n        this.sidebarCollapsed = true;\n      }\n      if (routes[menu]) {\n        this.$router.push(routes[menu]);\n      }\n    },\n    // User dropdown toggle\n    handleUserDropdownToggle() {\n      this.showUserDropdown = !this.showUserDropdown;\n    },\n    // Menu actions\n    handleMenuAction(action) {\n      if (action === 'profile') {\n        this.$router.push('/admin/profile');\n      } else if (action === 'settings') {\n        this.$router.push('/admin/settings');\n      }\n      this.showUserDropdown = false;\n    },\n    // Close mobile sidebar\n    closeMobileSidebar() {\n      if (this.isMobile) {\n        this.sidebarCollapsed = true;\n      }\n    },\n    // Logout\n    handleLogout() {\n      unifiedAuthService.logout();\n      this.$router.push('/login');\n    },\n    // Load dashboard data\n    async loadDashboardData() {\n      this.loading = true;\n      try {\n        // Load admin profile\n        await this.loadAdminProfile();\n\n        // Load dashboard statistics\n        await this.loadDashboardStats();\n\n        // Load recent activity\n        await this.loadRecentActivity();\n      } catch (error) {\n        console.error('Failed to load dashboard data:', error);\n        const errorData = unifiedAuthService.parseError(error);\n        this.errorMessage = errorData.message || 'Failed to load dashboard data';\n\n        // If unauthorized, redirect to login\n        if (errorData.status === 401) {\n          unifiedAuthService.logout();\n          this.$router.push('/login');\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    // Load admin profile\n    async loadAdminProfile() {\n      try {\n        const currentUser = unifiedAuthService.getCurrentUser();\n        if (currentUser && currentUser.profile) {\n          this.adminData = currentUser.profile;\n        } else {\n          // Fallback to basic user data\n          this.adminData = {\n            first_name: currentUser?.username || 'Admin',\n            role: currentUser?.role || 'admin'\n          };\n        }\n      } catch (error) {\n        console.error('Failed to load admin profile:', error);\n        const currentUser = unifiedAuthService.getCurrentUser();\n        this.adminData = {\n          first_name: currentUser?.username || 'Admin',\n          role: currentUser?.role || 'admin'\n        };\n      }\n    },\n    // Load dashboard statistics\n    async loadDashboardStats() {\n      try {\n        const response = await adminDocumentService.getDashboardStats();\n        if (response.success) {\n          // Update stats with enhanced request management data\n          this.stats = {\n            totalRequests: response.data.totalRequests || 0,\n            pendingRequests: response.data.pendingRequests || 0,\n            approvedRequests: response.data.approvedRequests || 0,\n            completedRequests: response.data.completedRequests || 0,\n            processingRequests: response.data.processingRequests || 0,\n            urgentRequests: response.data.urgentRequests || 0,\n            totalRevenue: response.data.totalRevenue || 0,\n            todayRequests: response.data.todayRequests || 0,\n            todayRevenue: response.data.todayRevenue || 0,\n            // Keep legacy fields for backward compatibility\n            totalUsers: response.data.totalUsers || 0,\n            activeRequests: response.data.pendingRequests || 0,\n            completedToday: response.data.todayRequests || 0,\n            pendingApproval: response.data.pendingRequests || 0\n          };\n        }\n\n        // Load priority and recent requests\n        await this.loadPriorityRequests();\n        await this.loadRecentRequests();\n      } catch (error) {\n        console.error('Failed to load dashboard stats:', error);\n        const errorData = adminDocumentService.parseError(error);\n        this.errorMessage = errorData.message || 'Failed to load dashboard statistics';\n      }\n    },\n    // Load priority requests\n    async loadPriorityRequests() {\n      try {\n        const response = await adminDocumentService.getAllRequests({\n          priority: 'high',\n          limit: 5,\n          status: 'pending'\n        });\n        if (response.success) {\n          this.priorityRequests = response.data.requests || [];\n        }\n      } catch (error) {\n        console.error('Failed to load priority requests:', error);\n        this.priorityRequests = [];\n      }\n    },\n    // Load recent requests\n    async loadRecentRequests() {\n      try {\n        const response = await adminDocumentService.getAllRequests({\n          limit: 5,\n          sort: 'requested_at',\n          order: 'desc'\n        });\n        if (response.success) {\n          this.recentRequests = response.data.requests || [];\n        }\n      } catch (error) {\n        console.error('Failed to load recent requests:', error);\n        this.recentRequests = [];\n      }\n    },\n    // Load recent activity\n    async loadRecentActivity() {\n      try {\n        const response = await adminDocumentService.getRecentActivity(10);\n        if (response.success) {\n          this.recentActivity = response.data || [];\n        }\n      } catch (error) {\n        console.error('Failed to load recent activity:', error);\n        const errorData = adminDocumentService.parseError(error);\n        console.error('Recent activity error details:', errorData);\n        this.recentActivity = [];\n      }\n    },\n    // Navigate to specific route\n    navigateTo(route) {\n      try {\n        console.log('Navigating to:', route);\n        this.$router.push(route);\n      } catch (error) {\n        console.error('Navigation error:', error);\n        this.errorMessage = 'Navigation failed. Please try again.';\n      }\n    },\n    // Format date for display\n    formatDate(dateString) {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      const now = new Date();\n      const diffInMinutes = Math.floor((now - date) / (1000 * 60));\n      if (diffInMinutes < 1) {\n        return 'Just now';\n      } else if (diffInMinutes < 60) {\n        return `${diffInMinutes} minute${diffInMinutes > 1 ? 's' : ''} ago`;\n      } else if (diffInMinutes < 1440) {\n        const hours = Math.floor(diffInMinutes / 60);\n        return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n      } else {\n        const days = Math.floor(diffInMinutes / 1440);\n        return `${days} day${days > 1 ? 's' : ''} ago`;\n      }\n    },\n    // Format time for display\n    formatTime(dateString) {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      return date.toLocaleTimeString('en-US', {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: true\n      });\n    },\n    // Refresh dashboard data\n    async refreshDashboard() {\n      await this.loadDashboardData();\n    },\n    // Export activity logs\n    exportActivity() {\n      // Implement export functionality\n      console.log('Exporting activity logs...');\n      // This would typically generate and download a CSV/Excel file\n    },\n    // Get activity icon based on type\n    getActivityIcon(type) {\n      const icons = {\n        'user_registration': 'fas fa-user-plus',\n        'document_request': 'fas fa-file-alt',\n        'document_approved': 'fas fa-check-circle',\n        'document_rejected': 'fas fa-times-circle',\n        'system_update': 'fas fa-cog',\n        'login': 'fas fa-sign-in-alt',\n        'logout': 'fas fa-sign-out-alt',\n        'default': 'fas fa-info-circle'\n      };\n      return icons[type] || icons.default;\n    },\n    // Get activity icon circle class based on type\n    getActivityIconClass(type) {\n      const classes = {\n        'user_registration': 'bg-success',\n        'document_request': 'bg-primary',\n        'document_approved': 'bg-success',\n        'document_rejected': 'bg-danger',\n        'system_update': 'bg-warning',\n        'login': 'bg-info',\n        'logout': 'bg-secondary',\n        'default': 'bg-primary'\n      };\n      return classes[type] || classes.default;\n    },\n    // Get activity badge class based on status\n    getActivityBadgeClass(status) {\n      const classes = {\n        'completed': 'badge-success',\n        'pending': 'badge-warning',\n        'failed': 'badge-danger',\n        'in_progress': 'badge-info',\n        'default': 'badge-secondary'\n      };\n      return classes[status?.toLowerCase()] || classes.default;\n    },\n    // Enhanced Request Management Methods\n\n    // Format time ago for display\n    formatTimeAgo(dateString) {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      const now = new Date();\n      const diffInMinutes = Math.floor((now - date) / (1000 * 60));\n      if (diffInMinutes < 1) {\n        return 'Just now';\n      } else if (diffInMinutes < 60) {\n        return `${diffInMinutes}m ago`;\n      } else if (diffInMinutes < 1440) {\n        const hours = Math.floor(diffInMinutes / 60);\n        return `${hours}h ago`;\n      } else {\n        const days = Math.floor(diffInMinutes / 1440);\n        return `${days}d ago`;\n      }\n    },\n    // Filter requests by status and navigate\n    filterRequestsByStatus(status) {\n      this.$router.push({\n        path: '/admin/requests',\n        query: {\n          status: status\n        }\n      });\n    },\n    // Filter requests by date and navigate\n    filterRequestsByDate(period) {\n      const query = {};\n      const today = new Date();\n      if (period === 'today') {\n        query.date_from = today.toISOString().split('T')[0];\n        query.date_to = today.toISOString().split('T')[0];\n      }\n      this.$router.push({\n        path: '/admin/requests',\n        query: query\n      });\n    },\n    // Navigate to requests with specific filters\n    navigateToRequests(filter) {\n      const query = {};\n      switch (filter) {\n        case 'pending':\n          query.status = 'pending';\n          break;\n        case 'urgent':\n          query.priority = 'high';\n          query.status = 'pending';\n          break;\n        case 'processing':\n          query.status = 'processing';\n          break;\n        case 'recent':\n          query.sort = 'requested_at';\n          query.order = 'desc';\n          break;\n      }\n      this.$router.push({\n        path: '/admin/requests',\n        query: query\n      });\n    },\n    // View request details\n    viewRequestDetails(requestId) {\n      this.$router.push({\n        path: '/admin/requests',\n        query: {\n          view: requestId\n        }\n      });\n    },\n    // Get progress percentage for processing overview\n    getProgressPercentage(type) {\n      const total = this.stats.totalRequests || 1; // Avoid division by zero\n\n      switch (type) {\n        case 'pending':\n          return Math.round(this.stats.pendingRequests / total * 100);\n        case 'processing':\n          return Math.round(this.stats.processingRequests / total * 100);\n        case 'completed':\n          return Math.round(this.stats.completedRequests / total * 100);\n        default:\n          return 0;\n      }\n    },\n    // Format currency for display\n    formatCurrency(amount) {\n      if (!amount) return '0.00';\n      return parseFloat(amount).toLocaleString('en-US', {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n      });\n    },\n    // Real-time features\n    async initializeRealTimeFeatures() {\n      console.log('Initializing real-time features for AdminDashboard');\n      try {\n        // Initialize notification service\n        await notificationService.init('admin');\n\n        // Listen for dashboard-relevant notifications\n        notificationService.on('notification', this.handleRealTimeNotification);\n        notificationService.on('new_request', this.handleNewRequest);\n        notificationService.on('request_status_changed', this.handleStatusChange);\n        notificationService.on('dashboard_update', this.handleDashboardUpdate);\n      } catch (error) {\n        console.error('Failed to initialize real-time features:', error);\n      }\n    },\n    cleanupRealTimeFeatures() {\n      console.log('Cleaning up real-time features for AdminDashboard');\n\n      // Remove notification listeners\n      notificationService.off('notification', this.handleRealTimeNotification);\n      notificationService.off('new_request', this.handleNewRequest);\n      notificationService.off('request_status_changed', this.handleStatusChange);\n      notificationService.off('dashboard_update', this.handleDashboardUpdate);\n\n      // Cleanup (simplified)\n      notificationService.cleanup();\n    },\n    handleRealTimeNotification(notification) {\n      console.log('Dashboard received real-time notification:', notification);\n\n      // Handle different notification types\n      switch (notification.type) {\n        case 'new_request':\n          this.handleNewRequest(notification.data);\n          break;\n        case 'request_status_changed':\n          this.handleStatusChange(notification.data);\n          break;\n        case 'dashboard_update':\n          this.handleDashboardUpdate(notification.data);\n          break;\n        default:\n          console.log('Unhandled notification type:', notification.type);\n      }\n    },\n    handleNewRequest(data) {\n      console.log('New request received on dashboard:', data);\n\n      // Update statistics\n      this.stats.totalRequests++;\n      this.stats.pendingRequests++;\n      this.stats.todayRequests++;\n\n      // Refresh dashboard data to get accurate counts\n      this.loadDashboardStats();\n      this.loadRecentActivity();\n      this.loadRecentRequests();\n    },\n    handleStatusChange(data) {\n      console.log('Request status changed on dashboard:', data);\n\n      // Refresh dashboard statistics and recent activity\n      this.loadDashboardStats();\n      this.loadRecentActivity();\n      this.loadPriorityRequests();\n      this.loadRecentRequests();\n    },\n    handleDashboardUpdate(data) {\n      console.log('Dashboard update received:', data);\n\n      // Refresh all dashboard data\n      this.loadDashboardData();\n    }\n  },\n  // Auto-refresh dashboard data every 5 minutes\n  created() {\n    this.refreshInterval = setInterval(() => {\n      this.loadDashboardStats();\n      this.loadRecentActivity();\n      this.loadPriorityRequests();\n      this.loadRecentRequests();\n    }, 5 * 60 * 1000); // 5 minutes\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}