{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport adminAuthService from '@/services/adminAuthService';\nimport { validators, clearFieldError } from '@/utils/validation';\nexport default {\n  name: 'AdminRegistration',\n  data() {\n    return {\n      currentStep: 1,\n      loading: false,\n      resendLoading: false,\n      resendCooldown: 0,\n      showPassword: false,\n      errorMessage: '',\n      successMessage: '',\n      // Account form data (Step 1)\n      accountForm: {\n        username: '',\n        email: '',\n        role: '',\n        password: '',\n        confirmPassword: ''\n      },\n      // Profile form data (Step 2)\n      profileForm: {\n        first_name: '',\n        middle_name: '',\n        last_name: '',\n        suffix: '',\n        employee_id: '',\n        phone_number: '',\n        position: '',\n        department: '',\n        hire_date: ''\n      },\n      // Verification form data (Step 3)\n      verificationForm: {\n        otp: ''\n      },\n      // Form errors\n      errors: {},\n      // Store account ID for profile completion\n      accountId: null\n    };\n  },\n  mounted() {\n    console.log('AdminRegistration component mounted');\n\n    // Check if admin is already logged in\n    try {\n      if (adminAuthService && typeof adminAuthService.isLoggedIn === 'function' && adminAuthService.isLoggedIn()) {\n        this.$router.push('/admin/dashboard');\n      }\n    } catch (error) {\n      console.warn('Admin auth check failed:', error);\n    }\n  },\n  methods: {\n    // Validate individual field\n    validateField(fieldName) {\n      let error = null;\n      let value;\n\n      // Determine which form the field belongs to\n      if (fieldName in this.accountForm) {\n        value = this.accountForm[fieldName];\n      } else if (fieldName in this.profileForm) {\n        value = this.profileForm[fieldName];\n      } else if (fieldName in this.verificationForm) {\n        value = this.verificationForm[fieldName];\n      }\n      switch (fieldName) {\n        case 'username':\n          error = validators.required(value, 'Username') || validators.minLength(value, 3, 'Username') || validators.maxLength(value, 50, 'Username');\n          break;\n        case 'email':\n          error = validators.required(value, 'Email') || validators.email(value);\n          break;\n        case 'role':\n          error = validators.required(value, 'Role');\n          break;\n        case 'password':\n          error = validators.required(value, 'Password') || validators.password(value);\n          break;\n        case 'confirmPassword':\n          error = validators.required(value, 'Confirm Password') || validators.passwordMatch(value, this.accountForm.password);\n          break;\n        case 'first_name':\n          error = validators.required(value, 'First Name') || validators.maxLength(value, 100, 'First Name');\n          break;\n        case 'last_name':\n          error = validators.required(value, 'Last Name') || validators.maxLength(value, 100, 'Last Name');\n          break;\n        case 'phone_number':\n          error = validators.required(value, 'Phone Number') || validators.phone(value);\n          break;\n        case 'otp':\n          error = validators.required(value, 'Verification Code') || validators.exactLength(value, 6, 'Verification Code');\n          break;\n      }\n      if (error) {\n        this.errors = {\n          ...this.errors,\n          [fieldName]: error\n        };\n      } else {\n        this.clearFieldError(fieldName);\n      }\n      return !error;\n    },\n    // Clear field error\n    clearFieldError(fieldName) {\n      this.errors = clearFieldError(this.errors, fieldName);\n    },\n    // Clear all messages\n    clearMessages() {\n      this.errorMessage = '';\n      this.successMessage = '';\n    },\n    // Handle phone number input to restrict to digits only\n    handlePhoneInput(event) {\n      const value = event.target.value;\n      // Remove any non-digit characters\n      const digitsOnly = value.replace(/\\D/g, '');\n      // Limit to 11 digits\n      const limitedValue = digitsOnly.substring(0, 11);\n      this.profileForm.phone_number = limitedValue;\n      this.clearFieldError('phone_number');\n    },\n    // Submit account form (Step 1)\n    async submitAccountForm() {\n      this.clearMessages();\n\n      // Validate account form fields\n      const fieldsToValidate = ['username', 'email', 'role', 'password', 'confirmPassword'];\n      let isValid = true;\n      fieldsToValidate.forEach(field => {\n        if (!this.validateField(field)) {\n          isValid = false;\n        }\n      });\n      if (!isValid) {\n        this.errorMessage = 'Please fill in all required fields correctly';\n        return;\n      }\n      this.loading = true;\n      try {\n        const response = await adminAuthService.registerAccount({\n          username: this.accountForm.username,\n          email: this.accountForm.email,\n          role: this.accountForm.role,\n          password: this.accountForm.password,\n          confirmPassword: this.accountForm.confirmPassword\n        });\n        if (response.success) {\n          this.accountId = response.data.accountId;\n          this.currentStep = 2;\n          this.successMessage = 'Account created successfully! Please complete your profile.';\n        }\n      } catch (error) {\n        const errorData = adminAuthService.parseError(error);\n        this.errorMessage = errorData.message;\n\n        // Handle field-specific errors\n        if (errorData.errors && errorData.errors.length > 0) {\n          errorData.errors.forEach(err => {\n            if (err.field) {\n              this.errors = {\n                ...this.errors,\n                [err.field]: err.message\n              };\n            }\n          });\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    // Submit profile form (Step 2)\n    async submitProfileForm() {\n      this.clearMessages();\n\n      // Validate profile form fields\n      const fieldsToValidate = ['first_name', 'last_name', 'phone_number'];\n      let isValid = true;\n      fieldsToValidate.forEach(field => {\n        if (!this.validateField(field)) {\n          isValid = false;\n        }\n      });\n      if (!isValid) {\n        this.errorMessage = 'Please fill in all required fields correctly';\n        return;\n      }\n      this.loading = true;\n      try {\n        const response = await adminAuthService.completeRegistration(this.accountId, {\n          email: this.accountForm.email,\n          // Include email from step 1\n          first_name: this.profileForm.first_name,\n          middle_name: this.profileForm.middle_name,\n          last_name: this.profileForm.last_name,\n          suffix: this.profileForm.suffix,\n          employee_id: this.profileForm.employee_id,\n          phone_number: this.profileForm.phone_number,\n          position: this.profileForm.position,\n          department: this.profileForm.department,\n          hire_date: this.profileForm.hire_date\n        });\n        if (response.success) {\n          // Send OTP for email verification\n          await this.sendVerificationOTP();\n          this.currentStep = 3;\n          this.successMessage = 'Profile completed! Please verify your email address.';\n        }\n      } catch (error) {\n        const errorData = adminAuthService.parseError(error);\n        this.errorMessage = errorData.message;\n\n        // Handle field-specific errors\n        if (errorData.errors && errorData.errors.length > 0) {\n          errorData.errors.forEach(err => {\n            if (err.field) {\n              this.errors = {\n                ...this.errors,\n                [err.field]: err.message\n              };\n            }\n          });\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    // Send verification OTP\n    async sendVerificationOTP() {\n      try {\n        await adminAuthService.sendOTP(this.accountForm.email, 'registration', this.profileForm.first_name);\n      } catch (error) {\n        console.error('Failed to send OTP:', error);\n        // Don't throw error here as profile was already saved\n      }\n    },\n    // Submit verification form (Step 3)\n    async submitVerificationForm() {\n      this.clearMessages();\n      if (!this.validateField('otp')) {\n        this.errorMessage = 'Please enter a valid verification code';\n        return;\n      }\n      this.loading = true;\n      try {\n        const response = await adminAuthService.verifyEmail(this.accountForm.email, this.verificationForm.otp);\n        if (response.success) {\n          this.currentStep = 4;\n          this.successMessage = 'Email verified successfully!';\n        }\n      } catch (error) {\n        const errorData = adminAuthService.parseError(error);\n        this.errorMessage = errorData.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    // Resend verification code\n    async resendVerificationCode() {\n      if (this.resendCooldown > 0) return;\n      this.resendLoading = true;\n      try {\n        await this.sendVerificationOTP();\n        this.successMessage = 'Verification code sent successfully!';\n        this.startResendCooldown();\n      } catch (error) {\n        const errorData = adminAuthService.parseError(error);\n        this.errorMessage = errorData.message || 'Failed to resend verification code';\n      } finally {\n        this.resendLoading = false;\n      }\n    },\n    // Start resend cooldown\n    startResendCooldown() {\n      this.resendCooldown = 60;\n      const interval = setInterval(() => {\n        this.resendCooldown--;\n        if (this.resendCooldown <= 0) {\n          clearInterval(interval);\n        }\n      }, 1000);\n    },\n    // Go to previous step\n    goToPreviousStep() {\n      if (this.currentStep > 1) {\n        this.currentStep--;\n        this.clearMessages();\n      }\n    },\n    // Go to login page\n    goToLogin() {\n      this.$router.push('/admin/login?registered=true');\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}