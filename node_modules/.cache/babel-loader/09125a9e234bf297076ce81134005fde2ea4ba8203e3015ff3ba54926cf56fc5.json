{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport documentRequestService from '@/services/documentRequestService';\nimport clientAuthService from '@/services/clientAuthService';\nimport paymentService from '@/services/paymentService';\nimport addressService from '@/services/addressService';\nimport FileUpload from '@/components/common/FileUpload.vue';\nexport default {\n  name: 'BarangayClearanceRequest',\n  components: {\n    FileUpload\n  },\n  data() {\n    return {\n      currentStep: 1,\n      submitting: false,\n      purposeCategories: [],\n      paymentMethods: [],\n      // Grouped payment methods for display\n      originalPaymentMethods: [],\n      // Original payment methods from backend\n      baseFee: 150.00,\n      totalFee: 150.00,\n      familyRelationshipError: null,\n      formData: {\n        document_type_id: 2,\n        // Barangay Clearance\n        purpose_category_id: '',\n        purpose_details: '',\n        is_third_party_request: false,\n        beneficiary: {\n          first_name: '',\n          middle_name: '',\n          last_name: '',\n          suffix: '',\n          birth_date: '',\n          gender: '',\n          civil_status_id: '',\n          nationality: 'Filipino',\n          phone_number: '',\n          email: '',\n          house_number: '',\n          street: '',\n          subdivision: '',\n          barangay: 'Bula',\n          city_municipality: 'General Santos City (Dadiangas)',\n          province: 'South Cotabato',\n          postal_code: '',\n          years_of_residency: null,\n          months_of_residency: null,\n          relationship_to_requestor: '',\n          region_code: '12',\n          province_code: '1263',\n          city_code: '126303',\n          barangay_code: '126303005'\n        },\n        authorized_pickup: {\n          first_name: '',\n          middle_name: '',\n          last_name: '',\n          suffix: '',\n          phone_number: '',\n          email: '',\n          relationship_to_beneficiary: ''\n        },\n        has_pending_cases: false,\n        pending_cases_details: '',\n        voter_registration_status: null,\n        payment_method_id: '',\n        agree_to_terms: false\n      },\n      uploadedFiles: {\n        government_id: null,\n        proof_of_residency: null,\n        cedula: null,\n        beneficiary_verification: null,\n        pickup_id_image: null,\n        pickup_authorization: null\n      },\n      uploadErrors: {},\n      maxFileSize: 5 * 1024 * 1024,\n      // 5MB\n      allowedFileTypes: ['image/jpeg', 'image/jpg', 'image/png', 'application/pdf'],\n      pickupOption: 'self',\n      // 'self' or 'authorized'\n      civilStatuses: [],\n      clientData: null,\n      // Fresh profile data\n\n      // Address dropdown data\n      regions: [],\n      provinces: [],\n      cities: [],\n      barangays: [],\n      filteredProvinces: [],\n      filteredCities: [],\n      filteredBarangays: [],\n      // Validation control\n      isValidating: false\n    };\n  },\n  computed: {\n    // Keep the old method as fallback\n    cachedClientData() {\n      return clientAuthService.getCurrentUser();\n    },\n    shouldShowPurposeDetails() {\n      // Show purpose details only when \"Other\" category (id=10) is selected\n      return this.formData.purpose_category_id === 10;\n    },\n    familyVerificationPlaceholder() {\n      // Dynamic placeholder based on relationship selection\n      if (this.formData.beneficiary.relationship_to_requestor === 'spouse') {\n        return 'Click to upload spouse verification image';\n      }\n      return 'Click to upload family Member Verification Image';\n    },\n    familyVerificationText() {\n      // Dynamic verification text based on relationship selection\n      if (this.formData.beneficiary.relationship_to_requestor === 'spouse') {\n        return 'To verify that this person is indeed your spouse, please upload a clear photo of Marriage Application.';\n      }\n      return 'To verify that this person is indeed your family member, please upload a clear photo of their valid ID (Driver\\'s License, National ID, Passport, etc.).';\n    }\n  },\n  async mounted() {\n    await this.loadFormData();\n  },\n  methods: {\n    async loadFormData() {\n      try {\n        // Load fresh profile data first\n        console.log('Loading fresh profile data...');\n        const profileResponse = await clientAuthService.getProfile();\n        if (profileResponse.success) {\n          this.clientData = profileResponse.data;\n          console.log('Fresh profile data loaded:', this.clientData);\n        } else {\n          // Fallback to cached data\n          this.clientData = this.cachedClientData;\n          console.log('Using cached profile data:', this.clientData);\n        }\n        const [purposeResponse, paymentResponse] = await Promise.all([documentRequestService.getPurposeCategories(), documentRequestService.getPaymentMethods(), this.loadCivilStatuses(), this.loadAddressData()]);\n        this.purposeCategories = purposeResponse.data || [];\n        this.originalPaymentMethods = paymentResponse.data || [];\n        this.paymentMethods = paymentService.groupPaymentMethods(this.originalPaymentMethods);\n      } catch (error) {\n        console.error('Error loading form data:', error);\n        // Fallback to cached data on error\n        this.clientData = this.cachedClientData;\n        this.showToast('Error', 'Failed to load some form data', 'error');\n      }\n    },\n    getFullName() {\n      // Try fresh data first, then fallback to cached data structure\n      const profile = this.clientData || this.clientData?.profile;\n      if (!profile) return 'N/A';\n      return `${profile.first_name || ''} ${profile.middle_name || ''} ${profile.last_name || ''}`.trim();\n    },\n    getFullAddress() {\n      // Try fresh data first, then fallback to cached data structure\n      const profile = this.clientData || this.clientData?.profile;\n      if (!profile) return 'Not provided';\n      const parts = [profile.house_number, profile.street, profile.subdivision, profile.barangay, profile.city_municipality || profile.city, profile.province].filter(Boolean);\n      return parts.length > 0 ? parts.join(', ') : 'Not provided';\n    },\n    getCivilStatusName(statusId) {\n      const statuses = {\n        1: 'Single',\n        2: 'Married',\n        3: 'Divorced',\n        4: 'Widowed',\n        5: 'Separated'\n      };\n      return statuses[statusId] || 'Not provided';\n    },\n    getResidencyDisplay() {\n      const profile = this.clientData || this.clientData?.profile;\n      if (!profile) return 'Not provided';\n      const years = profile.years_of_residency;\n      const months = profile.months_of_residency;\n      if (!years && !months) return 'Not provided';\n      const parts = [];\n      if (years) parts.push(`${years} year${years > 1 ? 's' : ''}`);\n      if (months) parts.push(`${months} month${months > 1 ? 's' : ''}`);\n      return parts.join(' and ');\n    },\n    formatDate(dateString) {\n      if (!dateString) return 'Not provided';\n      return new Date(dateString).toLocaleDateString();\n    },\n    formatCurrency(amount) {\n      return parseFloat(amount).toFixed(2);\n    },\n    canProceedToNextStep() {\n      switch (this.currentStep) {\n        case 1:\n          {\n            // Step 1: Required documents must be uploaded AND third-party validation\n            const documentsUploaded = this.uploadedFiles.government_id && this.uploadedFiles.proof_of_residency;\n            if (!documentsUploaded) return false;\n\n            // Additional validation for third-party requests\n            if (this.formData.is_third_party_request) {\n              return this.validateBeneficiaryData();\n            }\n            return true;\n          }\n        case 2:\n          {\n            let validation = this.formData.purpose_category_id && this.formData.has_pending_cases !== null && this.formData.voter_registration_status !== null;\n\n            // Only require purpose details if the field is shown (Other category, id=10)\n            if (this.shouldShowPurposeDetails) {\n              validation = validation && this.formData.purpose_details;\n            }\n            return validation;\n          }\n        case 3:\n          {\n            const paymentValid = this.formData.payment_method_id;\n            if (!paymentValid) return false;\n\n            // Additional validation for authorized pickup\n            if (this.pickupOption === 'authorized') {\n              return this.validateAuthorizedPickup();\n            }\n            return true;\n          }\n        default:\n          return true;\n      }\n    },\n    nextStep() {\n      if (this.canProceedToNextStep() && this.currentStep < 4) {\n        this.currentStep++;\n      }\n    },\n    previousStep() {\n      if (this.currentStep > 1) {\n        this.currentStep--;\n      }\n    },\n    onPurposeChange() {\n      // Clear purpose details if not \"Other\" category (id=10)\n      if (!this.shouldShowPurposeDetails) {\n        this.formData.purpose_details = '';\n      }\n      // Could implement dynamic fee calculation based on purpose\n    },\n    sanitizeRequestData(data) {\n      // Convert undefined values to null to prevent MySQL binding errors\n      const sanitized = {};\n      for (const [key, value] of Object.entries(data)) {\n        if (value === undefined) {\n          sanitized[key] = null;\n        } else if (value === '') {\n          sanitized[key] = null;\n        } else if (typeof value === 'object' && value !== null) {\n          // Recursively sanitize nested objects\n          sanitized[key] = this.sanitizeRequestData(value);\n        } else {\n          sanitized[key] = value;\n        }\n      }\n      return sanitized;\n    },\n    redirectToCedula() {\n      // Redirect to Cedula application page\n      this.$router.push('/client/cedula-request');\n    },\n    selectPaymentMethod(methodId) {\n      this.formData.payment_method_id = methodId;\n    },\n    getActualPaymentMethodId() {\n      return paymentService.getActualPaymentMethodId(this.formData.payment_method_id, this.originalPaymentMethods);\n    },\n    getPaymentIcon(methodCode) {\n      const icons = {\n        'CASH': 'fas fa-money-bill',\n        'ONLINE_PAYMENT_GROUP': 'fas fa-credit-card',\n        'PAYMONGO_CARD': 'fas fa-credit-card',\n        'PAYMONGO_GCASH': 'fab fa-google-pay',\n        'PAYMONGO_GRABPAY': 'fas fa-mobile-alt',\n        'PAYMONGO_PAYMAYA': 'fas fa-wallet',\n        'PAYMONGO_BANK': 'fas fa-university'\n      };\n      return icons[methodCode] || 'fas fa-credit-card';\n    },\n    getPurposeCategoryName() {\n      const category = this.purposeCategories.find(c => c.id === this.formData.purpose_category_id);\n      return category?.category_name || '';\n    },\n    getPaymentMethodName() {\n      const method = this.paymentMethods.find(m => m.id === this.formData.payment_method_id);\n      return method?.method_name || '';\n    },\n    getPaymentMethodDisplayName(methodCode) {\n      return paymentService.getPaymentMethodDisplayName(methodCode);\n    },\n    // Handle phone number input to restrict to digits only\n    handlePhoneInput(event, section) {\n      const value = event.target.value;\n      // Remove any non-digit characters\n      const digitsOnly = value.replace(/\\D/g, '');\n      // Limit to 11 digits\n      const limitedValue = digitsOnly.substring(0, 11);\n      if (section === 'beneficiary') {\n        this.formData.beneficiary.phone_number = limitedValue;\n      } else if (section === 'authorized_pickup') {\n        this.formData.authorized_pickup.phone_number = limitedValue;\n      }\n    },\n    async handleSubmit() {\n      if (!this.formData.agree_to_terms) return;\n\n      // Debug pickup option and form data\n      console.log('🔍 DEBUG: pickupOption =', this.pickupOption);\n      console.log('🔍 DEBUG: authorized_pickup data =', JSON.stringify(this.formData.authorized_pickup, null, 2));\n      console.log('🔍 DEBUG: uploadedFiles =', this.uploadedFiles);\n\n      // Final validation with error messages for authorized pickup\n      if (this.pickupOption === 'authorized') {\n        console.log('🔍 Running final validation for authorized pickup...');\n        if (!this.validateAuthorizedPickup(true)) {\n          console.log('❌ Validation failed, stopping submission');\n          this.submitting = false;\n          return;\n        }\n        console.log('✅ Validation passed, continuing with submission');\n      }\n      try {\n        this.submitting = true;\n\n        // Prepare request data with proper validation and sanitization\n        const requestData = this.sanitizeRequestData({\n          document_type_id: parseInt(this.formData.document_type_id) || 2,\n          purpose_category_id: parseInt(this.formData.purpose_category_id) || 1,\n          purpose_details: this.shouldShowPurposeDetails && this.formData.purpose_details && this.formData.purpose_details.length >= 10 ? this.formData.purpose_details : null,\n          payment_method_id: this.getActualPaymentMethodId(),\n          delivery_method: 'pickup',\n          priority: 'normal',\n          // Third-party request data\n          is_third_party_request: this.formData.is_third_party_request || false,\n          requestor_notes: null,\n          beneficiary: this.formData.is_third_party_request ? this.formData.beneficiary : null,\n          authorized_pickup: this.pickupOption === 'authorized' ? this.formData.authorized_pickup : null,\n          // Barangay Clearance specific fields (legally required)\n          has_pending_cases: Boolean(this.formData.has_pending_cases),\n          pending_cases_details: this.formData.pending_cases_details || null,\n          voter_registration_status: this.formData.voter_registration_status !== null ? Boolean(this.formData.voter_registration_status) : null,\n          total_fee: this.totalFee || 150.00,\n          // CRITICAL: Send exact total_document_fee for PayMongo accuracy\n          total_document_fee: 150.00\n        });\n        console.log('Submitting request data:', requestData);\n        const response = await documentRequestService.submitRequest(requestData);\n        const requestId = response.data.id;\n        console.log('Request created with ID:', requestId);\n\n        // Upload documents if any are selected\n        const hasDocuments = this.uploadedFiles.government_id || this.uploadedFiles.proof_of_residency || this.uploadedFiles.cedula;\n        if (hasDocuments) {\n          console.log('Uploading documents...');\n          await this.uploadDocumentsToRequest(requestId);\n        }\n\n        // Upload beneficiary verification if this is a third-party request\n        if (this.formData.is_third_party_request && this.uploadedFiles.beneficiary_verification) {\n          console.log('📤 Uploading beneficiary verification...');\n          await this.uploadBeneficiaryVerification(requestId);\n        }\n\n        // Upload pickup files if this is an authorized pickup request\n        if (this.pickupOption === 'authorized') {\n          console.log('📤 Uploading pickup authorization files...');\n          await this.uploadPickupFiles(requestId);\n        }\n        this.showToast('Success', 'Request submitted successfully!', 'success');\n        this.$router.push({\n          name: 'RequestDetails',\n          params: {\n            id: requestId\n          }\n        });\n      } catch (error) {\n        console.error('Error submitting request:', error);\n        console.error('Error details:', {\n          status: error.response?.status,\n          data: error.response?.data,\n          message: error.message\n        });\n        let errorMessage = 'Failed to submit request';\n        if (error.response?.data?.message) {\n          errorMessage = error.response.data.message;\n        } else if (error.response?.data?.errors) {\n          errorMessage = error.response.data.errors.map(e => e.msg).join(', ');\n        } else if (error.message) {\n          errorMessage = error.message;\n        }\n        this.showToast('Error', errorMessage, 'error');\n      } finally {\n        this.submitting = false;\n      }\n    },\n    async uploadDocumentsToRequest(requestId) {\n      try {\n        const filesToUpload = [];\n\n        // Collect ONLY the main Barangay Clearance documents (exclude verification and pickup files)\n        const mainDocumentTypes = ['government_id', 'proof_of_residency', 'cedula'];\n        Object.entries(this.uploadedFiles).forEach(([type, file]) => {\n          if (file && mainDocumentTypes.includes(type)) {\n            filesToUpload.push({\n              type,\n              file\n            });\n          }\n        });\n        if (filesToUpload.length === 0) {\n          console.log('No main documents to upload');\n          return;\n        }\n        console.log('📤 Uploading main documents:', filesToUpload.map(f => f.type));\n\n        // Upload documents using the service\n        const uploadResponse = await documentRequestService.uploadDocuments(requestId, filesToUpload);\n        if (uploadResponse.success) {\n          console.log('Documents uploaded successfully:', uploadResponse.data);\n          this.showToast('Success', `${uploadResponse.data.total_uploaded} document(s) uploaded successfully`, 'success');\n        } else {\n          console.error('Document upload failed:', uploadResponse);\n          this.showToast('Warning', 'Request submitted but some documents failed to upload', 'warning');\n        }\n      } catch (error) {\n        console.error('Document upload error:', error);\n        this.showToast('Warning', 'Request submitted but document upload failed. You can upload documents later.', 'warning');\n      }\n    },\n    async uploadPickupFiles(requestId) {\n      try {\n        console.log('🔍 Starting file upload for request:', requestId);\n\n        // Import the API service\n        const api = (await import('@/services/api.js')).default;\n\n        // First, get the authorized pickup person ID from the backend\n        const pickupResponse = await api.get(`/client/document-requests/${requestId}/authorization-status`);\n        const pickupPersonId = pickupResponse.data.data?.pickup_person?.id;\n        if (!pickupPersonId) {\n          console.error('❌ No pickup person ID found');\n          console.error('❌ Response data:', pickupResponse.data);\n          return;\n        }\n        console.log('✅ Found pickup person ID:', pickupPersonId);\n\n        // Upload ID image if available\n        if (this.uploadedFiles.pickup_id_image) {\n          console.log('📤 Uploading pickup ID image...');\n          const idFormData = new FormData();\n          idFormData.append('id_image', this.uploadedFiles.pickup_id_image);\n          const idResponse = await api.post(`/verification-documents/pickup-person/${pickupPersonId}/id-image`, idFormData, {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          });\n          console.log('✅ ID image uploaded successfully:', idResponse.data);\n        }\n\n        // Upload authorization document if available\n        if (this.uploadedFiles.pickup_authorization) {\n          console.log('📤 Uploading authorization document...');\n          const authFormData = new FormData();\n          authFormData.append('authorization_document', this.uploadedFiles.pickup_authorization);\n          const authResponse = await api.post(`/verification-documents/pickup-person/${pickupPersonId}/authorization-document`, authFormData, {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          });\n          console.log('✅ Authorization document uploaded successfully:', authResponse.data);\n        }\n        console.log('🎉 All pickup files uploaded successfully');\n      } catch (error) {\n        console.error('❌ Error uploading pickup files:', error);\n        console.error('❌ Error response:', error.response?.data);\n        // Don't throw the error - the request was already created successfully\n        this.showToast('Warning', 'Request created but some files failed to upload. You can upload them later.', 'warning');\n      }\n    },\n    async uploadBeneficiaryVerification(requestId) {\n      try {\n        console.log('🔍 Starting beneficiary verification upload for request:', requestId);\n\n        // First, get the beneficiary ID from the request\n        const api = (await import('@/services/api.js')).default;\n        const requestResponse = await api.get(`/client/document-requests/${requestId}`);\n        if (!requestResponse.data.success || !requestResponse.data.data.beneficiary) {\n          throw new Error('Beneficiary information not found');\n        }\n        const beneficiaryId = requestResponse.data.data.beneficiary.id;\n        console.log('📋 Found beneficiary ID:', beneficiaryId);\n\n        // Upload the verification image\n        const formData = new FormData();\n        formData.append('verification_image', this.uploadedFiles.beneficiary_verification);\n        const uploadResponse = await api.post(`/verification-documents/beneficiary/${beneficiaryId}/verification-image`, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        if (uploadResponse.data.success) {\n          console.log('✅ Beneficiary verification uploaded successfully');\n          this.showToast('Success', 'Family member verification uploaded successfully', 'success');\n        } else {\n          throw new Error(uploadResponse.data.message || 'Upload failed');\n        }\n      } catch (error) {\n        console.error('❌ Error uploading beneficiary verification:', error);\n        console.error('❌ Error response:', error.response?.data);\n        // Don't throw the error - the request was already created successfully\n        this.showToast('Warning', 'Request created but verification image failed to upload. You can upload it later.', 'warning');\n      }\n    },\n    goBack() {\n      this.$router.push({\n        name: 'NewDocumentRequest'\n      });\n    },\n    updateProfile() {\n      // TODO: Navigate to profile update page\n      console.log('Update profile');\n    },\n    // File handling methods\n    triggerFileInput(fileType) {\n      // Convert snake_case to camelCase for ref names\n      const refNameMap = {\n        'government_id': 'governmentIdInput',\n        'proof_of_residency': 'proofOfResidencyInput',\n        'cedula': 'cedulaInput'\n      };\n      const inputRef = refNameMap[fileType];\n      if (!inputRef) {\n        console.error(`Unknown file type: ${fileType}`);\n        return;\n      }\n\n      // Add safety check for ref existence\n      if (this.$refs[inputRef]) {\n        this.$refs[inputRef].click();\n      } else {\n        console.warn(`File input ref '${inputRef}' not found`);\n        // Try again after next tick\n        this.$nextTick(() => {\n          if (this.$refs[inputRef]) {\n            this.$refs[inputRef].click();\n          } else {\n            console.error(`File input ref '${inputRef}' still not found after nextTick`);\n          }\n        });\n      }\n    },\n    handleFileSelect(event, fileType) {\n      const file = event.target.files[0];\n      if (file) {\n        this.validateAndSetFile(file, fileType);\n      }\n    },\n    handleFileDrop(event, fileType) {\n      const file = event.dataTransfer.files[0];\n      if (file) {\n        this.validateAndSetFile(file, fileType);\n      }\n    },\n    validateAndSetFile(file, fileType) {\n      // Clear previous errors (Vue 3 compatible)\n      delete this.uploadErrors[fileType];\n\n      // Validate file size\n      if (file.size > this.maxFileSize) {\n        this.uploadErrors[fileType] = 'File size must be less than 5MB';\n        this.showToast('Error', 'File size must be less than 5MB', 'error');\n        return;\n      }\n\n      // Validate file type\n      if (!this.allowedFileTypes.includes(file.type)) {\n        this.uploadErrors[fileType] = 'Only JPG, PNG, and PDF files are allowed';\n        this.showToast('Error', 'Only JPG, PNG, and PDF files are allowed', 'error');\n        return;\n      }\n\n      // Set the file (Vue 3 compatible)\n      this.uploadedFiles[fileType] = file;\n      this.showToast('Success', `${file.name} uploaded successfully`, 'success');\n    },\n    removeFile(fileType) {\n      // Vue 3 compatible reactive updates\n      this.uploadedFiles[fileType] = null;\n      delete this.uploadErrors[fileType];\n\n      // Convert snake_case to camelCase for ref names\n      const refNameMap = {\n        'government_id': 'governmentIdInput',\n        'proof_of_residency': 'proofOfResidencyInput',\n        'cedula': 'cedulaInput'\n      };\n      const inputRef = refNameMap[fileType];\n\n      // Clear the input with safety check\n      if (inputRef && this.$refs[inputRef]) {\n        this.$refs[inputRef].value = '';\n      } else {\n        console.warn(`File input ref '${inputRef}' not found during removal`);\n      }\n    },\n    showTerms() {\n      // TODO: Show terms and conditions modal\n      console.log('Show terms');\n    },\n    showToast(title, message, type = 'info') {\n      // Log to console for debugging\n      console.log(`[${type.toUpperCase()}] ${title}: ${message}`);\n\n      // Create a simple toast notification\n      const toast = document.createElement('div');\n      toast.className = `toast-notification toast-${type}`;\n      toast.innerHTML = `\n        <div class=\"toast-header\">\n          <strong>${title}</strong>\n          <button type=\"button\" class=\"toast-close\" onclick=\"this.parentElement.parentElement.remove()\">×</button>\n        </div>\n        <div class=\"toast-body\">${message}</div>\n      `;\n\n      // Add toast styles if not already added\n      if (!document.getElementById('toast-styles')) {\n        const styles = document.createElement('style');\n        styles.id = 'toast-styles';\n        styles.textContent = `\n          .toast-notification {\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            min-width: 300px;\n            background: white;\n            border-radius: 8px;\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            z-index: 9999;\n            animation: slideIn 0.3s ease;\n          }\n          .toast-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            padding: 12px 16px 8px;\n            border-bottom: 1px solid #e9ecef;\n            font-weight: 600;\n          }\n          .toast-body {\n            padding: 8px 16px 12px;\n            color: #6c757d;\n          }\n          .toast-close {\n            background: none;\n            border: none;\n            font-size: 18px;\n            cursor: pointer;\n            color: #6c757d;\n            padding: 0;\n            margin-left: 8px;\n          }\n          .toast-success {\n            border-left: 4px solid #28a745;\n          }\n          .toast-error {\n            border-left: 4px solid #dc3545;\n          }\n          .toast-warning {\n            border-left: 4px solid #ffc107;\n          }\n          .toast-info {\n            border-left: 4px solid #17a2b8;\n          }\n          @keyframes slideIn {\n            from {\n              transform: translateX(100%);\n              opacity: 0;\n            }\n            to {\n              transform: translateX(0);\n              opacity: 1;\n            }\n          }\n        `;\n        document.head.appendChild(styles);\n      }\n\n      // Add toast to page\n      document.body.appendChild(toast);\n\n      // Auto remove after 5 seconds\n      setTimeout(() => {\n        if (toast.parentElement) {\n          toast.remove();\n        }\n      }, 5000);\n    },\n    // New methods for third-party requests\n    handleRequestTypeChange() {\n      if (!this.formData.is_third_party_request) {\n        // Reset beneficiary data when switching back to self\n        this.resetBeneficiaryData();\n        this.familyRelationshipError = null;\n      }\n    },\n    handleGenderChange() {\n      // Clear suffix when male is not selected since suffix field will be hidden\n      if (this.formData.beneficiary.gender !== 'male') {\n        this.formData.beneficiary.suffix = '';\n      }\n    },\n    validateFamilyRelationship() {\n      this.familyRelationshipError = null;\n      if (!this.formData.is_third_party_request) {\n        return true;\n      }\n      const relationship = this.formData.beneficiary.relationship_to_requestor;\n      if (!relationship) {\n        return true; // Will be caught by required validation\n      }\n\n      // Define allowed immediate family relationships\n      const allowedRelationships = ['spouse', 'husband', 'wife', 'child', 'son', 'daughter', 'parent', 'father', 'mother', 'sibling', 'brother', 'sister'];\n      if (!allowedRelationships.includes(relationship.toLowerCase())) {\n        this.familyRelationshipError = 'You can only request documents on behalf of immediate family members (spouse, children, parents, siblings).';\n        return false;\n      }\n      return true;\n    },\n    handlePickupOptionChange() {\n      if (this.pickupOption !== 'authorized') {\n        // Reset authorized pickup data\n        this.resetAuthorizedPickupData();\n      }\n    },\n    resetBeneficiaryData() {\n      this.formData.beneficiary = {\n        first_name: '',\n        middle_name: '',\n        last_name: '',\n        suffix: '',\n        birth_date: '',\n        gender: '',\n        civil_status_id: '',\n        nationality: 'Filipino',\n        phone_number: '',\n        email: '',\n        house_number: '',\n        street: '',\n        subdivision: '',\n        barangay: 'Bula',\n        city_municipality: 'General Santos City (Dadiangas)',\n        province: 'South Cotabato',\n        postal_code: '',\n        years_of_residency: null,\n        months_of_residency: null,\n        relationship_to_requestor: '',\n        region: 'Region XII (SOCCSKSARGEN)',\n        region_code: '12',\n        province_code: '1263',\n        city_code: '126303',\n        barangay_code: '126303005'\n      };\n    },\n    resetAuthorizedPickupData() {\n      this.formData.authorized_pickup = {\n        first_name: '',\n        middle_name: '',\n        last_name: '',\n        suffix: '',\n        phone_number: '',\n        email: '',\n        relationship_to_beneficiary: ''\n      };\n      // Also reset the uploaded files\n      this.uploadedFiles.pickup_id_image = null;\n      this.uploadedFiles.pickup_authorization = null;\n    },\n    async loadCivilStatuses() {\n      try {\n        // For now, use a static list. In production, this would be an API call\n        this.civilStatuses = [{\n          id: 1,\n          status_name: 'Single'\n        }, {\n          id: 2,\n          status_name: 'Married'\n        }, {\n          id: 3,\n          status_name: 'Widowed'\n        }, {\n          id: 4,\n          status_name: 'Divorced'\n        }, {\n          id: 5,\n          status_name: 'Separated'\n        }];\n      } catch (error) {\n        console.error('Error loading civil statuses:', error);\n      }\n    },\n    validateBeneficiaryData() {\n      if (!this.formData.is_third_party_request) return true;\n      const required = ['first_name', 'last_name', 'birth_date', 'gender', 'civil_status_id', 'region_code', 'province_code', 'city_code', 'barangay_code', 'relationship_to_requestor'];\n      for (const field of required) {\n        if (!this.formData.beneficiary[field]) {\n          this.showToast('Error', `Please fill in the beneficiary's ${field.replace('_', ' ')}`, 'error');\n          return false;\n        }\n      }\n\n      // Validate family relationship\n      if (!this.validateFamilyRelationship()) {\n        this.showToast('Error', this.familyRelationshipError, 'error');\n        return false;\n      }\n\n      // Check for required verification image\n      if (!this.uploadedFiles.beneficiary_verification) {\n        this.showToast('Error', 'Please upload the family member\\'s verification ID image', 'error');\n        return false;\n      }\n      return true;\n    },\n    validateAuthorizedPickup(showErrors = false) {\n      console.log('🔍 validateAuthorizedPickup called with showErrors:', showErrors);\n      console.log('🔍 pickupOption:', this.pickupOption);\n      console.log('🔍 authorized_pickup data:', this.formData.authorized_pickup);\n      if (this.pickupOption !== 'authorized') {\n        console.log('✅ Not authorized pickup, validation passed');\n        return true;\n      }\n\n      // Prevent multiple validation calls in quick succession\n      if (this.isValidating) {\n        console.log('⚠️ Validation already in progress, skipping');\n        return false;\n      }\n      if (showErrors) {\n        this.isValidating = true;\n        setTimeout(() => {\n          this.isValidating = false;\n        }, 1000); // Reset after 1 second\n      }\n      const required = ['first_name', 'last_name', 'phone_number', 'relationship_to_beneficiary'];\n      for (const field of required) {\n        const value = this.formData.authorized_pickup[field];\n        console.log(`🔍 Checking field ${field}:`, value);\n        if (!value || value.trim() === '') {\n          if (showErrors) {\n            console.log(`❌ Field ${field} is missing`);\n            this.showToast('Error', `Please fill in the pickup person's ${field.replace('_', ' ')}`, 'error');\n          }\n          return false;\n        }\n      }\n\n      // Check for required file uploads\n      if (!this.uploadedFiles.pickup_id_image) {\n        if (showErrors) {\n          console.log('❌ Missing pickup ID image');\n          this.showToast('Error', 'Please upload the pickup person\\'s valid ID image', 'error');\n        }\n        return false;\n      }\n      if (!this.uploadedFiles.pickup_authorization) {\n        if (showErrors) {\n          console.log('❌ Missing pickup authorization');\n          this.showToast('Error', 'Please upload the authorization letter', 'error');\n        }\n        return false;\n      }\n      console.log('✅ Authorized pickup validation passed');\n      return true;\n    },\n    // Verification file upload handlers\n    handleBeneficiaryVerificationFile(file) {\n      console.log('Beneficiary verification file selected:', file.name);\n      this.uploadedFiles.beneficiary_verification = file;\n    },\n    onBeneficiaryVerificationUpload(uploadResult) {\n      console.log('Beneficiary verification uploaded successfully:', uploadResult);\n      this.showToast('Success', 'Family member verification image uploaded successfully', 'success');\n    },\n    onBeneficiaryVerificationError(error) {\n      console.error('Beneficiary verification upload error:', error);\n      this.showToast('Error', 'Failed to upload verification image: ' + (error.response?.data?.message || error.message), 'error');\n    },\n    onBeneficiaryVerificationRemoved() {\n      console.log('Beneficiary verification file removed');\n      this.uploadedFiles.beneficiary_verification = null;\n    },\n    // Pickup person file upload handlers\n    handlePickupIdFile(file) {\n      console.log('Pickup ID file selected:', file.name);\n      this.uploadedFiles.pickup_id_image = file;\n    },\n    onPickupIdUpload(uploadResult) {\n      console.log('Pickup ID uploaded successfully:', uploadResult);\n      this.showToast('Success', 'Pickup person ID image uploaded successfully', 'success');\n    },\n    onPickupIdError(error) {\n      console.error('Pickup ID upload error:', error);\n      this.showToast('Error', 'Failed to upload ID image: ' + (error.response?.data?.message || error.message), 'error');\n    },\n    onPickupIdRemoved() {\n      console.log('Pickup ID file removed');\n      this.uploadedFiles.pickup_id_image = null;\n    },\n    handlePickupAuthFile(file) {\n      console.log('Pickup authorization file selected:', file.name);\n      this.uploadedFiles.pickup_authorization = file;\n    },\n    onPickupAuthUpload(uploadResult) {\n      console.log('Pickup authorization uploaded successfully:', uploadResult);\n      this.showToast('Success', 'Authorization document uploaded successfully', 'success');\n    },\n    onPickupAuthError(error) {\n      console.error('Pickup authorization upload error:', error);\n      this.showToast('Error', 'Failed to upload authorization document: ' + (error.response?.data?.message || error.message), 'error');\n    },\n    onPickupAuthRemoved() {\n      console.log('Pickup authorization file removed');\n      this.uploadedFiles.pickup_authorization = null;\n    },\n    // Address dropdown methods\n    async loadAddressData() {\n      try {\n        this.regions = await addressService.getRegions();\n      } catch (error) {\n        console.error('Error loading address data:', error);\n        this.showToast('Error', 'Failed to load address data', 'error');\n      }\n    },\n    async onRegionChange() {\n      try {\n        this.filteredProvinces = [];\n        this.filteredCities = [];\n        this.filteredBarangays = [];\n\n        // Reset dependent fields\n        this.formData.beneficiary.province_code = '';\n        this.formData.beneficiary.city_code = '';\n        this.formData.beneficiary.barangay_code = '';\n        this.formData.beneficiary.province = '';\n        this.formData.beneficiary.city_municipality = '';\n        this.formData.beneficiary.barangay = '';\n        this.formData.beneficiary.region = '';\n        if (this.formData.beneficiary.region_code) {\n          this.filteredProvinces = await addressService.getProvincesByRegion(this.formData.beneficiary.region_code);\n\n          // Set region name\n          const selectedRegion = this.regions.find(r => r.region_code === this.formData.beneficiary.region_code);\n          if (selectedRegion) {\n            this.formData.beneficiary.region = selectedRegion.region_name;\n          }\n        }\n      } catch (error) {\n        console.error('Error loading provinces:', error);\n        this.showToast('Error', 'Failed to load provinces', 'error');\n      }\n    },\n    async onProvinceChange() {\n      try {\n        this.filteredCities = [];\n        this.filteredBarangays = [];\n\n        // Reset dependent fields\n        this.formData.beneficiary.city_code = '';\n        this.formData.beneficiary.barangay_code = '';\n        this.formData.beneficiary.city_municipality = '';\n        this.formData.beneficiary.barangay = '';\n        if (this.formData.beneficiary.province_code) {\n          this.filteredCities = await addressService.getCitiesByProvince(this.formData.beneficiary.province_code);\n\n          // Set province name\n          const selectedProvince = this.filteredProvinces.find(p => p.province_code === this.formData.beneficiary.province_code);\n          if (selectedProvince) {\n            this.formData.beneficiary.province = selectedProvince.province_name;\n          }\n        }\n      } catch (error) {\n        console.error('Error loading cities:', error);\n        this.showToast('Error', 'Failed to load cities', 'error');\n      }\n    },\n    async onCityChange() {\n      try {\n        this.filteredBarangays = [];\n\n        // Reset dependent fields\n        this.formData.beneficiary.barangay_code = '';\n        this.formData.beneficiary.barangay = '';\n        if (this.formData.beneficiary.city_code) {\n          this.filteredBarangays = await addressService.getBarangaysByCity(this.formData.beneficiary.city_code);\n\n          // Set city name\n          const selectedCity = this.filteredCities.find(c => c.city_code === this.formData.beneficiary.city_code);\n          if (selectedCity) {\n            this.formData.beneficiary.city_municipality = selectedCity.city_name;\n          }\n        }\n      } catch (error) {\n        console.error('Error loading barangays:', error);\n        this.showToast('Error', 'Failed to load barangays', 'error');\n      }\n    },\n    onBarangayChange() {\n      // Set barangay name\n      if (this.formData.beneficiary.barangay_code) {\n        const selectedBarangay = this.filteredBarangays.find(b => b.brgy_code === this.formData.beneficiary.barangay_code);\n        if (selectedBarangay) {\n          this.formData.beneficiary.barangay = selectedBarangay.brgy_name;\n        }\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}