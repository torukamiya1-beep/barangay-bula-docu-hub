{"ast":null,"code":"import api from './api';\nclass AdminDocumentService {\n  // ==================== DASHBOARD ENDPOINTS ====================\n\n  /**\n   * Get dashboard statistics\n   * @returns {Promise} Dashboard stats including total requests, pending count, revenue, etc.\n   */\n  async getDashboardStats() {\n    try {\n      const response = await api.get('/admin/documents/dashboard/stats');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get recent activity for dashboard\n   * @param {number} limit - Number of activities to fetch (default: 10)\n   * @returns {Promise} Recent activity list\n   */\n  async getRecentActivity(limit = 10) {\n    try {\n      const response = await api.get(`/admin/documents/dashboard/recent?limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // ==================== REQUEST MANAGEMENT ENDPOINTS ====================\n\n  /**\n   * Get all document requests with filtering and pagination\n   * @param {Object} params - Query parameters\n   * @param {number} params.page - Page number\n   * @param {number} params.limit - Items per page\n   * @param {string} params.status - Filter by status\n   * @param {string} params.document_type - Filter by document type\n   * @param {string} params.priority - Filter by priority\n   * @param {string} params.search - Search term\n   * @param {string} params.date_from - Start date filter\n   * @param {string} params.date_to - End date filter\n   * @returns {Promise} Paginated list of requests\n   */\n  async getAllRequests(params = {}) {\n    try {\n      const queryString = new URLSearchParams(params).toString();\n      const response = await api.get(`/admin/documents/requests?${queryString}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get specific document request details\n   * @param {number} requestId - Request ID\n   * @returns {Promise} Request details with client information\n   */\n  async getRequestDetails(requestId) {\n    try {\n      const response = await api.get(`/admin/documents/requests/${requestId}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get request status history\n   * @param {number} requestId - Request ID\n   * @returns {Promise} Status change history\n   */\n  async getRequestHistory(requestId) {\n    try {\n      const response = await api.get(`/admin/documents/requests/${requestId}/history`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // ==================== STATUS MANAGEMENT ENDPOINTS ====================\n\n  /**\n   * Get all available status options\n   * @returns {Promise} List of status options\n   */\n  async getStatusOptions() {\n    try {\n      const response = await api.get('/admin/documents/status-options');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get all document types\n   * @returns {Promise} List of document types\n   */\n  async getDocumentTypes() {\n    try {\n      const response = await api.get('/admin/documents/document-types');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Update request status\n   * @param {number} requestId - Request ID\n   * @param {Object} statusData - Status update data\n   * @param {number} statusData.status_id - New status ID\n   * @param {string} statusData.reason - Optional reason for status change\n   * @returns {Promise} Update result\n   */\n  async updateRequestStatus(requestId, statusData) {\n    try {\n      const response = await api.put(`/admin/documents/requests/${requestId}/status`, statusData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Approve document request\n   * @param {number} requestId - Request ID\n   * @param {Object} approvalData - Approval data\n   * @param {string} approvalData.reason - Optional approval reason\n   * @returns {Promise} Approval result\n   */\n  async approveRequest(requestId, approvalData = {}) {\n    try {\n      const response = await api.post(`/admin/documents/requests/${requestId}/approve`, approvalData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Reject document request\n   * @param {number} requestId - Request ID\n   * @param {Object} rejectionData - Rejection data\n   * @param {string} rejectionData.reason - Required rejection reason\n   * @returns {Promise} Rejection result\n   */\n  async rejectRequest(requestId, rejectionData) {\n    try {\n      const response = await api.post(`/admin/documents/requests/${requestId}/reject`, rejectionData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Mark request as processing\n   * @param {number} requestId - Request ID\n   * @param {Object} processingData - Processing data\n   * @param {string} processingData.reason - Optional processing reason\n   * @returns {Promise} Processing result\n   */\n  async markAsProcessing(requestId, processingData = {}) {\n    try {\n      const response = await api.post(`/admin/documents/requests/${requestId}/process`, processingData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Mark request as completed\n   * @param {number} requestId - Request ID\n   * @param {Object} completionData - Completion data\n   * @param {string} completionData.reason - Optional completion reason\n   * @returns {Promise} Completion result\n   */\n  async markAsCompleted(requestId, completionData = {}) {\n    try {\n      const response = await api.post(`/admin/documents/requests/${requestId}/complete`, completionData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Removed requireAdditionalInfo method - additional_info_required status is no longer used\n\n  // ==================== BULK OPERATIONS ENDPOINTS ====================\n\n  /**\n   * Bulk update multiple requests\n   * @param {Object} bulkData - Bulk update data\n   * @param {Array} bulkData.request_ids - Array of request IDs\n   * @param {number} bulkData.status_id - New status ID for all requests\n   * @param {string} bulkData.reason - Optional reason for bulk update\n   * @returns {Promise} Bulk update result\n   */\n  async bulkUpdateRequests(bulkData) {\n    try {\n      const response = await api.post('/admin/documents/requests/bulk-update', bulkData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // ==================== DATA EXPORT ENDPOINTS ====================\n\n  /**\n   * Export requests data as CSV\n   * @param {Object} filters - Export filters\n   * @param {string} filters.status - Filter by status\n   * @param {string} filters.document_type - Filter by document type\n   * @param {string} filters.date_from - Start date filter\n   * @param {string} filters.date_to - End date filter\n   * @returns {Promise} CSV data\n   */\n  async exportRequests(filters = {}) {\n    try {\n      const queryString = new URLSearchParams(filters).toString();\n      const response = await api.get(`/admin/documents/requests/export?${queryString}`, {\n        responseType: 'text' // Expect CSV text response\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // ==================== UTILITY METHODS ====================\n\n  /**\n   * Download CSV data as file\n   * @param {string} csvData - CSV data string\n   * @param {string} filename - Filename for download\n   */\n  downloadCSV(csvData, filename = 'document_requests.csv') {\n    const blob = new Blob([csvData], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', filename);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  }\n\n  /**\n   * Get analytics data for reporting\n   * @param {string} period - Time period ('day', 'week', 'month')\n   * @returns {Promise} Analytics data\n   */\n  async getAnalyticsData(period = 'month') {\n    try {\n      const response = await api.get(`/admin/documents/analytics?period=${period}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Generate comprehensive report\n   * @param {string} reportType - Report type ('daily', 'weekly', 'monthly', 'custom')\n   * @param {Object} filters - Report filters\n   * @param {string} filters.date_from - Start date\n   * @param {string} filters.date_to - End date\n   * @param {string} filters.format - Output format ('csv' or 'json')\n   * @returns {Promise} Report data\n   */\n  async generateReport(reportType, filters = {}) {\n    try {\n      const queryString = new URLSearchParams(filters).toString();\n      const response = await api.get(`/admin/documents/reports/${reportType}?${queryString}`, {\n        responseType: filters.format === 'csv' ? 'text' : 'json'\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Verify in-person payment\n   * @param {number} requestId - Request ID\n   * @param {Object} paymentData - Payment verification data\n   * @returns {Promise} Verification result\n   */\n  async verifyInPersonPayment(requestId, paymentData) {\n    try {\n      const response = await api.post(`/admin/documents/requests/${requestId}/verify-payment`, paymentData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Schedule pickup appointment\n   * @param {number} requestId - Request ID\n   * @param {Object} scheduleData - Pickup schedule data\n   * @returns {Promise} Schedule result\n   */\n  async schedulePickup(requestId, scheduleData) {\n    try {\n      const response = await api.post(`/admin/documents/requests/${requestId}/schedule-pickup`, scheduleData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Confirm document pickup\n   * @param {number} requestId - Request ID\n   * @param {Object} pickupData - Pickup confirmation data\n   * @returns {Promise} Confirmation result\n   */\n  async confirmPickup(requestId, pickupData) {\n    try {\n      const response = await api.post(`/admin/documents/requests/${requestId}/confirm-pickup`, pickupData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Download report as CSV file\n   * @param {string} reportType - Report type\n   * @param {Object} filters - Report filters\n   * @returns {Promise} Downloads CSV file\n   */\n  async downloadReport(reportType, filters = {}) {\n    try {\n      const csvData = await this.generateReport(reportType, {\n        ...filters,\n        format: 'csv'\n      });\n      const filename = `${reportType}_report_${new Date().toISOString().split('T')[0]}.csv`;\n      this.downloadCSV(csvData, filename);\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Format status name for display\n   * @param {string} status - Status string\n   * @returns {string} Formatted status\n   */\n  formatStatus(status) {\n    if (!status) return 'Unknown';\n    return status.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n  }\n\n  /**\n   * Get status color class\n   * @param {string} status - Status string\n   * @returns {string} CSS class for status color\n   */\n  getStatusColor(status) {\n    const statusColors = {\n      'pending': 'warning',\n      'under_review': 'info',\n      'additional_info_required': 'secondary',\n      'approved': 'success',\n      'processing': 'primary',\n      'ready_for_pickup': 'info',\n      'completed': 'success',\n      'cancelled': 'secondary',\n      'rejected': 'danger'\n    };\n    return statusColors[status] || 'secondary';\n  }\n\n  /**\n   * Handle API errors\n   * @param {Error} error - API error\n   * @returns {Error} Formatted error\n   */\n  handleError(error) {\n    if (error.response) {\n      // Server responded with error status\n      const message = error.response.data?.message || 'An error occurred';\n      const errors = error.response.data?.errors || [];\n      return new Error(JSON.stringify({\n        message,\n        errors,\n        status: error.response.status\n      }));\n    } else if (error.request) {\n      // Request was made but no response received\n      return new Error(JSON.stringify({\n        message: 'Network error. Please check your connection.',\n        errors: [],\n        status: 0\n      }));\n    } else {\n      // Something else happened\n      return new Error(JSON.stringify({\n        message: error.message || 'An unexpected error occurred',\n        errors: [],\n        status: 0\n      }));\n    }\n  }\n\n  /**\n   * Parse error message\n   * @param {Error} error - Error object\n   * @returns {Object} Parsed error data\n   */\n  parseError(error) {\n    try {\n      return JSON.parse(error.message);\n    } catch {\n      return {\n        message: error.message,\n        errors: [],\n        status: 0\n      };\n    }\n  }\n}\nexport default new AdminDocumentService();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}