{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'AdminSidebar',\n  props: {\n    collapsed: {\n      type: Boolean,\n      default: false\n    },\n    activeMenu: {\n      type: String,\n      default: 'dashboard'\n    },\n    totalUsers: {\n      type: Number,\n      default: 0\n    },\n    pendingRequests: {\n      type: Number,\n      default: 0\n    },\n    totalReports: {\n      type: Number,\n      default: 0\n    },\n    urgentRequests: {\n      type: Number,\n      default: 0\n    },\n    processingRequests: {\n      type: Number,\n      default: 0\n    },\n    pendingResidencyCount: {\n      type: Number,\n      default: 0\n    }\n  },\n  emits: ['menu-change', 'logout', 'toggle-sidebar'],\n  data() {\n    return {\n      isMobileState: false\n    };\n  },\n  computed: {\n    // Detect if the current device is mobile\n    // Use parent's mobile detection to avoid conflicts\n    isMobile() {\n      return this.isMobileState;\n    },\n    // Get active menu based on current route\n    currentActiveMenu() {\n      const path = this.$route.path;\n      const routeToMenu = {\n        '/admin/dashboard': 'dashboard',\n        '/admin/users': 'users',\n        '/admin/requests': 'requests',\n        '/admin/history': 'history',\n        '/admin/reports': 'reports',\n        '/admin/settings': 'settings',\n        '/admin/activity-logs': 'activity',\n        '/admin/audit-logs': 'audit',\n        '/admin/profile': 'profile'\n      };\n      return routeToMenu[path] || this.activeMenu || 'dashboard';\n    }\n  },\n  mounted() {\n    // Set initial mobile state\n    this.updateMobileState();\n\n    // Listen for window resize to update mobile detection\n    this.handleResize = () => {\n      this.updateMobileState();\n    };\n    window.addEventListener('resize', this.handleResize);\n  },\n  beforeUnmount() {\n    // Clean up event listener\n    if (this.handleResize) {\n      window.removeEventListener('resize', this.handleResize);\n    }\n  },\n  methods: {\n    // Update mobile state - keep in sync with parent mixin\n    updateMobileState() {\n      this.isMobileState = window.innerWidth <= 768;\n    },\n    // Handle image error\n    handleImageError(event) {\n      console.log('Logo image failed to load, using fallback');\n      // You could set a fallback image here if needed\n      event.target.style.display = 'none';\n    },\n    // Handle menu item click\n    handleMenuClick(menu, event) {\n      // Prevent default link behavior\n      if (event) {\n        event.preventDefault();\n      }\n\n      // Navigate to the appropriate route\n      const routes = {\n        'dashboard': '/admin/dashboard',\n        'users': '/admin/users',\n        'archive': '/admin/users/archive',\n        'requests': '/admin/requests',\n        'history': '/admin/history',\n        'reports': '/admin/reports',\n        'settings': '/admin/settings',\n        'activity': '/admin/activity-logs',\n        'audit': '/admin/audit-logs',\n        'profile': '/admin/profile'\n      };\n      const route = routes[menu];\n      if (route && this.$route.path !== route) {\n        this.$router.push(route).catch(err => {\n          // Handle navigation errors gracefully\n          if (err.name !== 'NavigationDuplicated') {\n            console.error('Navigation error:', err);\n          }\n        });\n      }\n\n      // Still emit for parent components that need to track active menu\n      this.$emit('menu-action', menu);\n    },\n    // Handle logout\n    handleLogout(event) {\n      // Prevent default link behavior\n      if (event) {\n        event.preventDefault();\n      }\n\n      // Emit logout event to parent\n      this.$emit('logout');\n    },\n    // Handle mobile close button\n    handleMobileClose() {\n      // Emit toggle sidebar event to close the sidebar on mobile\n      this.$emit('toggle-sidebar');\n    }\n  },\n  // Watch for prop changes\n  watch: {\n    collapsed: {\n      handler(newVal) {\n        // Update body class for layout adjustments\n        if (newVal) {\n          document.body.classList.add('sidebar-collapsed');\n        } else {\n          document.body.classList.remove('sidebar-collapsed');\n        }\n      },\n      immediate: true\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}