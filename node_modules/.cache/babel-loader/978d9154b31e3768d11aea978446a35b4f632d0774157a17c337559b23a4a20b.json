{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport AdminHeader from './AdminHeader.vue';\nimport AdminSidebar from './AdminSidebar.vue';\nimport unifiedAuthService from '@/services/unifiedAuthService';\nimport activityLogService from '@/services/activityLogService';\nimport adminDocumentService from '@/services/adminDocumentService';\nexport default {\n  name: 'AdminActivityLogs',\n  components: {\n    AdminHeader,\n    AdminSidebar\n  },\n  data() {\n    return {\n      // UI State\n      sidebarCollapsed: false,\n      showUserDropdown: false,\n      isMobile: false,\n      adminData: null,\n      // Component Data\n      loading: false,\n      logs: [],\n      filteredLogs: [],\n      currentPage: 1,\n      itemsPerPage: 20,\n      filtersExpanded: false,\n      // Start with filters collapsed\n      filters: {\n        dateFrom: '',\n        dateTo: '',\n        type: '',\n        userType: '',\n        documentType: '',\n        statusChange: '',\n        user: '',\n        ipAddress: ''\n      }\n    };\n  },\n  computed: {\n    activeMenu() {\n      const path = this.$route.path;\n      if (path.includes('/admin/users')) return 'users';\n      if (path.includes('/admin/requests')) return 'requests';\n      if (path.includes('/admin/reports')) return 'reports';\n      if (path.includes('/admin/settings')) return 'settings';\n      if (path.includes('/admin/activity-logs')) return 'activity';\n      if (path.includes('/admin/profile')) return 'profile';\n      return 'dashboard';\n    },\n    paginatedLogs() {\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return this.filteredLogs.slice(start, end);\n    },\n    totalPages() {\n      return Math.ceil(this.filteredLogs.length / this.itemsPerPage);\n    },\n    visiblePages() {\n      const pages = [];\n      const start = Math.max(1, this.currentPage - 2);\n      const end = Math.min(this.totalPages, this.currentPage + 2);\n      for (let i = start; i <= end; i++) {\n        pages.push(i);\n      }\n      return pages;\n    }\n  },\n  async mounted() {\n    // Check authentication\n    if (!unifiedAuthService.isLoggedIn() || unifiedAuthService.getUserType() !== 'admin') {\n      this.$router.push('/login');\n      return;\n    }\n\n    // Initialize UI state\n    this.initializeUI();\n\n    // Set default date range (last 30 days)\n    const today = new Date();\n    const thirtyDaysAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);\n    this.filters.dateTo = today.toISOString().split('T')[0];\n    this.filters.dateFrom = thirtyDaysAgo.toISOString().split('T')[0];\n\n    // Load component data\n    await this.loadAdminProfile();\n    await this.loadLogs();\n  },\n  beforeUnmount() {\n    if (this.handleResize) {\n      window.removeEventListener('resize', this.handleResize);\n    }\n  },\n  methods: {\n    // Initialize UI state\n    initializeUI() {\n      this.isMobile = window.innerWidth <= 768;\n      if (!this.isMobile) {\n        const saved = localStorage.getItem('adminSidebarCollapsed');\n        this.sidebarCollapsed = saved ? JSON.parse(saved) : false;\n      } else {\n        this.sidebarCollapsed = true;\n      }\n      this.handleResize = () => {\n        const wasMobile = this.isMobile;\n        this.isMobile = window.innerWidth <= 768;\n        if (this.isMobile && !wasMobile) {\n          this.sidebarCollapsed = true;\n        } else if (!this.isMobile && wasMobile) {\n          const saved = localStorage.getItem('adminSidebarCollapsed');\n          this.sidebarCollapsed = saved ? JSON.parse(saved) : false;\n        }\n      };\n      window.addEventListener('resize', this.handleResize);\n    },\n    handleSidebarToggle() {\n      this.sidebarCollapsed = !this.sidebarCollapsed;\n      localStorage.setItem('adminSidebarCollapsed', JSON.stringify(this.sidebarCollapsed));\n    },\n    handleMenuChange(menu) {\n      const routes = {\n        'dashboard': '/admin/dashboard',\n        'users': '/admin/users',\n        'requests': '/admin/requests',\n        'reports': '/admin/reports',\n        'settings': '/admin/settings',\n        'activity': '/admin/activity-logs',\n        'profile': '/admin/profile'\n      };\n      if (this.isMobile) {\n        this.sidebarCollapsed = true;\n      }\n      if (routes[menu]) {\n        this.$router.push(routes[menu]);\n      }\n    },\n    handleUserDropdownToggle() {\n      this.showUserDropdown = !this.showUserDropdown;\n    },\n    handleMenuAction(action) {\n      if (action === 'profile') {\n        this.$router.push('/admin/profile');\n      } else if (action === 'settings') {\n        this.$router.push('/admin/settings');\n      }\n      this.showUserDropdown = false;\n    },\n    closeMobileSidebar() {\n      if (this.isMobile) {\n        this.sidebarCollapsed = true;\n      }\n    },\n    handleLogout() {\n      unifiedAuthService.logout();\n      this.$router.push('/login');\n    },\n    async loadAdminProfile() {\n      try {\n        const user = unifiedAuthService.getCurrentUser();\n        if (user && user.profile) {\n          this.adminData = user.profile;\n        } else {\n          // Fallback to basic user data\n          this.adminData = {\n            first_name: user?.username || 'Admin',\n            role: user?.role || 'admin'\n          };\n        }\n      } catch (error) {\n        console.error('Failed to load admin profile:', error);\n        const user = unifiedAuthService.getCurrentUser();\n        this.adminData = {\n          first_name: user?.username || 'Admin',\n          role: user?.role || 'admin'\n        };\n      }\n    },\n    async loadLogs() {\n      this.loading = true;\n      try {\n        console.log('üîÑ Loading activity logs...');\n        let activityData = null;\n\n        // Primary approach: Use comprehensive activity logs API (from audit_logs table)\n        try {\n          console.log('üîÑ Loading from comprehensive activity logs API...');\n          const apiResponse = await activityLogService.getComprehensiveActivityLogs(this.filters, 1, 100);\n          if (apiResponse.success && apiResponse.data && apiResponse.data.activities && apiResponse.data.activities.length > 0) {\n            console.log('‚úÖ Loaded data from comprehensive activity logs API:', apiResponse.data.activities.length, 'records');\n            activityData = apiResponse.data.activities;\n          } else {\n            throw new Error('Comprehensive API returned no data');\n          }\n        } catch (primaryError) {\n          console.log('‚ö†Ô∏è  Comprehensive activity logs API failed:', primaryError.message);\n\n          // Fallback 1: Try legacy activity logs API (from request_status_history)\n          try {\n            console.log('üîÑ Fallback: Loading from legacy activity logs API...');\n            const legacyResponse = await activityLogService.getActivityLogs(this.filters, 1, 100);\n            if (legacyResponse.success && legacyResponse.data && legacyResponse.data.activities && legacyResponse.data.activities.length > 0) {\n              console.log('‚úÖ Loaded data from legacy activity logs API:', legacyResponse.data.activities.length, 'records');\n              activityData = legacyResponse.data.activities;\n            }\n          } catch (fallbackError) {\n            console.log('‚ö†Ô∏è  Legacy activity logs API failed:', fallbackError.message);\n\n            // Final fallback: Try adminDocumentService (for document status changes)\n            try {\n              console.log('üîÑ Final fallback: Loading from adminDocumentService...');\n              const response = await adminDocumentService.getRecentActivity(100);\n              if (response.success && response.data && response.data.length > 0) {\n                console.log('‚úÖ Loaded data from adminDocumentService:', response.data.length, 'records');\n\n                // Transform the data to match our frontend format\n                activityData = response.data.map(item => ({\n                  id: item.id,\n                  timestamp: item.changed_at,\n                  user_name: item.changed_by_name || 'System',\n                  user_role: this.determineUserRole(item.changed_by_name),\n                  user_type: this.determineUserType(item.changed_by_name),\n                  activity: this.generateActivityDescription(item),\n                  type: 'status_change',\n                  document_type: item.document_type,\n                  status_change: item.new_status,\n                  ip_address: 'N/A',\n                  details: this.generateDetailedDescription(item)\n                }));\n              }\n            } catch (finalError) {\n              console.log('‚ö†Ô∏è  AdminDocumentService final fallback failed:', finalError.message);\n            }\n          }\n        }\n\n        // If we have real data, use it\n        if (activityData && activityData.length > 0) {\n          this.logs = activityData;\n          console.log('‚úÖ Successfully loaded activity logs:', this.logs.length, 'records');\n        } else {\n          console.log('‚ö†Ô∏è  No real activity data available, showing system status');\n          // Show informative system status if no real data is available\n          this.logs = [{\n            id: 1,\n            timestamp: new Date().toISOString(),\n            user_name: 'System',\n            user_role: 'System',\n            user_type: 'system',\n            activity: 'Activity logging system initialized',\n            type: 'info',\n            document_type: null,\n            status_change: null,\n            ip_address: 'N/A',\n            details: 'The activity logging system is properly configured. Real activity data will appear here when:\\n‚Ä¢ Users log in/out of the system\\n‚Ä¢ Document requests are submitted\\n‚Ä¢ Status changes are made by administrators\\n‚Ä¢ Administrative actions are performed\\n\\nCurrent database status: 15 activity records available in audit_logs table, 6 records in request_status_history table.'\n          }, {\n            id: 2,\n            timestamp: new Date(Date.now() - 60000).toISOString(),\n            user_name: 'System',\n            user_role: 'System',\n            user_type: 'system',\n            activity: 'Backend services status check',\n            type: 'info',\n            document_type: null,\n            status_change: null,\n            ip_address: 'N/A',\n            details: 'Backend API endpoints are configured and ready:\\n‚Ä¢ /api/admin/activity-logs/comprehensive - Primary endpoint (audit_logs table)\\n‚Ä¢ /api/admin/activity-logs - Legacy endpoint (request_status_history table)\\n‚Ä¢ /api/admin/documents/recent-activity - Fallback endpoint\\n\\nIf you see this message, it means the frontend is working but unable to connect to the backend services. Please ensure the backend server is running on port 7000.'\n          }];\n        }\n        this.filteredLogs = [...this.logs];\n        this.applyFilters(); // Apply default filters\n      } catch (error) {\n        console.error('Failed to load activity logs:', error);\n\n        // If everything fails, show error message\n        this.logs = [{\n          id: 1,\n          timestamp: new Date().toISOString(),\n          user_name: 'System',\n          user_role: 'System',\n          user_type: 'system',\n          activity: 'Activity logs service unavailable',\n          type: 'error',\n          document_type: null,\n          status_change: null,\n          ip_address: 'N/A',\n          details: 'Unable to load activity logs from server. Please check your connection and try again.'\n        }];\n        this.filteredLogs = [...this.logs];\n      } finally {\n        this.loading = false;\n      }\n    },\n    applyFilters() {\n      let filtered = [...this.logs];\n\n      // Apply date filters\n      if (this.filters.dateFrom) {\n        filtered = filtered.filter(log => new Date(log.timestamp) >= new Date(this.filters.dateFrom));\n      }\n      if (this.filters.dateTo) {\n        filtered = filtered.filter(log => new Date(log.timestamp) <= new Date(this.filters.dateTo + 'T23:59:59'));\n      }\n\n      // Apply activity type filter\n      if (this.filters.type) {\n        filtered = filtered.filter(log => log.type === this.filters.type);\n      }\n\n      // Apply user type filter\n      if (this.filters.userType) {\n        filtered = filtered.filter(log => log.user_type === this.filters.userType);\n      }\n\n      // Apply document type filter\n      if (this.filters.documentType) {\n        filtered = filtered.filter(log => log.document_type === this.filters.documentType);\n      }\n\n      // Apply status change filter\n      if (this.filters.statusChange) {\n        filtered = filtered.filter(log => log.status_change === this.filters.statusChange);\n      }\n\n      // Apply user search filter\n      if (this.filters.user) {\n        const query = this.filters.user.toLowerCase();\n        filtered = filtered.filter(log => log.user_name.toLowerCase().includes(query) || log.user_role.toLowerCase().includes(query));\n      }\n\n      // Apply IP address filter\n      if (this.filters.ipAddress) {\n        const query = this.filters.ipAddress.toLowerCase();\n        filtered = filtered.filter(log => log.ip_address.toLowerCase().includes(query));\n      }\n      this.filteredLogs = filtered;\n      this.currentPage = 1;\n    },\n    clearFilters() {\n      this.filters = {\n        dateFrom: '',\n        dateTo: '',\n        type: '',\n        userType: '',\n        documentType: '',\n        statusChange: '',\n        user: '',\n        ipAddress: ''\n      };\n      this.filteredLogs = [...this.logs];\n      this.currentPage = 1;\n    },\n    toggleFilters() {\n      this.filtersExpanded = !this.filtersExpanded;\n    },\n    changePage(page) {\n      if (page >= 1 && page <= this.totalPages) {\n        this.currentPage = page;\n      }\n    },\n    getInitials(name) {\n      if (!name) return '?';\n      return name.split(' ').map(n => n.charAt(0)).join('').toUpperCase().slice(0, 2);\n    },\n    getTypeBadgeClass(type) {\n      const classes = {\n        'login': 'bg-success',\n        'logout': 'bg-secondary',\n        'document_request': 'bg-warning',\n        'status_change': 'bg-primary',\n        'approval': 'bg-success',\n        'rejection': 'bg-danger',\n        'payment': 'bg-info',\n        'user_management': 'bg-purple',\n        'system': 'bg-info',\n        'error': 'bg-danger'\n      };\n      return classes[type] || 'bg-secondary';\n    },\n    getUserTypeBadgeClass(userType) {\n      const classes = {\n        'admin': 'badge-admin',\n        'employee': 'badge-employee',\n        'client': 'badge-client',\n        'system': 'badge-system'\n      };\n      return classes[userType] || 'badge-secondary';\n    },\n    getStatusBadgeClass(status) {\n      const classes = {\n        'pending': 'bg-warning text-dark',\n        'approved': 'bg-success',\n        'processing': 'bg-primary',\n        'ready_for_pickup': 'bg-info',\n        'completed': 'bg-success',\n        'rejected': 'bg-danger',\n        'cancelled': 'bg-secondary'\n      };\n      return classes[status] || 'bg-secondary';\n    },\n    formatType(type) {\n      return type.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n    },\n    formatUserType(userType) {\n      const types = {\n        'admin': 'Administrator',\n        'employee': 'Employee',\n        'client': 'Client',\n        'system': 'System'\n      };\n      return types[userType] || userType;\n    },\n    formatStatus(status) {\n      return status.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n    },\n    // Helper methods for data transformation\n    determineUserRole(userName) {\n      if (!userName || userName === 'System') return 'System';\n      // In a real system, you'd get this from the database\n      return 'Administrator'; // Default for now\n    },\n    determineUserType(userName) {\n      if (!userName || userName === 'System') return 'system';\n      // In a real system, you'd get this from the database\n      return 'admin'; // Default for now\n    },\n    generateActivityDescription(item) {\n      const action = item.old_status ? `changed status from \"${item.old_status}\" to \"${item.new_status}\"` : `set status to \"${item.new_status}\"`;\n      return `${item.changed_by_name || 'System'} ${action} for ${item.document_type} request ${item.request_number}`;\n    },\n    generateDetailedDescription(item) {\n      let details = `Request: ${item.request_number}\\n`;\n      details += `Document Type: ${item.document_type}\\n`;\n      details += `Client: ${item.client_name || 'Unknown'}\\n`;\n      if (item.old_status) {\n        details += `Status Changed: ${item.old_status} ‚Üí ${item.new_status}\\n`;\n      } else {\n        details += `Status Set: ${item.new_status}\\n`;\n      }\n      if (item.change_reason) {\n        details += `Reason: ${item.change_reason}\\n`;\n      }\n      details += `Changed At: ${new Date(item.changed_at).toLocaleString()}\\n`;\n      details += `Changed By: ${item.changed_by_name || 'System'}`;\n      return details;\n    },\n    formatDateTime(dateString) {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      return date.toLocaleString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    viewDetails(log) {\n      const details = `\nActivity Log Details\n\nTimestamp: ${this.formatDateTime(log.timestamp)}\nUser: ${log.user_name} (${log.user_role})\nUser Type: ${this.formatUserType(log.user_type)}\nActivity: ${log.activity}\nType: ${this.formatType(log.type)}\nDocument Type: ${log.document_type || 'N/A'}\nStatus Change: ${log.status_change ? this.formatStatus(log.status_change) : 'N/A'}\nIP Address: ${log.ip_address}\n\nDetails:\n${log.details}\n      `.trim();\n      alert(details);\n    },\n    exportLogs() {\n      try {\n        // Create CSV content\n        const headers = ['Timestamp', 'User Name', 'User Type', 'Activity', 'Type', 'Document Type', 'Status Change', 'IP Address', 'Details'];\n        const csvContent = [headers.join(','), ...this.filteredLogs.map(log => [this.formatDateTime(log.timestamp), `\"${log.user_name}\"`, log.user_type || '', `\"${log.activity}\"`, log.type, log.document_type || '', log.status_change || '', log.ip_address, `\"${log.details}\"`].join(','))].join('\\n');\n\n        // Create and download file\n        const blob = new Blob([csvContent], {\n          type: 'text/csv;charset=utf-8;'\n        });\n        const link = document.createElement('a');\n        const url = URL.createObjectURL(blob);\n        link.setAttribute('href', url);\n        link.setAttribute('download', `activity-logs-${new Date().toISOString().split('T')[0]}.csv`);\n        link.style.visibility = 'hidden';\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n        console.log('Activity logs exported successfully');\n      } catch (error) {\n        console.error('Failed to export logs:', error);\n        alert('Failed to export activity logs. Please try again.');\n      }\n    },\n    printLogs() {\n      try {\n        // Create print content\n        const printContent = `\n          <html>\n            <head>\n              <title>Activity Logs Report</title>\n              <style>\n                body { font-family: Arial, sans-serif; margin: 20px; }\n                .header { text-align: center; margin-bottom: 30px; }\n                .filters { margin-bottom: 20px; padding: 15px; background: #f8f9fa; border-radius: 5px; }\n                table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n                th, td { border: 1px solid #ddd; padding: 8px; text-align: left; font-size: 12px; }\n                th { background-color: #f2f2f2; font-weight: bold; }\n                .timestamp { white-space: nowrap; }\n                .activity { max-width: 200px; word-wrap: break-word; }\n                .details { max-width: 300px; word-wrap: break-word; }\n                .badge { padding: 2px 6px; border-radius: 3px; font-size: 10px; }\n                .badge-login { background: #d4edda; color: #155724; }\n                .badge-logout { background: #d1ecf1; color: #0c5460; }\n                .badge-document_request { background: #fff3cd; color: #856404; }\n                .badge-status_change { background: #cce5ff; color: #004085; }\n                .badge-approval { background: #d4edda; color: #155724; }\n                .badge-rejection { background: #f8d7da; color: #721c24; }\n                .badge-payment { background: #e2e3e5; color: #383d41; }\n                .badge-user_management { background: #ffeaa7; color: #6c5ce7; }\n                .badge-system { background: #74b9ff; color: #0984e3; }\n                .badge-error { background: #fd79a8; color: #e84393; }\n                @media print {\n                  body { margin: 0; }\n                  .no-print { display: none; }\n                }\n              </style>\n            </head>\n            <body>\n              <div class=\"header\">\n                <h1>Activity Logs Report</h1>\n                <p>Generated on: ${new Date().toLocaleString()}</p>\n                <p>Total Records: ${this.filteredLogs.length}</p>\n              </div>\n\n              <div class=\"filters\">\n                <h3>Applied Filters:</h3>\n                <p><strong>Date Range:</strong> ${this.filters.dateFrom || 'All'} to ${this.filters.dateTo || 'All'}</p>\n                <p><strong>Activity Type:</strong> ${this.filters.type || 'All'}</p>\n                <p><strong>User Type:</strong> ${this.filters.userType || 'All'}</p>\n                <p><strong>Document Type:</strong> ${this.filters.documentType || 'All'}</p>\n                <p><strong>Status Change:</strong> ${this.filters.statusChange || 'All'}</p>\n                <p><strong>User Search:</strong> ${this.filters.user || 'None'}</p>\n                <p><strong>IP Address:</strong> ${this.filters.ipAddress || 'All'}</p>\n              </div>\n\n              <table>\n                <thead>\n                  <tr>\n                    <th>Timestamp</th>\n                    <th>User</th>\n                    <th>Activity</th>\n                    <th>Type</th>\n                    <th>Document</th>\n                    <th>Status</th>\n                    <th>IP Address</th>\n                    <th>Details</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  ${this.filteredLogs.map(log => `\n                    <tr>\n                      <td class=\"timestamp\">${this.formatDateTime(log.timestamp)}</td>\n                      <td>\n                        <strong>${log.user_name}</strong><br>\n                        <small>${log.user_role}</small>\n                      </td>\n                      <td class=\"activity\">${log.activity}</td>\n                      <td><span class=\"badge badge-${log.type}\">${this.formatType(log.type)}</span></td>\n                      <td>${log.document_type || '-'}</td>\n                      <td>${log.status_change || '-'}</td>\n                      <td>${log.ip_address}</td>\n                      <td class=\"details\">${log.details}</td>\n                    </tr>\n                  `).join('')}\n                </tbody>\n              </table>\n            </body>\n          </html>\n        `;\n\n        // Open print window\n        const printWindow = window.open('', '_blank');\n        printWindow.document.write(printContent);\n        printWindow.document.close();\n        printWindow.focus();\n        printWindow.print();\n        printWindow.close();\n      } catch (error) {\n        console.error('Failed to print logs:', error);\n        alert('Failed to print activity logs. Please try again.');\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}