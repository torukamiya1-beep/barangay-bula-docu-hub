{"ast":null,"code":"import _defineProperty from \"D:/brgy_docu_hub/BOSFDR/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\n/*!\n * Chart.js v4.5.0\n * https://www.chartjs.org\n * (c) 2025 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as getDatasetClipArea, ai as _elementsEqual, aj as _isClickEvent, ak as _isBetween, al as _normalizeAngle, am as _readValueToProps, an as _updateBezierControlPoints, ao as _computeSegments, ap as _boundSegments, aq as _steppedInterpolation, ar as _bezierInterpolation, as as _pointInLine, at as _steppedLineTo, au as _bezierCurveTo, av as drawPoint, aw as addRoundedRectPath, ax as toTRBL, ay as toTRBLCorners, az as _boundSegment, aA as getRtlAdapter, aB as overrideTextDirection, aC as _textX, aD as restoreTextDirection, aE as drawPointLegend, aF as distanceBetweenPoints, aG as noop, aH as _setMinAndMaxByKey, aI as niceNum, aJ as almostWhole, aK as almostEquals, aL as _decimalPlaces, aM as Ticks, aN as log10, aO as _longestText, aP as _filterBetween, aQ as _lookup } from './chunks/helpers.dataset.js';\nimport '@kurkle/color';\nclass Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n  _update(date = Date.now()) {\n    let remaining = 0;\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n      for (; i >= 0; --i) {\n        item = items[i];\n        if (item._active) {\n          if (item._total > anims.duration) {\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n      remaining += items.length;\n    });\n    this._lastDate = date;\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\nvar animator = /* #__PURE__ */new Animator();\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  color(from, to, factor) {\n    const c0 = color(from || transparent);\n    const c1 = c0.valid && color(to || transparent);\n    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\nclass Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n  active() {\n    return this._active;\n  }\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n  cancel() {\n    if (this._active) {\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n    this._active = from !== to && (loop || elapsed < duration);\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n    factor = elapsed / duration % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n    this._target[prop] = this._fn(from, to, factor);\n  }\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({\n        res,\n        rej\n      });\n    });\n  }\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\nclass Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach(prop => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {});\n    }\n    return animations;\n  }\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n      if (animation) {\n        if (cfg && animation.active()) {\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        target[prop] = value;\n        continue;\n      }\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n  update(target, values) {\n    if (this._properties.size === 0) {\n      Object.assign(target, values);\n      return;\n    }\n    const animations = this._createAnimations(target, values);\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {\n      $shared: false,\n      $animations: {}\n    });\n  }\n  return options;\n}\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\nfunction toClip(value) {\n  let t, r, b, l;\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n  if (value === null) {\n    return;\n  }\n  let found = false;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      found = true;\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n      value += otherValue;\n    }\n  }\n  if (!found && !options.all) {\n    return 0;\n  }\n  return value;\n}\nfunction convertObjectDataToArray(data, meta) {\n  const {\n    iScale,\n    vScale\n  } = meta;\n  const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n  const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      [iAxisKey]: key,\n      [vAxisKey]: data[key]\n    };\n  }\n  return adata;\n}\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if (positive && value > 0 || !positive && value < 0) {\n      return meta.index;\n    }\n  }\n  return null;\n}\nfunction updateStacks(controller, parsed) {\n  const {\n    chart,\n    _cachedMeta: meta\n  } = controller;\n  const stacks = chart._stacks || (chart._stacks = {});\n  const {\n    iScale,\n    vScale,\n    index: datasetIndex\n  } = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {\n      [iAxis]: index,\n      [vAxis]: value\n    } = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n  return createContext(parent, {\n    active: false,\n    dataset: undefined,\n    datasetIndex: index,\n    index,\n    mode: 'default',\n    type: 'dataset'\n  });\n}\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\nfunction clearStacks(meta, items) {\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\nconst isDirectUpdateMode = mode => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked && {\n  keys: getSortedDatasetIndices(chart, true),\n  values: null\n};\nclass DatasetController {\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n    this.initialize();\n  }\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale ? meta.vScale : meta.iScale;\n  }\n  reset() {\n    this._update('reset');\n  }\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n    if (isObject(data)) {\n      const meta = this._cachedMeta;\n      this._data = convertObjectDataToArray(data, meta);\n    } else if (_data !== data) {\n      if (_data) {\n        unlistenArrayEvents(_data, this);\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n  addElements() {\n    const meta = this._cachedMeta;\n    this._dataCheck();\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n    this._dataCheck();\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n    this._resyncElements(resetNewElements);\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n      meta._stacked = isStacked(meta.vScale, meta);\n    }\n  }\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n  parse(start, count) {\n    const {\n      _cachedMeta: meta,\n      _data: data\n    } = this;\n    const {\n      iScale,\n      _stacked\n    } = meta;\n    const iAxis = iScale.axis;\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {\n      mode\n    });\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    const {\n      min: otherMin,\n      max: otherMax\n    } = getUserBounds(otherScale);\n    let i, parsed;\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        break;\n      }\n    }\n    if (sorted) {\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isNumberFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n  getMaxOverflow() {\n    return false;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n  update(mode) {}\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || elements.length - start;\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n  }\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n    if (values.$shared) {\n      values.$shared = sharing;\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n    return values;\n  }\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {\n      sharedOptions,\n      includeOptions\n    };\n  }\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      options: !active && this.getSharedOptions(options) || options\n    });\n  }\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n    if (count) {\n      this.parse(0, count);\n    }\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n    const move = arr => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n  updateElements(element, start, count, mode) {}\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n_defineProperty(DatasetController, \"defaults\", {});\n_defineProperty(DatasetController, \"datasetElementType\", null);\n_defineProperty(DatasetController, \"dataElementType\", null);\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n  return min;\n}\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - size / 2\n  };\n}\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n  if (edge === true) {\n    properties.borderSkipped = {\n      top: true,\n      right: true,\n      bottom: true,\n      left: true\n    };\n    return;\n  }\n  const {\n    start,\n    end,\n    reverse,\n    top,\n    bottom\n  } = borderProps(properties);\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, {\n  inflateAmount\n}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseObjectData(meta, data, start, count) {\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const {\n      xAxisKey = 'x',\n      yAxisKey = 'y'\n    } = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n  getMaxOverflow() {\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {\n      iScale,\n      vScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      index,\n      _cachedMeta: {\n        vScale\n      }\n    } = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n        base,\n        head: base\n      } : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n  _getStacks(last, dataIndex) {\n    const {\n      iScale\n    } = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type).filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n    const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n    const iScaleValue = currentParsed && currentParsed[iScale.axis];\n    const skipNull = meta => {\n      const parsed = meta._parsed.find(item => item[iScale.axis] === iScaleValue);\n      const val = parsed && parsed[meta.vScale.axis];\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n    return stacks;\n  }\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n  _getAxisCount() {\n    return this._getAxis().length;\n  }\n  getFirstScaleIdForIndexAxis() {\n    const scales = this.chart.scales;\n    const indexScaleId = this.chart.options.indexAxis;\n    return Object.keys(scales).filter(key => scales[key].axis === indexScaleId).shift();\n  }\n  _getAxis() {\n    const axis = {};\n    const firstScaleAxisId = this.getFirstScaleIdForIndexAxis();\n    for (const dataset of this.chart.data.datasets) {\n      axis[valueOrDefault(this.chart.options.indexAxis === 'x' ? dataset.xAxisID : dataset.yAxisID, firstScaleAxisId)] = true;\n    }\n    return Object.keys(axis);\n  }\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = name !== undefined ? stacks.indexOf(name) : -1;\n    return index === -1 ? stacks.length - 1 : index;\n  }\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n  _calculateBarValuePixels(index) {\n    const {\n      _cachedMeta: {\n        vScale,\n        _stacked,\n        index: datasetIndex\n      },\n      options: {\n        base: baseValue,\n        minBarLength\n      }\n    } = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      head = base;\n    }\n    size = head - base;\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n      if (_stacked && !floating) {\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    const axisCount = this._getAxisCount();\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount * axisCount) : computeFitCategoryTraits(index, ruler, options, stackCount * axisCount);\n      const axisID = this.chart.options.indexAxis === 'x' ? this.getDataset().xAxisID : this.getDataset().yAxisID;\n      const axisNumber = this._getAxis().indexOf(valueOrDefault(axisID, this.getFirstScaleIdForIndexAxis()));\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined) + axisNumber;\n      center = range.start + range.chunk * stackIndex + range.chunk / 2;\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n}\n_defineProperty(BarController, \"id\", 'bar');\n_defineProperty(BarController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'bar',\n  categoryPercentage: 0.8,\n  barPercentage: 0.9,\n  grouped: true,\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'base', 'width', 'height']\n    }\n  }\n});\n_defineProperty(BarController, \"overrides\", {\n  scales: {\n    _index_: {\n      type: 'category',\n      offset: true,\n      grid: {\n        offset: true\n      }\n    },\n    _value_: {\n      type: 'linear',\n      beginAtZero: true\n    }\n  }\n});\nclass BubbleController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n  update(mode) {\n    const points = this._cachedMeta.data;\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale\n    } = this._cachedMeta;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n    if (values.$shared) {\n      values = Object.assign({}, values, {\n        $shared: false\n      });\n    }\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n    return values;\n  }\n}\n_defineProperty(BubbleController, \"id\", 'bubble');\n_defineProperty(BubbleController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'point',\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'borderWidth', 'radius']\n    }\n  }\n});\n_defineProperty(BubbleController, \"overrides\", {\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  }\n});\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {\n    ratioX,\n    ratioY,\n    offsetX,\n    offsetY\n  };\n}\nclass DoughnutController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n  linkScales() {}\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = i => +data[i];\n      if (isObject(data[start])) {\n        const {\n          key = 'value'\n        } = this._parsing;\n        getter = i => +resolveObjectKey(data[i], key);\n      }\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n    return {\n      rotation: min,\n      circumference: max - min\n    };\n  }\n  update(mode) {\n    const chart = this.chart;\n    const {\n      chartArea\n    } = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n    const {\n      circumference,\n      rotation\n    } = this._getRotationExtents();\n    const {\n      ratioX,\n      ratioY,\n      offsetX,\n      offsetY\n    } = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n    meta.total = this.calculateTotal();\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n    return total;\n  }\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n    if (!arcs) {\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n    if (!arcs) {\n      return 0;\n    }\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n  getMaxOffset(arcs) {\n    let max = 0;\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n    return ringWeightOffset;\n  }\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n_defineProperty(DoughnutController, \"id\", 'doughnut');\n_defineProperty(DoughnutController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: false\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n    }\n  },\n  cutout: '50%',\n  rotation: 0,\n  circumference: 360,\n  radius: '100%',\n  spacing: 0,\n  indexAxis: 'r'\n});\n_defineProperty(DoughnutController, \"descriptors\", {\n  _scriptable: name => name !== 'spacing',\n  _indexable: name => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n});\n_defineProperty(DoughnutController, \"overrides\", {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(chart) {\n          const data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            const {\n              labels: {\n                pointStyle,\n                color\n              }\n            } = chart.legend.options;\n            return data.labels.map((label, i) => {\n              const meta = chart.getDatasetMeta(0);\n              const style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                fontColor: color,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    }\n  }\n});\nclass LineController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      dataset: line,\n      data: points = [],\n      _dataset\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n    this.updateElements(points, start, count, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const {\n      sharedOptions,\n      includeOptions\n    } = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n_defineProperty(LineController, \"id\", 'line');\n_defineProperty(LineController, \"defaults\", {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  showLine: true,\n  spanGaps: false\n});\n_defineProperty(LineController, \"overrides\", {\n  scales: {\n    _index_: {\n      type: 'category'\n    },\n    _value_: {\n      type: 'linear'\n    }\n  }\n});\nclass PolarAreaController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {\n      min: Number.POSITIVE_INFINITY,\n      max: Number.NEGATIVE_INFINITY\n    };\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n    return range;\n  }\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n    this.outerRadius = outerRadius - radiusLength * this.index;\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n    const defaultAngle = 360 / this.countVisibleElements();\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n    return count;\n  }\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n  }\n}\n_defineProperty(PolarAreaController, \"id\", 'polarArea');\n_defineProperty(PolarAreaController, \"defaults\", {\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: true\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n    }\n  },\n  indexAxis: 'r',\n  startAngle: 0\n});\n_defineProperty(PolarAreaController, \"overrides\", {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(chart) {\n          const data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            const {\n              labels: {\n                pointStyle,\n                color\n              }\n            } = chart.legend.options;\n            return data.labels.map((label, i) => {\n              const meta = chart.getDatasetMeta(0);\n              const style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                fontColor: color,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    }\n  },\n  scales: {\n    r: {\n      type: 'radialLinear',\n      angleLines: {\n        display: false\n      },\n      beginAtZero: true,\n      grid: {\n        circular: true\n      },\n      pointLabels: {\n        display: false\n      },\n      startAngle: 0\n    }\n  }\n});\nclass PieController extends DoughnutController {}\n_defineProperty(PieController, \"id\", 'pie');\n_defineProperty(PieController, \"defaults\", {\n  cutout: 0,\n  rotation: 0,\n  circumference: 360,\n  radius: '100%'\n});\nclass RadarController extends DatasetController {\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n    line.points = points;\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n      this.updateElement(line, undefined, properties, mode);\n    }\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n_defineProperty(RadarController, \"id\", 'radar');\n_defineProperty(RadarController, \"defaults\", {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  indexAxis: 'r',\n  showLine: true,\n  elements: {\n    line: {\n      fill: 'start'\n    }\n  }\n});\n_defineProperty(RadarController, \"overrides\", {\n  aspectRatio: 1,\n  scales: {\n    r: {\n      type: 'radialLinear'\n    }\n  }\n});\nclass ScatterController extends DatasetController {\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {\n      xScale,\n      yScale\n    } = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {\n      data: points = []\n    } = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {\n      start,\n      count\n    } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    if (this.options.showLine) {\n      if (!this.datasetElementType) {\n        this.addElements();\n      }\n      const {\n        dataset: line,\n        _dataset\n      } = meta;\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    } else if (this.datasetElementType) {\n      delete meta.dataset;\n      this.datasetElementType = false;\n    }\n    this.updateElements(points, start, count, mode);\n  }\n  addElements() {\n    const {\n      showLine\n    } = this.options;\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n    super.addElements();\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {\n      iScale,\n      vScale,\n      _stacked,\n      _dataset\n    } = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {\n      spanGaps,\n      segment\n    } = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n_defineProperty(ScatterController, \"id\", 'scatter');\n_defineProperty(ScatterController, \"defaults\", {\n  datasetElementType: false,\n  dataElementType: 'point',\n  showLine: false,\n  fill: false\n});\n_defineProperty(ScatterController, \"overrides\", {\n  interaction: {\n    mode: 'point'\n  },\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  }\n});\nvar controllers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BarController: BarController,\n  BubbleController: BubbleController,\n  DoughnutController: DoughnutController,\n  LineController: LineController,\n  PieController: PieController,\n  PolarAreaController: PolarAreaController,\n  RadarController: RadarController,\n  ScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase {\n  /**\n  * Override default date adapter methods.\n  * Accepts type parameter to define options type.\n  * @example\n  * Chart._adapters._date.override<{myAdapterOption: string}>({\n  *   init() {\n  *     console.log(this.options.myAdapterOption);\n  *   }\n  * })\n  */\n  static override(members) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n  constructor(options) {\n    _defineProperty(this, \"options\", void 0);\n    this.options = options || {};\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n  formats() {\n    return abstract();\n  }\n  parse() {\n    return abstract();\n  }\n  format() {\n    return abstract();\n  }\n  add() {\n    return abstract();\n  }\n  diff() {\n    return abstract();\n  }\n  startOf() {\n    return abstract();\n  }\n  endOf() {\n    return abstract();\n  }\n}\nvar adapters = {\n  _date: DateAdapterBase\n};\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {\n    controller,\n    data,\n    _sorted\n  } = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  const spanGaps = metaset.dataset ? metaset.dataset.options ? metaset.dataset.options.spanGaps : null : null;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      const result = lookupMethod(data, axis, value);\n      if (spanGaps) {\n        const {\n          vScale\n        } = controller._cachedMeta;\n        const {\n          _parsed\n        } = metaset;\n        const distanceToDefinedLo = _parsed.slice(0, result.lo + 1).reverse().findIndex(point => !isNullOrUndef(point[vScale.axis]));\n        result.lo -= Math.max(0, distanceToDefinedLo);\n        const distanceToDefinedHi = _parsed.slice(result.hi).findIndex(point => !isNullOrUndef(point[vScale.axis]));\n        result.hi += Math.max(0, distanceToDefinedHi);\n      }\n      return result;\n    } else if (controller._sharedOptions) {\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {\n          lo: start.lo,\n          hi: end.hi\n        };\n      }\n    }\n  }\n  return {\n    lo: 0,\n    hi: data.length - 1\n  };\n}\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {\n      index,\n      data\n    } = metasets[i];\n    const {\n      lo,\n      hi\n    } = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n  return function (pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n  const evaluationFunc = function (element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  };\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n  function evaluationFunc(element, datasetIndex, index) {\n    const {\n      startAngle,\n      endAngle\n    } = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {\n      angle\n    } = getAngleFromPoint(element, {\n      x: position.x,\n      y: position.y\n    });\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{\n        element,\n        datasetIndex,\n        index\n      }];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n  return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({\n        element,\n        datasetIndex,\n        index\n      });\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\nvar Interaction = {\n  evaluateInteractionItems,\n  modes: {\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n      if (!items.length) {\n        return [];\n      }\n      chart.getSortedVisibleDatasetMetas().forEach(meta => {\n        const index = items[0].index;\n        const element = meta.data[index];\n        if (element && !element.skip) {\n          elements.push({\n            element,\n            datasetIndex: meta.index,\n            index\n          });\n        }\n      });\n      return elements;\n    },\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({\n            element: data[i],\n            datasetIndex,\n            index: i\n          });\n        }\n      }\n      return items;\n    },\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n  });\n}\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({\n      position: pos,\n      options: {\n        stack,\n        stackWeight = 1\n      }\n    } = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && pos + stack,\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {\n      stack,\n      pos,\n      stackWeight\n    } = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {\n      count: 0,\n      placed: 0,\n      weight: 0,\n      size: 0\n    });\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {\n    vBoxMaxWidth,\n    hBoxMaxHeight\n  } = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {\n      fullSize\n    } = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {\n    pos,\n    box\n  } = layout;\n  const maxPadding = chartArea.maxPadding;\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {\n      size: 0,\n      count: 1\n    };\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal ? {\n    same: widthChanged,\n    other: heightChanged\n  } : {\n    same: heightChanged,\n    other: widthChanged\n  };\n}\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function marginForPositions(positions) {\n    const margin = {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    };\n    positions.forEach(pos => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n  return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n    const {\n      same,\n      other\n    } = updateDims(chartArea, params, layout, stacks);\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {\n    x,\n    y\n  } = chartArea;\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {\n      count: 1,\n      placed: 0,\n      weight: 1\n    };\n    const weight = layout.stackWeight / stack.weight || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n  chartArea.x = x;\n  chartArea.y = y;\n}\nvar layouts = {\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    item._layers = item._layers || function () {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n    chart.boxes.push(item);\n  },\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) => wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w\n    };\n    each(boxes.chartArea, layout => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0\n      });\n    });\n  }\n};\nclass BasePlatform {\n  acquireContext(canvas, aspectRatio) {}\n  releaseContext(context) {\n    return false;\n  }\n  addEventListener(chart, type, listener) {}\n  removeEventListener(chart, type, listener) {}\n  getDevicePixelRatio() {\n    return 1;\n  }\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n  isAttached(canvas) {\n    return true;\n  }\n  updateConfig(config) {}\n}\nclass BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\nconst EXPANDO_KEY = '$chartjs';\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\nconst isNullOrEmpty = value => value === null || value === '';\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n  return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n  passive: true\n} : false;\nfunction addListener(node, type, listener) {\n  if (node) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n}\nfunction removeListener(chart, type, listener) {\n  if (chart && chart.canvas) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n  }\n}\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {\n    x,\n    y\n  } = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null\n  };\n}\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled(event => {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n  addListener(canvas, type, proxy);\n  return proxy;\n}\nclass DomPlatform extends BasePlatform {\n  acquireContext(canvas, aspectRatio) {\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n    if (context && context.canvas === canvas) {\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n    return null;\n  }\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach(prop => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n    const style = initial.style || {};\n    Object.keys(style).forEach(key => {\n      canvas.style[key] = style[key];\n    });\n    canvas.width = canvas.width;\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n  addEventListener(chart, type, listener) {\n    this.removeEventListener(chart, type);\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n    if (!proxy) {\n      return;\n    }\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n  isAttached(canvas) {\n    const container = canvas && _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\nclass Element {\n  constructor() {\n    _defineProperty(this, \"x\", void 0);\n    _defineProperty(this, \"y\", void 0);\n    _defineProperty(this, \"active\", false);\n    _defineProperty(this, \"options\", void 0);\n    _defineProperty(this, \"$animations\", void 0);\n  }\n  tooltipPosition(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n  getProps(props, final) {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this;\n    }\n    const ret = {};\n    props.forEach(prop => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n    });\n    return ret;\n  }\n}\n_defineProperty(Element, \"defaults\", {});\n_defineProperty(Element, \"defaultRoutes\", undefined);\nfunction autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n  next = start;\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n  if (len < 2) {\n    return false;\n  }\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\nconst reverseAlign = align => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6;\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\nfunction garbageCollect(caches, length) {\n  each(caches, cache => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n  return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n  if (reverse && position !== 'right' || !reverse && position === 'right') {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n  const {\n    top,\n    left,\n    bottom,\n    right,\n    chart\n  } = scale;\n  const {\n    chartArea,\n    scales\n  } = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {\n    titleX,\n    titleY,\n    maxWidth,\n    rotation\n  };\n}\nclass Scale extends Element {\n  constructor(cfg) {\n    super();\n    this.id = cfg.id;\n    this.type = cfg.type;\n    this.options = undefined;\n    this.ctx = cfg.ctx;\n    this.chart = cfg.chart;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this.maxWidth = undefined;\n    this.maxHeight = undefined;\n    this.paddingTop = undefined;\n    this.paddingBottom = undefined;\n    this.paddingLeft = undefined;\n    this.paddingRight = undefined;\n    this.axis = undefined;\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    this.ticks = [];\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    this._startPixel = undefined;\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n  init(options) {\n    this.options = options.setContext(this.getContext());\n    this.axis = options.axis;\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n  parse(raw, index) {\n    return raw;\n  }\n  getUserBounds() {\n    let {\n      _userMin,\n      _userMax,\n      _suggestedMin,\n      _suggestedMax\n    } = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isNumberFinite(_userMin),\n      maxDefined: isNumberFinite(_userMax)\n    };\n  }\n  getMinMax(canStack) {\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let range;\n    if (minDefined && maxDefined) {\n      return {\n        min,\n        max\n      };\n    }\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n  getTicks() {\n    return this.ticks;\n  }\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n  beforeUpdate() {\n    callback(this.options.beforeUpdate, [this]);\n  }\n  update(maxWidth, maxHeight, margins) {\n    const {\n      beginAtZero,\n      grace,\n      ticks: tickOpts\n    } = this.options;\n    const sampleSize = tickOpts.sampleSize;\n    this.beforeUpdate();\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n    this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n    this.beforeBuildTicks();\n    this.ticks = this.buildTicks() || [];\n    this.afterBuildTicks();\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n    this.configure();\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation();\n    this.afterCalculateLabelRotation();\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n    if (samplingEnabled) {\n      this._convertTicksToLabels(this.ticks);\n    }\n    this.beforeFit();\n    this.fit();\n    this.afterFit();\n    this.afterUpdate();\n  }\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n  afterUpdate() {\n    callback(this.options.afterUpdate, [this]);\n  }\n  beforeSetDimensions() {\n    callback(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = 0;\n      this.bottom = this.height;\n    }\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    callback(this.options.afterSetDimensions, [this]);\n  }\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    callback(this.options[name], [this]);\n  }\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n  beforeTickToLabelConversion() {\n    callback(this.options.beforeTickToLabelConversion, [this]);\n  }\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    callback(this.options.afterTickToLabelConversion, [this]);\n  }\n  beforeCalculateLabelRotation() {\n    callback(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    callback(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n  beforeFit() {\n    callback(this.options.beforeFit, [this]);\n  }\n  fit() {\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n    const {\n      chart,\n      options: {\n        ticks: tickOpts,\n        title: titleOpts,\n        grid: gridOpts\n      }\n    } = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight;\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n      if (tickOpts.display && this.ticks.length) {\n        const {\n          first,\n          last,\n          widest,\n          highest\n        } = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n        if (isHorizontal) {\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n    this._handleMargins();\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n  _calculatePadding(first, last, sin, cos) {\n    const {\n      ticks: {\n        align,\n        padding\n      },\n      position\n    } = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n  afterFit() {\n    callback(this.options.afterFit, [this]);\n  }\n  isHorizontal() {\n    const {\n      axis,\n      position\n    } = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  isFullSize() {\n    return this.options.fullSize;\n  }\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n    this.generateTickLabels(ticks);\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n    this.afterTickToLabelConversion();\n  }\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n    return labelSizes;\n  }\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {\n      ctx,\n      _longestTextCache: caches\n    } = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {\n        data: {},\n        gc: []\n      };\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n    const valueAt = idx => ({\n      width: widths[idx] || 0,\n      height: heights[idx] || 0\n    });\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights\n    };\n  }\n  getLabelForValue(value) {\n    return value;\n  }\n  getPixelForValue(value, index) {\n    return NaN;\n  }\n  getValueForPixel(pixel) {}\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n  getBaseValue() {\n    const {\n      min,\n      max\n    } = this;\n    return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n  }\n  getContext(index) {\n    const ticks = this.ticks || [];\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n    return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n  }\n  _isVisible() {\n    const display = this.options.display;\n    if (display !== 'auto') {\n      return !!display;\n    }\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {\n      grid,\n      position,\n      border\n    } = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function (pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n      lineValue = getPixelForGridLine(this, i, offset);\n      if (lineValue === undefined) {\n        continue;\n      }\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset\n      });\n    }\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n    return items;\n  }\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {\n      position,\n      ticks: optionTicks\n    } = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {\n      align,\n      crossAlign,\n      padding,\n      mirror\n    } = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n      if (isHorizontal) {\n        x = pixel;\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += lineHeight / 2 * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n      let backdrop;\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n        switch (textBaseline) {\n          case 'middle':\n            top -= height / 2;\n            break;\n          case 'bottom':\n            top -= height;\n            break;\n        }\n        switch (textAlign) {\n          case 'center':\n            left -= width / 2;\n            break;\n          case 'right':\n            left -= width;\n            break;\n          case 'inner':\n            if (i === ilen - 1) {\n              left -= width;\n            } else if (i > 0) {\n              left -= width / 2;\n            }\n            break;\n        }\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n          color: optsAtIndex.backdropColor\n        };\n      }\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop\n        }\n      });\n    }\n    return items;\n  }\n  _getXAxisLabelAlignment() {\n    const {\n      position,\n      ticks\n    } = this.options;\n    const rotation = -toRadians(this.labelRotation);\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n    let align = 'center';\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n    return align;\n  }\n  _getYAxisLabelAlignment(tl) {\n    const {\n      position,\n      ticks: {\n        crossAlign,\n        mirror,\n        padding\n      }\n    } = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n    let textAlign;\n    let x;\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= widest / 2;\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n    return {\n      textAlign,\n      x\n    };\n  }\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n    const chart = this.chart;\n    const position = this.options.position;\n    if (position === 'left' || position === 'right') {\n      return {\n        top: 0,\n        left: this.left,\n        bottom: chart.height,\n        right: this.right\n      };\n    }\n    if (position === 'top' || position === 'bottom') {\n      return {\n        top: this.top,\n        left: 0,\n        bottom: this.bottom,\n        right: chart.width\n      };\n    }\n  }\n  drawBackground() {\n    const {\n      ctx,\n      options: {\n        backgroundColor\n      },\n      left,\n      top,\n      width,\n      height\n    } = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n        if (grid.drawOnChartArea) {\n          drawLine({\n            x: item.x1,\n            y: item.y1\n          }, {\n            x: item.x2,\n            y: item.y2\n          }, item);\n        }\n        if (grid.drawTicks) {\n          drawLine({\n            x: item.tx1,\n            y: item.ty1\n          }, {\n            x: item.tx2,\n            y: item.ty2\n          }, {\n            color: item.tickColor,\n            width: item.tickWidth,\n            borderDash: item.tickBorderDash,\n            borderDashOffset: item.tickBorderDashOffset\n          });\n        }\n      }\n    }\n  }\n  drawBorder() {\n    const {\n      chart,\n      ctx,\n      options: {\n        border,\n        grid\n      }\n    } = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.restore();\n  }\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n    if (!optionTicks.display) {\n      return;\n    }\n    const ctx = this.ctx;\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n  drawTitle() {\n    const {\n      ctx,\n      options: {\n        position,\n        title,\n        reverse\n      }\n    } = this;\n    if (!title.display) {\n      return;\n    }\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = titleArgs(this, offset, position, align);\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      return [{\n        z: tz,\n        draw: chartArea => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n    return [{\n      z: gz,\n      draw: chartArea => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: chartArea => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\nclass TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n    if (isIChartComponent(proto)) {\n      parentScope = this.register(proto);\n    }\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n    if (id in items) {\n      return scope;\n    }\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n    return scope;\n  }\n  get(id) {\n    return this.items[id];\n  }\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n    if (id in items) {\n      delete items[id];\n    }\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\nfunction registerDefaults(item, scope, parentScope) {\n  const itemDefaults = merge(Object.create(null), [parentScope ? defaults.get(parentScope) : {}, defaults.get(scope), item.defaults]);\n  defaults.set(scope, itemDefaults);\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\nclass Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n  add(...args) {\n    this._each('register', args);\n  }\n  remove(...args) {\n    this._each('unregister', args);\n  }\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n        this._exec(method, reg, arg);\n      } else {\n        each(arg, item => {\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    callback(component['before' + camelMethod], [], component);\n    registry[method](component);\n    callback(component['after' + camelMethod], [], component);\n  }\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    return this.plugins;\n  }\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n}\nvar registry = /* #__PURE__ */new Registry();\nclass PluginService {\n  constructor() {\n    this._init = [];\n  }\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n    return true;\n  }\n  invalidate() {\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n    const descriptors = this._cache = this._createDescriptors(chart);\n    this._notifyStateChanges(chart);\n    return descriptors;\n  }\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n  return {\n    plugins,\n    localIds\n  };\n}\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\nfunction createDescriptors(chart, {\n  plugins,\n  localIds\n}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {\n        plugin,\n        local: localIds[id]\n      }, opts, context)\n    });\n  }\n  return result;\n}\nfunction pluginOpts(config, {\n  plugin,\n  local\n}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\nfunction getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\nfunction determineAxis(id, ...scaleOptions) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (const opts of scaleOptions) {\n    const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {\n      axis\n    };\n  }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter(d => d.xAxisID === id || d.yAxisID === id);\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {\n    scales: {}\n  };\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{\n      axis\n    }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{\n        axis\n      }, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\nclass Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n  get platform() {\n    return this._config.platform;\n  }\n  get type() {\n    return this._config.type;\n  }\n  set type(type) {\n    this._config.type = type;\n  }\n  get data() {\n    return this._config.data;\n  }\n  set data(data) {\n    this._config.data = initData(data);\n  }\n  get options() {\n    return this._config.options;\n  }\n  set options(options) {\n    this._config.options = options;\n  }\n  get plugins() {\n    return this._config.plugins;\n  }\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType, () => [[`datasets.${datasetType}`, '']]);\n  }\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`, () => [[`datasets.${datasetType}.transitions.${transition}`, `transitions.${transition}`], [`datasets.${datasetType}`, '']]);\n  }\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`, () => [[`datasets.${datasetType}.elements.${elementType}`, `datasets.${datasetType}`, `elements.${elementType}`, '']]);\n  }\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`, () => [[`plugins.${id}`, ...(plugin.additionalOptionScopes || [])]]);\n  }\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {\n      options,\n      type\n    } = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n    const scopes = new Set();\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n  chartOptionScopes() {\n    const {\n      options,\n      type\n    } = this;\n    return [options, overrides[type] || {}, defaults.datasets[type] || {}, {\n      type\n    }, defaults, descriptors];\n  }\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {\n      $shared: true\n    };\n    const {\n      resolver,\n      subPrefixes\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {\n      resolver\n    } = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n  }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\nconst hasFunction = value => isObject(value) && Object.getOwnPropertyNames(value).some(key => isFunction(value[key]));\nfunction needContext(proxy, names) {\n  const {\n    isScriptable,\n    isIndexable\n  } = _descriptors(proxy);\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n      return true;\n    }\n  }\n  return false;\n}\nvar version = \"4.5.0\";\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n  return function (a, b) {\n    return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n  };\n}\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n  return item;\n}\nconst instances = {};\nconst getChart = key => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter(c => c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\nclass Chart {\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n    }\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n  get aspectRatio() {\n    const {\n      options: {\n        aspectRatio,\n        maintainAspectRatio\n      },\n      width,\n      height,\n      _aspectRatio\n    } = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      return aspectRatio;\n    }\n    if (maintainAspectRatio && _aspectRatio) {\n      return _aspectRatio;\n    }\n    return height ? width / height : null;\n  }\n  get data() {\n    return this.config.data;\n  }\n  set data(data) {\n    this.config.data = data;\n  }\n  get options() {\n    return this._options;\n  }\n  set options(options) {\n    this.config.options = options;\n  }\n  get registry() {\n    return registry;\n  }\n  _initialize() {\n    this.notifyPlugins('beforeInit');\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n    this.bindEvents();\n    this.notifyPlugins('afterInit');\n    return this;\n  }\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {\n        width,\n        height\n      };\n    }\n  }\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n    this.notifyPlugins('resize', {\n      size: newSize\n    });\n    callback(options.onResize, [this, newSize], this);\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        this.render();\n      }\n    }\n  }\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n    if (scaleOpts) {\n      items = items.concat(Object.keys(scaleOpts).map(id => {\n        const scaleOptions = scaleOpts[id];\n        const axis = determineAxis(id, scaleOptions);\n        const isRadial = axis === 'r';\n        const isHorizontal = axis === 'x';\n        return {\n          options: scaleOptions,\n          dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n          dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n        };\n      }));\n    }\n    each(items, item => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n      scale.init(scaleOptions, options);\n    });\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n    each(scales, scale => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n  _removeUnreferencedMetasets() {\n    const {\n      _metasets: metasets,\n      data: {\n        datasets\n      }\n    } = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n    this._removeUnreferencedMetasets();\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {\n          datasetElementType,\n          dataElementType\n        } = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n    this._updateMetasets();\n    return newControllers;\n  }\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n  update(mode) {\n    const config = this.config;\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n    this._plugins.invalidate();\n    if (this.notifyPlugins('beforeUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const newControllers = this.buildOrUpdateControllers();\n    this.notifyPlugins('beforeElementsUpdate');\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {\n        controller\n      } = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n    if (!animsDisabled) {\n      each(newControllers, controller => {\n        controller.reset();\n      });\n    }\n    this._updateDatasets(mode);\n    this.notifyPlugins('afterUpdate', {\n      mode\n    });\n    this._layers.sort(compare2Level('z', '_idx'));\n    const {\n      _active,\n      _lastEvent\n    } = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n    this.render();\n  }\n  _updateScales() {\n    each(this.scales, scale => {\n      layouts.removeBox(this, scale);\n    });\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n  _updateHiddenIndices() {\n    const {\n      _hiddenIndices\n    } = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {\n      method,\n      start,\n      count\n    } of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = idx => new Set(_dataChanges.filter(c => c[0] === idx).map((c, i) => i + ',' + c.splice(1).join(',')));\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet).map(c => c.split(',')).map(a => ({\n      method: a[1],\n      start: +a[2],\n      count: +a[3]\n    }));\n  }\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    layouts.update(this, this.width, this.height, minPadding);\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n    this._layers = [];\n    each(this.boxes, box => {\n      if (noArea && box.position === 'chartArea') {\n        return;\n      }\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n    this.notifyPlugins('afterLayout');\n  }\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {\n      mode,\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({\n        datasetIndex: i\n      }) : mode);\n    }\n    this.notifyPlugins('afterDatasetsUpdate', {\n      mode\n    });\n  }\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {\n      meta,\n      index,\n      mode,\n      cancelable: true\n    };\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n    meta.controller._update(mode);\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n  render() {\n    if (this.notifyPlugins('beforeRender', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({\n        chart: this\n      });\n    }\n  }\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {\n        width,\n        height\n      } = this._resizeBeforeDraw;\n      this._resizeBeforeDraw = null;\n      this._resize(width, height);\n    }\n    this.clear();\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n    if (this.notifyPlugins('beforeDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this._drawDatasets();\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this.notifyPlugins('afterDraw');\n  }\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {\n      cancelable: true\n    }) === false) {\n      return;\n    }\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n    const clip = getDatasetClipArea(this, meta);\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n    if (clip) {\n      clipArea(ctx, clip);\n    }\n    meta.controller.draw();\n    if (clip) {\n      unclipArea(ctx);\n    }\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n    return [];\n  }\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n    return meta;\n  }\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {\n      chart: this,\n      type: 'chart'\n    }));\n  }\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n    const meta = this.getDatasetMeta(datasetIndex);\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, {\n        visible\n      });\n      this.update(ctx => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {\n      canvas,\n      ctx\n    } = this;\n    this._stop();\n    this.config.clearCache();\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n    delete instances[this.id];\n    this.notifyPlugins('afterDestroy');\n  }\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n    each(this.options.events, type => _add(type, listener));\n  }\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n    let detached;\n    const attached = () => {\n      _remove('attach', attached);\n      this.attached = true;\n      this.resize();\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n    detached = () => {\n      this.attached = false;\n      _remove('resize', listener);\n      this._stop();\n      this._resize(0, 0);\n      _add('attach', attached);\n    };\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({\n      datasetIndex,\n      index\n    }) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed) {\n      this._active = active;\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = plugin => (plugin.options.events || this.options.events).includes(e.native.type);\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n    if (changed || args.changed) {\n      this.render();\n    }\n    return this;\n  }\n  _handleEvent(e, replay, inChartArea) {\n    const {\n      _active: lastActive = [],\n      options\n    } = this;\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n    if (inChartArea) {\n      this._lastEvent = null;\n      callback(options.onHover, [e, active, this], this);\n      if (isClick) {\n        callback(options.onClick, [e, active, this], this);\n      }\n    }\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n    this._lastEvent = lastEvent;\n    return changed;\n  }\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive;\n    }\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n_defineProperty(Chart, \"defaults\", defaults);\n_defineProperty(Chart, \"instances\", instances);\n_defineProperty(Chart, \"overrides\", overrides);\n_defineProperty(Chart, \"registry\", registry);\n_defineProperty(Chart, \"version\", version);\n_defineProperty(Chart, \"getChart\", getChart);\nfunction invalidatePlugins() {\n  return each(Chart.instances, chart => chart._plugins.invalidate());\n}\nfunction clipSelf(ctx, element, endAngle) {\n  const {\n    startAngle,\n    x,\n    y,\n    outerRadius,\n    innerRadius,\n    options\n  } = element;\n  const {\n    borderWidth,\n    borderJoinStyle\n  } = options;\n  const outerAngleClip = Math.min(borderWidth / outerRadius, _normalizeAngle(startAngle - endAngle));\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius - borderWidth / 2, startAngle + outerAngleClip / 2, endAngle - outerAngleClip / 2);\n  if (innerRadius > 0) {\n    const innerAngleClip = Math.min(borderWidth / innerRadius, _normalizeAngle(startAngle - endAngle));\n    ctx.arc(x, y, innerRadius + borderWidth / 2, endAngle - innerAngleClip / 2, startAngle + innerAngleClip / 2, true);\n  } else {\n    const clipWidth = Math.min(borderWidth / 2, outerRadius * _normalizeAngle(startAngle - endAngle));\n    if (borderJoinStyle === 'round') {\n      ctx.arc(x, y, clipWidth, endAngle - PI / 2, startAngle + PI / 2, true);\n    } else if (borderJoinStyle === 'bevel') {\n      const r = 2 * clipWidth * clipWidth;\n      const endX = -r * Math.cos(endAngle + PI / 2) + x;\n      const endY = -r * Math.sin(endAngle + PI / 2) + y;\n      const startX = r * Math.cos(startAngle + PI / 2) + x;\n      const startY = r * Math.sin(startAngle + PI / 2) + y;\n      ctx.lineTo(endX, endY);\n      ctx.lineTo(startX, startY);\n    }\n  }\n  ctx.closePath();\n  ctx.moveTo(0, 0);\n  ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  ctx.clip('evenodd');\n}\nfunction clipArc(ctx, element, endAngle) {\n  const {\n    startAngle,\n    pixelMargin,\n    x,\n    y,\n    outerRadius,\n    innerRadius\n  } = element;\n  let angleMargin = pixelMargin / outerRadius;\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = val => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n  };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta)\n  };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\n  const {\n    x,\n    y,\n    startAngle: start,\n    pixelMargin,\n    innerRadius: innerR\n  } = element;\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  let spacingOffset = 0;\n  const alpha = end - start;\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {\n    outerStart,\n    outerEnd,\n    innerStart,\n    innerEnd\n  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n  ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference\n  } = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n  const {\n    fullCircles,\n    startAngle,\n    circumference,\n    options\n  } = element;\n  const {\n    borderWidth,\n    borderJoinStyle,\n    borderDash,\n    borderDashOffset,\n    borderRadius\n  } = options;\n  const inner = options.borderAlign === 'inner';\n  if (!borderWidth) {\n    return;\n  }\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n  if (options.selfJoin && endAngle - startAngle >= PI && borderRadius === 0 && borderJoinStyle !== 'miter') {\n    clipSelf(ctx, element, endAngle);\n  }\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\nclass ArcElement extends Element {\n  constructor(cfg) {\n    super();\n    _defineProperty(this, \"circumference\", void 0);\n    _defineProperty(this, \"endAngle\", void 0);\n    _defineProperty(this, \"fullCircles\", void 0);\n    _defineProperty(this, \"innerRadius\", void 0);\n    _defineProperty(this, \"outerRadius\", void 0);\n    _defineProperty(this, \"pixelMargin\", void 0);\n    _defineProperty(this, \"startAngle\", void 0);\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(chartX, chartY, useFinalPosition) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {\n      angle,\n      distance\n    } = getAngleFromPoint(point, {\n      x: chartX,\n      y: chartY\n    });\n    const {\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius,\n      circumference\n    } = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n    const betweenAngles = _circumference >= TAU || nonZeroBetween;\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n    return betweenAngles && withinRadius;\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      startAngle,\n      endAngle,\n      innerRadius,\n      outerRadius\n    } = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius'], useFinalPosition);\n    const {\n      offset,\n      spacing\n    } = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n  tooltipPosition(useFinalPosition) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n  draw(ctx) {\n    const {\n      options,\n      circumference\n    } = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n    ctx.save();\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n    ctx.restore();\n  }\n}\n_defineProperty(ArcElement, \"id\", 'arc');\n_defineProperty(ArcElement, \"defaults\", {\n  borderAlign: 'center',\n  borderColor: '#fff',\n  borderDash: [],\n  borderDashOffset: 0,\n  borderJoinStyle: undefined,\n  borderRadius: 0,\n  borderWidth: 2,\n  offset: 0,\n  spacing: 0,\n  angle: undefined,\n  circular: true,\n  selfJoin: false\n});\n_defineProperty(ArcElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor'\n});\n_defineProperty(ArcElement, \"descriptors\", {\n  _scriptable: true,\n  _indexable: name => name !== 'borderDash'\n});\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n  return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {\n    start: paramsStart = 0,\n    end: paramsEnd = count - 1\n  } = params;\n  const {\n    start: segmentStart,\n    end: segmentEnd\n  } = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\nfunction pathSegment(ctx, line, segment, params) {\n  const {\n    points,\n    options\n  } = line;\n  const {\n    count,\n    start,\n    loop,\n    ilen\n  } = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  let {\n    move = true,\n    reverse\n  } = params || {};\n  let i, point, prev;\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    prev = point;\n  }\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n  return !!loop;\n}\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {\n    count,\n    start,\n    ilen\n  } = pathVars(points, segment, params);\n  const {\n    move = true,\n    reverse\n  } = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n  const pointIndex = index => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n    if (point.skip) {\n      continue;\n    }\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    lastY = y;\n  }\n  drawX();\n}\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n  return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n  const {\n    segments,\n    options\n  } = line;\n  const segmentMethod = _getSegmentMethod(line);\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {\n      start,\n      end: start + count - 1\n    })) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\nclass LineElement extends Element {\n  constructor(cfg) {\n    super();\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n  get points() {\n    return this._points;\n  }\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {\n      property,\n      start: value,\n      end: value\n    });\n    if (!segments.length) {\n      return;\n    }\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {\n        start,\n        end\n      } = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n    start = start || 0;\n    count = count || this.points.length - start;\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {\n        start,\n        end: start + count - 1\n      });\n    }\n    return !!loop;\n  }\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n    if (points.length && options.borderWidth) {\n      ctx.save();\n      draw(ctx, this, start, count);\n      ctx.restore();\n    }\n    if (this.animated) {\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n_defineProperty(LineElement, \"id\", 'line');\n_defineProperty(LineElement, \"defaults\", {\n  borderCapStyle: 'butt',\n  borderDash: [],\n  borderDashOffset: 0,\n  borderJoinStyle: 'miter',\n  borderWidth: 3,\n  capBezierPoints: true,\n  cubicInterpolationMode: 'default',\n  fill: false,\n  spanGaps: false,\n  stepped: false,\n  tension: 0\n});\n_defineProperty(LineElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n});\n_defineProperty(LineElement, \"descriptors\", {\n  _scriptable: true,\n  _indexable: name => name !== 'borderDash' && name !== 'fill'\n});\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  const options = el.options;\n  const {\n    [axis]: value\n  } = el.getProps([axis], useFinalPosition);\n  return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n  constructor(cfg) {\n    super();\n    _defineProperty(this, \"parsed\", void 0);\n    _defineProperty(this, \"skip\", void 0);\n    _defineProperty(this, \"stop\", void 0);\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    const options = this.options;\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange$1(this, mouseX, 'x', useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange$1(this, mouseY, 'y', useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y\n    } = this.getProps(['x', 'y'], useFinalPosition);\n    return {\n      x,\n      y\n    };\n  }\n  size(options) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n  draw(ctx, area) {\n    const options = this.options;\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n_defineProperty(PointElement, \"id\", 'point');\n/**\n* @type {any}\n*/\n_defineProperty(PointElement, \"defaults\", {\n  borderWidth: 1,\n  hitRadius: 1,\n  hoverBorderWidth: 1,\n  hoverRadius: 4,\n  pointStyle: 'circle',\n  radius: 3,\n  rotation: 0\n});\n/**\n* @type {any}\n*/\n_defineProperty(PointElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n});\nfunction getBarBounds(bar, useFinalPosition) {\n  const {\n    x,\n    y,\n    base,\n    width,\n    height\n  } = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);\n  let left, right, top, bottom, half;\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n  return {\n    left,\n    top,\n    right,\n    bottom\n  };\n}\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {\n    enableBorderRadius\n  } = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n  const enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n      }\n    }\n  };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\nclass BarElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  draw(ctx) {\n    const {\n      inflateAmount,\n      options: {\n        borderColor,\n        backgroundColor\n      }\n    } = this;\n    const {\n      inner,\n      outer\n    } = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n    ctx.save();\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n    ctx.restore();\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {\n      x,\n      y,\n      base,\n      horizontal\n    } = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n_defineProperty(BarElement, \"id\", 'bar');\n_defineProperty(BarElement, \"defaults\", {\n  borderSkipped: 'start',\n  borderWidth: 0,\n  borderRadius: 0,\n  inflateAmount: 'auto',\n  pointStyle: undefined\n});\n_defineProperty(BarElement, \"defaultRoutes\", {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n});\nvar elements = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArcElement: ArcElement,\n  BarElement: BarElement,\n  LineElement: LineElement,\n  PointElement: PointElement\n});\nconst BORDER_COLORS = ['rgb(54, 162, 235)', 'rgb(255, 99, 132)', 'rgb(255, 159, 64)', 'rgb(255, 205, 86)', 'rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n  return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n  return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n  return i;\n}\nfunction getColorizer(chart) {\n  let i = 0;\n  return (dataset, datasetIndex) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\nfunction containsColorsDefinitions(descriptors) {\n  let k;\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction containsColorsDefinition(descriptor) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nfunction containsDefaultColorsDefenitions() {\n  return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\nvar plugin_colors = {\n  id: 'colors',\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  },\n  beforeLayout(chart, _args, options) {\n    if (!options.enabled) {\n      return;\n    }\n    const {\n      data: {\n        datasets\n      },\n      options: chartOptions\n    } = chart.config;\n    const {\n      elements\n    } = chartOptions;\n    const containsColorDefenition = containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements) || containsDefaultColorsDefenitions();\n    if (!options.forceOverride && containsColorDefenition) {\n      return;\n    }\n    const colorizer = getColorizer(chart);\n    datasets.forEach(colorizer);\n  }\n};\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  const samples = options.samples || availableWidth;\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n  const decimated = [];\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {\n      x: pointAx,\n      y: pointAy\n    } = data[a];\n    maxArea = area = -1;\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      const lastIndex = i - 1;\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n  return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data\n    });\n  }\n}\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach(dataset => {\n    cleanDecimatedDataset(dataset);\n  });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n  let start = 0;\n  let count;\n  const {\n    iScale\n  } = meta;\n  const {\n    min,\n    max,\n    minDefined,\n    maxDefined\n  } = iScale.getUserBounds();\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n  return {\n    start,\n    count\n  };\n}\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false\n  },\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n    const availableWidth = chart.width;\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {\n        _data,\n        indexAxis\n      } = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n      if (!meta.controller.supportsDecimation) {\n        return;\n      }\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n      if (chart.options.parsing) {\n        return;\n      }\n      let {\n        start,\n        count\n      } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function () {\n            return this._decimated;\n          },\n          set: function (d) {\n            this._data = d;\n          }\n        });\n      }\n      let decimated;\n      switch (options.algorithm) {\n        case 'lttb':\n          decimated = lttbDecimation(data, start, count, availableWidth, options);\n          break;\n        case 'min-max':\n          decimated = minMaxDecimation(data, start, count, availableWidth);\n          break;\n        default:\n          throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n      dataset._decimated = decimated;\n    });\n  },\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\nfunction _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n  for (const segment of segments) {\n    let {\n      start,\n      end\n    } = segment;\n    end = _findSegmentEnd(start, end, points);\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n    if (!target.segments) {\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n    const targetSegments = _boundSegments(target, bounds);\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {\n    property,\n    start,\n    end\n  };\n}\nfunction _pointsFromSegments(boundary, line) {\n  const {\n    x = null,\n    y = null\n  } = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({\n    start,\n    end\n  }) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({\n        x: first.x,\n        y\n      });\n      points.push({\n        x: last.x,\n        y\n      });\n    } else if (x !== null) {\n      points.push({\n        x,\n        y: first.y\n      });\n      points.push({\n        x,\n        y: last.y\n      });\n    }\n  });\n  return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n  for (; end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\nfunction _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n  return points.length ? new LineElement({\n    points,\n    options: {\n      tension: 0\n    },\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\nfunction _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\nfunction _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n  if (!propagate) {\n    return fill;\n  }\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n    if (target.visible) {\n      return fill;\n    }\n    visited.push(fill);\n    fill = target.fill;\n  }\n  return false;\n}\nfunction _decodeFill(line, index, count) {\n  const fill = parseFillOption(line);\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n  let target = parseFloat(fill);\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n  return target;\n}\nfunction _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\nfunction _getTargetValue(fill, scale, startValue) {\n  let value;\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n  if (fill === false || fill === null) {\n    return false;\n  }\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\nfunction _buildStackLine(source) {\n  const {\n    scale,\n    index,\n    line\n  } = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({\n    x: null,\n    y: scale.bottom\n  }, line));\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({\n    points,\n    options: {}\n  });\n}\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {\n      first,\n      last,\n      point\n    } = findPoint(line, sourcePoint, 'x');\n    if (!point || first && last) {\n      continue;\n    }\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {\n    first,\n    last,\n    point\n  };\n}\nclass simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n  pathSegment(ctx, bounds, opts) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    bounds = bounds || {\n      start: 0,\n      end: TAU\n    };\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n  interpolate(point) {\n    const {\n      x,\n      y,\n      radius\n    } = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\nfunction _getTarget(source) {\n  const {\n    chart,\n    fill,\n    line\n  } = source;\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n  if (fill === 'shape') {\n    return true;\n  }\n  const boundary = computeBoundary(source);\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n  return _createBoundaryLine(boundary, line);\n}\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n  const {\n    scale = {},\n    fill\n  } = source;\n  const pixel = _getTargetPixel(fill, scale);\n  if (isNumberFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n  return null;\n}\nfunction computeCircularBoundary(source) {\n  const {\n    scale,\n    fill\n  } = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\nfunction _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {\n    chart,\n    index,\n    line,\n    scale,\n    axis\n  } = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {\n    above = color,\n    below = color\n  } = fillOption || {};\n  const meta = chart.getDatasetMeta(index);\n  const clip = getDatasetClipArea(chart, meta);\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {\n      line,\n      target,\n      above,\n      below,\n      area,\n      scale,\n      axis,\n      clip\n    });\n    unclipArea(ctx);\n  }\n}\nfunction doFill(ctx, cfg) {\n  const {\n    line,\n    target,\n    above,\n    below,\n    area,\n    scale,\n    clip\n  } = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n  let fillColor = below;\n  if (below !== above) {\n    if (property === 'x') {\n      clipVertical(ctx, target, area.top);\n      fill(ctx, {\n        line,\n        target,\n        color: above,\n        scale,\n        property,\n        clip\n      });\n      ctx.restore();\n      ctx.save();\n      clipVertical(ctx, target, area.bottom);\n    } else if (property === 'y') {\n      clipHorizontal(ctx, target, area.left);\n      fill(ctx, {\n        line,\n        target,\n        color: below,\n        scale,\n        property,\n        clip\n      });\n      ctx.restore();\n      ctx.save();\n      clipHorizontal(ctx, target, area.right);\n      fillColor = above;\n    }\n  }\n  fill(ctx, {\n    line,\n    target,\n    color: fillColor,\n    scale,\n    property,\n    clip\n  });\n  ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n  const {\n    segments,\n    points\n  } = target;\n  let first = true;\n  let lineLoop = false;\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {\n      start,\n      end\n    } = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {\n      move: lineLoop\n    });\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\nfunction clipHorizontal(ctx, target, clipX) {\n  const {\n    segments,\n    points\n  } = target;\n  let first = true;\n  let lineLoop = false;\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {\n      start,\n      end\n    } = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(clipX, firstPoint.y);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {\n      move: lineLoop\n    });\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(clipX, lastPoint.y);\n    }\n  }\n  ctx.lineTo(clipX, target.first().y);\n  ctx.closePath();\n  ctx.clip();\n}\nfunction fill(ctx, cfg) {\n  const {\n    line,\n    target,\n    property,\n    color,\n    scale,\n    clip\n  } = cfg;\n  const segments = _segments(line, target, property);\n  for (const {\n    source: src,\n    target: tgt,\n    start,\n    end\n  } of segments) {\n    const {\n      style: {\n        backgroundColor = color\n      } = {}\n    } = src;\n    const notShape = target !== true;\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n    clipBounds(ctx, scale, clip, notShape && _getBounds(property, start, end));\n    ctx.beginPath();\n    const lineLoop = !!line.pathSegment(ctx, src);\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n      const targetLoop = !!target.pathSegment(ctx, tgt, {\n        move: lineLoop,\n        reverse: true\n      });\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n    ctx.restore();\n  }\n}\nfunction clipBounds(ctx, scale, clip, bounds) {\n  const chartArea = scale.chart.chartArea;\n  const {\n    property,\n    start,\n    end\n  } = bounds || {};\n  if (property === 'x' || property === 'y') {\n    let left, top, right, bottom;\n    if (property === 'x') {\n      left = start;\n      top = chartArea.top;\n      right = end;\n      bottom = chartArea.bottom;\n    } else {\n      left = chartArea.left;\n      top = start;\n      right = chartArea.right;\n      bottom = end;\n    }\n    ctx.beginPath();\n    if (clip) {\n      left = Math.max(left, clip.left);\n      right = Math.min(right, clip.right);\n      top = Math.max(top, clip.top);\n      bottom = Math.min(bottom, clip.bottom);\n    }\n    ctx.rect(left, top, right - left, bottom - top);\n    ctx.clip();\n  }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\nvar index = {\n  id: 'filler',\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line\n        };\n      }\n      meta.$filler = source;\n      sources.push(source);\n    }\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {\n    boxHeight = fontSize,\n    boxWidth = fontSize\n  } = labelOpts;\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n  constructor(config) {\n    super();\n    this._added = false;\n    this.legendHitBoxes = [];\n    this._hoveredItem = null;\n    this.doughnutMode = false;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter(item => labelOpts.filter(item, this.chart.data));\n    }\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n    this.legendItems = legendItems;\n  }\n  fit() {\n    const {\n      options,\n      ctx\n    } = this;\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {\n      boxWidth,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    let width, height;\n    ctx.font = labelFont.string;\n    if (this.isHorizontal()) {\n      width = this.maxWidth;\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight;\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {\n      ctx,\n      maxWidth,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n      hitboxes[i] = {\n        left: 0,\n        top,\n        row,\n        width: itemWidth,\n        height: itemHeight\n      };\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n    return totalHeight;\n  }\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {\n      ctx,\n      maxHeight,\n      options: {\n        labels: {\n          padding\n        }\n      }\n    } = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n    let left = 0;\n    let col = 0;\n    this.legendItems.forEach((legendItem, i) => {\n      const {\n        itemWidth,\n        itemHeight\n      } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({\n          width: currentColWidth,\n          height: currentColHeight\n        });\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n      hitboxes[i] = {\n        left,\n        top: currentColHeight,\n        col,\n        width: itemWidth,\n        height: itemHeight\n      };\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n    totalWidth += currentColWidth;\n    columnSizes.push({\n      width: currentColWidth,\n      height: currentColHeight\n    });\n    return totalWidth;\n  }\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {\n      legendHitBoxes: hitboxes,\n      options: {\n        align,\n        labels: {\n          padding\n        },\n        rtl\n      }\n    } = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n      this._draw();\n      unclipArea(ctx);\n    }\n  }\n  _draw() {\n    const {\n      options: opts,\n      columnSizes,\n      lineWidths,\n      ctx\n    } = this;\n    const {\n      align,\n      labels: labelOpts\n    } = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {\n      padding\n    } = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n    this.drawTitle();\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n    const {\n      boxWidth,\n      boxHeight,\n      itemHeight\n    } = getBoxSize(labelOpts, fontSize);\n    const drawLegendBox = function (x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n      ctx.save();\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n      if (labelOpts.usePointStyle) {\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n        ctx.beginPath();\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n      ctx.restore();\n    };\n    const fillText = function (x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n    overrideTextDirection(this.ctx, opts.textDirection);\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor;\n      ctx.fillStyle = legendItem.fontColor;\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n      rtlHelper.setWidth(this.width);\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n      const realX = rtlHelper.x(x);\n      drawLegendBox(realX, y, legendItem);\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n      fillText(rtlHelper.x(x), y, legendItem);\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    if (!titleOpts.display) {\n      return;\n    }\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n    let left = this.left;\n    let maxWidth = this.width;\n    if (this.isHorizontal()) {\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n    const x = _alignStartEnd(position, left, left + maxWidth);\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n    if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          return this.legendItems[i];\n        }\n      }\n    }\n    return null;\n  }\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        callback(opts.onLeave, [e, previous, this], this);\n      }\n      this._hoveredItem = hoveredItem;\n      if (hoveredItem && !sameItem) {\n        callback(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      callback(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {\n    itemWidth,\n    itemHeight\n  };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length : 0;\n  return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: ctx => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {\n          labels: {\n            usePointStyle,\n            pointStyle,\n            textAlign,\n            color,\n            useBorderRadius,\n            borderRadius\n          }\n        } = chart.legend.options;\n        return chart._getSortedDatasetMetas().map(meta => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n    title: {\n      color: ctx => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: ''\n    }\n  },\n  descriptors: {\n    _scriptable: name => !name.startsWith('on'),\n    labels: {\n      _scriptable: name => !['generateLabels', 'filter', 'sort'].includes(name)\n    }\n  }\n};\nclass Title extends Element {\n  constructor(config) {\n    super();\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n    this.left = 0;\n    this.top = 0;\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n  _drawArgs(offset) {\n    const {\n      top,\n      left,\n      bottom,\n      right,\n      options\n    } = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    };\n  }\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    if (!opts.display) {\n      return;\n    }\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {\n      titleX,\n      titleY,\n      maxWidth,\n      rotation\n    } = this._drawArgs(offset);\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY]\n    });\n  }\n}\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold'\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal'\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nconst positioners = {\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n    let i, len;\n    let xSet = new Set();\n    let y = 0;\n    let count = 0;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        xSet.add(pos.x);\n        y += pos.y;\n        ++count;\n      }\n    }\n    if (count === 0 || xSet.size === 0) {\n      return false;\n    }\n    const xAverage = [...xSet].reduce((a, b) => a + b) / xSet.size;\n    return {\n      x: xAverage,\n      y: y / count\n    };\n  },\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n    return {\n      x,\n      y\n    };\n  }\n};\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n  return base;\n}\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\nfunction createTooltipItem(chart, item) {\n  const {\n    element,\n    datasetIndex,\n    index\n  } = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {\n    label,\n    value\n  } = controller.getLabelAndValue(index);\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {\n    body,\n    footer,\n    title\n  } = tooltip;\n  const {\n    boxWidth,\n    boxHeight\n  } = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n  }\n  let widthPadding = 0;\n  const maxLineWidth = function (line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n  each(body, bodyItem => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {\n    width,\n    height\n  };\n}\nfunction determineYAlign(chart, size) {\n  const {\n    y,\n    height\n  } = size;\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > chart.height - height / 2) {\n    return 'bottom';\n  }\n  return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {\n    x,\n    width\n  } = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {\n    x,\n    width\n  } = size;\n  const {\n    width: chartWidth,\n    chartArea: {\n      left,\n      right\n    }\n  } = chart;\n  let xAlign = 'center';\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n  return xAlign;\n}\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\nfunction alignX(size, xAlign) {\n  let {\n    x,\n    width\n  } = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= width / 2;\n  }\n  return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n  let {\n    y,\n    height\n  } = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= height / 2;\n  }\n  return y;\n}\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {\n    caretSize,\n    caretPadding,\n    cornerRadius\n  } = options;\n  const {\n    xAlign,\n    yAlign\n  } = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {\n    topLeft,\n    topRight,\n    bottomLeft,\n    bottomRight\n  } = toTRBLCorners(cornerRadius);\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n  return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n    return '';\n  },\n  afterTitle: noop,\n  beforeBody: noop,\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n    let label = tooltipItem.dataset.label || '';\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation\n    };\n  },\n  afterLabel: noop,\n  afterBody: noop,\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n  return result;\n}\nclass Tooltip extends Element {\n  constructor(config) {\n    super();\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n    if (cached) {\n      return cached;\n    }\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getContext() {\n    return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n  getTitle(context, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n    return lines;\n  }\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n  }\n  getBody(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const bodyItems = [];\n    each(tooltipItems, context => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n      bodyItems.push(bodyItem);\n    });\n    return bodyItems;\n  }\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n  }\n  getFooter(tooltipItems, options) {\n    const {\n      callbacks\n    } = options;\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n    return lines;\n  }\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n    each(tooltipItems, context => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n    if (changed && options.external) {\n      options.external.call(this, {\n        chart: this.chart,\n        tooltip: this,\n        replay\n      });\n    }\n  }\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n  getCaretPosition(tooltipPoint, size, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      caretSize,\n      cornerRadius\n    } = options;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(cornerRadius);\n    const {\n      x: ptX,\n      y: ptY\n    } = tooltipPoint;\n    const {\n      width,\n      height\n    } = size;\n    let x1, x2, x3, y1, y2, y3;\n    if (yAlign === 'center') {\n      y2 = ptY + height / 2;\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {\n      x1,\n      x2,\n      x3,\n      y1,\n      y2,\n      y3\n    };\n  }\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.titleAlign, options);\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing;\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing;\n        }\n      }\n    }\n  }\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {\n      boxHeight,\n      boxWidth\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2,\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius\n        });\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius\n        });\n        ctx.fill();\n      } else {\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n  drawBody(pt, ctx, options) {\n    const {\n      body\n    } = this;\n    const {\n      bodySpacing,\n      bodyAlign,\n      displayColors,\n      boxHeight,\n      boxWidth,\n      boxPadding\n    } = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n    const fillLineOfText = function (line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n      lines = bodyItem.lines;\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n      each(bodyItem.after, fillLineOfText);\n    }\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing;\n  }\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n      footerFont = toFont(options.footerFont);\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {\n      xAlign,\n      yAlign\n    } = this;\n    const {\n      x,\n      y\n    } = pt;\n    const {\n      width,\n      height\n    } = tooltipSize;\n    const {\n      topLeft,\n      topRight,\n      bottomLeft,\n      bottomRight\n    } = toTRBLCorners(options.cornerRadius);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n    ctx.fill();\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n  _willRender() {\n    return !!this.opacity;\n  }\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n    if (!opacity) {\n      return;\n    }\n    this._updateAnimationTarget(options);\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n    const padding = toPadding(options.padding);\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n      this.drawBackground(pt, ctx, tooltipSize, options);\n      overrideTextDirection(ctx, options.textDirection);\n      pt.y += padding.top;\n      this.drawTitle(pt, ctx, options);\n      this.drawBody(pt, ctx, options);\n      this.drawFooter(pt, ctx, options);\n      restoreTextDirection(ctx, options.textDirection);\n      ctx.restore();\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({\n      datasetIndex,\n      index\n    }) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n    const positionChanged = this._positionChanged(active, e);\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n    if (changed) {\n      this._active = active;\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n        this.update(true, replay);\n      }\n    }\n    return changed;\n  }\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n    if (e.type === 'mouseout') {\n      return [];\n    }\n    if (!inChartArea) {\n      return lastActive.filter(i => this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n    }\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n    if (options.reverse) {\n      active.reverse();\n    }\n    return active;\n  }\n  _positionChanged(active, e) {\n    const {\n      caretX,\n      caretY,\n      options\n    } = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n_defineProperty(Tooltip, \"positioners\", positioners);\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({\n        chart,\n        options\n      });\n    }\n  },\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n      if (chart.notifyPlugins('beforeTooltipDraw', {\n        ...args,\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      tooltip.draw(chart.ctx);\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold'\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {},\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold'\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart'\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY']\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: name => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\nvar plugins = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Colors: plugin_colors,\n  Decimation: plugin_decimation,\n  Filler: index,\n  Legend: plugin_legend,\n  SubTitle: plugin_subtitle,\n  Title: plugin_title,\n  Tooltip: plugin_tooltip\n});\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({\n      index,\n      label: raw\n    });\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\nclass CategoryScale extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {\n        index,\n        label\n      } of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n  determineDataLimits() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this.getMinMax(true);\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n    labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n    for (let value = min; value <= max; value++) {\n      ticks.push({\n        value\n      });\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n  configure() {\n    super.configure();\n    if (!this.isHorizontal()) {\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n_defineProperty(CategoryScale, \"id\", 'category');\n_defineProperty(CategoryScale, \"defaults\", {\n  ticks: {\n    callback: _getLabelForValue\n  }\n});\nfunction generateTicks$1(generationOptions, dataRange) {\n  const ticks = [];\n  const MIN_SPACING = 1e-14;\n  const {\n    bounds,\n    step,\n    min,\n    max,\n    precision,\n    count,\n    maxTicks,\n    maxDigits,\n    includeBounds\n  } = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {\n    min: rmin,\n    max: rmax\n  } = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{\n      value: rmin\n    }, {\n      value: rmax\n    }];\n  }\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n  const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({\n        value: min\n      });\n      if (niceMin < min) {\n        j++;\n      }\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({\n      value: tickValue\n    });\n  }\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({\n        value: max\n      });\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({\n      value: niceMax\n    });\n  }\n  return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, {\n  horizontal,\n  minRotation\n}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n    return +raw;\n  }\n  handleTickRangeOptions() {\n    const {\n      beginAtZero\n    } = this.options;\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let {\n      min,\n      max\n    } = this;\n    const setMin = v => min = minDefined ? min : v;\n    const setMax = v => max = maxDefined ? max : v;\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n      setMax(max + offset);\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    let {\n      maxTicksLimit,\n      stepSize\n    } = tickOpts;\n    let maxTicks;\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n    return maxTicks;\n  }\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n    super.configure();\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\nclass LinearScale extends LinearScaleBase {\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? min : 0;\n    this.max = isNumberFinite(max) ? max : 1;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n_defineProperty(LinearScale, \"id\", 'linear');\n_defineProperty(LinearScale, \"defaults\", {\n  ticks: {\n    callback: Ticks.formatters.numeric\n  }\n});\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n  const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n  return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\nfunction generateTicks(generationOptions, {\n  min,\n  max\n}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({\n      value,\n      major: isMajor(value),\n      significand\n    });\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({\n    value: lastTick,\n    major: isMajor(lastTick),\n    significand\n  });\n  return ticks;\n}\nclass LogarithmicScale extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isNumberFinite(value) && value > 0 ? value : null;\n  }\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n    this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n    if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n    this.handleTickRangeOptions();\n  }\n  handleTickRangeOptions() {\n    const {\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n    const setMin = v => min = minDefined ? min : v;\n    const setMax = v => max = maxDefined ? max : v;\n    if (min === max) {\n      if (min <= 0) {\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n      setMax(changeExponent(min, +1));\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n  configure() {\n    const start = this.min;\n    super.configure();\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n_defineProperty(LogarithmicScale, \"id\", 'logarithmic');\n_defineProperty(LogarithmicScale, \"defaults\", {\n  ticks: {\n    callback: Ticks.formatters.logarithmic,\n    major: {\n      enabled: true\n    }\n  }\n});\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - size / 2,\n      end: pos + size / 2\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\nfunction fitWithPointLabels(scale) {\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {\n    extra,\n    additionalAngle,\n    padding,\n    size\n  } = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    visible: true,\n    x: pointLabelPosition.x,\n    y,\n    textAlign,\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  const {\n    left,\n    top,\n    right,\n    bottom\n  } = item;\n  const apexesInArea = _isPointInArea({\n    x: left,\n    y: top\n  }, area) || _isPointInArea({\n    x: left,\n    y: bottom\n  }, area) || _isPointInArea({\n    x: right,\n    y: top\n  }, area) || _isPointInArea({\n    x: right,\n    y: bottom\n  }, area);\n  return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {\n    centerPointLabels,\n    display\n  } = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n  return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= w / 2;\n  }\n  return x;\n}\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= h / 2;\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {\n    left,\n    top,\n    right,\n    bottom\n  } = item;\n  const {\n    backdropColor\n  } = opts;\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\nfunction drawPointLabels(scale, labelCount) {\n  const {\n    ctx,\n    options: {\n      pointLabels\n    }\n  } = scale;\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      continue;\n    }\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {\n      x,\n      y,\n      textAlign\n    } = item;\n    renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n      color: optsAtIndex.color,\n      textAlign: textAlign,\n      textBaseline: 'middle'\n    });\n  }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {\n    ctx\n  } = scale;\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n  const {\n    color,\n    lineWidth\n  } = gridLineOpts;\n  if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n    return;\n  }\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash || []);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\nclass RadialLinearScale extends LinearScaleBase {\n  constructor(cfg) {\n    super(cfg);\n    this.xCenter = undefined;\n    this.yCenter = undefined;\n    this.drawingArea = undefined;\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n  setDimensions() {\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n  determineDataLimits() {\n    const {\n      min,\n      max\n    } = this.getMinMax(false);\n    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n    this._pointLabels = this.getLabels().map((value, index) => {\n      const label = callback(this.options.pointLabels.callback, [value, index], this);\n      return label || label === 0 ? label : '';\n    }).filter((v, i) => this.chart.getDataVisibility(i));\n  }\n  fit() {\n    const opts = this.options;\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n  getPointLabelPosition(index) {\n    const {\n      left,\n      top,\n      right,\n      bottom\n    } = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom\n    };\n  }\n  drawBackground() {\n    const {\n      backgroundColor,\n      grid: {\n        circular\n      }\n    } = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {\n      angleLines,\n      grid,\n      border\n    } = opts;\n    const labelCount = this._pointLabels.length;\n    let i, offset, position;\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0 || index === 0 && this.min < 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n    if (angleLines.display) {\n      ctx.save();\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {\n          color,\n          lineWidth\n        } = optsAtIndex;\n        if (!lineWidth || !color) {\n          continue;\n        }\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n        offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n      ctx.restore();\n    }\n  }\n  drawBorder() {}\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    if (!tickOpts.display) {\n      return;\n    }\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && this.min >= 0 && !opts.reverse) {\n        return;\n      }\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n      }\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n        strokeColor: optsAtIndex.textStrokeColor,\n        strokeWidth: optsAtIndex.textStrokeWidth\n      });\n    });\n    ctx.restore();\n  }\n  drawTitle() {}\n}\n_defineProperty(RadialLinearScale, \"id\", 'radialLinear');\n_defineProperty(RadialLinearScale, \"defaults\", {\n  display: true,\n  animate: true,\n  position: 'chartArea',\n  angleLines: {\n    display: true,\n    lineWidth: 1,\n    borderDash: [],\n    borderDashOffset: 0.0\n  },\n  grid: {\n    circular: false\n  },\n  startAngle: 0,\n  ticks: {\n    showLabelBackdrop: true,\n    callback: Ticks.formatters.numeric\n  },\n  pointLabels: {\n    backdropColor: undefined,\n    backdropPadding: 2,\n    display: true,\n    font: {\n      size: 10\n    },\n    callback(label) {\n      return label;\n    },\n    padding: 5,\n    centerPointLabels: false\n  }\n});\n_defineProperty(RadialLinearScale, \"defaultRoutes\", {\n  'angleLines.color': 'borderColor',\n  'pointLabels.color': 'color',\n  'ticks.color': 'color'\n});\n_defineProperty(RadialLinearScale, \"descriptors\", {\n  angleLines: {\n    _fallback: 'grid'\n  }\n});\nconst INTERVALS = {\n  millisecond: {\n    common: true,\n    size: 1,\n    steps: 1000\n  },\n  second: {\n    common: true,\n    size: 1000,\n    steps: 60\n  },\n  minute: {\n    common: true,\n    size: 60000,\n    steps: 60\n  },\n  hour: {\n    common: true,\n    size: 3600000,\n    steps: 24\n  },\n  day: {\n    common: true,\n    size: 86400000,\n    steps: 30\n  },\n  week: {\n    common: false,\n    size: 604800000,\n    steps: 4\n  },\n  month: {\n    common: true,\n    size: 2.628e9,\n    steps: 12\n  },\n  quarter: {\n    common: false,\n    size: 7.884e9,\n    steps: 4\n  },\n  year: {\n    common: true,\n    size: 3.154e10\n  }\n};\nconst UNITS = /* #__PURE__ */Object.keys(INTERVALS);\nfunction sorter(a, b) {\n  return a - b;\n}\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n  const adapter = scale._adapter;\n  const {\n    parser,\n    round,\n    isoWeekday\n  } = scale._parseOpts;\n  let value = input;\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n  }\n  if (value === null) {\n    return null;\n  }\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n  }\n  return +value;\n}\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n  return UNITS[ilen - 1];\n}\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {\n      lo,\n      hi\n    } = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n  constructor(props) {\n    super(props);\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    this._unit = 'day';\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n    adapter.init(opts);\n    mergeIf(time.displayFormats, adapter.formats());\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n    super.init(scaleOpts);\n    this._normalized = opts.normalized;\n  }\n  parse(raw, index) {\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    let {\n      min,\n      max,\n      minDefined,\n      maxDefined\n    } = this.getUserBounds();\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n    if (!minDefined || !maxDefined) {\n      _applyBounds(this._getLabelBounds());\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {\n      min,\n      max\n    };\n  }\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n    const min = this.min;\n    const max = this.max;\n    const ticks = _filterBetween(timestamps, min, max);\n    this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n    if (options.reverse) {\n      ticks.reverse();\n    }\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n  afterAutoSkip() {\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n    this._offsets = {\n      start,\n      end,\n      factor: 1 / (start + 1 + end)\n    };\n  }\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n    return Object.keys(ticks).sort(sorter).map(x => +x);\n  }\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n    if (formatter) {\n      return callback(formatter, [time, index, ticks], this);\n    }\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n    return {\n      w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n      h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n    };\n  }\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const metas = this.getMatchingVisibleMetas();\n    if (this._normalized && metas.length) {\n      return this._cache.data = metas[0].controller.getAllParsedValues(this);\n    }\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n    return this._cache.data = this.normalize(timestamps);\n  }\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n    return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n  }\n  normalize(values) {\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n_defineProperty(TimeScale, \"id\", 'time');\n_defineProperty(TimeScale, \"defaults\", {\n  bounds: 'data',\n  adapters: {},\n  time: {\n    parser: false,\n    unit: false,\n    round: false,\n    isoWeekday: false,\n    minUnit: 'millisecond',\n    displayFormats: {}\n  },\n  ticks: {\n    source: 'auto',\n    callback: false,\n    major: {\n      enabled: false\n    }\n  }\n});\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'pos', val));\n    }\n    ({\n      pos: prevSource,\n      time: prevTarget\n    } = table[lo]);\n    ({\n      pos: nextSource,\n      time: nextTarget\n    } = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({\n        lo,\n        hi\n      } = _lookupByKey(table, 'time', val));\n    }\n    ({\n      time: prevSource,\n      pos: prevTarget\n    } = table[lo]);\n    ({\n      time: nextSource,\n      pos: nextTarget\n    } = table[hi]);\n  }\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n  constructor(props) {\n    super(props);\n    this._table = [];\n    this._minPos = undefined;\n    this._tableRange = undefined;\n  }\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n  buildLookupTable(timestamps) {\n    const {\n      min,\n      max\n    } = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n    if (items.length < 2) {\n      return [{\n        time: min,\n        pos: 0\n      }, {\n        time: max,\n        pos: 1\n      }];\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({\n          time: curr,\n          pos: i / (ilen - 1)\n        });\n      }\n    }\n    return table;\n  }\n  _generate() {\n    const min = this.min;\n    const max = this.max;\n    let timestamps = super.getDataTimestamps();\n    if (!timestamps.includes(min) || !timestamps.length) {\n      timestamps.splice(0, 0, min);\n    }\n    if (!timestamps.includes(max) || timestamps.length === 1) {\n      timestamps.push(max);\n    }\n    return timestamps.sort((a, b) => a - b);\n  }\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n    return timestamps;\n  }\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n_defineProperty(TimeSeriesScale, \"id\", 'timeseries');\n_defineProperty(TimeSeriesScale, \"defaults\", TimeScale.defaults);\nvar scales = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CategoryScale: CategoryScale,\n  LinearScale: LinearScale,\n  LogarithmicScale: LogarithmicScale,\n  RadialLinearScale: RadialLinearScale,\n  TimeScale: TimeScale,\n  TimeSeriesScale: TimeSeriesScale\n});\nconst registerables = [controllers, elements, plugins, scales];\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };","map":{"version":3,"names":["Animator","constructor","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","requestAnimFrame","call","window","_update","Date","now","remaining","running","items","length","i","draw","item","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","animator","transparent","interpolators","boolean","from","to","factor","color","c0","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","resolve","_fn","_easing","effects","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","isObject","animationOptions","Object","keys","defaults","animation","animatedProps","getOwnPropertyNames","key","option","isArray","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","value","size","assign","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","x","y","top","right","bottom","left","toClip","t","r","b","l","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","found","isNumberFinite","sign","convertObjectDataToArray","data","meta","iScale","vScale","iAxisKey","axis","vAxisKey","adata","Array","isStacked","stacked","getStackKey","indexScale","valueScale","id","getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iAxis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","createContext","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","datasetElementType","new","dataElementType","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","valueOrDefault","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","unlistenArrayEvents","_dataCheck","isExtensible","listenArrayEvents","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","resolveObjectKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","elements","area","chartArea","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","_resolveElementOptions","elementType","cache","cacheKey","sharing","defined","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","_defineProperty","getAllScaleValues","_cache","$bar","visibleMetas","concat","_arrayUnique","sort","a","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","isNullOrUndef","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","v","setInflateAmount","inflateAmount","BarController","obj","bars","getBasePixel","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","grouped","currentParsed","iScaleValue","skipNull","find","val","isNaN","indexOf","_getStackCount","_getAxisCount","_getAxis","getFirstScaleIdForIndexAxis","indexScaleId","firstScaleAxisId","_getStackIndex","name","_startPixel","_endPixel","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","axisCount","axisID","axisNumber","stackIndex","rects","numbers","_index_","offset","grid","_value_","beginAtZero","BubbleController","radius","points","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","TAU","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","_angleBetween","calcMin","maxX","maxY","HALF_PI","minX","PI","minY","DoughnutController","innerRadius","outerRadius","getter","_getRotation","toRadians","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","spacing","getMaxBorderWidth","getMaxOffset","maxSize","toPercentage","chartWeight","_getRingWeight","maxWidth","maxHeight","maxRadius","toDimension","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","animateRotate","calculateCircumference","animationOpts","centerX","centerY","animateScale","arc","metaData","formatNumber","locale","borderAlign","borderWidth","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","_scriptable","_indexable","startsWith","aspectRatio","plugins","legend","generateLabels","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","onClick","e","legendItem","toggleDataVisibility","LineController","line","_dataset","animationsDisabled","_getStartAndCountOfVisiblePoints","_scaleRangesChanged","_datasetIndex","_decimated","showLine","segment","animated","spanGaps","maxGapLength","isNumber","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","_parseObjectDataRadialScale","bind","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","angleLines","display","circular","pointLabels","PieController","RadarController","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","registry","getElement","interaction","abstract","Error","DateAdapterBase","override","members","prototype","init","formats","format","diff","startOf","endOf","adapters","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","_rlookupByKey","_lookupByKey","result","distanceToDefinedLo","slice","lo","findIndex","distanceToDefinedHi","hi","el","getRange","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","_isPointInArea","inRange","getNearestRadialItems","getProps","getAngleFromPoint","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","getRelativePosition","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","buildStacks","layouts","wrap","includes","_stack","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","addBox","_layers","z","removeBox","layoutItem","minPadding","toPadding","verticalBoxes","horizontalBoxes","each","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","readUsedSize","displayHeight","eventListenerOptions","supportsEventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","native","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","_getParentNode","throttled","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","_isDomSupported","OffscreenCanvas","Element","tooltipPosition","hasValue","final","ret","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","_factorize","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","toFont","lines","lineHeight","createScaleContext","createTickContext","titleAlign","_toLeftRightCenter","titleArgs","titleX","titleY","_alignStartEnd","positionAxisID","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","finiteOrDefault","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","callback","margins","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","_limitValue","title","toDegrees","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","_measureText","valueAt","idx","pixel","decimal","_int16Range","_alignPixel","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","save","fillRect","restore","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","clipArea","renderTextOptions","renderText","unclipArea","drawTitle","tz","gz","bz","_maxDigits","fontSize","TypedRegistry","scope","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","registerDefaults","overrides","unregister","itemDefaults","merge","defaultRoutes","routeDefaults","descriptors","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","_capitalize","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","getOpts","pluginOpts","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","idMatchesAxis","axisFromPosition","determineAxis","scaleOptions","toLowerCase","getAxisFromDataset","retrieveAxisFromDatasets","boundDs","d","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","mergeIf","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","needContext","isFunction","subResolver","_attachContext","descriptorDefaults","resolverCache","_createResolver","p","hasFunction","isScriptable","isIndexable","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","c","moveNumericKeys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","Chart","invalidatePlugins","userConfig","initialCanvas","existingChart","uid","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","debounce","resizeDelay","_initialize","maintainAspectRatio","responsive","retinaScale","bindEvents","clearCanvas","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","setsEqual","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","getDatasetClipArea","getElementsAtEventForMode","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","_elementsEqual","pluginId","replay","hoverOptions","hover","deactivated","activated","eventFilter","_handleEvent","_getActiveElements","_isClickEvent","onHover","version","clipSelf","borderJoinStyle","outerAngleClip","_normalizeAngle","innerAngleClip","clipWidth","closePath","rect","clipArc","pixelMargin","angleMargin","toRadiusCorners","_readValueToProps","parseBorderRadius$1","angleDelta","o","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","inner","lineJoin","selfJoin","ArcElement","chartX","chartY","rAdjust","nonZeroBetween","betweenAngles","withinRadius","_isBetween","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","_steppedLineTo","tension","cubicInterpolationMode","_bezierCurveTo","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","fastPathSegment","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","_steppedInterpolation","_bezierInterpolation","_pointInLine","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","usePath2D","LineElement","_points","_segments","_pointsUpdated","_updateBezierControlPoints","_computeSegments","interpolate","_boundSegments","_interpolate","interpolated","capBezierPoints","inRange$1","hitRadius","PointElement","mouseX","mouseY","inXRange","inYRange","hoverRadius","drawPoint","getBarBounds","bar","half","skipOrLimit","parseBorderWidth","maxW","maxH","toTRBL","parseBorderRadius","toTRBLCorners","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","inflateRect","amount","refRect","BarElement","addRectPath","addRoundedRectPath","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","k","containsColorsDefinition","containsDefaultColorsDefenitions","plugin_colors","forceOverride","_args","chartOptions","containsColorDefenition","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","cleanDecimatedDataset","defineProperty","configurable","enumerable","writable","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","plugin_decimation","algorithm","beforeElementsUpdate","xAxis","threshold","tpoints","_findSegmentEnd","_getBounds","targetSegments","tgt","subBounds","fillSources","_boundSegment","fillSource","_getEdge","_pointsFromSegments","boundary","linePoints","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_drawfill","lineOpts","above","doFill","fillColor","clipVertical","clipHorizontal","clipY","lineLoop","clipX","src","notShape","clipBounds","interpolatedLineTo","targetLoop","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","getRtlAdapter","hitbox","leftForLtr","_draw","defaultColor","halfFontSize","cursor","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","drawPointLegend","yBoxTop","xBoxLeft","fillText","strikethrough","overrideTextDirection","textDirection","textWidth","setWidth","realX","_textX","fontLineHeight","calculateLegendItemHeight","restoreTextDirection","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","plugin_legend","_element","afterEvent","ci","useBorderRadius","Title","_padding","textSize","_drawArgs","fontOpts","createTitle","titleBlock","plugin_title","WeakMap","plugin_subtitle","positioners","average","xSet","xAverage","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","noop","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","plugin_tooltip","afterInit","afterDraw","_fallback","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","isFinite","generateTicks$1","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceNum","niceMin","niceMax","numSpaces","almostWhole","almostEquals","decimalPlaces","_decimalPlaces","relativeLabelSize","tickValue","rad","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","_setMinAndMaxByKey","LinearScale","Ticks","formatters","numeric","log10Floor","log10","changeExponent","m","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","generateTicks","minExp","exp","significand","lastTick","LogarithmicScale","_zero","logarithmic","getTickBackdropHeight","measureLabelSize","_longestText","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","createPointLabelItem","itemOpts","outerDistance","extra","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","isNotOverlapped","apexesInArea","drawPointLabelBox","backdropLeft","backdropTop","backdropWidth","backdropHeight","drawPointLabels","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","rotate","animate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","_lookup","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","_unit","_majorUnit","_offsets","_normalized","displayFormats","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_filterBetween","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables"],"sources":["../src/core/core.animator.js","../src/core/core.animation.js","../src/core/core.animations.js","../src/core/core.datasetController.js","../src/controllers/controller.bar.js","../src/controllers/controller.bubble.js","../src/controllers/controller.doughnut.js","../src/controllers/controller.line.js","../src/controllers/controller.polarArea.js","../src/controllers/controller.pie.js","../src/controllers/controller.radar.js","../src/controllers/controller.scatter.js","../src/core/core.adapters.ts","../src/core/core.interaction.js","../src/core/core.layouts.js","../src/platform/platform.base.js","../src/platform/platform.basic.js","../src/platform/platform.dom.js","../src/platform/index.js","../src/core/core.element.ts","../src/core/core.scale.autoskip.js","../src/core/core.scale.js","../src/core/core.typedRegistry.js","../src/core/core.registry.js","../src/core/core.plugins.js","../src/core/core.config.js","../src/core/core.controller.js","../src/elements/element.arc.ts","../src/elements/element.line.js","../src/elements/element.point.ts","../src/elements/element.bar.js","../src/plugins/plugin.colors.ts","../src/plugins/plugin.decimation.js","../src/plugins/plugin.filler/filler.segment.js","../src/plugins/plugin.filler/filler.helper.js","../src/plugins/plugin.filler/filler.options.js","../src/plugins/plugin.filler/filler.target.stack.js","../src/plugins/plugin.filler/simpleArc.js","../src/plugins/plugin.filler/filler.target.js","../src/plugins/plugin.filler/filler.drawing.js","../src/plugins/plugin.filler/index.js","../src/plugins/plugin.legend.js","../src/plugins/plugin.title.js","../src/plugins/plugin.subtitle.js","../src/plugins/plugin.tooltip.js","../src/scales/scale.category.js","../src/scales/scale.linearbase.js","../src/scales/scale.linear.js","../src/scales/scale.logarithmic.js","../src/scales/scale.radialLinear.js","../src/scales/scale.time.js","../src/scales/scale.timeseries.js","../src/index.ts"],"sourcesContent":["import {requestAnimFrame} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('./core.animation.js').default } Animation\n * @typedef { import('./core.controller.js').default } Chart\n */\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is export for typedoc\n */\nexport class Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  /**\n\t * @private\n\t */\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _update(date = Date.now()) {\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            // if the animation has been updated and its duration prolonged,\n            // update to total duration of current animations run (for progress event)\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          // Remove the item by replacing it with last item and removing the last\n          // A lot faster than splice.\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} event - event name\n\t * @param {Function} cb - callback\n\t */\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  /**\n\t * Add animations\n\t * @param {Chart} chart\n\t * @param {Animation[]} items - animations\n\t */\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n\n  /**\n\t * Counts number of active animations for the chart\n\t * @param {Chart} chart\n\t */\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  /**\n\t * Start animating (all charts)\n\t * @param {Chart} chart\n\t */\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n\t * Stop all animations for the chart\n\t * @param {Chart} chart\n\t */\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  /**\n\t * Remove chart from Animator\n\t * @param {Chart} chart\n\t */\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Animator();\n","import effects from '../helpers/helpers.easing.js';\nimport {resolve} from '../helpers/helpers.options.js';\nimport {color as helpersColor} from '../helpers/helpers.color.js';\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  /**\n   * @param {string} from\n   * @param {string} to\n   * @param {number} factor\n   */\n  color(from, to, factor) {\n    const c0 = helpersColor(from || transparent);\n    const c1 = c0.valid && helpersColor(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\n\nexport default class Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      // update current evaluated value, for smoother animations\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n\n    this._active = from !== to && (loop || (elapsed < duration));\n\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n","import animator from './core.animator.js';\nimport Animation from './core.animation.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isObject} from '../helpers/helpers.core.js';\n\nexport default class Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  /**\n\t * Utility to handle animation of `options`.\n\t * @private\n\t */\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      // Going to shared options:\n      // After all animations are done, assign the shared options object to the element\n      // So any new updates to the shared options are observed\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n        // rejected, noop\n      });\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @private\n\t */\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          // There is an existing active animation, let's update that\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        // not animated, set directly to new value\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n\n\n  /**\n\t * Update `target` properties to new values, using configured animations\n\t * @param {object} target - object to update\n\t * @param {object} values - new target properties\n\t * @returns {boolean|undefined} - `true` if animations were started\n\t **/\n  update(target, values) {\n    if (this._properties.size === 0) {\n      // Nothing is animated, just apply the new values.\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  // @ts-ignore\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    // Going from shared options to distinct one:\n    // Create new options object containing the old shared values and start updating that.\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n","import Animations from './core.animations.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core.js';\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection.js';\nimport {createContext, sign} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('./core.scale.js').default } Scale\n */\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  let found = false;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      found = true;\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n\n  if (!found && !options.all) {\n    return 0;\n  }\n\n  return value;\n}\n\nfunction convertObjectDataToArray(data, meta) {\n  const {iScale, vScale} = meta;\n  const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n  const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      [iAxisKey]: key,\n      [vAxisKey]: data[key]\n    };\n  }\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  // Not using meta.index here, because it might be already updated if the dataset changed location\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\n\nexport default class DatasetController {\n\n  /**\n   * @type {any}\n   */\n  static defaults = {};\n\n  /**\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\n   */\n  static datasetElementType = null;\n\n  /**\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\n   */\n  static dataElementType = null;\n\n  /**\n\t * @param {Chart} chart\n\t * @param {number} datasetIndex\n\t */\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    /** @type {boolean | object} */\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  /**\n\t * @param {string} scaleID\n\t * @return {Scale}\n\t */\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  /**\n\t * @private\n\t */\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  /**\n\t * @private\n\t */\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    // In order to correctly handle data addition/deletion animation (and thus simulate\n    // real-time charts), we need to monitor these data modifications and synchronize\n    // the internal metadata accordingly.\n\n    if (isObject(data)) {\n      const meta = this._cachedMeta;\n      this._data = convertObjectDataToArray(data, meta);\n    } else if (_data !== data) {\n      if (_data) {\n        // This case happens when the user replaced the data array instance.\n        unlistenArrayEvents(_data, this);\n        // Discard old parsed data and stacks\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    // make sure cached _stacked status is current\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    // detect change in stack option\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      // remove values from old stack\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    // Re-sync meta data in case the user replaced the data array or if we missed\n    // any updates and so make sure that we handle number of datapoints changing.\n    this._resyncElements(resetNewElements);\n\n    // if stack changed, update stack values for the whole dataset\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n      meta._stacked = isStacked(meta.vScale, meta);\n    }\n  }\n\n  /**\n\t * Merges user-supplied and default dataset-level options\n\t * @private\n\t */\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  /**\n\t * @param {number} start\n\t * @param {number} count\n\t */\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [1,3,4]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {xScale0: 0, yScale0: 1}\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {x: 0, y: 1}\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id. _custom is optional\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        // if the data is sorted, we don't need to check further from this end of array\n        break;\n      }\n    }\n    if (sorted) {\n      // in the sorted case, find first non-skipped value from other end of array\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return false;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {} // eslint-disable-line no-unused-vars\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  /**\n\t * Returns a set of predefined style properties that should be used to represent the dataset\n\t * or the data if the index is specified\n\t * @param {number} index - data index\n\t * @param {boolean} [active] - true if hover\n\t * @return {object} style object\n\t */\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  /**\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    // context is provided as a function, and is called only if needed,\n    // so we don't create a context for each element if not needed.\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      // `$shared` indicates this set of options can be shared between multiple elements.\n      // Sharing is used to reduce number of properties to change during animation.\n      values.$shared = sharing;\n\n      // We cache options by `mode`, which can be 'active' for example. This enables us\n      // to have the 'active' element options and 'default' options to switch between\n      // when interacting.\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n\n  /**\n\t * Utility for getting the options object shared between elements\n\t * @protected\n\t */\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  /**\n\t * Utility for determining if `options` should be included in the updated properties\n\t * @protected\n\t */\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  /**\n   * @todo v4, rename to getSharedOptions and remove excess functions\n   */\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n\n  /**\n\t * Utility for updating an element with new properties, using animations when appropriate.\n\t * @protected\n\t */\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  /**\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\n\t * @protected\n\t */\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      // When going from active to inactive, we need to update to the shared options.\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  /**\n\t * @private\n\t */\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    // Apply changes detected through array listeners\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      // TODO: It is not optimal to always parse the old data\n      // This is done because we are not detecting direct assignments:\n      // chart.data.datasets[0].data[5] = 10;\n      // chart.data.datasets[0].data[5].y = 10;\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @private\n\t */\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n\n  /**\n\t * @private\n   */\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {\n  _arrayUnique, isArray, isNullOrUndef,\n  valueOrDefault, resolveObjectKey, sign, defined\n} from '../helpers/index.js';\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      // Ignore truncated pixels\n      return;\n    }\n    if (defined(prev)) {\n      // curr - prev === 0 is ignored\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    // When bar thickness is enforced, category and bar percentages are ignored.\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    // first data: its size is double based on the next point or,\n    // if it's also the last data, we use the scale size.\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    // last data: its size is also double based on the previous point.\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  // Store `barEnd` (furthest away from origin) as parsed value,\n  // to make stacking straight forward\n  item[vScale.axis] = barEnd;\n\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\n\nexport default class BarController extends DatasetController {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true,\n      }\n    }\n  };\n\n\n  /**\n\t * Overriding primitive data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding array data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding object data parsing since we support mixed primitive/array\n\t * value-scale data for float bars\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      // float bar: only one end of the bar is considered by `super`\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n\n    super.initialize();\n\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  /**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @param {number} [dataIndex] - The data index of the ruler\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n    const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n    const iScaleValue = currentParsed && currentParsed[iScale.axis];\n\n    const skipNull = (meta) => {\n      const parsed = meta._parsed.find(item => item[iScale.axis] === iScaleValue);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      // stacked   | meta.stack\n      //           | found | not found | undefined\n      // false     |   x   |     x     |     x\n      // true      |       |     x     |\n      // undefined |       |     x     |     x\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\n    // stack where possible invisible bars will be located.\n    // https://github.com/chartjs/Chart.js/issues/6368\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  /**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  _getAxisCount() {\n    return this._getAxis().length;\n  }\n\n  getFirstScaleIdForIndexAxis() {\n    const scales = this.chart.scales;\n    const indexScaleId = this.chart.options.indexAxis;\n    return Object.keys(scales).filter(key => scales[key].axis === indexScaleId).shift();\n  }\n\n  _getAxis() {\n    const axis = {};\n    const firstScaleAxisId = this.getFirstScaleIdForIndexAxis();\n    for (const dataset of this.chart.data.datasets) {\n      axis[valueOrDefault(\n        this.chart.options.indexAxis === 'x' ? dataset.xAxisID : dataset.yAxisID, firstScaleAxisId\n      )] = true;\n    }\n    return Object.keys(axis);\n  }\n\n  /**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n   * @param {number} [dataIndex]\n\t * @returns {number} The stack index\n\t * @private\n\t */\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1; // indexOf returns -1 if element is not present\n\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      // bar thickness ratio used for non-grouped bars\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  /**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked, index: datasetIndex}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      // bars crossing origin are not stacked\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      // When not visible, no height\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        // visual data coordinates after applying minBarLength\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    const axisCount = this._getAxisCount();\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount * axisCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount * axisCount);\n      const axisID = this.chart.options.indexAxis === 'x' ? this.getDataset().xAxisID : this.getDataset().yAxisID;\n      const axisNumber = this._getAxis().indexOf(valueOrDefault(axisID, this.getFirstScaleIdForIndexAxis()));\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined) + axisNumber;\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      // For non-grouped bar charts, exact pixel values are used\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {valueOrDefault} from '../helpers/helpers.core.js';\n\nexport default class BubbleController extends DatasetController {\n\n  static id = 'bubble';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    // In case values were cached (and thus frozen), we need to clone the values\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n\n    // Custom radius resolution\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n\n    return values;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\n\nexport default class DoughnutController extends DatasetController {\n\n  static id = 'doughnut';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      },\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutout: '50%',\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%',\n\n    // Spacing between arcs\n    spacing: 0,\n\n    indexAxis: 'r',\n  };\n\n  static descriptors = {\n    _scriptable: (name) => name !== 'spacing',\n    _indexable: (name) => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash'),\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    // Need to override these to give a nice default\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  /**\n\t * Override data parsing, since we are not using scales\n\t */\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  /**\n\t * @private\n\t */\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  /**\n\t * Get the maximal rotation & circumference extents\n\t * across all visible datasets.\n\t */\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n\n    // Compute the maximal rotation & circumference limits.\n    // If we only consider our dataset, this can cause problems when two datasets\n    // are both less than a circle with different rotations (starting angles)\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n\n    meta.total = this.calculateTotal();\n\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @private\n   */\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      // Find the outmost visible dataset\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n\n  /**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  /**\n\t * Returns the sum of all visible data set weights.\n\t * @private\n\t */\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class LineController extends DatasetController {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n\n    showLine: true,\n    spanGaps: false,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n      },\n      _value_: {\n        type: 'linear',\n      },\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    // Update Line\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class PolarAreaController extends DatasetController {\n\n  static id = 'polarArea';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      },\n    },\n    indexAxis: 'r',\n    startAngle: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @protected\n   */\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n\n    return range;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n\n    return count;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\n","import DoughnutController from './controller.doughnut.js';\n\n// Pie charts are Doughnut chart with different defaults\nexport default class PieController extends DoughnutController {\n\n  static id = 'pie';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    // The percentage of the chart that we cut out of the middle.\n    cutout: 0,\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%'\n  };\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {_parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class RadarController extends DatasetController {\n\n  static id = 'radar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    },\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n\n    // Update Line\n    line.points = points;\n    // In resize mode only point locations change, so no need to set the points or options.\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class ScatterController extends DatasetController {\n\n  static id = 'scatter';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n\n    interaction: {\n      mode: 'point'\n    },\n\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n\n      // https://github.com/chartjs/Chart.js/issues/11333\n      if (!this.datasetElementType) {\n        this.addElements();\n      }\n      const {dataset: line, _dataset} = meta;\n\n      // Update Line\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    } else if (this.datasetElementType) {\n      // https://github.com/chartjs/Chart.js/issues/11333\n      delete meta.dataset;\n      this.datasetElementType = false;\n    }\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {showLine} = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n","/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nimport type {AnyObject} from '../types/basic.js';\nimport type {ChartOptions} from '../types/index.js';\n\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\n\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\n  readonly options: T;\n  /**\n   * Will called with chart options after adapter creation.\n   */\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\n  /**\n   * Returns a map of time formats for the supported formatting units defined\n   * in Unit as well as 'datetime' representing a detailed date/time string.\n   */\n  formats(this: DateAdapter<T>): Record<TimeUnit | 'datetime', string>;\n  /**\n   * Parses the given `value` and return the associated timestamp.\n   * @param value - the value to parse (usually comes from the data)\n   * @param [format] - the expected data format\n   */\n  parse(this: DateAdapter<T>, value: unknown, format?: string): number | null;\n  /**\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\n   * @param timestamp - the timestamp to format\n   * @param format - the date/time token\n   */\n  format(this: DateAdapter<T>, timestamp: number, format: string): string;\n  /**\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param amount - the amount to add\n   * @param unit - the unit as string\n   */\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\n  /**\n   * Returns the number of `unit` between the given timestamps.\n   * @param a - the input timestamp (reference)\n   * @param b - the timestamp to subtract\n   * @param unit - the unit as string\n   */\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\n  /**\n   * Returns start of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   * @param [weekday] - the ISO day of the week with 1 being Monday\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n   */\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number | boolean): number;\n  /**\n   * Returns end of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   */\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit): number;\n}\n\nfunction abstract<T = void>(): T {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase implements DateAdapter {\n\n  /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */\n  static override<T extends AnyObject = AnyObject>(\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\n  ) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  readonly options: AnyObject;\n\n  constructor(options?: AnyObject) {\n    this.options = options || {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n\n  formats(): Record<TimeUnit | 'datetime', string> {\n    return abstract();\n  }\n\n  parse(): number | null {\n    return abstract();\n  }\n\n  format(): string {\n    return abstract();\n  }\n\n  add(): number {\n    return abstract();\n  }\n\n  diff(): number {\n    return abstract();\n  }\n\n  startOf(): number {\n    return abstract();\n  }\n\n  endOf(): number {\n    return abstract();\n  }\n}\n\nexport default {\n  _date: DateAdapterBase as {\n    new (options?: AnyObject): DateAdapter;\n    override<T extends AnyObject = AnyObject>(\n      members: Partial<Omit<DateAdapter<T>, 'options'>>\n    ): void;\n  }\n};\n","import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection.js';\nimport {getRelativePosition} from '../helpers/helpers.dom.js';\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math.js';\nimport {_isPointInArea, isNullOrUndef} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\n * @typedef {{datasetIndex: number, index: number, element: import('./core.element.js').default}} InteractionItem\n * @typedef { import('../types/index.js').Point } Point\n */\n\n/**\n * Helper function to do binary search when possible\n * @param {object} metaset - the dataset meta\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {number} value - the value to find\n * @param {boolean} [intersect] - should the element intersect\n * @returns {{lo:number, hi:number}} indices to search data array between\n */\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  const spanGaps = metaset.dataset ? metaset.dataset.options ? metaset.dataset.options.spanGaps : null : null;\n\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      const result = lookupMethod(data, axis, value);\n      if (spanGaps) {\n        const {vScale} = controller._cachedMeta;\n        const {_parsed} = metaset;\n\n        const distanceToDefinedLo = (_parsed\n          .slice(0, result.lo + 1)\n          .reverse()\n          .findIndex(\n            point => !isNullOrUndef(point[vScale.axis])));\n        result.lo -= Math.max(0, distanceToDefinedLo);\n\n        const distanceToDefinedHi = (_parsed\n          .slice(result.hi)\n          .findIndex(\n            point => !isNullOrUndef(point[vScale.axis])));\n        result.hi += Math.max(0, distanceToDefinedHi);\n      }\n      return result;\n    } else if (controller._sharedOptions) {\n      // _sharedOptions indicates that each element has equal options -> equal proportions\n      // So we can do a ranged binary search based on the range of first element and\n      // be confident to get the full range of indices that can intersect with the value.\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  // Default to all elements, when binary search can not be used.\n  return {lo: 0, hi: data.length - 1};\n}\n\n/**\n * Helper function to select candidate elements for interaction\n * @param {Chart} chart - the chart\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {function} handler - the callback to execute for each visible item\n * @param {boolean} [intersect] - consider intersecting items\n */\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy|r\n */\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {Chart} chart - the chart\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a radial chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a cartesian chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      // Can have multiple items at the same distance in which case we sort by size\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in the chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\n/**\n * Helper function to get the items matching along the given X or Y axis\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis to match\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  // If we want to trigger on an intersect and we don't have any items\n  // that intersect the position, return nothing\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nexport default {\n  // Part of the public API to facilitate developers creating their own modes\n  evaluateInteractionItems,\n\n  // Helper function for different modes\n  modes: {\n    /**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      // Default axis for index mode is 'x' to match old behaviour\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        // don't count items that are skipped (null data)\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n\n      return elements;\n    },\n\n    /**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n\n      return items;\n    },\n\n    /**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    /**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n","import {defined, each, isObject} from '../helpers/helpers.core.js';\nimport {toPadding} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n */\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\n\n/**\n * store dimensions used instead of available chartArea in fitBoxes\n **/\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  // dynamically placed boxes size is not considered\n  if (!isObject(pos)) {\n    if (layout.size) {\n      // this layout was already counted for, lets first reduce old size\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n\n  // return booleans on the changes per direction\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n\n    // Dimensions changed and there were non full width boxes before this\n    // -> we have to refit those\n    refit |= same && refitBoxes.length;\n\n    // Chart area changed in the opposite direction\n    changed = changed || other;\n\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\n/**\n * @interface LayoutItem\n * @typedef {object} LayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} draw - Draws the element\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nexport default {\n\n  /**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {LayoutItem} item - the item to add to be laid out\n\t */\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    // initialize item with default values\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    // @ts-ignore\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  /**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\n\t */\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  /**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {LayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  /**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n   * @param {number} minPadding - minimum padding required for each side of chart area\n\t */\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n\n    // Before any changes are made, notify boxes that an update is about to being\n    // This is used to clear any cached data (e.g. scale limits)\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n\n    // Essentially we now have any number of boxes on each of the 4 sides.\n    // Our canvas looks like the following.\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n    // B1 is the bottom axis\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n    // an error will be thrown.\n    //\n    // |----------------------------------------------------|\n    // |                  T1 (Full Width)                   |\n    // |----------------------------------------------------|\n    // |    |    |                 T2                  |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    | C1 |                           | C2 |    |\n    // |    |    |----|                           |----|    |\n    // |    |    |                                     |    |\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\n    // |    |    |                                     |    |\n    // |    |    |----|                           |----|    |\n    // |    |    | C3 |                           | C4 |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    |                 B1                  |    |\n    // |----------------------------------------------------|\n    // |                  B2 (Full Width)                   |\n    // |----------------------------------------------------|\n    //\n\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n\n    // Then fit vertical boxes\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    // Then fit horizontal boxes\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      // if the area changed, re-fit vertical boxes\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n\n    // Finally place the boxes to correct coordinates\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n\n    // Move to opposite side of chart\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n\n    // Finally update boxes in chartArea (radial scale for example)\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n","\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\n/**\n * Abstract class that allows abstracting platform dependencies away from the chart.\n */\nexport default class BasePlatform {\n  /**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\n\t * @param {number} [aspectRatio] - The chart options\n\t */\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n  releaseContext(context) { // eslint-disable-line no-unused-vars\n    return false;\n  }\n\n  /**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\n\t */\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\n\t */\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  /**\n\t * Returns the maximum size in pixels of given canvas element.\n\t * @param {HTMLCanvasElement} element\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\n\t */\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\n    return true;\n  }\n\n  /**\n   * Updates config with platform specific requirements\n   * @param {import('../core/core.config.js').default} config\n   */\n  updateConfig(config) { // eslint-disable-line no-unused-vars\n    // no-op\n  }\n}\n","/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nimport BasePlatform from './platform.base.js';\n\n/**\n * Platform class for charts without access to the DOM or to many element properties\n * This platform is used by default for any chart passed an OffscreenCanvas.\n * @extends BasePlatform\n */\nexport default class BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n","/**\n * Chart.Platform implementation for targeting a web browser\n */\n\nimport BasePlatform from './platform.base.js';\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom.js';\nimport {throttled} from '../helpers/helpers.extras.js';\nimport {isNullOrUndef} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nconst EXPANDO_KEY = '$chartjs';\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n * @param {HTMLCanvasElement} canvas\n * @param {number} [aspectRatio]\n */\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n  // returns null or '' if no explicit value has been set to the canvas attribute.\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n\n  // Chart.js modifies some canvas values that we want to restore on destroy\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n\n  // Force canvas to display as block to avoid extra space caused by inline\n  // elements, which would interfere with the responsive resize process.\n  // https://github.com/chartjs/Chart.js/issues/2538\n  style.display = style.display || 'block';\n  // Include possible borders in the size\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      // If no explicit render height and style height, let's apply the aspect ratio,\n      // which one can be specified by the user but also by charts as default option\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n  if (node) {\n    node.addEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction removeListener(chart, type, listener) {\n  if (chart && chart.canvas) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n  }\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      // If the container size shrank during chart resize, let's assume\n      // scrollbar appeared. So we resize again with the scrollbar visible -\n      // effectively making chart smaller and the scrollbar hidden again.\n      // Because we are inside `throttled`, and currently `ticking`, scroll\n      // events are ignored during this whole 2 resize process.\n      // If we assumed wrong and something else happened, we are resizing\n      // twice in a frame (potential performance issue)\n      listener();\n    }\n  }, window);\n\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    // When its container's display is set to 'none' the callback will be called with a\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\n    // resizing in such case.\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    // This case can occur if the chart is destroyed while waiting\n    // for the throttled function to occur. We prevent crashes by checking\n    // for a destroyed chart\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n\n  addListener(canvas, type, proxy);\n\n  return proxy;\n}\n\n/**\n * Platform class for charts that can access the DOM and global window/document properties\n * @extends BasePlatform\n */\nexport default class DomPlatform extends BasePlatform {\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [aspectRatio]\n\t * @return {CanvasRenderingContext2D|null}\n\t */\n  acquireContext(canvas, aspectRatio) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\n    // inside an iframe or when running in a protected environment. We could guess the\n    // types from their toString() value but let's keep things flexible and assume it's\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\n    // https://github.com/chartjs/Chart.js/issues/3887\n    // https://github.com/chartjs/Chart.js/issues/4102\n    // https://github.com/chartjs/Chart.js/issues/4152\n    if (context && context.canvas === canvas) {\n      // Load platform resources on first chart creation, to make it possible to\n      // import the library before setting platform options.\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  /**\n\t * @param {CanvasRenderingContext2D} context\n\t */\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n\n    // The canvas render size might have been changed (and thus the state stack discarded),\n    // we can't use save() and restore() to restore the initial state. So make sure that at\n    // least the canvas context is reset to the default state by setting the canvas width.\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n    // eslint-disable-next-line no-self-assign\n    canvas.width = canvas.width;\n\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  /**\n\t *\n\t * @param {Chart} chart\n\t * @param {string} type\n\t * @param {function} listener\n\t */\n  addEventListener(chart, type, listener) {\n    // Can have only one listener per type, so make sure previous is removed\n    this.removeEventListener(chart, type);\n\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} type\n\t */\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t */\n  isAttached(canvas) {\n    const container = canvas && _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n","import {_isDomSupported} from '../helpers/index.js';\nimport BasePlatform from './platform.base.js';\nimport BasicPlatform from './platform.basic.js';\nimport DomPlatform from './platform.dom.js';\n\nexport function _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nexport {BasePlatform, BasicPlatform, DomPlatform};\n","import type {AnyObject} from '../types/basic.js';\nimport type {Point} from '../types/geometric.js';\nimport type {Animation} from '../types/animation.js';\nimport {isNumber} from '../helpers/helpers.math.js';\n\nexport default class Element<T = AnyObject, O = AnyObject> {\n\n  static defaults = {};\n  static defaultRoutes = undefined;\n\n  x: number;\n  y: number;\n  active = false;\n  options: O;\n  $animations: Record<keyof T, Animation>;\n\n  tooltipPosition(useFinalPosition: boolean): Point {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y} as Point;\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  /**\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\n   * @param props - properties to get\n   * @param [final] - get the final value (animation target)\n   */\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this as Record<string, unknown>;\n    }\n    const ret: Record<string, unknown> = {};\n    props.forEach((prop) => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\n    });\n    return ret;\n  }\n}\n","import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\nimport {_factorize} from '../helpers/helpers.math.js';\n\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\n * @param {import('./core.scale.js').default} scale\n * @param {Tick[]} ticks\n * @return {Tick[]}\n * @private\n */\nexport function autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  // If there are too many major ticks to display them all\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\n/**\n * @param {number[]} majorIndices\n * @param {Tick[]} ticks\n * @param {number} ticksLimit\n */\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  // If the major ticks are evenly spaced apart, place the minor ticks\n  // so that they divide the major ticks into even chunks\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\n\n/**\n * @param {Tick[]} ticks\n */\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number[]} majorIndices\n * @param {number} spacing\n */\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number} spacing\n * @param {number} [majorStart]\n * @param {number} [majorEnd]\n */\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\n\n/**\n * @param {number[]} arr\n */\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n","import Element from './core.element.js';\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas.js';\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math.js';\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options.js';\nimport {autoSkip} from './core.scale.autoskip.js';\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\n\n/**\n * @typedef { import('../types/index.js').Chart } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a new array containing numItems from arr\n * @param {any[]} arr\n * @param {number} numItems\n */\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @param {boolean} offsetGridLines\n */\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n\n    // Return undefined if the pixel is out of the range\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\n\n/**\n * @param {object} caches\n * @param {number} length\n */\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\n/**\n * @param {object} options\n */\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\n/**\n * @param {object} options\n */\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n\n  return (lines * font.lineHeight) + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  /** @type {CanvasTextAlign} */\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\n\nexport default class Scale extends Element {\n\n  // eslint-disable-next-line max-statements\n  constructor(cfg) {\n    super();\n\n    /** @type {string} */\n    this.id = cfg.id;\n    /** @type {string} */\n    this.type = cfg.type;\n    /** @type {any} */\n    this.options = undefined;\n    /** @type {CanvasRenderingContext2D} */\n    this.ctx = cfg.ctx;\n    /** @type {Chart} */\n    this.chart = cfg.chart;\n\n    // implements box\n    /** @type {number} */\n    this.top = undefined;\n    /** @type {number} */\n    this.bottom = undefined;\n    /** @type {number} */\n    this.left = undefined;\n    /** @type {number} */\n    this.right = undefined;\n    /** @type {number} */\n    this.width = undefined;\n    /** @type {number} */\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    /** @type {number} */\n    this.maxWidth = undefined;\n    /** @type {number} */\n    this.maxHeight = undefined;\n    /** @type {number} */\n    this.paddingTop = undefined;\n    /** @type {number} */\n    this.paddingBottom = undefined;\n    /** @type {number} */\n    this.paddingLeft = undefined;\n    /** @type {number} */\n    this.paddingRight = undefined;\n\n    // scale-specific properties\n    /** @type {string=} */\n    this.axis = undefined;\n    /** @type {number=} */\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    /** @type {Tick[]} */\n    this.ticks = [];\n    /** @type {object[]|null} */\n    this._gridLineItems = null;\n    /** @type {object[]|null} */\n    this._labelItems = null;\n    /** @type {object|null} */\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    /** @type {number} */\n    this._startPixel = undefined;\n    /** @type {number} */\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @param {any} options\n\t * @since 3.0\n\t */\n  init(options) {\n    this.options = options.setContext(this.getContext());\n\n    this.axis = options.axis;\n\n    // parse min/max value, so we can properly determine min/max for other scales\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  /**\n\t * Parse a supported input value to internal representation.\n\t * @param {*} raw\n\t * @param {number} [index]\n\t * @since 3.0\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    return raw;\n  }\n\n  /**\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isFinite(_userMin),\n      maxDefined: isFinite(_userMax)\n    };\n  }\n\n  /**\n\t * @param {boolean} canStack\n\t * @return {{min: number, max: number}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getMinMax(canStack) {\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  /**\n\t * Get the padding needed for the scale\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\n\t * @private\n\t */\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  /**\n\t * Returns the scale tick objects\n\t * @return {Tick[]}\n\t * @since 2.7\n\t */\n  getTicks() {\n    return this.ticks;\n  }\n\n  /**\n\t * @return {string[]}\n\t */\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  /**\n   * @return {import('../types.js').LabelItem[]}\n   */\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n\n  // When a new layout is created, reset the data limits cache\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  // These methods are ordered by lifecycle. Utilities then follow.\n  // Any function defined here is inherited by all scale types.\n  // Any function can be extended by the scale type\n\n  beforeUpdate() {\n    call(this.options.beforeUpdate, [this]);\n  }\n\n  /**\n\t * @param {number} maxWidth - the max width in pixels\n\t * @param {number} maxHeight - the max height in pixels\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\n\t *   This space comes from two sources:\n\t *     - padding - space that's required to show the labels at the edges of the scale\n\t *     - thickness of scales or legends in another orientation\n\t */\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n    this.beforeUpdate();\n\n    // Absorb the master measurements\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n\n    // Dimensions\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n\n    // Data min/max\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n\n    this.ticks = this.buildTicks() || [];\n\n    // Allow modification of ticks in callback.\n    this.afterBuildTicks();\n\n    // Compute tick rotation and fit using a sampled subset of labels\n    // We generally don't need to compute the size of every single label for determining scale size\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    // configure is called twice, once here, once from core.controller.updateLayout.\n    // Here we haven't been positioned yet, but dimensions are correct.\n    // Variables set in configure are needed for calculateLabelRotation, and\n    // it's ok that coordinates are not correct there, only dimensions matter.\n    this.configure();\n\n    // Tick Rotation\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\n    this.afterCalculateLabelRotation();\n\n    // Auto-skip\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      // Generate labels using all non-skipped ticks\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\n    this.afterFit();\n\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\n\n    this.afterUpdate();\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      // by default vertical scales are from bottom to top, so pixels are reversed\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    call(this.options.afterUpdate, [this]);\n  }\n\n  //\n\n  beforeSetDimensions() {\n    call(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    if (this.isHorizontal()) {\n      // Reset position before calculating rotation\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n\n      // Reset position before calculating rotation\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    // Reset padding\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    call(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    call(this.options[name], [this]);\n  }\n\n  // Data limits\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  //\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  /**\n\t * @return {object[]} the ticks\n\t */\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    call(this.options.beforeTickToLabelConversion, [this]);\n  }\n  /**\n\t * Convert ticks to label strings\n\t * @param {Tick[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    call(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  //\n\n  beforeCalculateLabelRotation() {\n    call(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    // Estimate the width of each grid based on the canvas width, the maximum\n    // label width and the number of tick intervals\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    // Allow 3 pixels x2 padding either side for label readability\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    call(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n\n  //\n\n  beforeFit() {\n    call(this.options.beforeFit, [this]);\n  }\n  fit() {\n    // Reset\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight; // fill all the height\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      // Don't bother fitting the ticks if we are not showing the labels\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n        // A horizontal axis is more constrained by the height.\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n        // A vertical axis is more constrained by the width. Labels are the\n        // dominant factor here, so get that length first and account for padding\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n      // which means that the right padding is dominated by the font height\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      // Adjust padding taking into account changes in offsets\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  /**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    call(this.options.afterFit, [this]);\n  }\n\n  // Shared Methods\n  /**\n\t * @return {boolean}\n\t */\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  /**\n\t * @return {boolean}\n\t */\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  /**\n\t * @param {Tick[]} ticks\n\t * @private\n\t */\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n\n    this.generateTickLabels(ticks);\n\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  /**\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n\n    return labelSizes;\n  }\n\n  /**\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\n\t * labels where offset indicates the anchor point offset from the top in pixels.\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      // Undefined labels and arrays should not be measured\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        // if it is an array let's measure each element\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = /** @type {string} */ (label[j]);\n          // Undefined labels and arrays should not be measured\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n\n  /**\n\t * Used to get the label to display in the tooltip for the given value\n\t * @param {*} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value;\n  }\n\n  /**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {*} value\n\t * @param {number} [index]\n\t * @return {number}\n\t */\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\n    return NaN;\n  }\n\n  /**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} pixel\n\t * @return {*}\n\t */\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} index\n\t * @return {number}\n\t */\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  /**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} decimal\n\t * @return {number}\n\t */\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  /**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @return {number}\n\t */\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  /**\n\t * @return {number}\n\t */\n  getBaseValue() {\n    const {min, max} = this;\n\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  /**\n\t * @return {number}\n\t * @private\n\t */\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n\n    // Calculate space needed by label in axis direction.\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n\n    // Calculate space needed for 1 tick in axis direction.\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  /**\n\t * @return {boolean}\n\t * @private\n\t */\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position, border} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      // Skip if the pixel is out of the range\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n\n    return items;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += (lineHeight / 2) * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        default:\n          break;\n        }\n\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        case 'inner':\n          if (i === ilen - 1) {\n            left -= width;\n          } else if (i > 0) {\n            left -= width / 2;\n          }\n          break;\n        default:\n          break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n\n          color: optsAtIndex.backdropColor,\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop,\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {textAlign, x};\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n\n  /**\n   * @protected\n   */\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {\n    const {chart, ctx, options: {border, grid}} = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  /**\n\t * @return {object[]}\n\t * @private\n\t */\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      // backward compatibility: draw has been overridden by custom scale\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  /**\n\t * Returns visible dataset metas that are attached to this scale\n\t * @param {string} [type] - if specified, also filter by dataset type\n\t * @return {object[]}\n\t */\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n\n  /**\n\t * @param {number} index\n\t * @return {object}\n\t * @protected\n \t */\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  /**\n   * @protected\n   */\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n","import {merge} from '../helpers/index.js';\nimport defaults, {overrides} from './core.defaults.js';\n\n/**\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\n */\n\nexport default class TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t * @returns {string} The scope where items defaults were registered to.\n\t */\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      // Make sure the parent is registered and note the scope where its defaults are.\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      // already registered\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object?}\n\t */\n  get(id) {\n    return this.items[id];\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t */\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  // Inherit the parent's defaults and keep existing defaults\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n","import DatasetController from './core.datasetController.js';\nimport Element from './core.element.js';\nimport Scale from './core.scale.js';\nimport TypedRegistry from './core.typedRegistry.js';\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core.js';\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is exported for typedoc\n */\nexport class Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    // Order is important, Scale has Element in prototype chain,\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  add(...args) {\n    this._each('register', args);\n  }\n\n  remove(...args) {\n    this._each('unregister', args);\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof DatasetController}\n\t */\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Element}\n\t */\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object}\n\t */\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Scale}\n\t */\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n\n  /**\n\t * @private\n\t */\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        // Handle loopable args\n        // Use case:\n        //  import * as plugins from './plugins.js';\n        //  Chart.register(plugins);\n        each(arg, item => {\n          // If there are mixed types in the loopable, make sure those are\n          // registered in correct registry\n          // Use case: (treemap exporting controller, elements etc)\n          //  import * as treemap from 'chartjs-chart-treemap.js';\n          //  Chart.register(treemap);\n\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\n    registry[method](component);\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\n  }\n\n  /**\n\t * @private\n\t */\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    // plugins is the fallback registry\n    return this.plugins;\n  }\n\n  /**\n\t * @private\n\t */\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Registry();\n","import registry from './core.registry.js';\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../plugins/plugin.tooltip.js').default } Tooltip\n */\n\n/**\n * @callback filterCallback\n * @param {{plugin: object, options: object}} value\n * @param {number} [index]\n * @param {array} [array]\n * @param {object} [thisArg]\n * @return {boolean}\n */\n\n\nexport default class PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  /**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    // When plugins are registered, there is the possibility of a double\n    // invalidate situation. In this case, we only want to invalidate once.\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\n    // plugins are restarted without being correctly stopped.\n    // See https://github.com/chartjs/Chart.js/issues/8147\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    // options === false => all plugins are disabled\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\n\n/**\n * @param {import('./core.config.js').default} config\n */\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {plugins, localIds};\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\n\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    // make sure plugin defaults are in scopes for local (not registered) plugins\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    // These are just defaults that plugins can override\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n","import defaults, {overrides, descriptors} from './core.defaults.js';\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core.js';\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config.js';\n\nexport function getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nexport function determineAxis(id, ...scaleOptions) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (const opts of scaleOptions) {\n    const axis = opts.axis\n      || axisFromPosition(opts.position)\n      || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {axis};\n  }\n}\n\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter((d) => d.xAxisID === id || d.yAxisID === id);\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n\n  // First figure out first scale id's per axis.\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n\n  // Then merge dataset defaults to scale configs\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n\n  // apply scale defaults, if not overridden by dataset defaults\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n\n  initOptions(config);\n\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nexport default class Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @return {string[][]}\n   */\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset animation options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @param {string} transition\n   * @return {string[][]}\n   */\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        // The following are used for looking up the `animations` and `animation` keys\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving element options that belong\n   * to an dataset. These keys do not include the dataset itself, because it\n   * is not under options.\n   * @param {string} datasetType\n   * @param {string} elementType\n   * @return {string[][]}\n   */\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving plugin options.\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\n   * @return {string[][]}\n   */\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n\n  /**\n   * @private\n   */\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n\n  /**\n   * Resolves the objects from options and defaults for option value resolution.\n   * @param {object} mainScope - The main scope object for options\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\n   */\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n\n  /**\n   * Returns the option scopes for resolving chart options\n   * @return {object[]}\n   */\n  chartOptionScopes() {\n    const {options, type} = this;\n\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {string[]} names\n   * @param {function|object} context\n   * @param {string[]} [prefixes]\n   * @return {object}\n   */\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {object} [context]\n   * @param {string[]} [prefixes]\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\n   */\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\n\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).some((key) => isFunction(value[key]));\n\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n","import animator from './core.animator.js';\nimport defaults, {overrides} from './core.defaults.js';\nimport Interaction from './core.interaction.js';\nimport layouts from './core.layouts.js';\nimport {_detectPlatform} from '../platform/index.js';\nimport PluginService from './core.plugins.js';\nimport registry from './core.registry.js';\nimport Config, {determineAxis, getIndexAxis} from './core.config.js';\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core.js';\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea, _isDomSupported, retinaScale, getDatasetClipArea} from '../helpers/index.js';\n// @ts-ignore\nimport {version} from '../../package.json';\nimport {debounce} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').Point } Point\n */\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\n\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n\n  chart.notifyPlugins('afterRender');\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\n/**\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\n */\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    // Support for array based queries (such as jQuery)\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    // Support for any object associated to a canvas (including a context2d)\n    item = item.canvas;\n  }\n  return item;\n}\n\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\n/**\n * @param {ChartEvent} e\n * @param {ChartEvent|null} lastEvent\n * @param {boolean} inChartArea\n * @param {boolean} isClick\n * @returns {ChartEvent|null}\n */\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\n\nclass Chart {\n\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n\n  // eslint-disable-next-line max-statements\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    // Store the previously used aspect ratio to determine if a resize\n    // is needed during updates. Do this after _options is set since\n    // aspectRatio uses a getter\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n\n    // Add the chart instance to the global namespace\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      // The given item is not a compatible context2d element, let's return before finalizing\n      // the chart initialization but after setting basic chart / controller properties that\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n      // https://github.com/chartjs/Chart.js/issues/2807\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      // If aspectRatio is defined in options, use that.\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\n      return _aspectRatio;\n    }\n\n    // Calculate\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  /**\n\t * @private\n\t */\n  _initialize() {\n    // Before init plugin notification\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n\n    // After init plugin notification\n    this.notifyPlugins('afterInit');\n\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  /**\n\t * Resize the chart to its container or to explicit dimensions.\n\t * @param {number} [width]\n\t * @param {number} [height]\n\t */\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {size: newSize});\n\n    callCallback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        // The resize update is delayed, only draw without updating.\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  /**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    // clear up discarded scales\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  /**\n\t * @private\n\t */\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n    return newControllers;\n  }\n\n  /**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  /**\n\t* Resets the chart back to its state before the initial animation\n\t*/\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n\n    // plugins options references might have change, let's invalidate the cache\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    // Make sure dataset controllers are updated and new controllers are reset\n    const newControllers = this.buildOrUpdateControllers();\n\n    this.notifyPlugins('beforeElementsUpdate');\n\n    // Make sure all dataset controllers have correct meta data counts\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      // New controllers will be reset after the layout pass, so we only want to modify\n      // elements added to new datasets\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n\n    // Only reset the controllers if we have animations\n    if (!animsDisabled) {\n      // Can only reset the new controllers after the scales have been updated\n      // Reset is done to get the starting point for the initial animation\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    // Do this before render so that any plugins that need final scale updates can use it\n    this.notifyPlugins('afterUpdate', {mode});\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    // Replay last event from before update, or set hover styles on active elements\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  /**\n   * @private\n   */\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      // The configured events have changed. Rebind.\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n\n  /**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\n        return;\n      }\n\n      // configure is called twice, once in core.scale.update and once here.\n      // Here the boxes are fully updated and at their final positions.\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  /**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n\n  /**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      // Unset pending resize request now to avoid possible recursion within _resize\n      this._resizeBeforeDraw = null;\n      this._resize(width, height);\n    }\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\n    // currently be part of layers. Instead, we draw\n    // layers <= 0 before(default, backward compat), and the rest after\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    // Rest of layers\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  /**\n\t * @private\n\t */\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n\t * Gets the visible dataset metas in drawing order\n\t * @return {object[]}\n\t */\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  /**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  /**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n    // @ts-expect-error\n    const clip = getDatasetClipArea(this, meta);\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (clip) {\n      clipArea(ctx, clip);\n    }\n\n    meta.controller.draw();\n\n    if (clip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  /**\n   * Checks whether the given point is in the chart area.\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\n   * @returns {boolean}\n   */\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\t\t\t// See isDatasetVisible() comment\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  /**\n\t * @private\n\t */\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  /**\n\t * @private\n\t */\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n\n    this._stop();\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n\n  /**\n\t * @private\n\t */\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  /**\n   * @private\n   */\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, (type) => _add(type, listener));\n  }\n\n  /**\n   * @private\n   */\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached; // eslint-disable-line prefer-const\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\n      this._stop();\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  /**\n\t * Get active (hovered) elements\n\t * @returns array\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active (hovered) elements\n\t * @param {array} activeElements New active data points\n\t */\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      // Make sure we don't use the previous mouse event to override the active elements in update.\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  /**\n\t * Calls enabled plugins on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\n   * @param {import('./core.plugins.js').filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  /**\n   * Check if a plugin with the specific ID is registered and enabled\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\n   * @returns {boolean}\n   */\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e the event to handle\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\n\t * @return {boolean} true if the chart needs to re-render\n\t * @private\n\t */\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n\n    // If the event is replayed from `update`, we should evaluate with the final positions.\n    //\n    // The `replay`:\n    // It's the last event (excluding click) that has occurred before `update`.\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\n    //\n    // The why:\n    // If animations are active, the elements haven't moved yet compared to state before update.\n    // But if they will, we are activating the elements that would be active, if this check\n    // was done after the animations have completed. => \"final positions\".\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\n    // This is done so we do not have to evaluate the active elements each animation frame\n    // - it would be expensive.\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      // Set _lastEvent to null while we are processing the event handlers.\n      // This prevents recursion if the handler calls chart.update()\n      this._lastEvent = null;\n\n      // Invoke onHover hook\n      callCallback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callCallback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n\n    return changed;\n  }\n\n  /**\n   * @param {ChartEvent} e - The event\n   * @param {import('../types/index.js').ActiveElement[]} lastActive - Previously active elements\n   * @param {boolean} inChartArea - Is the event inside chartArea\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\n   * @returns {import('../types/index.js').ActiveElement[]} - The active elements\n   * @pravate\n   */\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n\n// @ts-ignore\nfunction invalidatePlugins() {\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\n}\n\nexport default Chart;\n","import Element from '../core/core.element.js';\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index.js';\nimport {PI, _angleDiff, _normalizeAngle, _isBetween, _limitValue} from '../helpers/helpers.math.js';\nimport {_readValueToProps} from '../helpers/helpers.options.js';\nimport type {ArcOptions, Point} from '../types/index.js';\n\nfunction clipSelf(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, x, y, outerRadius, innerRadius, options} = element;\n  const {borderWidth, borderJoinStyle} = options;\n  const outerAngleClip = Math.min(borderWidth / outerRadius, _normalizeAngle(startAngle - endAngle));\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius - borderWidth / 2, startAngle + outerAngleClip / 2, endAngle - outerAngleClip / 2);\n\n  if (innerRadius > 0) {\n    const innerAngleClip = Math.min(borderWidth / innerRadius, _normalizeAngle(startAngle - endAngle));\n    ctx.arc(x, y, innerRadius + borderWidth / 2, endAngle - innerAngleClip / 2, startAngle + innerAngleClip / 2, true);\n  } else {\n    const clipWidth = Math.min(borderWidth / 2, outerRadius * _normalizeAngle(startAngle - endAngle));\n\n    if (borderJoinStyle === 'round') {\n      ctx.arc(x, y, clipWidth, endAngle - PI / 2, startAngle + PI / 2, true);\n    } else if (borderJoinStyle === 'bevel') {\n      const r = 2 * clipWidth * clipWidth;\n      const endX = -r * Math.cos(endAngle + PI / 2) + x;\n      const endY = -r * Math.sin(endAngle + PI / 2) + y;\n      const startX = r * Math.cos(startAngle + PI / 2) + x;\n      const startY = r * Math.sin(startAngle + PI / 2) + y;\n      ctx.lineTo(endX, endY);\n      ctx.lineTo(startX, startY);\n    }\n  }\n  ctx.closePath();\n\n  ctx.moveTo(0, 0);\n  ctx.rect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  ctx.clip('evenodd');\n}\n\n\nfunction clipArc(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius(arc: ArcElement, innerRadius: number, outerRadius: number, angleDelta: number) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\n\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r: number, theta: number, x: number, y: number) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\n\n\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  end: number,\n  circular: boolean,\n) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\n\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = ((endAngle - (innerEnd / innerRadius)) + (startAngle + (innerStart / innerRadius))) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + (innerStart / innerRadius), true);\n\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference, options} = element;\n  const {borderWidth, borderJoinStyle, borderDash, borderDashOffset, borderRadius} = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (options.selfJoin && endAngle - startAngle >= PI && borderRadius === 0 && borderJoinStyle !== 'miter') {\n    clipSelf(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nexport interface ArcProps extends Point {\n  startAngle: number;\n  endAngle: number;\n  innerRadius: number;\n  outerRadius: number;\n  circumference: number;\n}\n\nexport default class ArcElement extends Element<ArcProps, ArcOptions> {\n\n  static id = 'arc';\n\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true,\n    selfJoin: false,\n  };\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash'\n  };\n\n  circumference: number;\n  endAngle: number;\n  fullCircles: number;\n  innerRadius: number;\n  outerRadius: number;\n  pixelMargin: number;\n  startAngle: number;\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX: number, chartY: number, useFinalPosition: boolean) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n    const betweenAngles = _circumference >= TAU || nonZeroBetween;\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return (betweenAngles && withinRadius);\n  }\n\n  getCenterPoint(useFinalPosition: boolean) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius'\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition: boolean) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n\n    ctx.restore();\n  }\n}\n","import Element from '../core/core.element.js';\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation.js';\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment.js';\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas.js';\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve.js';\nimport {valueOrDefault} from '../helpers/index.js';\n\n/**\n * @typedef { import('./element.point.js').default } PointElement\n */\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\n/**\n * @returns {any}\n */\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  // eslint-disable-next-line prefer-const\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      // Draw line to maxY and minY, using the average x-coordinate\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      // Line to y-value of last point in group. So the line continues\n      // from correct position. Not using move, to have solid path.\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0; // truncated x-coordinate\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      // Draw line to next x-position, using the first (or only)\n      // y-value in that group\n      ctx.lineTo(x, y);\n\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    // Keep track of the last y-value in group\n    lastY = y;\n  }\n  drawX();\n}\n\n/**\n * @param {LineElement} line - the line\n * @returns {function}\n * @private\n */\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\n/**\n * @private\n */\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nexport default class LineElement extends Element {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n  };\n\n\n  constructor(cfg) {\n    super();\n\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  /**\n\t * First non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  /**\n\t * Last non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  /**\n\t * Interpolate a point in this line at the same value on `property` as\n\t * the reference `point` provided\n\t * @param {PointElement} point - the reference point\n\t * @param {string} property - the property to match on\n\t * @returns {PointElement|undefined}\n\t */\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n\n  /**\n\t * Append a segment of this line to current path.\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} segment\n\t * @param {number} segment.start - start index of the segment, referring the points array\n \t * @param {number} segment.end - end index of the segment, referring the points array\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\n\t * @param {object} params\n\t * @param {boolean} params.move - move to starting point (vs line to it)\n\t * @param {boolean} params.reverse - path the segment from end to start\n\t * @param {number} params.start - limit segment to points starting from `start` index\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\n\t */\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  /**\n\t * Append all segments of this line to current path.\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\n\t */\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n\n    start = start || 0;\n    count = count || (this.points.length - start);\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n\n  /**\n\t * Draw\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} chartArea\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t */\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n\n      draw(ctx, this, start, count);\n\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      // When line is animated, the control points and path are not cached.\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n","import Element from '../core/core.element.js';\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport type {\n  CartesianParsedData,\n  ChartArea,\n  Point,\n  PointHoverOptions,\n  PointOptions,\n} from '../types/index.js';\n\nfunction inRange(el: PointElement, pos: number, axis: 'x' | 'y', useFinalPosition?: boolean) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\n\nexport type PointProps = Point\n\nexport default class PointElement extends Element<PointProps, PointOptions & PointHoverOptions> {\n\n  static id = 'point';\n\n  parsed: CartesianParsedData;\n  skip?: boolean;\n  stop?: boolean;\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX: number, mouseY: number, useFinalPosition?: boolean) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n\n  inXRange(mouseX: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition?: boolean) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n\n  size(options?: Partial<PointOptions & PointHoverOptions>) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, area: ChartArea) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n","import Element from '../core/core.element.js';\nimport {isObject, _isBetween, _limitValue} from '../helpers/index.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options.js';\n\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param {BarElement} bar the bar\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the bar\n * @private\n */\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\n\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {left, top, right, bottom};\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n\n  // If the value is an object, assume the user knows what they are doing\n  // and apply as directed.\n  const enableBorder = enableBorderRadius || isObject(value);\n\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\n/**\n * Add a path of a rectangle to the current sub-path\n * @param {CanvasRenderingContext2D} ctx Context\n * @param {*} rect Bounding rect\n */\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nexport default class BarElement extends Element {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n","import {DoughnutController, PolarAreaController, defaults} from '../index.js';\nimport type {Chart, ChartDataset} from '../types.js';\n\nexport interface ColorsPluginOptions {\n  enabled?: boolean;\n  forceOverride?: boolean;\n}\n\ninterface ColorsDescriptor {\n  backgroundColor?: unknown;\n  borderColor?: unknown;\n}\n\nconst BORDER_COLORS = [\n  'rgb(54, 162, 235)', // blue\n  'rgb(255, 99, 132)', // red\n  'rgb(255, 159, 64)', // orange\n  'rgb(255, 205, 86)', // yellow\n  'rgb(75, 192, 192)', // green\n  'rgb(153, 102, 255)', // purple\n  'rgb(201, 203, 207)' // grey\n];\n\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i: number) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i: number) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset: ChartDataset, i: number) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n\n  return i;\n}\n\nfunction getColorizer(chart: Chart) {\n  let i = 0;\n\n  return (dataset: ChartDataset, datasetIndex: number) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(\n  descriptors: ColorsDescriptor[] | Record<string, ColorsDescriptor>\n) {\n  let k: number | string;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction containsColorsDefinition(\n  descriptor: ColorsDescriptor\n) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\n\nfunction containsDefaultColorsDefenitions() {\n  return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\n\nexport default {\n  id: 'colors',\n\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  } as ColorsPluginOptions,\n\n  beforeLayout(chart: Chart, _args, options: ColorsPluginOptions) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      data: {datasets},\n      options: chartOptions\n    } = chart.config;\n    const {elements} = chartOptions;\n\n    const containsColorDefenition = (\n      containsColorsDefinitions(datasets) ||\n      containsColorsDefinition(chartOptions) ||\n      (elements && containsColorsDefinitions(elements)) ||\n      containsDefaultColorsDefenitions());\n\n    if (!options.forceOverride && containsColorDefenition) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n\n    datasets.forEach(colorizer);\n  }\n};\n","import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers/index.js';\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  /**\n   * Implementation of the Largest Triangle Three Buckets algorithm.\n   *\n   * This implementation is based on the original implementation by Sveinn Steinarsson\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\n   *\n   * The original implementation is MIT licensed.\n   */\n  const samples = options.samples || availableWidth;\n  // There are less points than the threshold, returning the whole array\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  // Starting from offset\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n\n    // Adding offset\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n\n    // Adding offset\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n\n    // Note that this is changed from the original algorithm which initializes these\n    // values to 1. The reason for this change is that if the area is small, nextA\n    // would never be set and thus a crash would occur in the next loop as `a` would become\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\n    // initializing with a negative number is the correct solution.\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  // Include the last point\n  decimated[sampledIndex++] = data[endIndex];\n\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      // Use point.x here because we're computing the average data `x` value\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        // The interval is defined by 4 points: start, min, max, end.\n        // The starting point is already considered at this point, so we need to determine which\n        // of the other points to add. We need to sort these points to ensure the decimated data\n        // is still sorted and then ensure there are no duplicates.\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      // lastIndex === startIndex will occur when a range has only 1 point which could\n      // happen with very uneven data\n      if (i > 0 && lastIndex !== startIndex) {\n        // Last point in the previous interval\n        decimated.push(data[lastIndex]);\n      }\n\n      // Start of the new interval\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data,\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n\n  let start = 0;\n  let count;\n\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {start, count};\n}\n\nexport default {\n  id: 'decimation',\n\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    // Assume the entire chart is available to show a few more points than needed\n    const availableWidth = chart.width;\n\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        // Decimation is only supported for lines that have an X indexAxis\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        // Only line datasets are supported\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        // Only linear interpolation is supported\n        return;\n      }\n\n      if (chart.options.parsing) {\n        // Plugin only supports data that does not need parsing\n        return;\n      }\n\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        // No decimation is required until we are above this threshold\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        // First time we are seeing this dataset\n        // We override the 'data' property with a setter that stores the\n        // raw data in _data, but reads the decimated data from _decimated\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n\n      // Point the chart to the decimated data\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n","import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers/index.js';\n\nexport function _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      // Special case for boundary not supporting `segments` (simpleArc)\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\n\nexport function _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\n\nexport function _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\n\nexport function _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {isArray} from '../../helpers/index.js';\nimport {_pointsFromSegments} from './filler.segment.js';\n\n/**\n * @param {PointElement[] | { x: number; y: number; }} boundary\n * @param {LineElement} line\n * @return {LineElement?}\n */\nexport function _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    // @ts-ignore\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nexport function _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n","import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.line.js').default } LineElement\n * @typedef { import('../../types/index.js').FillTarget } FillTarget\n * @typedef { import('../../types/index.js').ComplexFillTarget } ComplexFillTarget\n */\n\nexport function _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\n/**\n * @param {LineElement} line\n * @param {number} index\n * @param {number} count\n */\nexport function _decodeFill(line, index, count) {\n  /** @type {string | {value: number}} */\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @returns {number | null}\n */\nexport function _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @param {number} startValue\n * @returns {number | undefined}\n */\nexport function _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\n\n/**\n * @param {LineElement} line\n */\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {_isBetween} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\n\n/**\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\n * @return {LineElement}\n */\nexport function _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @return {LineElement[]}\n */\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\n\n/**\n * @param {PointElement[]} points\n * @param {PointElement} sourcePoint\n * @param {LineElement[]} linesBelow\n */\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      // First point of a segment -> need to add another point before this,\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        // In the middle of a segment, no need to add more points.\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\n\n/**\n * @param {LineElement} line\n * @param {PointElement} sourcePoint\n * @param {string} property\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\n */\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n","import {TAU} from '../../helpers/index.js';\n\n// TODO: use elements.ArcElement instead\nexport class simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n","import {isFinite} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\nimport {_getTargetPixel, _getTargetValue} from './filler.options.js';\nimport {_buildStackLine} from './filler.target.stack.js';\nimport {simpleArc} from './simpleArc.js';\n\n/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nexport function _getTarget(source) {\n  const {chart, fill, line} = source;\n\n  if (isFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\n/**\n * @param {Chart} chart\n * @param {number} index\n */\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\n\n\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\n","import {clipArea, unclipArea, getDatasetClipArea} from '../../helpers/index.js';\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment.js';\nimport {_getTarget} from './filler.target.js';\n\nexport function _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {chart, index, line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  const meta = chart.getDatasetMeta(index);\n  const clip = getDatasetClipArea(chart, meta);\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis, clip});\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale, clip} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n\n  ctx.save();\n\n  let fillColor = below;\n  if (below !== above) {\n    if (property === 'x') {\n      clipVertical(ctx, target, area.top);\n      fill(ctx, {line, target, color: above, scale, property, clip});\n      ctx.restore();\n      ctx.save();\n      clipVertical(ctx, target, area.bottom);\n    } else if (property === 'y') {\n      clipHorizontal(ctx, target, area.left);\n      fill(ctx, {line, target, color: below, scale, property, clip});\n      ctx.restore();\n      ctx.save();\n      clipHorizontal(ctx, target, area.right);\n      fillColor = above;\n    }\n  }\n  fill(ctx, {line, target, color: fillColor, scale, property, clip});\n\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction clipHorizontal(ctx, target, clipX) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(clipX, firstPoint.y);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(clipX, lastPoint.y);\n    }\n  }\n\n  ctx.lineTo(clipX, target.first().y);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale, clip} = cfg;\n  const segments = _segments(line, target, property);\n\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n\n    clipBounds(ctx, scale, clip, notShape && _getBounds(property, start, end));\n\n    ctx.beginPath();\n\n    const lineLoop = !!line.pathSegment(ctx, src);\n\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, clip, bounds) {\n  const chartArea = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n\n  if (property === 'x' || property === 'y') {\n    let left, top, right, bottom;\n\n    if (property === 'x') {\n      left = start;\n      top = chartArea.top;\n      right = end;\n      bottom = chartArea.bottom;\n    } else {\n      left = chartArea.left;\n      top = start;\n      right = chartArea.right;\n      bottom = end;\n    }\n\n    ctx.beginPath();\n\n    if (clip) {\n      left = Math.max(left, clip.left);\n      right = Math.min(right, clip.right);\n      top = Math.max(top, clip.top);\n      bottom = Math.min(bottom, clip.bottom);\n    }\n\n    ctx.rect(left, top, right - left, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\n","/**\n * Plugin based on discussion from the following Chart.js issues:\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\n */\n\nimport LineElement from '../../elements/element.line.js';\nimport {_drawfill} from './filler.drawing.js';\nimport {_shouldApplyFill} from './filler.helper.js';\nimport {_decodeFill, _resolveTarget} from './filler.options.js';\n\nexport default {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n","import defaults from '../core/core.defaults.js';\nimport Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas.js';\nimport {\n  _isBetween,\n  callback as call,\n  clipArea,\n  getRtlAdapter,\n  overrideTextDirection,\n  restoreTextDirection,\n  toFont,\n  toPadding,\n  unclipArea,\n  valueOrDefault,\n} from '../helpers/index.js';\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {toTRBLCorners} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n */\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nexport class Legend extends Element {\n\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this._added = false;\n\n    // Contains hit boxes for each dataset (in dataset order)\n    this.legendHitBoxes = [];\n\n    /**\n \t\t * @private\n \t\t */\n    this._hoveredItem = null;\n\n    // Are we in doughnut mode which has a different data type\n    this.doughnutMode = false;\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {options, ctx} = this;\n\n    // The legend may not be displayed for a variety of reasons including\n    // the fact that the defaults got set to `false`.\n    // When the legend is not displayed, there are no guarantees that the options\n    // are correctly formatted so we need to bail out as early as possible.\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    let width, height;\n\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth; // fill all the width\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight; // fill all the height\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  /**\n\t * @private\n\t */\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n\n    let left = 0;\n    let col = 0;\n\n    this.legendItems.forEach((legendItem, i) => {\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      // If too tall, go to new column\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      // Store the hitbox width and height here. Final position will be updated in `draw`\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n\n      // Get max width\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n\n    this.drawTitle();\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    // current position\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      // Set the ctx for the box\n      ctx.save();\n\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        // Recalculate x and y for drawPoint() because its expecting\n        // x and y to be center of figure (instead of top left)\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n\n        // Draw pointStyle as legend symbol\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        // Draw box as legend symbol\n        // Adjust position when boxHeight < fontSize (want it centered)\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    // Horizontal\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\n\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n\n      drawLegendBox(realX, y, legendItem);\n\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n\n      // Fill the actual label\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n\n    // These defaults are used when the legend is vertical.\n    // When horizontal, they are computed below.\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      // Move left / right so that the title is above the legend lines\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      // Move down so that the title is above the legend stack in every alignment\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    // Now that we know the left edge of the inner legend box, compute the correct\n    // X coordinate from the title alignment\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  /**\n\t * @private\n\t */\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      // See if we are touching one of the dataset boxes\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          // Touching an element\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t */\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    // Chart event already has relative position in it\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        call(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        call(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      call(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {itemWidth, itemHeight};\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\n\nexport default {\n  id: 'legend',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  // During the beforeUpdate step, the layout configuration needs to run\n  // This ensures that if the legend position changes (via an option update)\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  // The labels need to be built after datasets are updated to ensure that colors\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    // a callback that will handle\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      // Generates labels shown in the legend\n      // Valid properties to return:\n      // text : text to display\n      // fillStyle : fill of coloured box\n      // strokeStyle: stroke of coloured box\n      // hidden : if this legend item refers to a hidden item\n      // lineCap : cap style for line\n      // lineDash\n      // lineDashOffset :\n      // lineJoin :\n      // lineWidth :\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\n\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n\n            // Below is extra data used for toggling the datasets\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n","import Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {PI, isArray, toPadding, toFont} from '../helpers/index.js';\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras.js';\nimport {renderText} from '../helpers/helpers.canvas.js';\n\nexport class Title extends Element {\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nexport default {\n  id: 'title',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000         // by default greater than legend (1000) to be above\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import {Title} from './plugin.title.js';\nimport layouts from '../core/core.layouts.js';\n\nconst map = new WeakMap();\n\nexport default {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import Animations from '../core/core.animations.js';\nimport Element from '../core/core.element.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core.js';\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl.js';\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math.js';\nimport {createContext, drawPoint} from '../helpers/index.js';\n\n/**\n * @typedef { import('../platform/platform.base.js').Chart } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').ActiveElement } ActiveElement\n * @typedef { import('../core/core.interaction.js').InteractionItem } InteractionItem\n */\n\nconst positioners = {\n  /**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t */\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let xSet = new Set();\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        xSet.add(pos.x);\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    // No visible items where found, return false so we don't have to divide by 0 which reduces in NaN\n    if (count === 0 || xSet.size === 0) {\n      return false;\n    }\n\n    const xAverage = [...xSet].reduce((a, b) => a + b) / xSet.size;\n\n    return {\n      x: xAverage,\n      y: y / count\n    };\n  },\n\n  /**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t */\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      // base = base.concat(toPush);\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {*} str - The value to split by newline.\n * @returns {string|string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param {Chart} chart\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n\n  // Count of all lines in the body\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    // Body lines may include some extra height depending on boxHeight\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  // Title width\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n\n  // Body width\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n\n  // Body lines may include some extra width due to the color box\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n\n  // Reset back to 0\n  widthPadding = 0;\n\n  // Footer width\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n\n  ctx.restore();\n\n  // Add padding\n  width += padding.width;\n\n  return {width, height};\n}\n\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  // eslint-disable-next-line prefer-const\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  // Args are: (tooltipItems, data)\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n  afterTitle: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeBody: noop,\n\n  // Args are: (tooltipItem, data)\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0,\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation,\n    };\n  },\n  afterLabel: noop,\n\n  // Args are: (tooltipItems, data)\n  afterBody: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\n/**\n * Invoke callback from object with context and arguments.\n * If callback returns `undefined`, then will be invoked default callback.\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\n * @param {keyof typeof defaultCallbacks} name\n * @param {*} ctx\n * @param {*} arg\n * @returns {any}\n */\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nexport class Tooltip extends Element {\n\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\n    // and `labelTextColors` to create a single variable\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {callbacks} = options;\n\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\n    );\n  }\n\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n\n      bodyItems.push(bodyItem);\n    });\n\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\n    );\n  }\n\n  // Get the footer and beforeFooter and afterFooter lines\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n    return lines;\n  }\n\n  /**\n\t * @private\n\t */\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    // If the user provided a filter function, use it to modify the tooltip items\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    // If the user provided a sorting function, use it to modify the tooltip items\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    // Determine colors for boxes\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n\n        // Left draws bottom -> top, this y1 is on the bottom\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n\n        // Right draws top -> bottom, thus y1 is on the top\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n\n        // Top draws left -> right, thus x1 is on the left\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n\n        // Bottom draws right -> left, thus x1 is on the right\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.titleAlign, options);\n\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n        }\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      // Recalculate x and y for drawPoint() because its expecting\n      // x and y to be center of figure (instead of top left)\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n\n      // Draw the point\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      // Border\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : (labelColor.borderWidth || 1); // TODO, v4 remove fallback\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        // Normal rect\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    // restore fillStyle\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n\n    // Before body lines\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n\n    // Draw body lines now\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n\n      lines = bodyItem.lines;\n      // Draw Legend-like boxes if needed\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        // Reset for any lines that don't include colorbox\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    // Reset back to 0 for after body\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n\n    // After body lines\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing; // Remove last body spacing\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n\n      footerFont = toFont(options.footerFont);\n\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  /**\n\t * Update x/y animation targets when _active elements are animating too\n\t * @private\n\t */\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  /**\n   * Determine if the tooltip will draw anything\n   * @returns {boolean} True if the tooltip will render\n   */\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n\n    // IE11/Edge does not like very small opacities, so snap to 0\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n\n    const padding = toPadding(options.padding);\n\n    // Truthy/falsey value for empty tooltip\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n\n      // Draw Background\n      this.drawBackground(pt, ctx, tooltipSize, options);\n\n      overrideTextDirection(ctx, options.textDirection);\n\n      pt.y += padding.top;\n\n      // Titles\n      this.drawTitle(pt, ctx, options);\n\n      // Body\n      this.drawBody(pt, ctx, options);\n\n      // Footer\n      this.drawFooter(pt, ctx, options);\n\n      restoreTextDirection(ctx, options.textDirection);\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * Get active elements in the tooltip\n\t * @returns {Array} Array of elements that are active in the tooltip\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active elements in the tooltip\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\n\t * @param {object} eventPosition Synthetic event position used in positioning\n\t */\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {boolean} true if the tooltip changed\n\t */\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    // When there are multiple items shown, but the tooltip position is nearest mode\n    // an update may need to be made because our position may have changed even though\n    // the items are the same as before.\n    const positionChanged = this._positionChanged(active, e);\n\n    // Remember Last Actives\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    // Only handle target event on tooltip change\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  /**\n\t * Helper for determining the active elements for event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {InteractionItem[]} lastActive - Previously active elements\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {InteractionItem[]} - Active elements\n\t * @private\n\t */\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      // But make sure that active elements are still valid.\n      return lastActive.filter(i =>\n        this.chart.data.datasets[i.datasetIndex] &&\n        this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined\n      );\n    }\n\n    // Find Active Elements for tooltips\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  /**\n\t * Determine if the active elements + event combination changes the\n\t * tooltip position\n\t * @param {array} active - Active elements\n\t * @param {ChartEvent} e - Event that triggered the position change\n\t * @returns {boolean} True if the position has changed\n\t */\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n\nexport default {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      // If the event is replayed from `update`, we should evaluate with the final positions.\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        // notify chart about the change, so it will render\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n\n  // Resolve additionally from `interaction` options and defaults.\n  additionalOptionScopes: ['interaction']\n};\n","import Scale from '../core/core.scale.js';\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers/index.js';\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\n\nexport default class CategoryScale extends Scale {\n\n  static id = 'category';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n\n    // If we are viewing some subset of labels, slice the original array\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      // For backward compatibility, vertical category scale reverse is inverted.\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  // Used to get data value locations. Value can either be an index or a numerical value\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  // Must override base implementation because it calls getPixelForValue\n  // and category scale can have duplicate values\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n","import {isNullOrUndef} from '../helpers/helpers.core.js';\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\n\n/**\n * Generate a set of linear ticks for an axis\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\n *    Note that the generationOptions.maxCount setting is respected in this scenario\n *\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\n *    spacing = (max - min) / count\n *    Ticks are generated as [min, min + spacing, ..., max]\n *\n * 3. If generationOptions.count is defined\n *    spacing = (niceMax - niceMin) / count\n *\n * 4. Compute optimal spacing of ticks using niceNum algorithm\n *\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, dataRange) {\n  const ticks = [];\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n  // for details.\n\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  // Beyond MIN_SPACING floating point numbers being to lose precision\n  // such that we can't do the math necessary to generate ticks\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    // If the user specified a precision, round to that number of decimal places\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\n    // spacing = step;\n    // numSpaces = (max - min) / spacing;\n    // Note that we round here to handle the case where almostWhole translated an FP error\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\n    // Sometimes these are no-ops, but it makes the code a lot clearer\n    // and when a user defined range is specified, we want the correct ticks\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    // Case 4\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    // If very close to our rounded value, use it.\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\n  // until this point\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n\n      if (niceMin < min) {\n        j++; // Skip niceMin\n      }\n      // If the next nice tick is close to min, skip it\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({value: tickValue});\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    // If the previous tick is too close to max, replace it with max, else add max\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nexport default class LinearScaleBase extends Scale {\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    /** @type {number} */\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    // eslint-disable-next-line prefer-const\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  /**\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    // Figure out what the max number of ticks we can support it is based on the size of\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n    // the graph. Make sure we always have at least 2 ticks\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n","import {isFinite} from '../helpers/helpers.core.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {toRadians} from '../helpers/index.js';\n\nexport default class LinearScale extends LinearScaleBase {\n\n  static id = 'linear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? min : 0;\n    this.max = isFinite(max) ? max : 1;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n \t */\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  // Utils\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n","import {finiteOrDefault, isFinite} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\n\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\n\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, {min, max}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({value, major: isMajor(value), significand});\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\n\n  return ticks;\n}\n\nexport default class LogarithmicScale extends Scale {\n\n  static id = 'logarithmic';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? Math.max(0, min) : null;\n    this.max = isFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (min === max) {\n      if (min <= 0) { // includes null\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const start = this.min;\n\n    super.configure();\n\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n","import defaults from '../core/core.defaults.js';\nimport {_longestText, addRoundedRectPath, renderText, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core.js';\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n  // Right, this is really confusing and there is a lot of maths going on here\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n  //\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n  //\n  // Solution:\n  //\n  // We assume the radius of the polygon is half the size of the canvas at first\n  // at each index we check if the text overlaps.\n  //\n  // Where it does, we store that angle and that index.\n  //\n  // After finding the largest index and angle we calculate how much we need to remove\n  // from the shape radius to move the point inwards by that x.\n  //\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\n  // along with labels.\n  //\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\n  //\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n  // and position it in the most space efficient manner\n  //\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n\n  // Now that text size is determined, compute the full positions\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {extra, additionalAngle, padding, size} = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    // if to draw or overlapped\n    visible: true,\n\n    // Text position\n    x: pointLabelPosition.x,\n    y,\n\n    // Text rendering data\n    textAlign,\n\n    // Bounding box\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\n\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  const {left, top, right, bottom} = item;\n  const apexesInArea = _isPointInArea({x: left, y: top}, area) || _isPointInArea({x: left, y: bottom}, area) ||\n    _isPointInArea({x: right, y: top}, area) || _isPointInArea({x: right, y: bottom}, area);\n  return !apexesInArea;\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {centerPointLabels, display} = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\n\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {left, top, right, bottom} = item;\n  const {backdropColor} = opts;\n\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius,\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      // overlapping\n      continue;\n    }\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign} = item;\n\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    // Draw circular arcs between the points\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    // Draw straight lines connecting each index\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n\n  const {color, lineWidth} = gridLineOpts;\n\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash || []);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nexport default class RadialLinearScale extends LinearScaleBase {\n\n  static id = 'radialLinear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    display: true,\n\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n\n    grid: {\n      circular: false\n    },\n\n    startAngle: 0,\n\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n\n      callback: Ticks.formatters.numeric\n    },\n\n    pointLabels: {\n      backdropColor: undefined,\n\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPadding: 2,\n\n      // Boolean - if true, show point labels\n      display: true,\n\n      // Number - Point label font size in pixels\n      font: {\n        size: 10\n      },\n\n      // Function - Used to convert point labels\n      callback(label) {\n        return label;\n      },\n\n      // Number - Additionl padding between scale and pointLabel\n      padding: 5,\n\n      // Boolean - if true, center point labels to slices in polar chart\n      centerPointLabels: false\n    }\n  };\n\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.xCenter = undefined;\n    /** @type {number} */\n    this.yCenter = undefined;\n    /** @type {number} */\n    this.drawingArea = undefined;\n    /** @type {string[]} */\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n\n    // Point labels\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    // Take into account half font size + the yPadding of the top value\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid, border} = opts;\n    const labelCount = this._pointLabels.length;\n\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0 || (index === 0 && this.min < 0)) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n\n        offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {}\n\n  /**\n\t * @protected\n\t */\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    this.ticks.forEach((tick, index) => {\n      if ((index === 0 && this.min >= 0) && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n        strokeColor: optsAtIndex.textStrokeColor,\n        strokeWidth: optsAtIndex.textStrokeWidth,\n      });\n    });\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {}\n}\n","import adapters from '../core/core.adapters.js';\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection.js';\n\n/**\n * @typedef { import('../core/core.adapters.js').TimeUnit } Unit\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\n * @typedef { import('../core/core.adapters.js').DateAdapter } DateAdapter\n */\n\n/**\n * @type {Object<Unit, Interval>}\n */\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\n\n/**\n * @type {Unit[]}\n */\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\n\n/**\n * @param {number} a\n * @param {number} b\n */\nfunction sorter(a, b) {\n  return a - b;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {*} input\n * @return {number}\n */\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  // Only parse if it's not a timestamp already\n  if (!isFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, parser)\n      : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @param {number} capacity\n * @return {object}\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n * @param {TimeScale} scale\n * @param {number} numTicks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @return {Unit}\n */\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\n/**\n * @param {Unit} unit\n * @return {object}\n */\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\n/**\n * @param {object} ticks\n * @param {number} time\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\n */\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\n/**\n * @param {TimeScale} scale\n * @param {object[]} ticks\n * @param {object} map\n * @param {Unit} majorUnit\n * @return {object[]}\n */\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {number[]} values\n * @param {Unit|undefined} [majorUnit]\n * @return {object[]}\n */\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  /** @type {Object<number,object>} */\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  // We set the major ticks separately from the above loop because calling startOf for every tick\n  // is expensive when there is a large number of ticks\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nexport default class TimeScale extends Scale {\n\n  static id = 'time';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n\n    adapters: {},\n    time: {\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\n      unit: false, // false == automatic or override with week, month, year, etc.\n      round: false, // none, or override with week, month, year, etc.\n      isoWeekday: false, // override week start day\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n\n      callback: false,\n\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {{data: number[], labels: number[], all: number[]}} */\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n\n    /** @type {Unit} */\n    this._unit = 'day';\n    /** @type {Unit=} */\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    /** @type {DateAdapter} */\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n\n    adapter.init(opts);\n\n    // Backward compatibility: before introducing adapter, `displayFormats` was\n    // supposed to contain *all* unit/string pairs but this can't be resolved\n    // when loading the scale (adapters are loaded afterward), so let's populate\n    // missing formats on update\n    mergeIf(time.displayFormats, adapter.formats());\n\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n\n    super.init(scaleOpts);\n\n    this._normalized = opts.normalized;\n  }\n\n  /**\n\t * @param {*} raw\n\t * @param {number?} [index]\n\t * @return {number}\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n\n    /**\n\t\t * @param {object} bounds\n\t\t */\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\n    if (!minDefined || !maxDefined) {\n      // Labels are always considered, when user did not force bounds\n      _applyBounds(this._getLabelBounds());\n\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\n      // data bounds are ignored (and don't need to be determined)\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  /**\n\t * @private\n\t */\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n\n  /**\n\t * @return {object[]}\n\t */\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    // PRIVATE\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    // Offsets for bar charts need to be handled with the auto skipped\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  /**\n\t * Returns the start and end offsets from edges in the form of {start, end}\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\n\t * They add extra margins on the both sides by scaling down the original scale.\n\t * Offsets are added when the `offset` option is true.\n\t * @param {number[]} timestamps\n\t * @protected\n\t */\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n\n  /**\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n\t * `minor` unit using the given scale time `options`.\n\t * Important: this method can return ticks outside the min and max range, it's the\n\t * responsibility of the calling code to clamp values if needed.\n\t * @protected\n\t */\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    // @ts-ignore\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    // For 'week' unit, handle the first day of week option\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    // Align first ticks on unit\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    // Prevent browser from freezing in case user options request millions of milliseconds\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    // @ts-ignore\n    return Object.keys(ticks).sort(sorter).map(x => +x);\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  /**\n\t * @param {number} value\n\t * @param {string|undefined} format\n\t * @return {string}\n\t */\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n\n  /**\n\t * Function to format an individual tick mark\n\t * @param {number} time\n\t * @param {number} index\n\t * @param {object[]} ticks\n\t * @param {string|undefined} [format]\n\t * @return {string}\n\t * @private\n\t */\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return call(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  /**\n\t * @param {object[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  /**\n\t * @param {string} label\n\t * @return {{w:number, h:number}}\n\t * @private\n\t */\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n\n  /**\n\t * @param {number} exampleTime\n\t * @return {number}\n\t * @private\n\t */\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n\n    // pick the longest format (milliseconds) for guesstimation\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    // subtract 1 - if offset then there's one less label than tick\n    // if not offset then one half label padding is added to each end leaving room for one less label\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return (this._cache.data = this.normalize(timestamps));\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n\n  /**\n\t * @param {number[]} values\n\t * @protected\n\t */\n  normalize(values) {\n    // It seems to be somewhat faster to do sorting first\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n","import TimeScale from './scale.time.js';\nimport {_lookupByKey} from '../helpers/helpers.collection.js';\n\n/**\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\n * at edges are used for the interpolation.\n * @param {object} table\n * @param {number} val\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\n * @return {object}\n */\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n\n  static id = 'timeseries';\n\n  /**\n   * @type {any}\n   */\n  static defaults = TimeScale.defaults;\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {object[]} */\n    this._table = [];\n    /** @type {number} */\n    this._minPos = undefined;\n    /** @type {number} */\n    this._tableRange = undefined;\n  }\n\n  /**\n\t * @protected\n\t */\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  /**\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n\t * @param {number[]} timestamps\n\t * @return {object[]}\n\t * @protected\n\t */\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      // only add points that breaks the scale linearity\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n\n  /**\n    * Generates all timestamps defined in the data.\n    * Important: this method can return ticks outside the min and max range, it's the\n    * responsibility of the calling code to clamp values if needed.\n    * @protected\n    */\n  _generate() {\n    const min = this.min;\n    const max = this.max;\n    let timestamps = super.getDataTimestamps();\n    if (!timestamps.includes(min) || !timestamps.length) {\n      timestamps.splice(0, 0, min);\n    }\n    if (!timestamps.includes(max) || timestamps.length === 1) {\n      timestamps.push(max);\n    }\n    return timestamps.sort((a, b) => a - b);\n  }\n\n  /**\n\t * Returns all timestamps\n\t * @return {number[]}\n\t * @private\n\t */\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      // If combining labels and data (data might not contain all labels),\n      // we need to recheck uniqueness and sort\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n\n    return timestamps;\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n\nexport default TimeSeriesScale;\n","export * from './controllers/index.js';\nexport * from './core/index.js';\nexport * from './elements/index.js';\nexport * from './platform/index.js';\nexport * from './plugins/index.js';\nexport * from './scales/index.js';\n\nimport * as controllers from './controllers/index.js';\nimport * as elements from './elements/index.js';\nimport * as plugins from './plugins/index.js';\nimport * as scales from './scales/index.js';\n\nexport {\n  controllers,\n  elements,\n  plugins,\n  scales,\n};\n\nexport const registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}