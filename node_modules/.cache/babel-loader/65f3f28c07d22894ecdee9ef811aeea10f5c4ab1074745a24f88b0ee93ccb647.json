{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport AdminHeader from './AdminHeader.vue';\nimport AdminSidebar from './AdminSidebar.vue';\nimport unifiedAuthService from '@/services/unifiedAuthService';\nimport adminAuthService from '@/services/adminAuthService';\nexport default {\n  name: 'AdminSettings',\n  components: {\n    AdminHeader,\n    AdminSidebar\n  },\n  data() {\n    return {\n      // UI State\n      sidebarCollapsed: false,\n      showUserDropdown: false,\n      isMobile: false,\n      adminData: null,\n      // Component Data\n      activeTab: 'profile',\n      loading: false,\n      profileLoading: false,\n      passwordLoading: false,\n      successMessage: '',\n      errorMessage: '',\n      // Profile form data\n      profileForm: {\n        first_name: '',\n        middle_name: '',\n        last_name: '',\n        suffix: '',\n        employee_id: '',\n        phone_number: '',\n        email: '',\n        position: '',\n        department: '',\n        hire_date: ''\n      },\n      // Password change form data\n      passwordForm: {\n        currentPassword: '',\n        newPassword: '',\n        confirmPassword: ''\n      },\n      // Show password toggles\n      showCurrentPassword: false,\n      showNewPassword: false,\n      showConfirmPassword: false,\n      systemInfo: {\n        version: '1.0.0',\n        database: 'MySQL 8.0',\n        server: 'Apache 2.4',\n        uptime: '15 days, 3 hours'\n      },\n      recentBackups: [{\n        id: 1,\n        created_at: '2024-01-31T10:30:00Z',\n        type: 'Full',\n        size: '45.2 MB',\n        status: 'completed'\n      }, {\n        id: 2,\n        created_at: '2024-01-30T10:30:00Z',\n        type: 'Database',\n        size: '12.8 MB',\n        status: 'completed'\n      }, {\n        id: 3,\n        created_at: '2024-01-29T10:30:00Z',\n        type: 'Full',\n        size: '44.1 MB',\n        status: 'completed'\n      }]\n    };\n  },\n  async mounted() {\n    // Check authentication\n    if (!unifiedAuthService.isLoggedIn() || unifiedAuthService.getUserType() !== 'admin') {\n      this.$router.push('/login');\n      return;\n    }\n\n    // Initialize UI state\n    this.initializeUI();\n\n    // Load component data\n    await this.loadAdminProfile();\n    await this.loadProfileData();\n  },\n  beforeUnmount() {\n    if (this.handleResize) {\n      window.removeEventListener('resize', this.handleResize);\n    }\n  },\n  computed: {\n    activeMenu() {\n      const path = this.$route.path;\n      if (path.includes('/admin/users')) return 'users';\n      if (path.includes('/admin/requests')) return 'requests';\n      if (path.includes('/admin/reports')) return 'reports';\n      if (path.includes('/admin/settings')) return 'settings';\n      if (path.includes('/admin/activity-logs')) return 'activity';\n      if (path.includes('/admin/profile')) return 'profile';\n      return 'dashboard';\n    }\n  },\n  methods: {\n    // Initialize UI state\n    initializeUI() {\n      this.isMobile = window.innerWidth <= 768;\n      if (!this.isMobile) {\n        const saved = localStorage.getItem('adminSidebarCollapsed');\n        this.sidebarCollapsed = saved ? JSON.parse(saved) : false;\n      } else {\n        this.sidebarCollapsed = true;\n      }\n      this.handleResize = () => {\n        const wasMobile = this.isMobile;\n        this.isMobile = window.innerWidth <= 768;\n        if (this.isMobile && !wasMobile) {\n          this.sidebarCollapsed = true;\n        } else if (!this.isMobile && wasMobile) {\n          const saved = localStorage.getItem('adminSidebarCollapsed');\n          this.sidebarCollapsed = saved ? JSON.parse(saved) : false;\n        }\n      };\n      window.addEventListener('resize', this.handleResize);\n    },\n    handleSidebarToggle() {\n      this.sidebarCollapsed = !this.sidebarCollapsed;\n      localStorage.setItem('adminSidebarCollapsed', JSON.stringify(this.sidebarCollapsed));\n    },\n    handleMenuChange(menu) {\n      const routes = {\n        'dashboard': '/admin/dashboard',\n        'users': '/admin/users',\n        'requests': '/admin/requests',\n        'reports': '/admin/reports',\n        'settings': '/admin/settings',\n        'activity': '/admin/activity-logs',\n        'profile': '/admin/profile'\n      };\n      if (this.isMobile) {\n        this.sidebarCollapsed = true;\n      }\n      if (routes[menu]) {\n        this.$router.push(routes[menu]);\n      }\n    },\n    handleUserDropdownToggle() {\n      this.showUserDropdown = !this.showUserDropdown;\n    },\n    handleMenuAction(action) {\n      if (action === 'profile') {\n        this.$router.push('/admin/profile');\n      } else if (action === 'settings') {\n        this.$router.push('/admin/settings');\n      }\n      this.showUserDropdown = false;\n    },\n    closeMobileSidebar() {\n      if (this.isMobile) {\n        this.sidebarCollapsed = true;\n      }\n    },\n    handleLogout() {\n      unifiedAuthService.logout();\n      this.$router.push('/login');\n    },\n    async loadAdminProfile() {\n      try {\n        const user = unifiedAuthService.getCurrentUser();\n        if (user && user.profile) {\n          this.adminData = user.profile;\n        } else {\n          this.adminData = {\n            first_name: user?.username || 'Admin',\n            role: user?.role || 'admin'\n          };\n        }\n      } catch (error) {\n        console.error('Failed to load admin profile:', error);\n        const user = unifiedAuthService.getCurrentUser();\n        this.adminData = {\n          first_name: user?.username || 'Admin',\n          role: user?.role || 'admin'\n        };\n      }\n    },\n    // Load profile data from backend\n    async loadProfileData() {\n      try {\n        this.loading = true;\n        const response = await adminAuthService.getProfile();\n        if (response.success) {\n          const data = response.data;\n          this.profileForm = {\n            first_name: data.first_name || '',\n            middle_name: data.middle_name || '',\n            last_name: data.last_name || '',\n            suffix: data.suffix || '',\n            employee_id: data.employee_id || '',\n            phone_number: data.phone_number || '',\n            email: data.email || '',\n            position: data.position || '',\n            department: data.department || '',\n            hire_date: data.hire_date ? data.hire_date.split('T')[0] : ''\n          };\n        } else {\n          this.errorMessage = 'Failed to load profile data';\n        }\n      } catch (error) {\n        console.error('Failed to load profile data:', error);\n        this.errorMessage = 'Failed to load profile data';\n      } finally {\n        this.loading = false;\n      }\n    },\n    // Save profile data\n    async saveProfile() {\n      try {\n        this.profileLoading = true;\n        this.clearMessages();\n        const response = await adminAuthService.updateProfile(this.profileForm);\n        if (response.success) {\n          this.successMessage = 'Profile updated successfully!';\n          // Update the adminData for the header\n          await this.loadAdminProfile();\n        } else {\n          this.errorMessage = response.message || 'Failed to update profile';\n        }\n      } catch (error) {\n        console.error('Failed to save profile:', error);\n        this.errorMessage = 'Failed to update profile. Please try again.';\n      } finally {\n        this.profileLoading = false;\n      }\n    },\n    // Change password\n    async changePassword() {\n      try {\n        this.passwordLoading = true;\n        this.clearMessages();\n\n        // Validate passwords match\n        if (this.passwordForm.newPassword !== this.passwordForm.confirmPassword) {\n          this.errorMessage = 'New passwords do not match';\n          return;\n        }\n\n        // Validate password strength\n        if (this.passwordForm.newPassword.length < 8) {\n          this.errorMessage = 'Password must be at least 8 characters long';\n          return;\n        }\n        const response = await adminAuthService.changePassword({\n          currentPassword: this.passwordForm.currentPassword,\n          newPassword: this.passwordForm.newPassword,\n          confirmPassword: this.passwordForm.confirmPassword\n        });\n        if (response.success) {\n          this.successMessage = 'Password changed successfully!';\n          // Clear the form\n          this.passwordForm = {\n            currentPassword: '',\n            newPassword: '',\n            confirmPassword: ''\n          };\n          // Reset show password toggles\n          this.showCurrentPassword = false;\n          this.showNewPassword = false;\n          this.showConfirmPassword = false;\n        } else {\n          this.errorMessage = response.message || 'Failed to change password';\n        }\n      } catch (error) {\n        console.error('Failed to change password:', error);\n        this.errorMessage = 'Failed to change password. Please try again.';\n      } finally {\n        this.passwordLoading = false;\n      }\n    },\n    // Clear messages\n    clearMessages() {\n      this.successMessage = '';\n      this.errorMessage = '';\n    },\n    // System actions\n    async clearCache() {\n      if (confirm('Are you sure you want to clear the system cache?')) {\n        try {\n          console.log('Clearing cache...');\n          await new Promise(resolve => setTimeout(resolve, 2000));\n          alert('System cache cleared successfully!');\n        } catch (error) {\n          console.error('Failed to clear cache:', error);\n          alert('Failed to clear cache. Please try again.');\n        }\n      }\n    },\n    async optimizeDatabase() {\n      if (confirm('Are you sure you want to optimize the database? This may take a few minutes.')) {\n        try {\n          console.log('Optimizing database...');\n          await new Promise(resolve => setTimeout(resolve, 3000));\n          alert('Database optimized successfully!');\n        } catch (error) {\n          console.error('Failed to optimize database:', error);\n          alert('Failed to optimize database. Please try again.');\n        }\n      }\n    },\n    async checkUpdates() {\n      try {\n        console.log('Checking for updates...');\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        alert('System is up to date!');\n      } catch (error) {\n        console.error('Failed to check updates:', error);\n        alert('Failed to check for updates. Please try again.');\n      }\n    },\n    async restartSystem() {\n      if (confirm('Are you sure you want to restart the system? This will temporarily make the system unavailable.')) {\n        try {\n          console.log('Restarting system...');\n          alert('System restart initiated. Please wait a few minutes before accessing the system again.');\n        } catch (error) {\n          console.error('Failed to restart system:', error);\n          alert('Failed to restart system. Please try again.');\n        }\n      }\n    },\n    // Backup and restore methods\n    async createBackup() {\n      this.backupInProgress = true;\n      try {\n        console.log(`Creating ${this.backupType} backup...`);\n        await new Promise(resolve => setTimeout(resolve, 5000));\n\n        // Add new backup to the list\n        const newBackup = {\n          id: Date.now(),\n          created_at: new Date().toISOString(),\n          type: this.backupType.charAt(0).toUpperCase() + this.backupType.slice(1),\n          size: '42.5 MB',\n          status: 'completed'\n        };\n        this.recentBackups.unshift(newBackup);\n        alert('Backup created successfully!');\n      } catch (error) {\n        console.error('Failed to create backup:', error);\n        alert('Failed to create backup. Please try again.');\n      } finally {\n        this.backupInProgress = false;\n      }\n    },\n    selectBackupFile(event) {\n      this.selectedBackupFile = event.target.files[0];\n    },\n    async restoreBackup() {\n      if (!this.selectedBackupFile) {\n        alert('Please select a backup file first.');\n        return;\n      }\n      if (confirm('Are you sure you want to restore from this backup? This will overwrite current data.')) {\n        this.restoreInProgress = true;\n        try {\n          console.log('Restoring backup:', this.selectedBackupFile.name);\n          await new Promise(resolve => setTimeout(resolve, 8000));\n          alert('Backup restored successfully!');\n          this.selectedBackupFile = null;\n        } catch (error) {\n          console.error('Failed to restore backup:', error);\n          alert('Failed to restore backup. Please try again.');\n        } finally {\n          this.restoreInProgress = false;\n        }\n      }\n    },\n    downloadBackup(backup) {\n      console.log('Downloading backup:', backup);\n      alert(`Download functionality for backup \"${backup.type}\" will be implemented soon.`);\n    },\n    deleteBackup(backup) {\n      if (confirm(`Are you sure you want to delete the backup from ${this.formatDate(backup.created_at)}?`)) {\n        const index = this.recentBackups.findIndex(b => b.id === backup.id);\n        if (index > -1) {\n          this.recentBackups.splice(index, 1);\n          alert('Backup deleted successfully.');\n        }\n      }\n    },\n    formatDate(dateString) {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    // Navigation handlers are now provided by the mixin\n    goBack() {\n      this.$router.push('/admin/dashboard');\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}