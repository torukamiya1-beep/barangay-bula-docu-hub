{"ast":null,"code":"import api from './api';\nclass ResidencyService {\n  constructor() {\n    this.baseURL = '/residency';\n  }\n\n  /**\n   * Get residency documents for a specific account\n   */\n  async getAccountDocuments(accountId) {\n    try {\n      const response = await api.get(`${this.baseURL}/documents/${accountId}`);\n      return this.handleResponse(response);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  /**\n   * Get pending residency verifications for admin review\n   */\n  async getPendingVerifications(params = {}) {\n    try {\n      const response = await api.get(`${this.baseURL}/pending`, {\n        params\n      });\n      return this.handleResponse(response);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  /**\n   * Approve residency verification\n   */\n  async approveVerification(accountId, documentIds = []) {\n    try {\n      const response = await api.post(`${this.baseURL}/approve`, {\n        account_id: accountId,\n        document_ids: documentIds\n      });\n      return this.handleResponse(response);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  /**\n   * Reject residency verification\n   */\n  async rejectVerification(accountId, rejectionReason, documentIds = []) {\n    try {\n      const response = await api.post(`${this.baseURL}/reject`, {\n        account_id: accountId,\n        rejection_reason: rejectionReason,\n        document_ids: documentIds\n      });\n      return this.handleResponse(response);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  /**\n   * Get document file URL for viewing\n   */\n  getDocumentFileUrl(documentId) {\n    // Use the API base URL to construct the full URL\n    const API_BASE_URL = process.env.VUE_APP_API_URL || 'http://localhost:7000/api';\n    return `${API_BASE_URL}/residency/documents/${documentId}/file`;\n  }\n\n  /**\n   * Delete a residency document\n   */\n  async deleteDocument(documentId) {\n    try {\n      const response = await api.delete(`${this.baseURL}/documents/${documentId}`);\n      return this.handleResponse(response);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  /**\n   * Handle successful API response\n   */\n  handleResponse(response) {\n    if (response.data.success) {\n      return {\n        success: true,\n        data: response.data.data,\n        message: response.data.message\n      };\n    } else {\n      throw new Error(response.data.message || 'Operation failed');\n    }\n  }\n\n  /**\n   * Handle API errors\n   */\n  handleError(error) {\n    console.error('Residency Service Error:', error);\n    let message = 'An unexpected error occurred';\n    let errors = [];\n    let status = 0;\n    if (error.response) {\n      // Server responded with error status\n      status = error.response.status;\n      const errorData = error.response.data;\n      if (errorData) {\n        message = errorData.message || errorData.error || message;\n        errors = errorData.errors || errorData.details || [];\n      }\n    } else if (error.request) {\n      // Request was made but no response received\n      message = 'Network error - please check your connection';\n    } else {\n      // Something else happened\n      message = error.message || message;\n    }\n    return {\n      success: false,\n      message,\n      errors,\n      status\n    };\n  }\n\n  /**\n   * Format document type for display\n   */\n  formatDocumentType(type) {\n    const typeLabels = {\n      'utility_bill': 'Utility Bill',\n      'barangay_certificate': 'Barangay Certificate',\n      'valid_id': 'Valid ID',\n      'lease_contract': 'Lease Contract',\n      'other': 'Other Document'\n    };\n    return typeLabels[type] || type;\n  }\n\n  /**\n   * Format verification status for display\n   */\n  formatVerificationStatus(status) {\n    const statusLabels = {\n      'pending': 'Pending Review',\n      'approved': 'Approved',\n      'rejected': 'Rejected'\n    };\n    return statusLabels[status] || status;\n  }\n\n  /**\n   * Get status badge class for verification status\n   */\n  getStatusBadgeClass(status) {\n    const statusClasses = {\n      'pending': 'bg-warning',\n      'approved': 'bg-success',\n      'rejected': 'bg-danger'\n    };\n    return statusClasses[status] || 'bg-secondary';\n  }\n}\nexport default new ResidencyService();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}