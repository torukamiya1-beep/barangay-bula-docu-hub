{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport adminAuthService from '@/services/adminAuthService';\nimport AdminHeader from '../AdminHeader.vue';\nimport AdminSidebar from '../AdminSidebar.vue';\nexport default {\n  name: 'AdminDashboard',\n  components: {\n    AdminHeader,\n    AdminSidebar\n  },\n  data() {\n    return {\n      loading: true,\n      adminData: null,\n      stats: {\n        totalUsers: 0,\n        activeRequests: 0,\n        completedToday: 0,\n        pendingApproval: 0\n      },\n      recentActivity: [],\n      errorMessage: ''\n    };\n  },\n  async mounted() {\n    // Add dashboard layout class to body to prevent scrolling\n    document.body.classList.add('dashboard-layout');\n\n    // Check if admin is logged in\n    if (!adminAuthService.isLoggedIn()) {\n      this.$router.push('/admin/login');\n      return;\n    }\n    await this.loadDashboardData();\n  },\n  methods: {\n    // Load dashboard data\n    async loadDashboardData() {\n      this.loading = true;\n      try {\n        // Load admin profile\n        await this.loadAdminProfile();\n\n        // Load dashboard statistics\n        await this.loadDashboardStats();\n\n        // Load recent activity\n        await this.loadRecentActivity();\n      } catch (error) {\n        console.error('Failed to load dashboard data:', error);\n        const errorData = adminAuthService.parseError(error);\n        this.errorMessage = errorData.message || 'Failed to load dashboard data';\n\n        // If unauthorized, redirect to login\n        if (errorData.status === 401) {\n          adminAuthService.logout();\n          this.$router.push('/admin/login');\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    // Load admin profile\n    async loadAdminProfile() {\n      try {\n        const response = await adminAuthService.getProfile();\n        if (response.success) {\n          this.adminData = response.data;\n        }\n      } catch (error) {\n        console.error('Failed to load admin profile:', error);\n        // Use stored admin data as fallback\n        this.adminData = adminAuthService.getAdminData();\n      }\n    },\n    // Load dashboard statistics\n    async loadDashboardStats() {\n      try {\n        const response = await adminAuthService.getDashboardStats();\n        if (response.success) {\n          this.stats = {\n            totalUsers: response.data.totalUsers || 0,\n            activeRequests: response.data.activeRequests || 0,\n            completedToday: response.data.completedToday || 0,\n            pendingApproval: response.data.pendingApproval || 0\n          };\n        }\n      } catch (error) {\n        console.error('Failed to load dashboard stats:', error);\n        // Keep default stats values\n      }\n    },\n    // Load recent activity\n    async loadRecentActivity() {\n      try {\n        const response = await adminAuthService.getRecentActivity();\n        if (response.success) {\n          this.recentActivity = response.data || [];\n        }\n      } catch (error) {\n        console.error('Failed to load recent activity:', error);\n        this.recentActivity = [];\n      }\n    },\n    // Navigate to specific route\n    navigateTo(route) {\n      this.$router.push(route);\n    },\n    // Format date for display\n    formatDate(dateString) {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      const now = new Date();\n      const diffInMinutes = Math.floor((now - date) / (1000 * 60));\n      if (diffInMinutes < 1) {\n        return 'Just now';\n      } else if (diffInMinutes < 60) {\n        return `${diffInMinutes} minute${diffInMinutes > 1 ? 's' : ''} ago`;\n      } else if (diffInMinutes < 1440) {\n        const hours = Math.floor(diffInMinutes / 60);\n        return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n      } else {\n        const days = Math.floor(diffInMinutes / 1440);\n        return `${days} day${days > 1 ? 's' : ''} ago`;\n      }\n    },\n    // Format time for display\n    formatTime(dateString) {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      return date.toLocaleTimeString('en-US', {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: true\n      });\n    },\n    // Refresh dashboard data\n    async refreshDashboard() {\n      await this.loadDashboardData();\n    },\n    // Handle logout\n    logout() {\n      adminAuthService.logout();\n      this.$router.push('/admin/login');\n    }\n  },\n  // Auto-refresh dashboard data every 5 minutes\n  created() {\n    this.refreshInterval = setInterval(() => {\n      this.loadDashboardStats();\n      this.loadRecentActivity();\n    }, 5 * 60 * 1000); // 5 minutes\n  },\n  // Clean up interval on component destroy\n  beforeUnmount() {\n    // Remove dashboard layout class from body\n    document.body.classList.remove('dashboard-layout');\n    if (this.refreshInterval) {\n      clearInterval(this.refreshInterval);\n    }\n  }\n};","map":{"version":3,"names":["adminAuthService","AdminHeader","AdminSidebar","name","components","data","loading","adminData","stats","totalUsers","activeRequests","completedToday","pendingApproval","recentActivity","errorMessage","mounted","document","body","classList","add","isLoggedIn","$router","push","loadDashboardData","methods","loadAdminProfile","loadDashboardStats","loadRecentActivity","error","console","errorData","parseError","message","status","logout","response","getProfile","success","getAdminData","getDashboardStats","getRecentActivity","navigateTo","route","formatDate","dateString","date","Date","now","diffInMinutes","Math","floor","hours","days","formatTime","toLocaleTimeString","hour","minute","hour12","refreshDashboard","created","refreshInterval","setInterval","beforeUnmount","remove","clearInterval"],"sources":["D:/brgy_docu_hub/BOSFDR/src/components/admin/js/adminDashboard.js"],"sourcesContent":["import adminAuthService from '@/services/adminAuthService';\nimport AdminHeader from '../AdminHeader.vue';\nimport AdminSidebar from '../AdminSidebar.vue';\n\nexport default {\n  name: 'AdminDashboard',\n  components: {\n    AdminHeader,\n    AdminSidebar\n  },\n  data() {\n    return {\n      loading: true,\n      adminData: null,\n      stats: {\n        totalUsers: 0,\n        activeRequests: 0,\n        completedToday: 0,\n        pendingApproval: 0\n      },\n      recentActivity: [],\n      errorMessage: ''\n    };\n  },\n  \n  async mounted() {\n    // Add dashboard layout class to body to prevent scrolling\n    document.body.classList.add('dashboard-layout');\n\n    // Check if admin is logged in\n    if (!adminAuthService.isLoggedIn()) {\n      this.$router.push('/admin/login');\n      return;\n    }\n    \n    await this.loadDashboardData();\n  },\n  \n  methods: {\n    // Load dashboard data\n    async loadDashboardData() {\n      this.loading = true;\n      \n      try {\n        // Load admin profile\n        await this.loadAdminProfile();\n        \n        // Load dashboard statistics\n        await this.loadDashboardStats();\n        \n        // Load recent activity\n        await this.loadRecentActivity();\n        \n      } catch (error) {\n        console.error('Failed to load dashboard data:', error);\n        const errorData = adminAuthService.parseError(error);\n        this.errorMessage = errorData.message || 'Failed to load dashboard data';\n        \n        // If unauthorized, redirect to login\n        if (errorData.status === 401) {\n          adminAuthService.logout();\n          this.$router.push('/admin/login');\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    // Load admin profile\n    async loadAdminProfile() {\n      try {\n        const response = await adminAuthService.getProfile();\n        if (response.success) {\n          this.adminData = response.data;\n        }\n      } catch (error) {\n        console.error('Failed to load admin profile:', error);\n        // Use stored admin data as fallback\n        this.adminData = adminAuthService.getAdminData();\n      }\n    },\n    \n    // Load dashboard statistics\n    async loadDashboardStats() {\n      try {\n        const response = await adminAuthService.getDashboardStats();\n        if (response.success) {\n          this.stats = {\n            totalUsers: response.data.totalUsers || 0,\n            activeRequests: response.data.activeRequests || 0,\n            completedToday: response.data.completedToday || 0,\n            pendingApproval: response.data.pendingApproval || 0\n          };\n        }\n      } catch (error) {\n        console.error('Failed to load dashboard stats:', error);\n        // Keep default stats values\n      }\n    },\n    \n    // Load recent activity\n    async loadRecentActivity() {\n      try {\n        const response = await adminAuthService.getRecentActivity();\n        if (response.success) {\n          this.recentActivity = response.data || [];\n        }\n      } catch (error) {\n        console.error('Failed to load recent activity:', error);\n        this.recentActivity = [];\n      }\n    },\n    \n    // Navigate to specific route\n    navigateTo(route) {\n      this.$router.push(route);\n    },\n    \n    // Format date for display\n    formatDate(dateString) {\n      if (!dateString) return '';\n      \n      const date = new Date(dateString);\n      const now = new Date();\n      const diffInMinutes = Math.floor((now - date) / (1000 * 60));\n      \n      if (diffInMinutes < 1) {\n        return 'Just now';\n      } else if (diffInMinutes < 60) {\n        return `${diffInMinutes} minute${diffInMinutes > 1 ? 's' : ''} ago`;\n      } else if (diffInMinutes < 1440) {\n        const hours = Math.floor(diffInMinutes / 60);\n        return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n      } else {\n        const days = Math.floor(diffInMinutes / 1440);\n        return `${days} day${days > 1 ? 's' : ''} ago`;\n      }\n    },\n    \n    // Format time for display\n    formatTime(dateString) {\n      if (!dateString) return '';\n      \n      const date = new Date(dateString);\n      return date.toLocaleTimeString('en-US', {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: true\n      });\n    },\n    \n    // Refresh dashboard data\n    async refreshDashboard() {\n      await this.loadDashboardData();\n    },\n    \n    // Handle logout\n    logout() {\n      adminAuthService.logout();\n      this.$router.push('/admin/login');\n    }\n  },\n  \n  // Auto-refresh dashboard data every 5 minutes\n  created() {\n    this.refreshInterval = setInterval(() => {\n      this.loadDashboardStats();\n      this.loadRecentActivity();\n    }, 5 * 60 * 1000); // 5 minutes\n  },\n  \n  // Clean up interval on component destroy\n  beforeUnmount() {\n    // Remove dashboard layout class from body\n    document.body.classList.remove('dashboard-layout');\n\n    if (this.refreshInterval) {\n      clearInterval(this.refreshInterval);\n    }\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}