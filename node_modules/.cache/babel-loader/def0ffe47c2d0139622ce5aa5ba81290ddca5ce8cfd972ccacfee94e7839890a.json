{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nexport default {\n  name: 'FileUpload',\n  props: {\n    label: {\n      type: String,\n      required: true\n    },\n    placeholder: {\n      type: String,\n      default: 'Click to select file or drag and drop'\n    },\n    required: {\n      type: Boolean,\n      default: false\n    },\n    acceptedTypes: {\n      type: String,\n      default: 'image/*'\n    },\n    acceptedTypesText: {\n      type: String,\n      default: 'Accepted: JPEG, PNG, GIF (Max 5MB)'\n    },\n    helpText: {\n      type: String,\n      default: ''\n    },\n    maxSize: {\n      type: Number,\n      default: 5 * 1024 * 1024 // 5MB\n    },\n    uploadUrl: {\n      type: String,\n      default: ''\n    },\n    autoUpload: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      selectedFile: null,\n      uploadedFile: null,\n      uploading: false,\n      uploadProgress: 0,\n      errorMessage: '',\n      inputId: `file-input-${Math.random().toString(36).substr(2, 9)}`\n    };\n  },\n  methods: {\n    triggerFileInput() {\n      this.$refs.fileInput.click();\n    },\n    handleFileSelect(event) {\n      const file = event.target.files[0];\n      if (!file) return;\n\n      // Validate file\n      const validation = this.validateFile(file);\n      if (!validation.valid) {\n        this.errorMessage = validation.message;\n        return;\n      }\n      this.errorMessage = '';\n      this.selectedFile = file;\n      this.uploadedFile = null;\n\n      // Emit file selected event\n      this.$emit('file-selected', file);\n\n      // Auto upload if enabled\n      if (this.autoUpload && this.uploadUrl) {\n        this.uploadFile();\n      }\n    },\n    validateFile(file) {\n      // Check file size\n      if (file.size > this.maxSize) {\n        return {\n          valid: false,\n          message: `File size too large. Maximum size is ${this.formatFileSize(this.maxSize)}.`\n        };\n      }\n\n      // Check file type\n      const acceptedTypes = this.acceptedTypes.split(',').map(type => type.trim());\n      const isValidType = acceptedTypes.some(type => {\n        if (type === 'image/*') {\n          return file.type.startsWith('image/');\n        }\n        if (type === 'application/*') {\n          return file.type.startsWith('application/');\n        }\n        return file.type === type;\n      });\n      if (!isValidType) {\n        return {\n          valid: false,\n          message: 'Invalid file type. ' + this.acceptedTypesText\n        };\n      }\n      return {\n        valid: true\n      };\n    },\n    async uploadFile() {\n      if (!this.selectedFile || !this.uploadUrl) return;\n      this.uploading = true;\n      this.uploadProgress = 0;\n      this.errorMessage = '';\n      try {\n        const formData = new FormData();\n        formData.append('file', this.selectedFile);\n        const response = await this.$http.post(this.uploadUrl, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          },\n          onUploadProgress: progressEvent => {\n            this.uploadProgress = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          }\n        });\n        if (response.data.success) {\n          this.uploadedFile = {\n            name: this.selectedFile.name,\n            ...response.data.data\n          };\n          this.selectedFile = null;\n          this.$emit('upload-success', this.uploadedFile);\n        } else {\n          throw new Error(response.data.message || 'Upload failed');\n        }\n      } catch (error) {\n        this.errorMessage = error.response?.data?.message || error.message || 'Upload failed';\n        this.$emit('upload-error', error);\n      } finally {\n        this.uploading = false;\n        this.uploadProgress = 0;\n      }\n    },\n    removeFile() {\n      this.selectedFile = null;\n      this.uploadedFile = null;\n      this.errorMessage = '';\n      this.$refs.fileInput.value = '';\n      this.$emit('file-removed');\n    },\n    replaceFile() {\n      this.uploadedFile = null;\n      this.triggerFileInput();\n    },\n    getFileIcon(mimeType) {\n      if (mimeType.startsWith('image/')) {\n        return 'fas fa-image text-primary';\n      } else if (mimeType === 'application/pdf') {\n        return 'fas fa-file-pdf text-danger';\n      } else if (mimeType.includes('word')) {\n        return 'fas fa-file-word text-primary';\n      } else {\n        return 'fas fa-file text-secondary';\n      }\n    },\n    formatFileSize(bytes) {\n      if (bytes === 0) return '0 Bytes';\n      const k = 1024;\n      const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n      const i = Math.floor(Math.log(bytes) / Math.log(k));\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}