{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport api from './api';\nclass UserManagementService {\n  constructor() {\n    this.baseURL = '/users';\n  }\n\n  /**\n   * Get all users with filtering and pagination\n   */\n  async getUsers(params = {}) {\n    try {\n      const response = await api.get(this.baseURL, {\n        params\n      });\n      return this.handleResponse(response);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  /**\n   * Get user statistics\n   */\n  async getUserStats() {\n    try {\n      const response = await api.get(`${this.baseURL}/stats`);\n      return this.handleResponse(response);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  /**\n   * Get specific user details\n   */\n  async getUser(userId) {\n    try {\n      const response = await api.get(`${this.baseURL}/${userId}`);\n      return this.handleResponse(response);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  /**\n   * Create new user (admin or client)\n   */\n  async createUser(userData) {\n    try {\n      const response = await api.post(this.baseURL, userData);\n      return this.handleResponse(response);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  /**\n   * Update user information\n   */\n  async updateUser(userId, userData) {\n    try {\n      const response = await api.put(`${this.baseURL}/${userId}`, userData);\n      return this.handleResponse(response);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  /**\n   * Update user status (activate, suspend, etc.)\n   */\n  async updateUserStatus(userId, status, reason = '') {\n    try {\n      const response = await api.patch(`${this.baseURL}/${userId}/status`, {\n        status,\n        reason\n      });\n      return this.handleResponse(response);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  /**\n   * Delete user\n   */\n  async deleteUser(userId, reason = '') {\n    try {\n      const response = await api.delete(`${this.baseURL}/${userId}`, {\n        data: {\n          reason\n        }\n      });\n      return this.handleResponse(response);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  /**\n   * Reset user password\n   */\n  async resetUserPassword(userId, newPassword) {\n    try {\n      const response = await api.post(`${this.baseURL}/${userId}/reset-password`, {\n        new_password: newPassword\n      });\n      return this.handleResponse(response);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  /**\n   * Get user activity logs\n   */\n  async getUserActivity(userId, params = {}) {\n    try {\n      const response = await api.get(`${this.baseURL}/${userId}/activity`, {\n        params\n      });\n      return this.handleResponse(response);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  /**\n   * Bulk operations on users\n   */\n  async bulkUpdateUsers(userIds, action, data = {}) {\n    try {\n      const response = await api.post(`${this.baseURL}/bulk`, {\n        user_ids: userIds,\n        action,\n        data\n      });\n      return this.handleResponse(response);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  /**\n   * Export users data\n   */\n  async exportUsers(format = 'csv', filters = {}) {\n    try {\n      const response = await api.get(`${this.baseURL}/export`, {\n        params: {\n          format,\n          ...filters\n        },\n        responseType: 'blob'\n      });\n\n      // Create download link\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `users_export_${new Date().toISOString().split('T')[0]}.${format}`);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      window.URL.revokeObjectURL(url);\n      return {\n        success: true,\n        message: 'Export completed successfully'\n      };\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  /**\n   * Get archived (soft-deleted) users\n   */\n  async getArchivedUsers(page = 1, limit = 10, search = '') {\n    try {\n      const params = {\n        page,\n        limit,\n        ...(search && {\n          search\n        })\n      };\n      const response = await api.get(`${this.baseURL}/get-archived-users`, {\n        params\n      });\n      return this.handleResponse(response);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  /**\n   * Restore archived user\n   */\n  async restoreUser(userId) {\n    try {\n      const response = await api.patch(`${this.baseURL}/${userId}/restore`);\n      return this.handleResponse(response);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  /**\n   * Get available user roles/types\n   */\n  async getUserRoles() {\n    try {\n      const response = await api.get(`${this.baseURL}/roles`);\n      return this.handleResponse(response);\n    } catch (error) {\n      return this.handleError(error);\n    }\n  }\n\n  /**\n   * Handle successful API response\n   */\n  handleResponse(response) {\n    if (response.data.success) {\n      return {\n        success: true,\n        data: response.data.data,\n        message: response.data.message,\n        pagination: response.data.pagination\n      };\n    } else {\n      throw new Error(response.data.message || 'Operation failed');\n    }\n  }\n\n  /**\n   * Handle API errors\n   */\n  handleError(error) {\n    console.error('User Management Service Error:', error);\n    let message = 'An unexpected error occurred';\n    let errors = [];\n    let status = 0;\n    if (error.response) {\n      status = error.response.status;\n      const data = error.response.data;\n      if (data.message) {\n        message = data.message;\n      }\n      if (data.errors) {\n        errors = Array.isArray(data.errors) ? data.errors : [data.errors];\n      }\n\n      // Handle specific HTTP status codes\n      switch (status) {\n        case 401:\n          message = 'Authentication required. Please log in again.';\n          break;\n        case 403:\n          message = 'You do not have permission to perform this action.';\n          break;\n        case 404:\n          message = 'User not found.';\n          break;\n        case 422:\n          message = 'Validation failed. Please check your input.';\n          break;\n        case 429:\n          message = 'Too many requests. Please try again later.';\n          break;\n        case 500:\n          message = 'Server error. Please try again later.';\n          break;\n      }\n    } else if (error.request) {\n      message = 'Network error. Please check your connection.';\n    }\n    return {\n      success: false,\n      message,\n      errors,\n      status\n    };\n  }\n\n  /**\n   * Validate user data before submission\n   */\n  validateUserData(userData, isUpdate = false) {\n    const errors = [];\n    if (!isUpdate || userData.username) {\n      if (!userData.username || userData.username.length < 3) {\n        errors.push('Username must be at least 3 characters long');\n      }\n    }\n    if (!isUpdate || userData.email) {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!userData.email || !emailRegex.test(userData.email)) {\n        errors.push('Please provide a valid email address');\n      }\n    }\n    if (!isUpdate || userData.password) {\n      if (!userData.password || userData.password.length < 6) {\n        errors.push('Password must be at least 6 characters long');\n      }\n    }\n    if (!isUpdate || userData.first_name) {\n      if (!userData.first_name || userData.first_name.trim().length < 2) {\n        errors.push('First name must be at least 2 characters long');\n      }\n    }\n    if (!isUpdate || userData.last_name) {\n      if (!userData.last_name || userData.last_name.trim().length < 2) {\n        errors.push('Last name must be at least 2 characters long');\n      }\n    }\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Format user data for display\n   */\n  formatUserData(user) {\n    return {\n      ...user,\n      full_name: `${user.first_name || ''} ${user.last_name || ''}`.trim(),\n      status_label: this.getStatusLabel(user.status),\n      type_label: this.getTypeLabel(user.type || user.role),\n      created_at_formatted: this.formatDate(user.created_at),\n      last_login_formatted: user.last_login ? this.formatDate(user.last_login) : 'Never'\n    };\n  }\n\n  /**\n   * Get human-readable status label\n   */\n  getStatusLabel(status) {\n    const labels = {\n      'active': 'Active',\n      'inactive': 'Inactive',\n      'pending': 'Pending Verification',\n      'suspended': 'Suspended',\n      'pending_verification': 'Pending Verification'\n    };\n    return labels[status] || status;\n  }\n\n  /**\n   * Get human-readable type label\n   */\n  getTypeLabel(type) {\n    const labels = {\n      'admin': 'Administrator',\n      'employee': 'Employee',\n      'client': 'Client',\n      'user': 'User'\n    };\n    return labels[type] || type;\n  }\n\n  /**\n   * Format date for display\n   */\n  formatDate(dateString) {\n    if (!dateString) return '';\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  }\n}\nexport default new UserManagementService();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}