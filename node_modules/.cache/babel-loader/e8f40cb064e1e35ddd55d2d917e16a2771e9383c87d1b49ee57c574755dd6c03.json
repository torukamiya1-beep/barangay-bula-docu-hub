{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport AdminHeader from './AdminHeader.vue';\nimport AdminSidebar from './AdminSidebar.vue';\nimport userManagementService from '@/services/userManagementService';\nimport { Modal } from 'bootstrap';\nexport default {\n  name: 'AdminArchive',\n  components: {\n    AdminHeader,\n    AdminSidebar\n  },\n  data() {\n    return {\n      // UI State\n      sidebarCollapsed: false,\n      showUserDropdown: false,\n      activeMenu: 'archive',\n      loading: false,\n      // User Data\n      archivedUsers: [],\n      viewUserData: null,\n      // Filters and Search\n      searchQuery: '',\n      currentPage: 1,\n      itemsPerPage: 10,\n      // Admin Data\n      adminData: null\n    };\n  },\n  computed: {\n    filteredUsers() {\n      let filtered = [...this.archivedUsers];\n\n      // Apply search filter\n      if (this.searchQuery) {\n        const query = this.searchQuery.toLowerCase();\n        filtered = filtered.filter(user => user.full_name?.toLowerCase().includes(query) || user.email?.toLowerCase().includes(query) || user.username?.toLowerCase().includes(query) || user.type?.toLowerCase().includes(query));\n      }\n      return filtered;\n    },\n    paginatedUsers() {\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return this.filteredUsers.slice(start, end);\n    },\n    totalPages() {\n      return Math.ceil(this.filteredUsers.length / this.itemsPerPage);\n    },\n    visiblePages() {\n      const pages = [];\n      const start = Math.max(1, this.currentPage - 2);\n      const end = Math.min(this.totalPages, this.currentPage + 2);\n      for (let i = start; i <= end; i++) {\n        pages.push(i);\n      }\n      return pages;\n    }\n  },\n  watch: {\n    searchQuery() {\n      this.currentPage = 1;\n    },\n    itemsPerPage() {\n      this.currentPage = 1;\n    }\n  },\n  async mounted() {\n    await this.loadArchivedUsers();\n  },\n  methods: {\n    // Load archived users\n    async loadArchivedUsers() {\n      try {\n        this.loading = true;\n        const response = await userManagementService.getArchivedUsers(1, 100, this.searchQuery);\n        if (response.success) {\n          this.archivedUsers = response.data.map(user => ({\n            ...user,\n            full_name: `${user.first_name || ''} ${user.last_name || ''}`.trim()\n          }));\n        } else {\n          this.showToast('error', response.message || 'Failed to load archived users');\n        }\n      } catch (error) {\n        console.error('Error loading archived users:', error);\n        this.showToast('error', 'Failed to load archived users');\n      } finally {\n        this.loading = false;\n      }\n    },\n    // View user details\n    async viewUser(user) {\n      try {\n        // Fetch detailed user data from the API\n        const response = await userManagementService.getUser(user.id);\n        if (response.success) {\n          this.viewUserData = userManagementService.formatUserData(response.data);\n          const modal = new Modal(document.getElementById('viewUserModal'));\n          modal.show();\n        } else {\n          throw new Error(response.message || 'Failed to load user details');\n        }\n      } catch (error) {\n        console.error('Error viewing user:', error);\n        const errorMessage = error.response?.data?.message || error.message || 'Failed to load user details';\n        this.showToast('error', errorMessage);\n      }\n    },\n    // Restore user (reactivate)\n    async restoreUser(user) {\n      if (!confirm(`Are you sure you want to restore ${user.full_name}?`)) {\n        return;\n      }\n      try {\n        const response = await userManagementService.restoreUser(user.id);\n        if (response.success) {\n          this.showToast('success', `${user.full_name} has been restored successfully`);\n\n          // Remove user from archived list\n          this.archivedUsers = this.archivedUsers.filter(u => u.id !== user.id);\n\n          // Close modal if open\n          const modal = Modal.getInstance(document.getElementById('viewUserModal'));\n          if (modal) {\n            modal.hide();\n          }\n        } else {\n          this.showToast('error', response.message || 'Failed to restore user');\n        }\n      } catch (error) {\n        console.error('Error restoring user:', error);\n        this.showToast('error', 'Failed to restore user');\n      }\n    },\n    // Pagination\n    changePage(page) {\n      if (page >= 1 && page <= this.totalPages) {\n        this.currentPage = page;\n      }\n    },\n    // UI Event Handlers\n    handleSidebarToggle() {\n      this.sidebarCollapsed = !this.sidebarCollapsed;\n    },\n    handleUserDropdownToggle() {\n      this.showUserDropdown = !this.showUserDropdown;\n    },\n    handleMenuAction(action) {\n      if (action === 'archive') {\n        // Already on archive page\n        return;\n      }\n\n      // Navigate to other pages\n      const routes = {\n        'dashboard': '/admin/dashboard',\n        'users': '/admin/users',\n        'requests': '/admin/requests'\n      };\n      if (routes[action]) {\n        this.$router.push(routes[action]);\n      }\n    },\n    handleLogout() {\n      // Implement logout logic\n      this.$router.push('/admin/login');\n    },\n    // Utility methods\n    formatDate(dateString) {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    showToast(type, message) {\n      // Simple alert for now - can be replaced with proper toast library\n      if (type === 'success') {\n        alert(`✅ ${message}`);\n      } else if (type === 'error') {\n        alert(`❌ ${message}`);\n      } else {\n        alert(`ℹ️ ${message}`);\n      }\n    },\n    // Get civil status label\n    getCivilStatusLabel(civilStatusId) {\n      const labels = {\n        1: 'Single',\n        2: 'Married',\n        3: 'Widowed',\n        4: 'Divorced',\n        5: 'Separated'\n      };\n      return labels[civilStatusId] || 'Not specified';\n    },\n    // Get full address\n    getFullAddress(user) {\n      if (!user) return 'Not provided';\n      const addressParts = [user.house_number, user.street, user.subdivision, user.barangay, user.city_municipality, user.province].filter(part => part && part.trim() !== '');\n      return addressParts.length > 0 ? addressParts.join(', ') : 'Not provided';\n    },\n    // Get residency duration\n    getResidencyDuration(user) {\n      if (!user) return 'Not provided';\n      const years = user.years_of_residency || 0;\n      const months = user.months_of_residency || 0;\n      if (years === 0 && months === 0) return 'Not provided';\n      const parts = [];\n      if (years > 0) parts.push(`${years} year${years !== 1 ? 's' : ''}`);\n      if (months > 0) parts.push(`${months} month${months !== 1 ? 's' : ''}`);\n      return parts.join(', ');\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}