{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport AdminHeader from '../AdminHeader.vue';\nimport AdminSidebar from '../AdminSidebar.vue';\nimport adminAuthService from '@/services/adminAuthService';\nimport { Modal } from 'bootstrap';\nexport default {\n  name: 'AdminResidencyVerification',\n  components: {\n    AdminHeader,\n    AdminSidebar\n  },\n  data() {\n    return {\n      // Admin data\n      adminData: null,\n      // UI state\n      sidebarCollapsed: false,\n      showUserDropdown: false,\n      activeMenu: 'residency-verification',\n      isMobile: false,\n      // Loading states\n      loading: false,\n      actionLoading: false,\n      loadingDocuments: false,\n      // Data\n      pendingVerifications: [],\n      documents: [],\n      selectedVerification: null,\n      // Pagination\n      pagination: {\n        page: 1,\n        limit: 10,\n        total: 0,\n        totalPages: 0\n      },\n      // Statistics\n      statistics: {\n        pending: 0,\n        approved: 0,\n        rejected: 0,\n        total: 0\n      },\n      // Rejection modal\n      rejectionReason: '',\n      rejectionError: '',\n      // Messages\n      successMessage: '',\n      errorMessage: ''\n    };\n  },\n  async mounted() {\n    this.checkMobile();\n    window.addEventListener('resize', this.checkMobile);\n    try {\n      this.adminData = await adminAuthService.getCurrentAdmin();\n      await this.loadPendingVerifications();\n      await this.loadStatistics();\n    } catch (error) {\n      console.error('Failed to initialize admin residency verification:', error);\n      this.errorMessage = 'Failed to load admin data';\n    }\n  },\n  beforeUnmount() {\n    window.removeEventListener('resize', this.checkMobile);\n  },\n  methods: {\n    // UI Methods\n    checkMobile() {\n      this.isMobile = window.innerWidth < 768;\n      if (!this.isMobile) {\n        this.sidebarCollapsed = false;\n      }\n    },\n    handleSidebarToggle() {\n      this.sidebarCollapsed = !this.sidebarCollapsed;\n    },\n    closeMobileSidebar() {\n      if (this.isMobile) {\n        this.sidebarCollapsed = true;\n      }\n    },\n    handleUserDropdownToggle() {\n      this.showUserDropdown = !this.showUserDropdown;\n    },\n    handleMenuChange(menu) {\n      this.activeMenu = menu;\n      this.showUserDropdown = false;\n    },\n    handleMenuAction(action) {\n      if (action === 'profile') {\n        this.$router.push('/admin/profile');\n      } else if (action === 'settings') {\n        this.$router.push('/admin/settings');\n      }\n      this.showUserDropdown = false;\n    },\n    async handleLogout() {\n      try {\n        await adminAuthService.logout();\n        this.$router.push('/admin/login');\n      } catch (error) {\n        console.error('Logout failed:', error);\n      }\n    },\n    // Data Loading Methods\n    async loadPendingVerifications(page = 1) {\n      this.loading = true;\n      this.clearMessages();\n      try {\n        const response = await this.fetchPendingVerifications(page);\n        if (response.success) {\n          this.pendingVerifications = response.data;\n          this.pagination = response.pagination;\n        } else {\n          throw new Error(response.message || 'Failed to load pending verifications');\n        }\n      } catch (error) {\n        console.error('Failed to load pending verifications:', error);\n        this.errorMessage = error.message || 'Failed to load pending verifications';\n      } finally {\n        this.loading = false;\n      }\n    },\n    async loadStatistics() {\n      try {\n        // This would be implemented with actual API calls\n        // For now, calculate from current data\n        this.statistics = {\n          pending: this.pendingVerifications.length,\n          approved: 0,\n          // Would come from API\n          rejected: 0,\n          // Would come from API\n          total: this.pagination.total || this.pendingVerifications.length\n        };\n      } catch (error) {\n        console.error('Failed to load statistics:', error);\n      }\n    },\n    // API Methods\n    async fetchPendingVerifications(page = 1, limit = 10) {\n      const response = await fetch(`/api/residency/pending?page=${page}&limit=${limit}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to fetch pending verifications');\n      }\n      return data;\n    },\n    async fetchAccountDocuments(accountId) {\n      const response = await fetch(`/api/residency/documents/${accountId}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to fetch documents');\n      }\n      return data;\n    },\n    async approveVerificationAPI(accountId) {\n      const response = await fetch('/api/residency/approve', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          account_id: accountId\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to approve verification');\n      }\n      return data;\n    },\n    async rejectVerificationAPI(accountId, rejectionReason) {\n      const response = await fetch('/api/residency/reject', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          account_id: accountId,\n          rejection_reason: rejectionReason\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to reject verification');\n      }\n      return data;\n    },\n    // Action Methods\n    async viewDocuments(verification) {\n      this.selectedVerification = verification;\n      this.loadingDocuments = true;\n      this.documents = [];\n\n      // Show modal\n      const modal = new Modal(this.$refs.documentModal);\n      modal.show();\n      try {\n        const response = await this.fetchAccountDocuments(verification.account_id);\n        if (response.success) {\n          this.documents = response.data;\n        } else {\n          throw new Error(response.message || 'Failed to load documents');\n        }\n      } catch (error) {\n        console.error('Failed to load documents:', error);\n        this.errorMessage = error.message || 'Failed to load documents';\n      } finally {\n        this.loadingDocuments = false;\n      }\n    },\n    async approveVerification(verification) {\n      if (!confirm(`Are you sure you want to approve the residency verification for ${verification.first_name} ${verification.last_name}?`)) {\n        return;\n      }\n      this.actionLoading = true;\n      this.clearMessages();\n      try {\n        const response = await this.approveVerificationAPI(verification.account_id);\n        if (response.success) {\n          this.successMessage = `Residency verification approved for ${verification.first_name} ${verification.last_name}`;\n          await this.loadPendingVerifications(this.pagination.page);\n          await this.loadStatistics();\n        } else {\n          throw new Error(response.message || 'Failed to approve verification');\n        }\n      } catch (error) {\n        console.error('Failed to approve verification:', error);\n        this.errorMessage = error.message || 'Failed to approve verification';\n      } finally {\n        this.actionLoading = false;\n      }\n    },\n    showRejectModal(verification) {\n      this.selectedVerification = verification;\n      this.rejectionReason = '';\n      this.rejectionError = '';\n      const modal = new Modal(this.$refs.rejectModal);\n      modal.show();\n    },\n    async confirmRejectVerification() {\n      if (!this.rejectionReason.trim()) {\n        this.rejectionError = 'Rejection reason is required';\n        return;\n      }\n      if (this.rejectionReason.trim().length < 10) {\n        this.rejectionError = 'Rejection reason must be at least 10 characters';\n        return;\n      }\n      this.actionLoading = true;\n      this.rejectionError = '';\n      this.clearMessages();\n      try {\n        const response = await this.rejectVerificationAPI(this.selectedVerification.account_id, this.rejectionReason.trim());\n        if (response.success) {\n          this.successMessage = `Residency verification rejected for ${this.selectedVerification.first_name} ${this.selectedVerification.last_name}`;\n\n          // Close modal\n          const modal = Modal.getInstance(this.$refs.rejectModal);\n          modal.hide();\n          await this.loadPendingVerifications(this.pagination.page);\n          await this.loadStatistics();\n        } else {\n          throw new Error(response.message || 'Failed to reject verification');\n        }\n      } catch (error) {\n        console.error('Failed to reject verification:', error);\n        this.errorMessage = error.message || 'Failed to reject verification';\n      } finally {\n        this.actionLoading = false;\n      }\n    },\n    approveFromModal() {\n      // Close document modal first\n      const documentModal = Modal.getInstance(this.$refs.documentModal);\n      documentModal.hide();\n\n      // Approve the verification\n      this.approveVerification(this.selectedVerification);\n    },\n    showRejectModalFromDocuments() {\n      // Close document modal first\n      const documentModal = Modal.getInstance(this.$refs.documentModal);\n      documentModal.hide();\n\n      // Show reject modal\n      setTimeout(() => {\n        this.showRejectModal(this.selectedVerification);\n      }, 300);\n    },\n    viewDocument(document) {\n      // This would open the document in a new tab or modal\n      // For now, just show an alert\n      alert(`Viewing document: ${document.document_name}\\nThis feature would open the document file.`);\n    },\n    // Pagination Methods\n    changePage(page) {\n      if (page >= 1 && page <= this.pagination.totalPages && page !== this.pagination.page) {\n        this.loadPendingVerifications(page);\n      }\n    },\n    getPageNumbers() {\n      const pages = [];\n      const totalPages = this.pagination.totalPages;\n      const currentPage = this.pagination.page;\n\n      // Show up to 5 page numbers\n      let startPage = Math.max(1, currentPage - 2);\n      let endPage = Math.min(totalPages, startPage + 4);\n      if (endPage - startPage < 4) {\n        startPage = Math.max(1, endPage - 4);\n      }\n      for (let i = startPage; i <= endPage; i++) {\n        pages.push(i);\n      }\n      return pages;\n    },\n    // Utility Methods\n    getFullName(verification) {\n      const parts = [verification.first_name, verification.middle_name, verification.last_name].filter(Boolean);\n      return parts.join(' ');\n    },\n    formatDate(dateString) {\n      if (!dateString) return 'N/A';\n      try {\n        const date = new Date(dateString);\n        return date.toLocaleDateString('en-US', {\n          year: 'numeric',\n          month: 'short',\n          day: 'numeric',\n          hour: '2-digit',\n          minute: '2-digit'\n        });\n      } catch (error) {\n        return 'Invalid Date';\n      }\n    },\n    getTimeAgo(dateString) {\n      if (!dateString) return 'N/A';\n      try {\n        const date = new Date(dateString);\n        const now = new Date();\n        const diffInSeconds = Math.floor((now - date) / 1000);\n        if (diffInSeconds < 60) return 'Just now';\n        if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minutes ago`;\n        if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hours ago`;\n        if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)} days ago`;\n        return this.formatDate(dateString);\n      } catch (error) {\n        return 'N/A';\n      }\n    },\n    getDocumentTypeLabel(documentType) {\n      const labels = {\n        utility_bill: 'Utility Bill',\n        barangay_certificate: 'Barangay Certificate',\n        valid_id: 'Valid ID',\n        lease_contract: 'Lease Contract',\n        other: 'Other Document'\n      };\n      return labels[documentType] || documentType;\n    },\n    formatFileSize(bytes) {\n      if (!bytes) return 'N/A';\n      const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n      const i = Math.floor(Math.log(bytes) / Math.log(1024));\n      return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n    },\n    clearMessages() {\n      this.successMessage = '';\n      this.errorMessage = '';\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}