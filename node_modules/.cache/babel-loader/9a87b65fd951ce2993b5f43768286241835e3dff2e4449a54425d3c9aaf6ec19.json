{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * User Data Composable\n * Manages user data state and operations following Vue 3 Composition API best practices\n * Implements Google's software engineering principles: single responsibility, error handling\n */\n\nimport { reactive, computed } from 'vue';\nimport unifiedAuthService from '@/services/unifiedAuthService';\nexport function useUserData() {\n  // Reactive state\n  const userData = reactive({\n    userName: 'User',\n    userEmail: 'user@example.com',\n    userAvatar: null,\n    firstName: 'User',\n    lastName: '',\n    middleName: '',\n    suffix: '',\n    profile: null,\n    isLoading: false,\n    error: null\n  });\n\n  // Computed properties\n  const fullName = computed(() => {\n    return userData.firstName && userData.lastName ? `${userData.firstName} ${userData.lastName}`.trim() : userData.firstName || userData.userName;\n  });\n  const initials = computed(() => {\n    if (userData.firstName && userData.lastName) {\n      return `${userData.firstName[0]}${userData.lastName[0]}`.toUpperCase();\n    }\n    return userData.userName ? userData.userName.substring(0, 2).toUpperCase() : 'U';\n  });\n  const isAuthenticated = computed(() => {\n    return userData.userName !== 'User' && userData.userEmail !== 'user@example.com';\n  });\n\n  // Methods\n  const loadUserData = async () => {\n    try {\n      userData.isLoading = true;\n      userData.error = null;\n      const currentUser = unifiedAuthService.getCurrentUser();\n\n      // Debug: Log current user data structure\n      console.log('useUserData - currentUser:', currentUser);\n      if (currentUser) {\n        console.log('useUserData - processing currentUser:', currentUser);\n\n        // Update basic user data\n        userData.userName = currentUser.username || 'User';\n        userData.userEmail = currentUser.email || 'user@example.com';\n        userData.userAvatar = currentUser.avatar || null;\n\n        // Handle profile data - the correct structure has a profile object\n        if (currentUser.profile) {\n          console.log('useUserData - found profile object:', currentUser.profile);\n          userData.firstName = currentUser.profile.first_name || '';\n          userData.lastName = currentUser.profile.last_name || '';\n          userData.middleName = currentUser.profile.middle_name || '';\n          userData.suffix = currentUser.profile.suffix || '';\n          userData.profile = currentUser.profile;\n        } else {\n          // Fallback if no profile object (shouldn't happen with current backend)\n          userData.firstName = currentUser.username || 'User';\n          userData.lastName = '';\n          userData.middleName = '';\n          userData.suffix = '';\n          userData.profile = null;\n        }\n        console.log('useUserData - final userData:', {\n          firstName: userData.firstName,\n          lastName: userData.lastName,\n          middleName: userData.middleName,\n          suffix: userData.suffix,\n          profile: userData.profile\n        });\n      } else {\n        // Handle case where no user is found\n        console.warn('No current user found');\n        resetUserData();\n      }\n    } catch (error) {\n      console.error('Error loading user data:', error);\n      userData.error = 'Failed to load user information';\n      resetUserData();\n    } finally {\n      userData.isLoading = false;\n    }\n  };\n  const resetUserData = () => {\n    userData.userName = 'User';\n    userData.userEmail = 'user@example.com';\n    userData.userAvatar = null;\n    userData.firstName = 'User';\n    userData.lastName = '';\n    userData.middleName = '';\n    userData.suffix = '';\n    userData.profile = null;\n    userData.error = null;\n  };\n  const updateUserData = newData => {\n    try {\n      Object.assign(userData, {\n        ...userData,\n        ...newData,\n        error: null\n      });\n    } catch (error) {\n      console.error('Error updating user data:', error);\n      userData.error = 'Failed to update user information';\n    }\n  };\n\n  // Validation helpers\n  const validateUserData = () => {\n    const errors = [];\n    if (!userData.userName || userData.userName.trim().length < 2) {\n      errors.push('Username must be at least 2 characters long');\n    }\n    if (!userData.userEmail || !isValidEmail(userData.userEmail)) {\n      errors.push('Valid email address is required');\n    }\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  };\n  const isValidEmail = email => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  };\n\n  // Return public API\n  return {\n    // State\n    userData,\n    // Computed\n    fullName,\n    initials,\n    isAuthenticated,\n    // Methods\n    loadUserData,\n    resetUserData,\n    updateUserData,\n    validateUserData\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}