{"ast":null,"code":"import api from './api';\n\n/**\n * Service for handling notification navigation and validation\n */\nclass NotificationNavigationService {\n  /**\n   * Check if a request exists and is accessible to the current user\n   * @param {number} requestId - The request ID to check\n   * @param {string} userType - 'admin' or 'client'\n   * @returns {Promise<boolean>} - True if request exists and is accessible\n   */\n  async checkRequestExists(requestId, userType = 'client') {\n    try {\n      console.log(`üîç Checking if request ${requestId} exists for ${userType}`);\n      const endpoint = userType === 'admin' ? `/admin/documents/requests/${requestId}/exists` : `/client/document-requests/${requestId}/exists`;\n      const response = await api.get(endpoint);\n      if (response.data && response.data.success) {\n        console.log(`‚úÖ Request ${requestId} exists and is accessible`);\n        return true;\n      } else {\n        console.log(`‚ùå Request ${requestId} does not exist or is not accessible`);\n        return false;\n      }\n    } catch (error) {\n      console.error(`‚ùå Error checking request existence:`, error);\n\n      // If it's a 404, the request doesn't exist\n      if (error.response && error.response.status === 404) {\n        return false;\n      }\n\n      // For other errors, assume it exists to avoid blocking navigation\n      // The actual page will handle the error appropriately\n      console.log(`‚ö†Ô∏è Assuming request exists due to error`);\n      return true;\n    }\n  }\n\n  /**\n   * Check if a user exists and is accessible to the current admin\n   * @param {number} userId - The user ID to check\n   * @returns {Promise<boolean>} - True if user exists and is accessible\n   */\n  async checkUserExists(userId) {\n    try {\n      console.log(`üîç Checking if user ${userId} exists`);\n      const response = await api.get(`/admin/users/${userId}/exists`);\n      if (response.data && response.data.success) {\n        console.log(`‚úÖ User ${userId} exists and is accessible`);\n        return true;\n      } else {\n        console.log(`‚ùå User ${userId} does not exist or is not accessible`);\n        return false;\n      }\n    } catch (error) {\n      console.error(`‚ùå Error checking user existence:`, error);\n\n      // If it's a 404, the user doesn't exist\n      if (error.response && error.response.status === 404) {\n        return false;\n      }\n\n      // For other errors, assume it exists\n      console.log(`‚ö†Ô∏è Assuming user exists due to error`);\n      return true;\n    }\n  }\n\n  /**\n   * Validate notification data and extract relevant IDs\n   * @param {Object} notification - The notification object\n   * @returns {Object} - Parsed and validated notification data\n   */\n  parseNotificationData(notification) {\n    try {\n      let data = {};\n      if (notification.data) {\n        if (typeof notification.data === 'string') {\n          data = JSON.parse(notification.data);\n        } else if (typeof notification.data === 'object') {\n          data = notification.data;\n        }\n      }\n      return {\n        requestId: data.request_id || null,\n        userId: data.user_id || data.client_id || null,\n        userType: data.user_type || null,\n        requestNumber: data.request_number || null,\n        documentType: data.document_type || null,\n        priority: data.priority || null,\n        ...data // Include all other data\n      };\n    } catch (error) {\n      console.error('‚ùå Error parsing notification data:', error);\n      return {};\n    }\n  }\n\n  /**\n   * Show a toast notification for navigation errors\n   * @param {string} message - Error message to display\n   * @param {Function} emitFn - Function to emit error events\n   */\n  showNavigationError(message, emitFn) {\n    console.error('üö® Navigation Error:', message);\n    if (typeof emitFn === 'function') {\n      emitFn('error', message);\n    }\n\n    // You could also integrate with a toast notification system here\n    // For example: this.$toast.error(message);\n  }\n\n  /**\n   * Get the appropriate icon for a notification type\n   * @param {string} type - Notification type\n   * @param {string} userType - 'admin' or 'client'\n   * @returns {string} - CSS classes for the icon\n   */\n  getNotificationIcon(type, userType = 'client') {\n    const adminIcons = {\n      'new_request': 'fas fa-file-plus text-success',\n      'status_change': 'fas fa-sync-alt text-info',\n      'request_update': 'fas fa-edit text-warning',\n      'request_cancelled': 'fas fa-times-circle text-danger',\n      'payment_confirmed': 'fas fa-check-circle text-success',\n      'payment_update': 'fas fa-money-bill text-info',\n      'system_alert': 'fas fa-exclamation-triangle text-danger',\n      'urgent_request': 'fas fa-exclamation-circle text-danger',\n      'user_registration': 'fas fa-user-plus text-info',\n      'new_user': 'fas fa-user-check text-success',\n      'test': 'fas fa-vial text-secondary',\n      'connection': 'fas fa-plug text-success'\n    };\n    const clientIcons = {\n      'status_change': 'fas fa-sync-alt text-info',\n      'payment_confirmed': 'fas fa-credit-card text-success',\n      'payment_required': 'fas fa-money-bill text-warning',\n      'payment_update': 'fas fa-money-bill text-info',\n      'document_ready': 'fas fa-file-check text-success',\n      'ready_for_pickup': 'fas fa-hand-paper text-success',\n      'request_approved': 'fas fa-check-circle text-success',\n      'request_rejected': 'fas fa-times-circle text-danger',\n      'request_update': 'fas fa-edit text-warning',\n      'system_alert': 'fas fa-exclamation-triangle text-danger',\n      'maintenance_notice': 'fas fa-tools text-warning',\n      'test': 'fas fa-vial text-secondary',\n      'connection': 'fas fa-plug text-success'\n    };\n    const icons = userType === 'admin' ? adminIcons : clientIcons;\n    return icons[type] || 'fas fa-bell text-primary';\n  }\n\n  /**\n   * Format notification time in a human-readable way\n   * @param {string} timestamp - ISO timestamp\n   * @returns {string} - Formatted time string\n   */\n  formatNotificationTime(timestamp) {\n    if (!timestamp) return '';\n    try {\n      const date = new Date(timestamp);\n      const now = new Date();\n      const diffInMinutes = Math.floor((now - date) / (1000 * 60));\n      if (diffInMinutes < 1) return 'Just now';\n      if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n      const diffInHours = Math.floor(diffInMinutes / 60);\n      if (diffInHours < 24) return `${diffInHours}h ago`;\n      const diffInDays = Math.floor(diffInHours / 24);\n      if (diffInDays < 7) return `${diffInDays}d ago`;\n      return date.toLocaleDateString();\n    } catch (error) {\n      console.error('Error formatting notification time:', error);\n      return '';\n    }\n  }\n}\n\n// Export a singleton instance\nexport default new NotificationNavigationService();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}