{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.VUE_APP_API_URL || 'http://localhost:7000/api';\nclass UnifiedAuthService {\n  // Clear invalid authentication data\n  clearInvalidData() {\n    const userStr = localStorage.getItem('auth_user');\n    if (userStr === 'undefined' || userStr === 'null') {\n      localStorage.removeItem('auth_user');\n      localStorage.removeItem('auth_token');\n    }\n    const sessionUserStr = sessionStorage.getItem('auth_user');\n    if (sessionUserStr === 'undefined' || sessionUserStr === 'null') {\n      sessionStorage.removeItem('auth_user');\n      sessionStorage.removeItem('auth_token');\n    }\n  }\n  constructor() {\n    // Clean up any invalid data from previous sessions\n    this.clearInvalidData();\n    this.apiClient = axios.create({\n      baseURL: `${API_BASE_URL}/auth/unified`,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Add request interceptor to include auth token\n    this.apiClient.interceptors.request.use(config => {\n      const token = this.getToken();\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => {\n      return Promise.reject(error);\n    });\n\n    // Add response interceptor to handle token expiration\n    this.apiClient.interceptors.response.use(response => response, error => {\n      if (error.response?.status === 401) {\n        this.logout();\n        window.location.href = '/login';\n      }\n      return Promise.reject(error);\n    });\n  }\n\n  // Login method\n  async login(credentials) {\n    try {\n      const response = await this.apiClient.post('/login', credentials);\n      if (response.data.success) {\n        const {\n          user,\n          token,\n          redirectUrl\n        } = response.data.data;\n\n        // Store authentication data\n        this.setToken(token);\n        this.setUser(user);\n        return {\n          success: true,\n          user,\n          redirectUrl,\n          message: response.data.message\n        };\n      }\n      return {\n        success: false,\n        message: response.data.message || 'Login failed'\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  // Check if user is logged in\n  isLoggedIn() {\n    const token = this.getToken();\n    const user = this.getUser();\n    return !!(token && user);\n  }\n\n  // Get current user\n  getCurrentUser() {\n    return this.getUser();\n  }\n\n  // Backward compatibility methods\n  getAdminData() {\n    const user = this.getUser();\n    return user && user.type === 'admin' ? user : null;\n  }\n  getClientData() {\n    const user = this.getUser();\n    return user && user.type === 'client' ? user : null;\n  }\n\n  // Get user type (admin or client)\n  getUserType() {\n    const user = this.getUser();\n    return user?.type || null;\n  }\n\n  // Get user role (for admin users)\n  getUserRole() {\n    const user = this.getUser();\n    return user?.role || null;\n  }\n\n  // Logout\n  logout() {\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('auth_user');\n    sessionStorage.removeItem('auth_token');\n    sessionStorage.removeItem('auth_user');\n  }\n\n  // Token management\n  setToken(token) {\n    localStorage.setItem('auth_token', token);\n  }\n  getToken() {\n    return localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token');\n  }\n\n  // User data management\n  setUser(user) {\n    if (user && typeof user === 'object') {\n      localStorage.setItem('auth_user', JSON.stringify(user));\n      console.log('User data stored successfully:', user);\n    } else {\n      console.error('Invalid user data, not storing:', user);\n    }\n  }\n  getUser() {\n    const userStr = localStorage.getItem('auth_user') || sessionStorage.getItem('auth_user');\n    try {\n      if (!userStr || userStr === 'undefined' || userStr === 'null') {\n        return null;\n      }\n      return JSON.parse(userStr);\n    } catch (error) {\n      console.error('Error parsing user data:', error);\n      // Clear invalid data\n      localStorage.removeItem('auth_user');\n      sessionStorage.removeItem('auth_user');\n      return null;\n    }\n  }\n\n  // Parse error response\n  parseError(error) {\n    if (error.response?.data) {\n      return {\n        message: error.response.data.message || 'An error occurred',\n        status: error.response.status,\n        errors: error.response.data.errors || []\n      };\n    }\n    if (error.message) {\n      return {\n        message: error.message,\n        status: 500,\n        errors: []\n      };\n    }\n    return {\n      message: 'Network error occurred',\n      status: 0,\n      errors: []\n    };\n  }\n\n  // Get redirect URL based on user type and role\n  getRedirectUrl(user) {\n    if (user.type === 'admin') {\n      return '/admin/requests'; // Changed from /admin/dashboard to /admin/requests\n    } else if (user.type === 'client') {\n      return '/client/home'; // Updated to redirect to new client home page\n    }\n    return '/';\n  }\n}\nexport default new UnifiedAuthService();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}