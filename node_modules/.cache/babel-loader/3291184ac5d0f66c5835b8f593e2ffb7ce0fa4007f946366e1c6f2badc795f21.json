{"ast":null,"code":"export function unfilterNone(currentLine, newLine, bytesPerLine) {\n  for (let i = 0; i < bytesPerLine; i++) {\n    newLine[i] = currentLine[i];\n  }\n}\nexport function unfilterSub(currentLine, newLine, bytesPerLine, bytesPerPixel) {\n  let i = 0;\n  for (; i < bytesPerPixel; i++) {\n    // just copy first bytes\n    newLine[i] = currentLine[i];\n  }\n  for (; i < bytesPerLine; i++) {\n    newLine[i] = currentLine[i] + newLine[i - bytesPerPixel] & 0xff;\n  }\n}\nexport function unfilterUp(currentLine, newLine, prevLine, bytesPerLine) {\n  let i = 0;\n  if (prevLine.length === 0) {\n    // just copy bytes for first line\n    for (; i < bytesPerLine; i++) {\n      newLine[i] = currentLine[i];\n    }\n  } else {\n    for (; i < bytesPerLine; i++) {\n      newLine[i] = currentLine[i] + prevLine[i] & 0xff;\n    }\n  }\n}\nexport function unfilterAverage(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel) {\n  let i = 0;\n  if (prevLine.length === 0) {\n    for (; i < bytesPerPixel; i++) {\n      newLine[i] = currentLine[i];\n    }\n    for (; i < bytesPerLine; i++) {\n      newLine[i] = currentLine[i] + (newLine[i - bytesPerPixel] >> 1) & 0xff;\n    }\n  } else {\n    for (; i < bytesPerPixel; i++) {\n      newLine[i] = currentLine[i] + (prevLine[i] >> 1) & 0xff;\n    }\n    for (; i < bytesPerLine; i++) {\n      newLine[i] = currentLine[i] + (newLine[i - bytesPerPixel] + prevLine[i] >> 1) & 0xff;\n    }\n  }\n}\nexport function unfilterPaeth(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel) {\n  let i = 0;\n  if (prevLine.length === 0) {\n    for (; i < bytesPerPixel; i++) {\n      newLine[i] = currentLine[i];\n    }\n    for (; i < bytesPerLine; i++) {\n      newLine[i] = currentLine[i] + newLine[i - bytesPerPixel] & 0xff;\n    }\n  } else {\n    for (; i < bytesPerPixel; i++) {\n      newLine[i] = currentLine[i] + prevLine[i] & 0xff;\n    }\n    for (; i < bytesPerLine; i++) {\n      newLine[i] = currentLine[i] + paethPredictor(newLine[i - bytesPerPixel], prevLine[i], prevLine[i - bytesPerPixel]) & 0xff;\n    }\n  }\n}\nfunction paethPredictor(a, b, c) {\n  const p = a + b - c;\n  const pa = Math.abs(p - a);\n  const pb = Math.abs(p - b);\n  const pc = Math.abs(p - c);\n  if (pa <= pb && pa <= pc) return a;else if (pb <= pc) return b;else return c;\n}","map":{"version":3,"names":["unfilterNone","currentLine","newLine","bytesPerLine","i","unfilterSub","bytesPerPixel","unfilterUp","prevLine","length","unfilterAverage","unfilterPaeth","paethPredictor","a","b","c","p","pa","Math","abs","pb","pc"],"sources":["../../src/helpers/unfilter.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}