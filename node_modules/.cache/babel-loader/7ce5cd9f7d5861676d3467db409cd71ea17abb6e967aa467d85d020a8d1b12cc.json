{"ast":null,"code":"import api from './api';\nclass ClientAuthService {\n  // Register client account (Step 1)\n  async registerAccount(accountData) {\n    try {\n      const response = await api.post('/client/auth/register-account', accountData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Complete registration with profile (Step 2)\n  async completeRegistration(accountId, profileData) {\n    try {\n      const response = await api.post(`/client/auth/complete-registration/${accountId}`, profileData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Verify email with OTP\n  async verifyEmail(email, otp) {\n    try {\n      const response = await api.post('/client/auth/verify-email', {\n        email,\n        otp\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Resend verification email\n  async resendVerificationEmail(email) {\n    try {\n      const response = await api.post('/client/auth/resend-verification', {\n        email\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Send SMS OTP\n  async sendSMSOTP(phoneNumber, purpose = 'registration', firstName = '') {\n    try {\n      const response = await api.post('/otp/send-sms', {\n        phoneNumber,\n        purpose,\n        firstName\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Verify SMS OTP\n  async verifySMSOTP(phoneNumber, otp, purpose = 'email_verification') {\n    try {\n      const response = await api.post('/otp/verify-sms', {\n        phoneNumber,\n        otp,\n        purpose\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Resend SMS OTP\n  async resendSMSOTP(phoneNumber, purpose = 'registration', firstName = '') {\n    try {\n      const response = await api.post('/otp/resend-sms', {\n        phoneNumber,\n        purpose,\n        firstName\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Send unified OTP (same code via both email and SMS)\n  async sendUnifiedOTP(email, phoneNumber, purpose = 'registration', firstName = '') {\n    try {\n      const response = await api.post('/otp/send-unified', {\n        email,\n        phoneNumber,\n        purpose,\n        firstName\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Resend unified OTP (same code via both email and SMS)\n  async resendUnifiedOTP(email, phoneNumber, purpose = 'registration', firstName = '') {\n    try {\n      const response = await api.post('/otp/resend-unified', {\n        email,\n        phoneNumber,\n        purpose,\n        firstName\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Send OTP (for backward compatibility)\n  async sendOTP(email, purpose = 'registration', firstName = '') {\n    try {\n      const response = await api.post('/otp/send', {\n        email,\n        purpose,\n        firstName\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Client login\n  async login(credentials) {\n    try {\n      const response = await api.post('/client/auth/login', credentials);\n      if (response.data.success && response.data.data.token) {\n        // Store token and client data using unified auth system\n        localStorage.setItem('auth_token', response.data.data.token);\n        localStorage.setItem('auth_user', JSON.stringify(response.data.data.client));\n\n        // Keep legacy storage for backward compatibility\n        localStorage.setItem('clientToken', response.data.data.token);\n        localStorage.setItem('clientData', JSON.stringify(response.data.data.client));\n      }\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Get client profile\n  async getProfile() {\n    try {\n      const response = await api.get('/client/auth/profile');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Logout\n  logout() {\n    // Clear unified auth tokens\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('auth_user');\n    sessionStorage.removeItem('auth_token');\n    sessionStorage.removeItem('auth_user');\n\n    // Clear legacy tokens\n    localStorage.removeItem('clientToken');\n    localStorage.removeItem('clientData');\n  }\n\n  // Check if client is logged in\n  isLoggedIn() {\n    // Check unified auth token first, then fallback to legacy\n    return !!(localStorage.getItem('auth_token') || localStorage.getItem('clientToken'));\n  }\n\n  // Get stored client data\n  getClientData() {\n    // Try unified auth first, then fallback to legacy\n    let clientData = localStorage.getItem('auth_user') || localStorage.getItem('clientData');\n    return clientData ? JSON.parse(clientData) : null;\n  }\n\n  // Get current user (alias for getClientData for compatibility)\n  getCurrentUser() {\n    return this.getClientData();\n  }\n\n  // Get stored token\n  getToken() {\n    // Try unified auth first, then fallback to legacy\n    return localStorage.getItem('auth_token') || localStorage.getItem('clientToken');\n  }\n\n  // Migrate legacy auth to unified auth\n  migrateLegacyAuth() {\n    const clientToken = localStorage.getItem('clientToken');\n    const clientData = localStorage.getItem('clientData');\n    const authToken = localStorage.getItem('auth_token');\n\n    // If we have legacy auth but no unified auth, migrate it\n    if (clientToken && clientData && !authToken) {\n      console.log('ðŸ”„ Migrating legacy client auth to unified auth system');\n      localStorage.setItem('auth_token', clientToken);\n      localStorage.setItem('auth_user', clientData);\n      console.log('âœ… Migration completed');\n    }\n  }\n\n  // Initialize authentication on app start\n  initializeAuth() {\n    // First, migrate any legacy auth\n    this.migrateLegacyAuth();\n    const token = this.getToken();\n    if (token) {\n      // Set authorization header for API requests\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    }\n  }\n\n  // Verify OTP\n  async verifyOTP(email, otp, purpose = 'registration') {\n    try {\n      const response = await api.post('/otp/verify', {\n        email,\n        otp,\n        purpose\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Resend OTP\n  async resendOTP(email, purpose = 'registration', firstName = '') {\n    try {\n      const response = await api.post('/otp/resend', {\n        email,\n        purpose,\n        firstName\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Handle API errors\n  handleError(error) {\n    if (error.response) {\n      // Server responded with error status\n      const message = error.response.data?.message || 'An error occurred';\n      const errors = error.response.data?.errors || [];\n      return new Error(JSON.stringify({\n        message,\n        errors,\n        status: error.response.status\n      }));\n    } else if (error.request) {\n      // Request was made but no response received\n      return new Error(JSON.stringify({\n        message: 'Network error. Please check your connection.',\n        errors: [],\n        status: 0\n      }));\n    } else {\n      // Something else happened\n      return new Error(JSON.stringify({\n        message: error.message || 'An unexpected error occurred',\n        errors: [],\n        status: 0\n      }));\n    }\n  }\n\n  // Parse error message\n  parseError(error) {\n    try {\n      return JSON.parse(error.message);\n    } catch {\n      return {\n        message: error.message,\n        errors: [],\n        status: 0\n      };\n    }\n  }\n}\nexport default new ClientAuthService();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}