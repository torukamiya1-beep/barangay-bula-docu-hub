{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport AdminHeader from './AdminHeader.vue';\nimport AdminSidebar from './AdminSidebar.vue';\nimport adminDocumentService from '../../services/adminDocumentService';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, ArcElement, LineElement, PointElement } from 'chart.js';\nimport { Bar } from 'vue-chartjs';\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, ArcElement, LineElement, PointElement);\nimport unifiedAuthService from '@/services/unifiedAuthService';\nimport { jsPDF } from 'jspdf';\n// Import jspdf-autotable plugin - v5.x uses named export\nimport autoTable from 'jspdf-autotable';\n\n// Verify autoTable plugin is loaded at module level\nconsole.log('📦 Module loading - jsPDF autoTable check (v5.x):', {\n  jsPDFAvailable: typeof jsPDF !== 'undefined',\n  jsPDFVersion: jsPDF.version || 'unknown',\n  autoTableAvailable: typeof autoTable === 'function',\n  autoTableOnPrototype: jsPDF.prototype && typeof jsPDF.prototype.autoTable === 'function'\n});\nexport default {\n  name: 'AdminReports',\n  components: {\n    AdminHeader,\n    AdminSidebar,\n    Bar\n    //Doughnut\n  },\n  data() {\n    return {\n      // UI State\n      sidebarCollapsed: false,\n      showUserDropdown: false,\n      isMobile: false,\n      adminData: null,\n      // Component Data\n      loading: false,\n      analyticsData: null,\n      selectedPeriod: 'month',\n      reportFilters: {\n        reportType: 'daily',\n        date_from: '',\n        date_to: '',\n        format: 'json'\n      },\n      chartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: 'top'\n          },\n          title: {\n            display: true,\n            text: 'Document Request Analytics'\n          }\n        }\n      },\n      // PDF Export Form (copied from RequestHistory.vue)\n      pdfExportForm: {\n        reportType: 'daily',\n        selectedDate: '',\n        selectedWeek: '',\n        selectedMonth: '',\n        loading: false\n      }\n    };\n  },\n  computed: {\n    activeMenu() {\n      const path = this.$route.path;\n      if (path.includes('/admin/users')) return 'users';\n      if (path.includes('/admin/requests')) return 'requests';\n      if (path.includes('/admin/reports')) return 'reports';\n      if (path.includes('/admin/settings')) return 'settings';\n      if (path.includes('/admin/activity-logs')) return 'activity';\n      if (path.includes('/admin/profile')) return 'profile';\n      return 'dashboard';\n    },\n    trendsChartData() {\n      if (!this.analyticsData?.trends) return null;\n      return {\n        labels: this.analyticsData.trends.map(item => item.period),\n        datasets: [{\n          label: 'Completed Requests',\n          backgroundColor: '#28a745',\n          data: this.analyticsData.trends.map(item => item.completed_requests)\n        }, {\n          label: 'Rejected Requests',\n          backgroundColor: '#dc3545',\n          data: this.analyticsData.trends.map(item => item.rejected_requests)\n        }, {\n          label: 'Cancelled Requests',\n          backgroundColor: '#6c757d',\n          data: this.analyticsData.trends.map(item => item.cancelled_requests || 0)\n        }]\n      };\n    },\n    documentTypesChartData() {\n      if (!this.analyticsData?.documentTypes) return null;\n      return {\n        labels: this.analyticsData.documentTypes.map(item => item.type_name),\n        datasets: [{\n          data: this.analyticsData.documentTypes.map(item => item.request_count),\n          backgroundColor: ['#007bff', '#28a745', '#ffc107', '#dc3545', '#6f42c1', '#fd7e14']\n        }]\n      };\n    },\n    statusDistributionChartData() {\n      if (!this.analyticsData?.statusDistribution) return null;\n      return {\n        labels: this.analyticsData.statusDistribution.map(item => item.status_name),\n        datasets: [{\n          data: this.analyticsData.statusDistribution.map(item => item.percentage),\n          backgroundColor: ['#ffc107',\n          // Pending\n          '#17a2b8',\n          // Under Review\n          '#007bff',\n          // Processing\n          '#28a745',\n          // Completed\n          '#dc3545',\n          // Rejected\n          '#6c757d',\n          // Cancelled\n          '#fd7e14',\n          // Ready for Pickup\n          '#20c997',\n          // Additional Info Required\n          '#e83e8c' // Other\n          ]\n        }]\n      };\n    },\n    revenueChartData() {\n      if (!this.analyticsData?.trends) return null;\n      return {\n        labels: this.analyticsData.trends.map(item => item.period),\n        datasets: [{\n          label: 'Revenue (₱)',\n          borderColor: '#28a745',\n          backgroundColor: 'rgba(40, 167, 69, 0.1)',\n          data: this.analyticsData.trends.map(item => parseFloat(item.total_revenue || 0))\n        }]\n      };\n    }\n  },\n  async mounted() {\n    // Check authentication\n    if (!unifiedAuthService.isLoggedIn() || unifiedAuthService.getUserType() !== 'admin') {\n      this.$router.push('/login');\n      return;\n    }\n\n    // Ensure jsPDF autoTable plugin is available\n    this.ensureAutoTablePlugin();\n\n    // Initialize UI state\n    this.initializeUI();\n\n    // Load component data\n    await this.loadAdminProfile();\n    await this.loadAnalyticsData();\n    this.setDefaultDateRange();\n\n    // Initialize PDF export form with default values\n    this.initializePDFExportForm();\n  },\n  beforeUnmount() {\n    if (this.handleResize) {\n      window.removeEventListener('resize', this.handleResize);\n    }\n  },\n  methods: {\n    // Initialize UI state\n    initializeUI() {\n      this.isMobile = window.innerWidth <= 768;\n      if (!this.isMobile) {\n        const saved = localStorage.getItem('adminSidebarCollapsed');\n        this.sidebarCollapsed = saved ? JSON.parse(saved) : false;\n      } else {\n        this.sidebarCollapsed = true;\n      }\n      this.handleResize = () => {\n        const wasMobile = this.isMobile;\n        this.isMobile = window.innerWidth <= 768;\n        if (this.isMobile && !wasMobile) {\n          this.sidebarCollapsed = true;\n        } else if (!this.isMobile && wasMobile) {\n          const saved = localStorage.getItem('adminSidebarCollapsed');\n          this.sidebarCollapsed = saved ? JSON.parse(saved) : false;\n        }\n      };\n      window.addEventListener('resize', this.handleResize);\n    },\n    handleSidebarToggle() {\n      this.sidebarCollapsed = !this.sidebarCollapsed;\n      localStorage.setItem('adminSidebarCollapsed', JSON.stringify(this.sidebarCollapsed));\n    },\n    handleMenuChange(menu) {\n      const routes = {\n        'dashboard': '/admin/dashboard',\n        'users': '/admin/users',\n        'requests': '/admin/requests',\n        'reports': '/admin/reports',\n        'settings': '/admin/settings',\n        'activity': '/admin/activity-logs',\n        'profile': '/admin/profile'\n      };\n      if (this.isMobile) {\n        this.sidebarCollapsed = true;\n      }\n      if (routes[menu]) {\n        this.$router.push(routes[menu]);\n      }\n    },\n    handleUserDropdownToggle() {\n      this.showUserDropdown = !this.showUserDropdown;\n    },\n    handleMenuAction(action) {\n      if (action === 'profile') {\n        this.$router.push('/admin/profile');\n      } else if (action === 'settings') {\n        this.$router.push('/admin/settings');\n      }\n      this.showUserDropdown = false;\n    },\n    closeMobileSidebar() {\n      if (this.isMobile) {\n        this.sidebarCollapsed = true;\n      }\n    },\n    handleLogout() {\n      unifiedAuthService.logout();\n      this.$router.push('/login');\n    },\n    async loadAdminProfile() {\n      try {\n        const user = unifiedAuthService.getCurrentUser();\n        if (user && user.profile) {\n          this.adminData = user.profile;\n        } else {\n          this.adminData = {\n            first_name: user?.username || 'Admin',\n            role: user?.role || 'admin'\n          };\n        }\n      } catch (error) {\n        console.error('Failed to load admin profile:', error);\n        const user = unifiedAuthService.getCurrentUser();\n        this.adminData = {\n          first_name: user?.username || 'Admin',\n          role: user?.role || 'admin'\n        };\n      }\n    },\n    setDefaultDateRange() {\n      const today = new Date();\n      const lastMonth = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());\n      this.reportFilters.date_to = today.toISOString().split('T')[0];\n      this.reportFilters.date_from = lastMonth.toISOString().split('T')[0];\n    },\n    async loadAnalyticsData() {\n      try {\n        this.loading = true;\n        const response = await adminDocumentService.getAnalyticsData(this.selectedPeriod);\n        this.analyticsData = response.data;\n      } catch (error) {\n        console.error('Failed to load analytics data:', error);\n        this.$toast.error('Failed to load analytics data');\n      } finally {\n        this.loading = false;\n      }\n    },\n    async onPeriodChange() {\n      await this.loadAnalyticsData();\n    },\n    async generateReport() {\n      try {\n        this.loading = true;\n        const response = await adminDocumentService.generateReport(this.reportFilters.reportType, this.reportFilters);\n        if (this.reportFilters.format === 'csv') {\n          // CSV download is handled by the service\n          this.$toast.success('Report downloaded successfully');\n        } else {\n          // Display JSON data (could open in modal or new tab)\n          console.log('Report data:', response.data);\n          this.$toast.success('Report generated successfully');\n        }\n      } catch (error) {\n        console.error('Failed to generate report:', error);\n        this.$toast.error('Failed to generate report');\n      } finally {\n        this.loading = false;\n      }\n    },\n    async downloadReport() {\n      try {\n        this.loading = true;\n        await adminDocumentService.downloadReport(this.reportFilters.reportType, this.reportFilters);\n        this.$toast.success('Report downloaded successfully');\n      } catch (error) {\n        console.error('Failed to download report:', error);\n        this.$toast.error('Failed to download report');\n      } finally {\n        this.loading = false;\n      }\n    },\n    // PDF Export functionality (copied from RequestHistory.vue)\n    async exportToPDF() {\n      if (!this.isPDFExportValid()) {\n        this.$toast.error('Please select a valid date range for the report');\n        return;\n      }\n      try {\n        this.pdfExportForm.loading = true;\n\n        // Get filtered data based on report type\n        const reportData = await this.getReportData();\n        if (!reportData || !Array.isArray(reportData) || reportData.length === 0) {\n          this.$toast.warning('No data found for the selected date range');\n          return;\n        }\n\n        // Generate PDF\n        const pdf = new jsPDF();\n\n        // Debug: Check autoTable availability\n        console.log('🔧 PDF Debug Info:', {\n          autoTableAvailable: typeof autoTable === 'function',\n          reportDataLength: reportData.length,\n          sampleData: reportData.length > 0 ? reportData[0] : null\n        });\n\n        // Verify autoTable is available\n        if (typeof autoTable !== 'function') {\n          console.error('❌ autoTable function not available!');\n\n          // Safe toast notification with fallback\n          if (this.$toast && this.$toast.error) {\n            this.$toast.error('PDF table plugin failed to load. Please refresh the page.');\n          } else {\n            alert('PDF table plugin failed to load. Please refresh the page.');\n          }\n          return;\n        }\n        console.log('✅ autoTable function is available');\n        this.generatePDFReport(pdf, reportData);\n\n        // Download PDF\n        const filename = this.getPDFFilename();\n        pdf.save(filename);\n\n        // Check if toast is available before using it\n        if (this.$toast && this.$toast.success) {\n          this.$toast.success('PDF report generated successfully');\n        } else {\n          console.log('✅ PDF report generated successfully');\n        }\n      } catch (error) {\n        console.error('Failed to generate PDF report:', error);\n\n        // Safe toast notification with fallback\n        if (this.$toast && this.$toast.error) {\n          this.$toast.error('Failed to generate PDF report');\n        } else {\n          alert('Failed to generate PDF report. Check console for details.');\n        }\n      } finally {\n        this.pdfExportForm.loading = false;\n      }\n    },\n    // Get client requests data for the selected period\n    async getClientRequestsData() {\n      try {\n        // Calculate date range based on selected period\n        const dateRange = this.getDateRangeForPeriod();\n        const response = await adminDocumentService.getAllRequests({\n          date_from: dateRange.from,\n          date_to: dateRange.to,\n          page: 1,\n          limit: 1000 // Get all data for the report\n        });\n        if (response.success && response.data.requests) {\n          return response.data.requests;\n        }\n        return [];\n      } catch (error) {\n        console.error('Failed to fetch client requests data:', error);\n        return [];\n      }\n    },\n    // Get date range based on selected period\n    getDateRangeForPeriod() {\n      const today = new Date();\n      let fromDate;\n      switch (this.selectedPeriod) {\n        case 'day':\n          fromDate = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000); // Last 30 days\n          break;\n        case 'week':\n          fromDate = new Date(today.getTime() - 12 * 7 * 24 * 60 * 60 * 1000); // Last 12 weeks\n          break;\n        case 'month':\n        default:\n          fromDate = new Date(today.getTime() - 12 * 30 * 24 * 60 * 60 * 1000); // Last 12 months\n          break;\n      }\n      return {\n        from: fromDate.toISOString().split('T')[0],\n        to: today.toISOString().split('T')[0]\n      };\n    },\n    // Generate PDF content for analytics report\n    generateAnalyticsPDF(pdf, clientRequestsData = []) {\n      // Document Header\n      pdf.setFontSize(20);\n      pdf.setFont('helvetica', 'bold');\n      pdf.setTextColor(44, 62, 80);\n      pdf.text('BARANGAY ANALYTICS REPORT', 105, 25, {\n        align: 'center'\n      });\n\n      // Decorative line\n      pdf.setDrawColor(52, 152, 219);\n      pdf.setLineWidth(1);\n      pdf.line(20, 30, 190, 30);\n\n      // Report metadata\n      pdf.setFontSize(12);\n      pdf.setFont('helvetica', 'normal');\n      pdf.setTextColor(0, 0, 0);\n      const periodText = this.selectedPeriod.charAt(0).toUpperCase() + this.selectedPeriod.slice(1);\n      const generatedDate = new Date().toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n      pdf.text(`Report Period: ${periodText}`, 20, 45);\n      pdf.text(`Generated: ${generatedDate}`, 20, 55);\n      let yPosition = 75;\n\n      // Request Trends Section\n      if (this.analyticsData.trends && this.analyticsData.trends.length > 0) {\n        pdf.setFontSize(16);\n        pdf.setFont('helvetica', 'bold');\n        pdf.setTextColor(52, 152, 219);\n        pdf.text('REQUEST TRENDS', 20, yPosition);\n        yPosition += 15;\n\n        // Prepare trends data for table\n        const trendsHeaders = ['Period', 'Total Requests', 'Completed', 'Pending', 'Revenue (₱)'];\n        const trendsData = this.analyticsData.trends.map(trend => [trend.period || 'N/A', trend.total_requests || '0', trend.completed_requests || '0', trend.pending_requests || '0', this.formatCurrency(trend.total_revenue || 0)]);\n\n        // Add trends table\n        pdf.autoTable({\n          head: [trendsHeaders],\n          body: trendsData,\n          startY: yPosition,\n          theme: 'grid',\n          headStyles: {\n            fillColor: [52, 152, 219],\n            textColor: 255,\n            fontStyle: 'bold'\n          },\n          styles: {\n            fontSize: 10,\n            cellPadding: 4\n          },\n          columnStyles: {\n            0: {\n              cellWidth: 40\n            },\n            1: {\n              cellWidth: 30,\n              halign: 'center'\n            },\n            2: {\n              cellWidth: 30,\n              halign: 'center'\n            },\n            3: {\n              cellWidth: 30,\n              halign: 'center'\n            },\n            4: {\n              cellWidth: 40,\n              halign: 'right'\n            }\n          }\n        });\n        yPosition = pdf.lastAutoTable.finalY + 20;\n      }\n\n      // Status Distribution Section\n      if (this.analyticsData.statusDistribution && this.analyticsData.statusDistribution.length > 0) {\n        // Check if we need a new page\n        if (yPosition > 200) {\n          pdf.addPage();\n          yPosition = 20;\n        }\n        pdf.setFontSize(16);\n        pdf.setFont('helvetica', 'bold');\n        pdf.setTextColor(52, 152, 219);\n        pdf.text('STATUS DISTRIBUTION', 20, yPosition);\n        yPosition += 15;\n\n        // Prepare status distribution data for table\n        const statusHeaders = ['Status', 'Count', 'Percentage'];\n        const totalRequests = this.analyticsData.statusDistribution.reduce((sum, status) => sum + (parseInt(status.count) || 0), 0);\n        const statusData = this.analyticsData.statusDistribution.map(status => {\n          const count = parseInt(status.count) || 0;\n          const percentage = totalRequests > 0 ? (count / totalRequests * 100).toFixed(1) + '%' : '0%';\n          return [status.status_name || 'Unknown', count.toString(), percentage];\n        });\n\n        // Add status distribution table\n        pdf.autoTable({\n          head: [statusHeaders],\n          body: statusData,\n          startY: yPosition,\n          theme: 'grid',\n          headStyles: {\n            fillColor: [52, 152, 219],\n            textColor: 255,\n            fontStyle: 'bold'\n          },\n          styles: {\n            fontSize: 10,\n            cellPadding: 4\n          },\n          columnStyles: {\n            0: {\n              cellWidth: 80\n            },\n            1: {\n              cellWidth: 40,\n              halign: 'center'\n            },\n            2: {\n              cellWidth: 40,\n              halign: 'center'\n            }\n          }\n        });\n        yPosition = pdf.lastAutoTable.finalY + 20;\n      }\n\n      // Top Clients Section\n      if (this.analyticsData.topClients && this.analyticsData.topClients.length > 0) {\n        // Check if we need a new page\n        if (yPosition > 200) {\n          pdf.addPage();\n          yPosition = 20;\n        }\n        pdf.setFontSize(16);\n        pdf.setFont('helvetica', 'bold');\n        pdf.setTextColor(52, 152, 219);\n        pdf.text('TOP CLIENTS', 20, yPosition);\n        yPosition += 15;\n\n        // Prepare top clients data for table\n        const clientsHeaders = ['Client Name', 'Email', 'Total Requests', 'Total Spent (₱)'];\n        const clientsData = this.analyticsData.topClients.map(client => [client.client_name || 'N/A', client.email || 'N/A', client.request_count || '0', this.formatCurrency(client.total_spent || 0)]);\n\n        // Add top clients table\n        pdf.autoTable({\n          head: [clientsHeaders],\n          body: clientsData,\n          startY: yPosition,\n          theme: 'grid',\n          headStyles: {\n            fillColor: [52, 152, 219],\n            textColor: 255,\n            fontStyle: 'bold'\n          },\n          styles: {\n            fontSize: 10,\n            cellPadding: 4\n          },\n          columnStyles: {\n            0: {\n              cellWidth: 60\n            },\n            1: {\n              cellWidth: 60\n            },\n            2: {\n              cellWidth: 30,\n              halign: 'center'\n            },\n            3: {\n              cellWidth: 40,\n              halign: 'right'\n            }\n          }\n        });\n      }\n\n      // Client Requests Section\n      if (clientRequestsData && clientRequestsData.length > 0) {\n        // Check if we need a new page\n        if (yPosition > 150) {\n          pdf.addPage();\n          yPosition = 20;\n        }\n        pdf.setFontSize(16);\n        pdf.setFont('helvetica', 'bold');\n        pdf.setTextColor(52, 152, 219);\n        pdf.text('CLIENT REQUESTS', 20, yPosition);\n        yPosition += 15;\n\n        // Prepare client requests data for table\n        const requestsHeaders = ['Request #', 'Client Name', 'Document Type', 'Status', 'Amount (₱)', 'Date'];\n        const requestsData = clientRequestsData.slice(0, 50).map(request => [\n        // Limit to 50 requests to avoid huge PDFs\n        request.request_number || 'N/A', this.getClientFullName(request) || 'N/A', request.document_type || 'N/A', this.formatStatus(request.status_name) || 'N/A', this.formatCurrency(request.total_document_fee || request.total_fee || 0), this.formatDate(request.requested_at) || 'N/A']);\n\n        // Add client requests table\n        pdf.autoTable({\n          head: [requestsHeaders],\n          body: requestsData,\n          startY: yPosition,\n          theme: 'grid',\n          headStyles: {\n            fillColor: [52, 152, 219],\n            textColor: 255,\n            fontStyle: 'bold'\n          },\n          styles: {\n            fontSize: 9,\n            cellPadding: 3\n          },\n          columnStyles: {\n            0: {\n              cellWidth: 25\n            },\n            1: {\n              cellWidth: 40\n            },\n            2: {\n              cellWidth: 35\n            },\n            3: {\n              cellWidth: 25\n            },\n            4: {\n              cellWidth: 25,\n              halign: 'right'\n            },\n            5: {\n              cellWidth: 25,\n              halign: 'center'\n            }\n          }\n        });\n\n        // Add note if there are more requests\n        if (clientRequestsData.length > 50) {\n          const finalY = pdf.lastAutoTable.finalY + 10;\n          pdf.setFontSize(10);\n          pdf.setFont('helvetica', 'italic');\n          pdf.setTextColor(100, 100, 100);\n          pdf.text(`Note: Showing first 50 of ${clientRequestsData.length} total requests for this period.`, 20, finalY);\n        }\n      }\n\n      // Add footer\n      this.addAnalyticsPDFFooter(pdf);\n    },\n    // Add professional footer to analytics PDF\n    addAnalyticsPDFFooter(pdf) {\n      const pageCount = pdf.internal.getNumberOfPages();\n      for (let i = 1; i <= pageCount; i++) {\n        pdf.setPage(i);\n\n        // Footer line\n        pdf.setDrawColor(200, 200, 200);\n        pdf.setLineWidth(0.5);\n        pdf.line(20, 280, 190, 280);\n\n        // Footer text\n        pdf.setFontSize(9);\n        pdf.setFont('helvetica', 'normal');\n        pdf.setTextColor(100, 100, 100);\n\n        // Left side - Generated info\n        const generatedDate = new Date().toLocaleDateString('en-US', {\n          year: 'numeric',\n          month: 'long',\n          day: 'numeric',\n          hour: '2-digit',\n          minute: '2-digit'\n        });\n        pdf.text(`Generated on: ${generatedDate}`, 20, 285);\n\n        // Right side - Page number\n        pdf.text(`Page ${i} of ${pageCount}`, 190, 285, {\n          align: 'right'\n        });\n      }\n    },\n    // Format currency for display\n    formatCurrency(amount) {\n      const numAmount = parseFloat(amount) || 0;\n      return `₱${numAmount.toLocaleString('en-US', {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n      })}`;\n    },\n    // Helper methods for formatting data in PDF\n    getClientFullName(request) {\n      if (request.client_name) return request.client_name;\n      const firstName = request.client_first_name || request.first_name || '';\n      const lastName = request.client_last_name || request.last_name || '';\n      return `${firstName} ${lastName}`.trim() || 'N/A';\n    },\n    formatStatus(status) {\n      if (!status) return 'N/A';\n\n      // Capitalize first letter of each word\n      return status.toLowerCase().replace(/\\b\\w/g, l => l.toUpperCase());\n    },\n    formatDate(dateString) {\n      if (!dateString) return 'N/A';\n      try {\n        const date = new Date(dateString);\n        return date.toLocaleDateString('en-US', {\n          year: 'numeric',\n          month: 'short',\n          day: 'numeric'\n        });\n      } catch (error) {\n        return 'N/A';\n      }\n    },\n    // Generate PDF report content (copied from RequestHistory.vue)\n    generatePDFReport(pdf, data) {\n      const dateRange = this.getDateRangeForReport();\n\n      // Document Header with improved styling\n      pdf.setFontSize(24);\n      pdf.setFont('helvetica', 'bold');\n      pdf.setTextColor(44, 62, 80);\n      pdf.text('BARANGAY BULA', 105, 25, {\n        align: 'center'\n      });\n      pdf.setFontSize(18);\n      pdf.setTextColor(52, 152, 219);\n      pdf.text('DOCUMENT MANAGEMENT SYSTEM', 105, 35, {\n        align: 'center'\n      });\n\n      // Decorative line\n      pdf.setDrawColor(52, 152, 219);\n      pdf.setLineWidth(1);\n      pdf.line(20, 40, 190, 40);\n\n      // Report title\n      pdf.setFontSize(16);\n      pdf.setFont('helvetica', 'bold');\n      pdf.setTextColor(44, 62, 80);\n      const reportTitle = this.getReportTitle();\n      pdf.text(reportTitle, 20, 55);\n\n      // Date range with improved formatting\n      pdf.setFontSize(11);\n      pdf.setFont('helvetica', 'normal');\n      const dateRangeText = this.getDateRangeText(dateRange);\n      pdf.text(`Report Period: ${dateRangeText}`, 20, 65);\n\n      // Generated date\n      const generatedDate = new Date().toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n      pdf.text(`Generated on: ${generatedDate}`, 20, 75);\n\n      // Summary statistics\n      const stats = this.calculateReportStats(data);\n      pdf.setFontSize(12);\n      pdf.setFont('helvetica', 'bold');\n      pdf.text('REPORT SUMMARY', 20, 90);\n      pdf.setFontSize(10);\n      pdf.setFont('helvetica', 'normal');\n      pdf.text(`Total Requests: ${stats.total}`, 20, 100);\n      pdf.text(`Completed: ${stats.completed}`, 20, 110);\n      pdf.text(`Pending: ${stats.pending}`, 20, 120);\n      pdf.text(`Rejected: ${stats.rejected}`, 20, 130);\n      pdf.text(`Total Revenue: ${this.formatCurrencyForPDF(stats.totalRevenue)}`, 20, 140);\n\n      // Requests table\n      if (data && data.length > 0) {\n        const tableData = data.slice(0, 100).map(request => [request.request_number || 'N/A', this.getClientFullName(request) || 'N/A', this.getBeneficiaryName(request) || 'N/A', this.getPickupPersonName(request) || 'N/A', request.document_type || 'N/A', this.formatStatus(request.status_name) || 'N/A', this.formatCurrencyForPDF(request.total_document_fee || request.total_fee || 0), this.formatDate(request.requested_at) || 'N/A']);\n\n        // Use autoTable function (v5.x syntax)\n        try {\n          console.log('🔧 Calling autoTable function');\n          autoTable(pdf, {\n            head: [['Request #', 'Client Name', 'Beneficiary', 'Pickup Person', 'Document Type', 'Status', 'Amount', 'Date']],\n            body: tableData,\n            startY: 155,\n            theme: 'grid',\n            headStyles: {\n              fillColor: [52, 152, 219],\n              textColor: 255,\n              fontStyle: 'bold',\n              fontSize: 8\n            },\n            styles: {\n              fontSize: 7,\n              cellPadding: 3,\n              overflow: 'linebreak',\n              cellWidth: 'wrap'\n            },\n            columnStyles: {\n              0: {\n                cellWidth: 20\n              },\n              // Request #\n              1: {\n                cellWidth: 25,\n                overflow: 'linebreak'\n              },\n              // Client Name (wrappable)\n              2: {\n                cellWidth: 25,\n                overflow: 'linebreak'\n              },\n              // Beneficiary (wrappable)\n              3: {\n                cellWidth: 22,\n                overflow: 'linebreak'\n              },\n              // Pickup Person (wrappable)\n              4: {\n                cellWidth: 22\n              },\n              // Document Type\n              5: {\n                cellWidth: 18\n              },\n              // Status\n              6: {\n                cellWidth: 20,\n                halign: 'right'\n              },\n              // Amount\n              7: {\n                cellWidth: 18,\n                halign: 'center'\n              } // Date\n            }\n          });\n          console.log('✅ AutoTable completed successfully');\n        } catch (autoTableError) {\n          console.error('❌ AutoTable call failed:', autoTableError);\n          throw new Error(`AutoTable failed: ${autoTableError.message}`);\n        }\n      }\n\n      // Add footer\n      this.addAnalyticsPDFFooter(pdf);\n    },\n    // Calculate report statistics (copied from RequestHistory.vue)\n    calculateReportStats(data) {\n      if (!data || !Array.isArray(data) || data.length === 0) {\n        return {\n          total: 0,\n          completed: 0,\n          pending: 0,\n          rejected: 0,\n          totalRevenue: 0\n        };\n      }\n      const stats = {\n        total: data.length,\n        completed: 0,\n        pending: 0,\n        rejected: 0,\n        totalRevenue: 0\n      };\n      data.forEach(request => {\n        const status = (request.status_name || '').toLowerCase();\n\n        // Calculate total revenue for ALL requests in the report (not just completed)\n        const fee = parseFloat(request.total_document_fee || request.total_fee || 0);\n        stats.totalRevenue += fee;\n\n        // Count status categories\n        if (status === 'completed') {\n          stats.completed++;\n        } else if (status === 'rejected' || status === 'cancelled') {\n          stats.rejected++;\n        } else {\n          stats.pending++;\n        }\n      });\n      return stats;\n    },\n    formatCurrencyForPDF(amount) {\n      const numAmount = parseFloat(amount) || 0;\n      return `PHP ${numAmount.toLocaleString('en-US', {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n      })}`;\n    },\n    // Get beneficiary name for third-party requests\n    getBeneficiaryName(request) {\n      console.log('🔍 getBeneficiaryName called with:', {\n        is_third_party_request: request.is_third_party_request,\n        beneficiary_name: request.beneficiary_name,\n        beneficiary: request.beneficiary\n      });\n      if (!request.is_third_party_request) {\n        return 'Self';\n      }\n\n      // Try different possible field names for beneficiary\n      if (request.beneficiary_name) {\n        return request.beneficiary_name;\n      }\n      if (request.beneficiary && request.beneficiary.full_name) {\n        return request.beneficiary.full_name;\n      }\n      if (request.beneficiary) {\n        const firstName = request.beneficiary.first_name || '';\n        const lastName = request.beneficiary.last_name || '';\n        const fullName = `${firstName} ${lastName}`.trim();\n        if (fullName) return fullName;\n      }\n      return 'N/A';\n    },\n    // Get pickup person name\n    getPickupPersonName(request) {\n      console.log('🔍 getPickupPersonName called with:', {\n        pickup_person_name: request.pickup_person_name,\n        authorized_pickup: request.authorized_pickup\n      });\n\n      // Check for pickup person name field\n      if (request.pickup_person_name) {\n        return request.pickup_person_name;\n      }\n\n      // Check for authorized pickup object\n      if (request.authorized_pickup && request.authorized_pickup.full_name) {\n        return request.authorized_pickup.full_name;\n      }\n\n      // Default to client pickup\n      return 'Client';\n    },\n    // Ensure jsPDF autoTable plugin is available (v5.x uses function export)\n    ensureAutoTablePlugin() {\n      try {\n        if (typeof autoTable === 'function') {\n          console.log('✅ jsPDF autoTable function is available (v5.x)');\n          return true;\n        } else {\n          console.error('❌ autoTable function not available');\n          return false;\n        }\n      } catch (error) {\n        console.error('❌ Error checking autoTable plugin:', error);\n        return false;\n      }\n    },\n    // Initialize PDF export form with default values (copied from RequestHistory.vue)\n    initializePDFExportForm() {\n      // Set default date to today\n      this.pdfExportForm.selectedDate = this.getCurrentDate();\n\n      // Set default week to current week\n      this.pdfExportForm.selectedWeek = this.getCurrentWeek();\n\n      // Set default month to current month\n      this.pdfExportForm.selectedMonth = this.getCurrentMonth();\n    },\n    // Get report data based on selected filters (copied from RequestHistory.vue)\n    async getReportData() {\n      const reportFilters = {\n        status: '',\n        // Get all statuses\n        document_type: '',\n        priority: '',\n        search: ''\n      };\n\n      // Set date range based on report type\n      const dateRange = this.getDateRangeForReport();\n      reportFilters.date_from = dateRange.from;\n      reportFilters.date_to = dateRange.to;\n      try {\n        console.log('📊 Fetching report data with filters:', reportFilters);\n        console.log('📊 Date range details:', {\n          reportType: this.pdfExportForm.reportType,\n          selectedDate: this.pdfExportForm.selectedDate,\n          selectedWeek: this.pdfExportForm.selectedWeek,\n          selectedMonth: this.pdfExportForm.selectedMonth,\n          calculatedRange: dateRange\n        });\n        const response = await adminDocumentService.getAllRequests({\n          ...reportFilters,\n          page: 1,\n          limit: 1000 // Get all data for the report\n        });\n        if (response.success && response.data && response.data.requests) {\n          console.log(`📊 Retrieved ${response.data.requests.length} requests for report`);\n\n          // Debug: Log sample request data to check fields\n          if (response.data.requests.length > 0) {\n            console.log('📊 Sample request data:', response.data.requests[0]);\n            console.log('📊 Available fields:', Object.keys(response.data.requests[0]));\n            console.log('📊 Beneficiary fields check:', {\n              is_third_party_request: response.data.requests[0].is_third_party_request,\n              beneficiary_name: response.data.requests[0].beneficiary_name,\n              pickup_person_name: response.data.requests[0].pickup_person_name\n            });\n          }\n          return response.data.requests;\n        } else {\n          console.warn('📊 No data returned from API');\n          return [];\n        }\n      } catch (error) {\n        console.error('📊 Failed to fetch report data:', error);\n        throw error;\n      }\n    },\n    // Get date range based on report type and selected values (copied from RequestHistory.vue)\n    getDateRangeForReport() {\n      const {\n        reportType,\n        selectedDate,\n        selectedWeek,\n        selectedMonth\n      } = this.pdfExportForm;\n      switch (reportType) {\n        case 'daily':\n          return {\n            from: selectedDate,\n            to: selectedDate\n          };\n        case 'weekly':\n          if (selectedWeek) {\n            const [year, week] = selectedWeek.split('-W');\n            const startDate = this.getDateFromWeek(parseInt(year), parseInt(week));\n            const endDate = new Date(startDate);\n            endDate.setDate(startDate.getDate() + 6);\n            return {\n              from: startDate.toISOString().split('T')[0],\n              to: endDate.toISOString().split('T')[0]\n            };\n          }\n          break;\n        case 'monthly':\n          if (selectedMonth) {\n            const [year, month] = selectedMonth.split('-');\n            const startDate = new Date(parseInt(year), parseInt(month) - 1, 1);\n            const endDate = new Date(parseInt(year), parseInt(month), 0);\n            return {\n              from: startDate.toISOString().split('T')[0],\n              to: endDate.toISOString().split('T')[0]\n            };\n          }\n          break;\n      }\n\n      // Fallback to today\n      const today = new Date().toISOString().split('T')[0];\n      return {\n        from: today,\n        to: today\n      };\n    },\n    // Helper methods for PDF export (copied from RequestHistory.vue)\n    isPDFExportValid() {\n      const {\n        reportType,\n        selectedDate,\n        selectedWeek,\n        selectedMonth\n      } = this.pdfExportForm;\n      switch (reportType) {\n        case 'daily':\n          return selectedDate !== '';\n        case 'weekly':\n          return selectedWeek !== '';\n        case 'monthly':\n          return selectedMonth !== '';\n        default:\n          return false;\n      }\n    },\n    getPDFFilename() {\n      const {\n        reportType,\n        selectedDate,\n        selectedWeek,\n        selectedMonth\n      } = this.pdfExportForm;\n      const timestamp = new Date().toISOString().split('T')[0];\n      switch (reportType) {\n        case 'daily':\n          return `daily_report_${selectedDate}_${timestamp}.pdf`;\n        case 'weekly':\n          return `weekly_report_${selectedWeek}_${timestamp}.pdf`;\n        case 'monthly':\n          return `monthly_report_${selectedMonth}_${timestamp}.pdf`;\n        default:\n          return `report_${timestamp}.pdf`;\n      }\n    },\n    getReportTitle() {\n      const {\n        reportType\n      } = this.pdfExportForm;\n      switch (reportType) {\n        case 'daily':\n          return 'Daily Document Request Report';\n        case 'weekly':\n          return 'Weekly Document Request Report';\n        case 'monthly':\n          return 'Monthly Document Request Report';\n        default:\n          return 'Document Request Report';\n      }\n    },\n    getDateRangeText(dateRange) {\n      if (dateRange.from === dateRange.to) {\n        return this.formatDate(dateRange.from);\n      }\n      return `${this.formatDate(dateRange.from)} to ${this.formatDate(dateRange.to)}`;\n    },\n    // Helper methods for date handling (copied from RequestHistory.vue)\n    getCurrentDate() {\n      return new Date().toISOString().split('T')[0];\n    },\n    getCurrentWeek() {\n      const now = new Date();\n      const year = now.getFullYear();\n      const week = this.getWeekNumber(now);\n      return `${year}-W${week.toString().padStart(2, '0')}`;\n    },\n    getCurrentMonth() {\n      const now = new Date();\n      const year = now.getFullYear();\n      const month = (now.getMonth() + 1).toString().padStart(2, '0');\n      return `${year}-${month}`;\n    },\n    getWeekNumber(date) {\n      const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n      const dayNum = d.getUTCDay() || 7;\n      d.setUTCDate(d.getUTCDate() + 4 - dayNum);\n      const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));\n      return Math.ceil(((d - yearStart) / 86400000 + 1) / 7);\n    },\n    getDateFromWeek(year, week) {\n      const simple = new Date(year, 0, 1 + (week - 1) * 7);\n      const dow = simple.getDay();\n      const ISOweekStart = simple;\n      if (dow <= 4) {\n        ISOweekStart.setDate(simple.getDate() - simple.getDay() + 1);\n      } else {\n        ISOweekStart.setDate(simple.getDate() + 8 - simple.getDay());\n      }\n      return ISOweekStart;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}