{"ast":null,"code":"export function unfilterNone(currentLine, newLine, bytesPerLine) {\n  for (let i = 0; i < bytesPerLine; i++) {\n    newLine[i] = currentLine[i];\n  }\n}\nexport function unfilterSub(currentLine, newLine, bytesPerLine, bytesPerPixel) {\n  let i = 0;\n  for (; i < bytesPerPixel; i++) {\n    // just copy first bytes\n    newLine[i] = currentLine[i];\n  }\n  for (; i < bytesPerLine; i++) {\n    newLine[i] = currentLine[i] + newLine[i - bytesPerPixel] & 0xff;\n  }\n}\nexport function unfilterUp(currentLine, newLine, prevLine, bytesPerLine) {\n  let i = 0;\n  if (prevLine.length === 0) {\n    // just copy bytes for first line\n    for (; i < bytesPerLine; i++) {\n      newLine[i] = currentLine[i];\n    }\n  } else {\n    for (; i < bytesPerLine; i++) {\n      newLine[i] = currentLine[i] + prevLine[i] & 0xff;\n    }\n  }\n}\nexport function unfilterAverage(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel) {\n  let i = 0;\n  if (prevLine.length === 0) {\n    for (; i < bytesPerPixel; i++) {\n      newLine[i] = currentLine[i];\n    }\n    for (; i < bytesPerLine; i++) {\n      newLine[i] = currentLine[i] + (newLine[i - bytesPerPixel] >> 1) & 0xff;\n    }\n  } else {\n    for (; i < bytesPerPixel; i++) {\n      newLine[i] = currentLine[i] + (prevLine[i] >> 1) & 0xff;\n    }\n    for (; i < bytesPerLine; i++) {\n      newLine[i] = currentLine[i] + (newLine[i - bytesPerPixel] + prevLine[i] >> 1) & 0xff;\n    }\n  }\n}\nexport function unfilterPaeth(currentLine, newLine, prevLine, bytesPerLine, bytesPerPixel) {\n  let i = 0;\n  if (prevLine.length === 0) {\n    for (; i < bytesPerPixel; i++) {\n      newLine[i] = currentLine[i];\n    }\n    for (; i < bytesPerLine; i++) {\n      newLine[i] = currentLine[i] + newLine[i - bytesPerPixel] & 0xff;\n    }\n  } else {\n    for (; i < bytesPerPixel; i++) {\n      newLine[i] = currentLine[i] + prevLine[i] & 0xff;\n    }\n    for (; i < bytesPerLine; i++) {\n      newLine[i] = currentLine[i] + paethPredictor(newLine[i - bytesPerPixel], prevLine[i], prevLine[i - bytesPerPixel]) & 0xff;\n    }\n  }\n}\nfunction paethPredictor(a, b, c) {\n  const p = a + b - c;\n  const pa = Math.abs(p - a);\n  const pb = Math.abs(p - b);\n  const pc = Math.abs(p - c);\n  if (pa <= pb && pa <= pc) return a;else if (pb <= pc) return b;else return c;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}