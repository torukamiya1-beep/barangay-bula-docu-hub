{"ast":null,"code":"/**\n * User Statistics Composable\n * Manages user statistics and dashboard metrics\n * Implements caching and error handling\n */\n\nimport { reactive, computed } from 'vue';\nimport documentRequestService from '@/services/documentRequestService';\nexport function useUserStats() {\n  // Reactive state\n  const userStats = reactive({\n    totalRequests: 0,\n    pendingRequests: 0,\n    completedRequests: 0,\n    rejectedRequests: 0,\n    totalSpent: 0,\n    averageProcessingTime: 0,\n    isLoading: false,\n    error: null,\n    lastUpdated: null\n  });\n\n  // Computed properties\n  const completionRate = computed(() => {\n    if (userStats.totalRequests === 0) return 0;\n    return Math.round(userStats.completedRequests / userStats.totalRequests * 100);\n  });\n  const pendingRate = computed(() => {\n    if (userStats.totalRequests === 0) return 0;\n    return Math.round(userStats.pendingRequests / userStats.totalRequests * 100);\n  });\n  const rejectionRate = computed(() => {\n    if (userStats.totalRequests === 0) return 0;\n    return Math.round(userStats.rejectedRequests / userStats.totalRequests * 100);\n  });\n  const averageSpentPerRequest = computed(() => {\n    if (userStats.totalRequests === 0) return 0;\n    return userStats.totalSpent / userStats.totalRequests;\n  });\n  const statsCards = computed(() => [{\n    id: 'total',\n    title: 'Total Requests',\n    value: userStats.totalRequests,\n    icon: 'fas fa-file-alt',\n    color: 'blue',\n    trend: null\n  }, {\n    id: 'pending',\n    title: 'Pending',\n    value: userStats.pendingRequests,\n    icon: 'fas fa-clock',\n    color: 'yellow',\n    percentage: pendingRate.value\n  }, {\n    id: 'completed',\n    title: 'Completed',\n    value: userStats.completedRequests,\n    icon: 'fas fa-check-circle',\n    color: 'green',\n    percentage: completionRate.value\n  }, {\n    id: 'spent',\n    title: 'Total Spent',\n    value: `₱${formatCurrency(userStats.totalSpent)}`,\n    icon: 'fas fa-peso-sign',\n    color: 'purple',\n    average: `₱${formatCurrency(averageSpentPerRequest.value)} avg`\n  }]);\n\n  // Methods\n  const loadUserStats = async (forceRefresh = false) => {\n    // Cache for 2 minutes to avoid excessive API calls\n    const twoMinutesAgo = Date.now() - 2 * 60 * 1000;\n    if (!forceRefresh && userStats.lastUpdated && userStats.lastUpdated > twoMinutesAgo) {\n      return;\n    }\n    try {\n      userStats.isLoading = true;\n      userStats.error = null;\n\n      // Try to get real stats from API\n      try {\n        const response = await documentRequestService.getDashboardStats();\n        if (response && response.data) {\n          updateStatsFromAPI(response.data);\n        } else {\n          // Fallback to placeholder data\n          updateStatsWithPlaceholder();\n        }\n      } catch (apiError) {\n        console.warn('API stats not available, using placeholder data:', apiError);\n        updateStatsWithPlaceholder();\n      }\n      userStats.lastUpdated = Date.now();\n    } catch (error) {\n      console.error('Error loading user stats:', error);\n      userStats.error = 'Failed to load statistics';\n      updateStatsWithPlaceholder();\n    } finally {\n      userStats.isLoading = false;\n    }\n  };\n  const updateStatsFromAPI = data => {\n    userStats.totalRequests = data.total_requests || 0;\n    userStats.pendingRequests = data.pending_requests || 0;\n    userStats.completedRequests = data.completed_requests || 0;\n    userStats.rejectedRequests = data.rejected_requests || 0;\n    userStats.totalSpent = parseFloat(data.total_spent) || 0;\n    userStats.averageProcessingTime = data.average_processing_time || 0;\n  };\n  const updateStatsWithPlaceholder = () => {\n    // Placeholder data for development/demo\n    userStats.totalRequests = 5;\n    userStats.pendingRequests = 2;\n    userStats.completedRequests = 3;\n    userStats.rejectedRequests = 0;\n    userStats.totalSpent = 450.00;\n    userStats.averageProcessingTime = 3.5;\n  };\n  const refreshStats = () => {\n    return loadUserStats(true);\n  };\n  const resetStats = () => {\n    userStats.totalRequests = 0;\n    userStats.pendingRequests = 0;\n    userStats.completedRequests = 0;\n    userStats.rejectedRequests = 0;\n    userStats.totalSpent = 0;\n    userStats.averageProcessingTime = 0;\n    userStats.error = null;\n    userStats.lastUpdated = null;\n  };\n  const incrementStat = (statName, amount = 1) => {\n    if (Object.prototype.hasOwnProperty.call(userStats, statName)) {\n      userStats[statName] += amount;\n    }\n  };\n  const decrementStat = (statName, amount = 1) => {\n    if (Object.prototype.hasOwnProperty.call(userStats, statName)) {\n      userStats[statName] = Math.max(0, userStats[statName] - amount);\n    }\n  };\n\n  // Utility functions\n  const formatCurrency = amount => {\n    const numAmount = parseFloat(amount) || 0;\n    return numAmount.toFixed(2);\n  };\n  const formatProcessingTime = days => {\n    if (days < 1) return 'Less than 1 day';\n    if (days === 1) return '1 day';\n    return `${Math.round(days)} days`;\n  };\n  const getStatsByDateRange = (startDate, endDate) => {\n    // This would typically make an API call with date filters\n    // For now, return current stats\n    console.log('Getting stats for date range:', startDate, 'to', endDate);\n    return {\n      ...userStats\n    };\n  };\n  const clearError = () => {\n    userStats.error = null;\n  };\n\n  // Return public API\n  return {\n    // State\n    userStats,\n    // Computed\n    completionRate,\n    pendingRate,\n    rejectionRate,\n    averageSpentPerRequest,\n    statsCards,\n    // Methods\n    loadUserStats,\n    refreshStats,\n    resetStats,\n    incrementStat,\n    decrementStat,\n    getStatsByDateRange,\n    clearError,\n    // Utilities\n    formatCurrency,\n    formatProcessingTime\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}