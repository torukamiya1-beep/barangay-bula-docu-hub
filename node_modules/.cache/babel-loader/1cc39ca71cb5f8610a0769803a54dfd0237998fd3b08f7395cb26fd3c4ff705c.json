{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport api from './api';\nclass AdminAuthService {\n  // Register admin account (Step 1)\n  async registerAccount(accountData) {\n    try {\n      const response = await api.post('/admin/auth/register-account', accountData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Complete registration with profile (Step 2)\n  async completeRegistration(accountId, profileData) {\n    try {\n      const response = await api.post(`/admin/auth/complete-registration/${accountId}`, profileData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Verify email with OTP\n  async verifyEmail(email, otp) {\n    try {\n      const response = await api.post('/admin/auth/verify-email', {\n        email,\n        otp\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Resend verification email\n  async resendVerificationEmail(email) {\n    try {\n      const response = await api.post('/admin/auth/resend-verification', {\n        email\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Admin login\n  async login(credentials) {\n    try {\n      const response = await api.post('/admin/auth/login', credentials);\n      if (response.data.success && response.data.data.token) {\n        // Store token and admin data\n        localStorage.setItem('adminToken', response.data.data.token);\n        localStorage.setItem('adminData', JSON.stringify(response.data.data.admin));\n\n        // Note: Authorization header is now handled by API interceptor\n      }\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Get admin profile\n  async getProfile() {\n    try {\n      const response = await api.get('/admin/auth/profile');\n\n      // Update stored admin data\n      if (response.data.success && response.data.data) {\n        localStorage.setItem('adminData', JSON.stringify(response.data.data));\n      }\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Update admin profile\n  async updateProfile(profileData) {\n    try {\n      const response = await api.put('/admin/auth/profile', profileData);\n\n      // Update stored admin data\n      if (response.data.success && response.data.data) {\n        localStorage.setItem('adminData', JSON.stringify(response.data.data));\n      }\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Change password\n  async changePassword(passwordData) {\n    try {\n      const response = await api.put('/admin/auth/change-password', passwordData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Send password reset email\n  async sendPasswordReset(email) {\n    try {\n      const response = await api.post('/admin/auth/forgot-password', {\n        email\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Reset password with token\n  async resetPassword(token, newPassword) {\n    try {\n      const response = await api.post('/admin/auth/reset-password', {\n        token,\n        newPassword\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Get dashboard statistics\n  async getDashboardStats() {\n    try {\n      const response = await api.get('/admin/dashboard/stats');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Get recent activity\n  async getRecentActivity(limit = 10) {\n    try {\n      const response = await api.get(`/admin/dashboard/activity?limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Get notifications\n  async getNotifications(limit = 20) {\n    try {\n      const response = await api.get(`/admin/notifications?limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Mark notification as read\n  async markNotificationAsRead(notificationId) {\n    try {\n      const response = await api.put(`/admin/notifications/${notificationId}/read`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Mark all notifications as read\n  async markAllNotificationsAsRead() {\n    try {\n      const response = await api.put('/admin/notifications/read-all');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Logout\n  async logout() {\n    try {\n      // Call logout endpoint if available\n      await api.post('/admin/auth/logout');\n    } catch (error) {\n      // Continue with local logout even if API call fails\n      console.error('Logout API error:', error);\n    } finally {\n      // Always clear local storage and headers\n      this.clearAuthData();\n    }\n  }\n\n  // Clear authentication data\n  clearAuthData() {\n    localStorage.removeItem('adminToken');\n    localStorage.removeItem('adminData');\n    // Note: Authorization header is now handled by API interceptor\n  }\n\n  // Check if admin is logged in\n  isLoggedIn() {\n    const token = localStorage.getItem('adminToken');\n    return !!token;\n  }\n\n  // Check if admin is authenticated (with token validation)\n  isAuthenticated() {\n    const token = localStorage.getItem('adminToken');\n    const adminData = this.getAdminData();\n    if (!token || !adminData) {\n      return false;\n    }\n    try {\n      // Basic token validation\n      const tokenParts = token.split('.');\n      if (tokenParts.length !== 3) {\n        return false;\n      }\n\n      // Decode payload to check expiration\n      const payload = JSON.parse(atob(tokenParts[1]));\n      const currentTime = Math.floor(Date.now() / 1000);\n      if (payload.exp && payload.exp < currentTime) {\n        // Token expired\n        this.clearAuthData();\n        return false;\n      }\n\n      // Verify token type is admin\n      if (payload.type !== 'admin') {\n        this.clearAuthData();\n        return false;\n      }\n      return true;\n    } catch (error) {\n      console.error('Token validation error:', error);\n      this.clearAuthData();\n      return false;\n    }\n  }\n\n  // Check if admin has specific role\n  hasRole(requiredRole) {\n    const adminData = this.getAdminData();\n    if (!adminData || !this.isAuthenticated()) {\n      return false;\n    }\n\n    // Admin role has access to everything\n    if (adminData.role === 'admin') {\n      return true;\n    }\n\n    // Check specific role\n    return adminData.role === requiredRole;\n  }\n\n  // Check if admin has any of the specified roles\n  hasAnyRole(roles) {\n    if (!Array.isArray(roles)) {\n      return this.hasRole(roles);\n    }\n    return roles.some(role => this.hasRole(role));\n  }\n\n  // Get stored admin data\n  getAdminData() {\n    const adminData = localStorage.getItem('adminData');\n    return adminData ? JSON.parse(adminData) : null;\n  }\n\n  // Get stored token\n  getToken() {\n    return localStorage.getItem('adminToken');\n  }\n\n  // Send OTP for registration or other purposes\n  async sendOTP(email, purpose = 'registration', firstName = '') {\n    try {\n      const response = await api.post('/otp/send', {\n        email,\n        purpose,\n        firstName\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Verify OTP (generic)\n  async verifyOTP(email, otp, purpose = 'registration') {\n    try {\n      const response = await api.post('/otp/verify', {\n        email,\n        otp,\n        purpose\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Resend OTP\n  async resendOTP(email, purpose = 'registration', firstName = '') {\n    try {\n      const response = await api.post('/otp/resend', {\n        email,\n        purpose,\n        firstName\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Initialize authentication on app start\n  initializeAuth() {\n    const token = this.getToken();\n    if (token) {\n      // Note: Authorization header is now handled by API interceptor\n      // Token is automatically included in requests by the interceptor\n    }\n  }\n\n  // Handle API errors\n  handleError(error) {\n    if (error.response) {\n      // Server responded with error status\n      const message = error.response.data?.message || 'An error occurred';\n      const errors = error.response.data?.errors || [];\n      return new Error(JSON.stringify({\n        message,\n        errors,\n        status: error.response.status\n      }));\n    } else if (error.request) {\n      // Request was made but no response received\n      return new Error(JSON.stringify({\n        message: 'Network error. Please check your connection.',\n        errors: [],\n        status: 0\n      }));\n    } else {\n      // Something else happened\n      return new Error(JSON.stringify({\n        message: error.message || 'An unexpected error occurred',\n        errors: [],\n        status: 0\n      }));\n    }\n  }\n\n  // Parse error message\n  parseError(error) {\n    try {\n      return JSON.parse(error.message);\n    } catch {\n      return {\n        message: error.message,\n        errors: [],\n        status: 0\n      };\n    }\n  }\n}\nexport default new AdminAuthService();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}