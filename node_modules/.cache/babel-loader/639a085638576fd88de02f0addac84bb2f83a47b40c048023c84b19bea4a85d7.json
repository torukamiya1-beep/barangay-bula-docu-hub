{"ast":null,"code":"import { reactive, onMounted, onUnmounted } from 'vue';\nimport ClientNotifications from './ClientNotifications.vue';\n// import GovernmentBanner from './components/GovernmentBanner.vue'\nimport SiteLogo from './components/SiteLogo.vue';\n// import MobileMenuToggle from './components/MobileMenuToggle.vue'\nimport MainNavigation from './components/MainNavigation.vue';\n// import HeaderSearch from './components/HeaderSearch.vue'\nimport UserProfileDropdown from './components/UserProfileDropdown.vue';\nimport { useErrorHandler } from '@/composables/useErrorHandler';\nexport default {\n  name: 'ClientHeader',\n  components: {\n    ClientNotifications,\n    // GovernmentBanner,\n    SiteLogo,\n    // MobileMenuToggle,\n    MainNavigation,\n    // HeaderSearch,\n    UserProfileDropdown\n  },\n  props: {\n    userData: {\n      type: Object,\n      default: () => ({\n        userName: 'User',\n        userEmail: 'user@example.com',\n        userAvatar: null,\n        firstName: 'User'\n      })\n    },\n    uiState: {\n      type: Object,\n      default: () => ({\n        showUserDropdown: false,\n        sidebarCollapsed: false,\n        activeMenu: 'dashboard'\n      })\n    },\n    showBreadcrumbs: {\n      type: Boolean,\n      default: true\n    },\n    canRequestDocuments: {\n      type: Boolean,\n      default: true\n    }\n  },\n  emits: ['sidebar-toggle', 'user-dropdown-toggle', 'menu-action', 'logout', 'error', 'search', 'notification-click'],\n  setup(props, {\n    emit\n  }) {\n    const {\n      handleError\n    } = useErrorHandler();\n\n    // Local reactive state\n    const searchState = reactive({\n      isActive: false,\n      query: ''\n    });\n\n    // Methods\n    const toggleSearch = () => {\n      searchState.isActive = !searchState.isActive;\n      if (searchState.isActive) {\n        // Focus search input on next tick\n        setTimeout(() => {\n          const searchInput = document.querySelector('.search-input');\n          if (searchInput) {\n            searchInput.focus();\n          }\n        }, 100);\n      }\n    };\n    const updateSearchQuery = query => {\n      searchState.query = query;\n    };\n    const performSearch = () => {\n      if (searchState.query.trim()) {\n        emit('search', searchState.query.trim());\n\n        // Close search on mobile after search\n        if (window.innerWidth <= 768) {\n          searchState.isActive = false;\n        }\n      }\n    };\n    const handleSidebarToggle = () => {\n      emit('sidebar-toggle');\n    };\n    const handleUserDropdownToggle = () => {\n      emit('user-dropdown-toggle');\n    };\n    const handleMenuAction = action => {\n      emit('menu-action', action);\n    };\n    const handleLogout = async () => {\n      try {\n        emit('logout');\n      } catch (error) {\n        handleError(error, 'Logout failed');\n      }\n    };\n\n    // Notification event handlers\n    const handleNewNotification = notification => {\n      console.log('New notification received:', notification);\n      // Handle new notification - could show toast, update UI, etc.\n    };\n    const handleNotificationClick = async notification => {\n      console.log('🔔 ClientHeader: Notification clicked:', notification);\n\n      // Ensure we have a valid notification object\n      if (!notification || typeof notification !== 'object') {\n        console.error('Invalid notification object received:', notification);\n        return;\n      }\n      try {\n        // Parse notification data\n        const notificationData = typeof notification.data === 'string' ? JSON.parse(notification.data) : notification.data || {};\n\n        // Log navigation for debugging\n        console.log('📊 ClientHeader: Notification data:', notificationData);\n\n        // Additional header-specific logic can go here\n        // For example, updating header state, showing badges, etc.\n      } catch (error) {\n        console.error('❌ ClientHeader: Error handling notification click:', error);\n        handleError(error, 'Notification click handling failed');\n      }\n\n      // Always emit the event for other components that might need it\n      emit('notification-click', notification);\n    };\n    const handleNotificationError = error => {\n      console.error('Notification error:', error);\n      emit('error', error);\n    };\n\n    // Outside click handling\n    const handleOutsideClick = event => {\n      // Check if click is outside user dropdown\n      if (!event.target.closest('.user-profile')) {\n        if (props.uiState.showUserDropdown) {\n          emit('user-dropdown-toggle');\n        }\n      }\n\n      // Check if click is outside search\n      if (!event.target.closest('.search-container')) {\n        searchState.isActive = false;\n      }\n    };\n\n    // Lifecycle hooks\n    onMounted(() => {\n      document.addEventListener('click', handleOutsideClick);\n    });\n    onUnmounted(() => {\n      document.removeEventListener('click', handleOutsideClick);\n    });\n    return {\n      // State\n      searchState,\n      // Methods\n      toggleSearch,\n      updateSearchQuery,\n      performSearch,\n      handleSidebarToggle,\n      handleUserDropdownToggle,\n      handleMenuAction,\n      handleLogout,\n      handleNewNotification,\n      handleNotificationClick,\n      handleNotificationError\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}