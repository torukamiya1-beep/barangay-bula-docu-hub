{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n/**\n * Document Types Composable\n * Manages document types data and operations\n * Implements error handling, loading states, and data transformation\n */\n\nimport { ref, computed } from 'vue';\nimport documentRequestService from '@/services/documentRequestService';\nexport function useDocumentTypes() {\n  // Reactive state\n  const documentTypes = ref([]);\n  const loading = ref(false);\n  const error = ref(null);\n  const lastUpdated = ref(null);\n\n  // Computed properties\n  const activeDocumentTypes = computed(() => {\n    return documentTypes.value.filter(doc => doc.is_active);\n  });\n  const inactiveDocumentTypes = computed(() => {\n    return documentTypes.value.filter(doc => !doc.is_active);\n  });\n  const documentTypesCount = computed(() => ({\n    total: documentTypes.value.length,\n    active: activeDocumentTypes.value.length,\n    inactive: inactiveDocumentTypes.value.length\n  }));\n  const documentTypesByCategory = computed(() => {\n    const categories = {};\n    documentTypes.value.forEach(doc => {\n      const category = doc.category || 'General';\n      if (!categories[category]) {\n        categories[category] = [];\n      }\n      categories[category].push(doc);\n    });\n    return categories;\n  });\n\n  // Methods\n  const loadDocumentTypes = async (forceRefresh = false) => {\n    // Avoid unnecessary API calls if data is fresh (within 5 minutes)\n    const fiveMinutesAgo = Date.now() - 5 * 60 * 1000;\n    if (!forceRefresh && lastUpdated.value && lastUpdated.value > fiveMinutesAgo) {\n      return;\n    }\n    try {\n      loading.value = true;\n      error.value = null;\n      const response = await documentRequestService.getDocumentTypes();\n      if (response && response.data) {\n        documentTypes.value = response.data.map(transformDocumentType);\n        lastUpdated.value = Date.now();\n      } else {\n        throw new Error('Invalid response format');\n      }\n    } catch (err) {\n      console.error('Error loading document types:', err);\n      error.value = err.response?.data?.message || 'Failed to load available services';\n\n      // Set empty array on error to prevent UI issues\n      documentTypes.value = [];\n    } finally {\n      loading.value = false;\n    }\n  };\n  const transformDocumentType = docType => {\n    return {\n      ...docType,\n      // Ensure required fields have defaults\n      id: docType.id || `doc-${Date.now()}-${Math.random()}`,\n      type_name: docType.type_name || 'Unknown Document',\n      description: docType.description || 'No description available',\n      base_fee: parseFloat(docType.base_fee) || 0,\n      is_active: Boolean(docType.is_active),\n      category: docType.category || 'General',\n      // Add computed properties\n      icon: getDocumentIcon(docType.type_name),\n      processingTime: getProcessingTime(docType.type_name),\n      formattedFee: formatCurrency(docType.base_fee)\n    };\n  };\n  const getDocumentIcon = typeName => {\n    const iconMap = {\n      'Barangay Clearance': 'fas fa-certificate',\n      'Cedula': 'fas fa-id-card',\n      'Business Permit': 'fas fa-briefcase',\n      'Residence Certificate': 'fas fa-home',\n      'Indigency Certificate': 'fas fa-hand-holding-heart',\n      'Good Moral Certificate': 'fas fa-award'\n    };\n    return iconMap[typeName] || 'fas fa-file-alt';\n  };\n  const getProcessingTime = typeName => {\n    const timeMap = {\n      'Barangay Clearance': '3-5 business days',\n      'Cedula': '1-2 business days',\n      'Business Permit': '5-7 business days',\n      'Residence Certificate': '2-3 business days',\n      'Indigency Certificate': '1-2 business days',\n      'Good Moral Certificate': '3-5 business days'\n    };\n    return timeMap[typeName] || '3-5 business days';\n  };\n  const formatCurrency = amount => {\n    const numAmount = parseFloat(amount) || 0;\n    return numAmount.toFixed(2);\n  };\n  const getDocumentTypeById = id => {\n    return documentTypes.value.find(doc => doc.id === id);\n  };\n  const getDocumentTypeByName = name => {\n    return documentTypes.value.find(doc => doc.type_name.toLowerCase() === name.toLowerCase());\n  };\n  const searchDocumentTypes = query => {\n    if (!query || query.trim().length === 0) {\n      return documentTypes.value;\n    }\n    const searchTerm = query.toLowerCase().trim();\n    return documentTypes.value.filter(doc => doc.type_name.toLowerCase().includes(searchTerm) || doc.description.toLowerCase().includes(searchTerm) || doc.category && doc.category.toLowerCase().includes(searchTerm));\n  };\n  const refreshDocumentTypes = () => {\n    return loadDocumentTypes(true);\n  };\n  const clearError = () => {\n    error.value = null;\n  };\n\n  // Return public API\n  return {\n    // State\n    documentTypes,\n    loading,\n    error,\n    lastUpdated,\n    // Computed\n    activeDocumentTypes,\n    inactiveDocumentTypes,\n    documentTypesCount,\n    documentTypesByCategory,\n    // Methods\n    loadDocumentTypes,\n    refreshDocumentTypes,\n    getDocumentTypeById,\n    getDocumentTypeByName,\n    searchDocumentTypes,\n    clearError,\n    // Utility methods\n    getDocumentIcon,\n    getProcessingTime,\n    formatCurrency\n  };\n}","map":{"version":3,"names":["ref","computed","documentRequestService","useDocumentTypes","documentTypes","loading","error","lastUpdated","activeDocumentTypes","value","filter","doc","is_active","inactiveDocumentTypes","documentTypesCount","total","length","active","inactive","documentTypesByCategory","categories","forEach","category","push","loadDocumentTypes","forceRefresh","fiveMinutesAgo","Date","now","response","getDocumentTypes","data","map","transformDocumentType","Error","err","console","message","docType","id","Math","random","type_name","description","base_fee","parseFloat","Boolean","icon","getDocumentIcon","processingTime","getProcessingTime","formattedFee","formatCurrency","typeName","iconMap","timeMap","amount","numAmount","toFixed","getDocumentTypeById","find","getDocumentTypeByName","name","toLowerCase","searchDocumentTypes","query","trim","searchTerm","includes","refreshDocumentTypes","clearError"],"sources":["D:/brgy_docu_hub/BOSFDR/src/composables/useDocumentTypes.js"],"sourcesContent":["/**\n * Document Types Composable\n * Manages document types data and operations\n * Implements error handling, loading states, and data transformation\n */\n\nimport { ref, computed } from 'vue'\nimport documentRequestService from '@/services/documentRequestService'\n\nexport function useDocumentTypes() {\n  // Reactive state\n  const documentTypes = ref([])\n  const loading = ref(false)\n  const error = ref(null)\n  const lastUpdated = ref(null)\n\n  // Computed properties\n  const activeDocumentTypes = computed(() => {\n    return documentTypes.value.filter(doc => doc.is_active)\n  })\n\n  const inactiveDocumentTypes = computed(() => {\n    return documentTypes.value.filter(doc => !doc.is_active)\n  })\n\n  const documentTypesCount = computed(() => ({\n    total: documentTypes.value.length,\n    active: activeDocumentTypes.value.length,\n    inactive: inactiveDocumentTypes.value.length\n  }))\n\n  const documentTypesByCategory = computed(() => {\n    const categories = {}\n    documentTypes.value.forEach(doc => {\n      const category = doc.category || 'General'\n      if (!categories[category]) {\n        categories[category] = []\n      }\n      categories[category].push(doc)\n    })\n    return categories\n  })\n\n  // Methods\n  const loadDocumentTypes = async (forceRefresh = false) => {\n    // Avoid unnecessary API calls if data is fresh (within 5 minutes)\n    const fiveMinutesAgo = Date.now() - (5 * 60 * 1000)\n    if (!forceRefresh && lastUpdated.value && lastUpdated.value > fiveMinutesAgo) {\n      return\n    }\n\n    try {\n      loading.value = true\n      error.value = null\n\n      const response = await documentRequestService.getDocumentTypes()\n      \n      if (response && response.data) {\n        documentTypes.value = response.data.map(transformDocumentType)\n        lastUpdated.value = Date.now()\n      } else {\n        throw new Error('Invalid response format')\n      }\n    } catch (err) {\n      console.error('Error loading document types:', err)\n      error.value = err.response?.data?.message || 'Failed to load available services'\n      \n      // Set empty array on error to prevent UI issues\n      documentTypes.value = []\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const transformDocumentType = (docType) => {\n    return {\n      ...docType,\n      // Ensure required fields have defaults\n      id: docType.id || `doc-${Date.now()}-${Math.random()}`,\n      type_name: docType.type_name || 'Unknown Document',\n      description: docType.description || 'No description available',\n      base_fee: parseFloat(docType.base_fee) || 0,\n      is_active: Boolean(docType.is_active),\n      category: docType.category || 'General',\n      // Add computed properties\n      icon: getDocumentIcon(docType.type_name),\n      processingTime: getProcessingTime(docType.type_name),\n      formattedFee: formatCurrency(docType.base_fee)\n    }\n  }\n\n  const getDocumentIcon = (typeName) => {\n    const iconMap = {\n      'Barangay Clearance': 'fas fa-certificate',\n      'Cedula': 'fas fa-id-card',\n      'Business Permit': 'fas fa-briefcase',\n      'Residence Certificate': 'fas fa-home',\n      'Indigency Certificate': 'fas fa-hand-holding-heart',\n      'Good Moral Certificate': 'fas fa-award'\n    }\n    return iconMap[typeName] || 'fas fa-file-alt'\n  }\n\n  const getProcessingTime = (typeName) => {\n    const timeMap = {\n      'Barangay Clearance': '3-5 business days',\n      'Cedula': '1-2 business days',\n      'Business Permit': '5-7 business days',\n      'Residence Certificate': '2-3 business days',\n      'Indigency Certificate': '1-2 business days',\n      'Good Moral Certificate': '3-5 business days'\n    }\n    return timeMap[typeName] || '3-5 business days'\n  }\n\n  const formatCurrency = (amount) => {\n    const numAmount = parseFloat(amount) || 0\n    return numAmount.toFixed(2)\n  }\n\n  const getDocumentTypeById = (id) => {\n    return documentTypes.value.find(doc => doc.id === id)\n  }\n\n  const getDocumentTypeByName = (name) => {\n    return documentTypes.value.find(doc => \n      doc.type_name.toLowerCase() === name.toLowerCase()\n    )\n  }\n\n  const searchDocumentTypes = (query) => {\n    if (!query || query.trim().length === 0) {\n      return documentTypes.value\n    }\n\n    const searchTerm = query.toLowerCase().trim()\n    return documentTypes.value.filter(doc => \n      doc.type_name.toLowerCase().includes(searchTerm) ||\n      doc.description.toLowerCase().includes(searchTerm) ||\n      (doc.category && doc.category.toLowerCase().includes(searchTerm))\n    )\n  }\n\n  const refreshDocumentTypes = () => {\n    return loadDocumentTypes(true)\n  }\n\n  const clearError = () => {\n    error.value = null\n  }\n\n  // Return public API\n  return {\n    // State\n    documentTypes,\n    loading,\n    error,\n    lastUpdated,\n    \n    // Computed\n    activeDocumentTypes,\n    inactiveDocumentTypes,\n    documentTypesCount,\n    documentTypesByCategory,\n    \n    // Methods\n    loadDocumentTypes,\n    refreshDocumentTypes,\n    getDocumentTypeById,\n    getDocumentTypeByName,\n    searchDocumentTypes,\n    clearError,\n    \n    // Utility methods\n    getDocumentIcon,\n    getProcessingTime,\n    formatCurrency\n  }\n}\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA,SAASA,GAAG,EAAEC,QAAQ,QAAQ,KAAK;AACnC,OAAOC,sBAAsB,MAAM,mCAAmC;AAEtE,OAAO,SAASC,gBAAgBA,CAAA,EAAG;EACjC;EACA,MAAMC,aAAa,GAAGJ,GAAG,CAAC,EAAE,CAAC;EAC7B,MAAMK,OAAO,GAAGL,GAAG,CAAC,KAAK,CAAC;EAC1B,MAAMM,KAAK,GAAGN,GAAG,CAAC,IAAI,CAAC;EACvB,MAAMO,WAAW,GAAGP,GAAG,CAAC,IAAI,CAAC;;EAE7B;EACA,MAAMQ,mBAAmB,GAAGP,QAAQ,CAAC,MAAM;IACzC,OAAOG,aAAa,CAACK,KAAK,CAACC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACC,SAAS,CAAC;EACzD,CAAC,CAAC;EAEF,MAAMC,qBAAqB,GAAGZ,QAAQ,CAAC,MAAM;IAC3C,OAAOG,aAAa,CAACK,KAAK,CAACC,MAAM,CAACC,GAAG,IAAI,CAACA,GAAG,CAACC,SAAS,CAAC;EAC1D,CAAC,CAAC;EAEF,MAAME,kBAAkB,GAAGb,QAAQ,CAAC,OAAO;IACzCc,KAAK,EAAEX,aAAa,CAACK,KAAK,CAACO,MAAM;IACjCC,MAAM,EAAET,mBAAmB,CAACC,KAAK,CAACO,MAAM;IACxCE,QAAQ,EAAEL,qBAAqB,CAACJ,KAAK,CAACO;EACxC,CAAC,CAAC,CAAC;EAEH,MAAMG,uBAAuB,GAAGlB,QAAQ,CAAC,MAAM;IAC7C,MAAMmB,UAAU,GAAG,CAAC,CAAC;IACrBhB,aAAa,CAACK,KAAK,CAACY,OAAO,CAACV,GAAG,IAAI;MACjC,MAAMW,QAAQ,GAAGX,GAAG,CAACW,QAAQ,IAAI,SAAS;MAC1C,IAAI,CAACF,UAAU,CAACE,QAAQ,CAAC,EAAE;QACzBF,UAAU,CAACE,QAAQ,CAAC,GAAG,EAAE;MAC3B;MACAF,UAAU,CAACE,QAAQ,CAAC,CAACC,IAAI,CAACZ,GAAG,CAAC;IAChC,CAAC,CAAC;IACF,OAAOS,UAAU;EACnB,CAAC,CAAC;;EAEF;EACA,MAAMI,iBAAiB,GAAG,MAAAA,CAAOC,YAAY,GAAG,KAAK,KAAK;IACxD;IACA,MAAMC,cAAc,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAI,CAAC,GAAG,EAAE,GAAG,IAAK;IACnD,IAAI,CAACH,YAAY,IAAIlB,WAAW,CAACE,KAAK,IAAIF,WAAW,CAACE,KAAK,GAAGiB,cAAc,EAAE;MAC5E;IACF;IAEA,IAAI;MACFrB,OAAO,CAACI,KAAK,GAAG,IAAI;MACpBH,KAAK,CAACG,KAAK,GAAG,IAAI;MAElB,MAAMoB,QAAQ,GAAG,MAAM3B,sBAAsB,CAAC4B,gBAAgB,CAAC,CAAC;MAEhE,IAAID,QAAQ,IAAIA,QAAQ,CAACE,IAAI,EAAE;QAC7B3B,aAAa,CAACK,KAAK,GAAGoB,QAAQ,CAACE,IAAI,CAACC,GAAG,CAACC,qBAAqB,CAAC;QAC9D1B,WAAW,CAACE,KAAK,GAAGkB,IAAI,CAACC,GAAG,CAAC,CAAC;MAChC,CAAC,MAAM;QACL,MAAM,IAAIM,KAAK,CAAC,yBAAyB,CAAC;MAC5C;IACF,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAAC9B,KAAK,CAAC,+BAA+B,EAAE6B,GAAG,CAAC;MACnD7B,KAAK,CAACG,KAAK,GAAG0B,GAAG,CAACN,QAAQ,EAAEE,IAAI,EAAEM,OAAO,IAAI,mCAAmC;;MAEhF;MACAjC,aAAa,CAACK,KAAK,GAAG,EAAE;IAC1B,CAAC,SAAS;MACRJ,OAAO,CAACI,KAAK,GAAG,KAAK;IACvB;EACF,CAAC;EAED,MAAMwB,qBAAqB,GAAIK,OAAO,IAAK;IACzC,OAAO;MACL,GAAGA,OAAO;MACV;MACAC,EAAE,EAAED,OAAO,CAACC,EAAE,IAAI,OAAOZ,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIY,IAAI,CAACC,MAAM,CAAC,CAAC,EAAE;MACtDC,SAAS,EAAEJ,OAAO,CAACI,SAAS,IAAI,kBAAkB;MAClDC,WAAW,EAAEL,OAAO,CAACK,WAAW,IAAI,0BAA0B;MAC9DC,QAAQ,EAAEC,UAAU,CAACP,OAAO,CAACM,QAAQ,CAAC,IAAI,CAAC;MAC3ChC,SAAS,EAAEkC,OAAO,CAACR,OAAO,CAAC1B,SAAS,CAAC;MACrCU,QAAQ,EAAEgB,OAAO,CAAChB,QAAQ,IAAI,SAAS;MACvC;MACAyB,IAAI,EAAEC,eAAe,CAACV,OAAO,CAACI,SAAS,CAAC;MACxCO,cAAc,EAAEC,iBAAiB,CAACZ,OAAO,CAACI,SAAS,CAAC;MACpDS,YAAY,EAAEC,cAAc,CAACd,OAAO,CAACM,QAAQ;IAC/C,CAAC;EACH,CAAC;EAED,MAAMI,eAAe,GAAIK,QAAQ,IAAK;IACpC,MAAMC,OAAO,GAAG;MACd,oBAAoB,EAAE,oBAAoB;MAC1C,QAAQ,EAAE,gBAAgB;MAC1B,iBAAiB,EAAE,kBAAkB;MACrC,uBAAuB,EAAE,aAAa;MACtC,uBAAuB,EAAE,2BAA2B;MACpD,wBAAwB,EAAE;IAC5B,CAAC;IACD,OAAOA,OAAO,CAACD,QAAQ,CAAC,IAAI,iBAAiB;EAC/C,CAAC;EAED,MAAMH,iBAAiB,GAAIG,QAAQ,IAAK;IACtC,MAAME,OAAO,GAAG;MACd,oBAAoB,EAAE,mBAAmB;MACzC,QAAQ,EAAE,mBAAmB;MAC7B,iBAAiB,EAAE,mBAAmB;MACtC,uBAAuB,EAAE,mBAAmB;MAC5C,uBAAuB,EAAE,mBAAmB;MAC5C,wBAAwB,EAAE;IAC5B,CAAC;IACD,OAAOA,OAAO,CAACF,QAAQ,CAAC,IAAI,mBAAmB;EACjD,CAAC;EAED,MAAMD,cAAc,GAAII,MAAM,IAAK;IACjC,MAAMC,SAAS,GAAGZ,UAAU,CAACW,MAAM,CAAC,IAAI,CAAC;IACzC,OAAOC,SAAS,CAACC,OAAO,CAAC,CAAC,CAAC;EAC7B,CAAC;EAED,MAAMC,mBAAmB,GAAIpB,EAAE,IAAK;IAClC,OAAOnC,aAAa,CAACK,KAAK,CAACmD,IAAI,CAACjD,GAAG,IAAIA,GAAG,CAAC4B,EAAE,KAAKA,EAAE,CAAC;EACvD,CAAC;EAED,MAAMsB,qBAAqB,GAAIC,IAAI,IAAK;IACtC,OAAO1D,aAAa,CAACK,KAAK,CAACmD,IAAI,CAACjD,GAAG,IACjCA,GAAG,CAAC+B,SAAS,CAACqB,WAAW,CAAC,CAAC,KAAKD,IAAI,CAACC,WAAW,CAAC,CACnD,CAAC;EACH,CAAC;EAED,MAAMC,mBAAmB,GAAIC,KAAK,IAAK;IACrC,IAAI,CAACA,KAAK,IAAIA,KAAK,CAACC,IAAI,CAAC,CAAC,CAAClD,MAAM,KAAK,CAAC,EAAE;MACvC,OAAOZ,aAAa,CAACK,KAAK;IAC5B;IAEA,MAAM0D,UAAU,GAAGF,KAAK,CAACF,WAAW,CAAC,CAAC,CAACG,IAAI,CAAC,CAAC;IAC7C,OAAO9D,aAAa,CAACK,KAAK,CAACC,MAAM,CAACC,GAAG,IACnCA,GAAG,CAAC+B,SAAS,CAACqB,WAAW,CAAC,CAAC,CAACK,QAAQ,CAACD,UAAU,CAAC,IAChDxD,GAAG,CAACgC,WAAW,CAACoB,WAAW,CAAC,CAAC,CAACK,QAAQ,CAACD,UAAU,CAAC,IACjDxD,GAAG,CAACW,QAAQ,IAAIX,GAAG,CAACW,QAAQ,CAACyC,WAAW,CAAC,CAAC,CAACK,QAAQ,CAACD,UAAU,CACjE,CAAC;EACH,CAAC;EAED,MAAME,oBAAoB,GAAGA,CAAA,KAAM;IACjC,OAAO7C,iBAAiB,CAAC,IAAI,CAAC;EAChC,CAAC;EAED,MAAM8C,UAAU,GAAGA,CAAA,KAAM;IACvBhE,KAAK,CAACG,KAAK,GAAG,IAAI;EACpB,CAAC;;EAED;EACA,OAAO;IACL;IACAL,aAAa;IACbC,OAAO;IACPC,KAAK;IACLC,WAAW;IAEX;IACAC,mBAAmB;IACnBK,qBAAqB;IACrBC,kBAAkB;IAClBK,uBAAuB;IAEvB;IACAK,iBAAiB;IACjB6C,oBAAoB;IACpBV,mBAAmB;IACnBE,qBAAqB;IACrBG,mBAAmB;IACnBM,UAAU;IAEV;IACAtB,eAAe;IACfE,iBAAiB;IACjBE;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}