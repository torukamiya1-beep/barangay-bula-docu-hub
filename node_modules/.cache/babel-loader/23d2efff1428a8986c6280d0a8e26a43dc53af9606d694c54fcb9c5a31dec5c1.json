{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport api from './api';\nclass AdminAuthService {\n  // Register admin account (Step 1)\n  async registerAccount(accountData) {\n    try {\n      const response = await api.post('/admin/auth/register-account', accountData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Complete registration with profile (Step 2)\n  async completeRegistration(accountId, profileData) {\n    try {\n      const response = await api.post(`/admin/auth/complete-registration/${accountId}`, profileData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Verify email with OTP\n  async verifyEmail(email, otp) {\n    try {\n      const response = await api.post('/admin/auth/verify-email', {\n        email,\n        otp\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Resend verification email\n  async resendVerificationEmail(email) {\n    try {\n      const response = await api.post('/admin/auth/resend-verification', {\n        email\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Admin login\n  async login(credentials) {\n    try {\n      const response = await api.post('/admin/auth/login', credentials);\n      if (response.data.success && response.data.data.token) {\n        // Store token and admin data\n        localStorage.setItem('adminToken', response.data.data.token);\n        localStorage.setItem('adminData', JSON.stringify(response.data.data.admin));\n\n        // Note: Authorization header is now handled by API interceptor\n      }\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Get admin profile\n  async getProfile() {\n    try {\n      const response = await api.get('/admin/auth/profile');\n\n      // Update stored admin data\n      if (response.data.success && response.data.data) {\n        localStorage.setItem('adminData', JSON.stringify(response.data.data));\n      }\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Update admin profile\n  async updateProfile(profileData) {\n    try {\n      const response = await api.put('/admin/auth/profile', profileData);\n\n      // Update stored admin data\n      if (response.data.success && response.data.data) {\n        localStorage.setItem('adminData', JSON.stringify(response.data.data));\n      }\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Change password\n  async changePassword(passwordData) {\n    try {\n      const response = await api.put('/admin/auth/change-password', passwordData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Send password reset email\n  async sendPasswordReset(email) {\n    try {\n      const response = await api.post('/admin/auth/forgot-password', {\n        email\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Reset password with token\n  async resetPassword(token, newPassword) {\n    try {\n      const response = await api.post('/admin/auth/reset-password', {\n        token,\n        newPassword\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Get dashboard statistics\n  async getDashboardStats() {\n    try {\n      const response = await api.get('/admin/dashboard/stats');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Get recent activity\n  async getRecentActivity(limit = 10) {\n    try {\n      const response = await api.get(`/admin/dashboard/activity?limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Get notifications\n  async getNotifications(limit = 20) {\n    try {\n      const response = await api.get(`/admin/notifications?limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Mark notification as read\n  async markNotificationAsRead(notificationId) {\n    try {\n      const response = await api.put(`/admin/notifications/${notificationId}/read`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Mark all notifications as read\n  async markAllNotificationsAsRead() {\n    try {\n      const response = await api.put('/admin/notifications/read-all');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Logout\n  async logout() {\n    try {\n      // Call logout endpoint if available\n      await api.post('/admin/auth/logout');\n    } catch (error) {\n      // Continue with local logout even if API call fails\n      console.error('Logout API error:', error);\n    } finally {\n      // Always clear local storage and headers\n      this.clearAuthData();\n    }\n  }\n\n  // Clear authentication data\n  clearAuthData() {\n    localStorage.removeItem('adminToken');\n    localStorage.removeItem('adminData');\n    // Note: Authorization header is now handled by API interceptor\n  }\n\n  // Check if admin is logged in\n  isLoggedIn() {\n    const token = localStorage.getItem('adminToken');\n    return !!token;\n  }\n\n  // Check if admin is authenticated (with token validation)\n  isAuthenticated() {\n    const token = localStorage.getItem('adminToken');\n    const adminData = this.getAdminData();\n    if (!token || !adminData) {\n      return false;\n    }\n    try {\n      // Basic token validation\n      const tokenParts = token.split('.');\n      if (tokenParts.length !== 3) {\n        return false;\n      }\n\n      // Decode payload to check expiration\n      const payload = JSON.parse(atob(tokenParts[1]));\n      const currentTime = Math.floor(Date.now() / 1000);\n      if (payload.exp && payload.exp < currentTime) {\n        // Token expired\n        this.clearAuthData();\n        return false;\n      }\n\n      // Verify token type is admin\n      if (payload.type !== 'admin') {\n        this.clearAuthData();\n        return false;\n      }\n      return true;\n    } catch (error) {\n      console.error('Token validation error:', error);\n      this.clearAuthData();\n      return false;\n    }\n  }\n\n  // Check if admin has specific role\n  hasRole(requiredRole) {\n    const adminData = this.getAdminData();\n    if (!adminData || !this.isAuthenticated()) {\n      return false;\n    }\n\n    // Admin role has access to everything\n    if (adminData.role === 'admin') {\n      return true;\n    }\n\n    // Check specific role\n    return adminData.role === requiredRole;\n  }\n\n  // Check if admin has any of the specified roles\n  hasAnyRole(roles) {\n    if (!Array.isArray(roles)) {\n      return this.hasRole(roles);\n    }\n    return roles.some(role => this.hasRole(role));\n  }\n\n  // Get stored admin data\n  getAdminData() {\n    const adminData = localStorage.getItem('adminData');\n    return adminData ? JSON.parse(adminData) : null;\n  }\n\n  // Get stored token\n  getToken() {\n    return localStorage.getItem('adminToken');\n  }\n\n  // Send OTP for registration or other purposes\n  async sendOTP(email, purpose = 'registration', firstName = '') {\n    try {\n      const response = await api.post('/otp/send', {\n        email,\n        purpose,\n        firstName\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Verify OTP (generic)\n  async verifyOTP(email, otp, purpose = 'registration') {\n    try {\n      const response = await api.post('/otp/verify', {\n        email,\n        otp,\n        purpose\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Resend OTP\n  async resendOTP(email, purpose = 'registration', firstName = '') {\n    try {\n      const response = await api.post('/otp/resend', {\n        email,\n        purpose,\n        firstName\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Initialize authentication on app start\n  initializeAuth() {\n    const token = this.getToken();\n    if (token) {\n      // Note: Authorization header is now handled by API interceptor\n      // Token is automatically included in requests by the interceptor\n    }\n  }\n\n  // Handle API errors\n  handleError(error) {\n    if (error.response) {\n      // Server responded with error status\n      const message = error.response.data?.message || 'An error occurred';\n      const errors = error.response.data?.errors || [];\n      return new Error(JSON.stringify({\n        message,\n        errors,\n        status: error.response.status\n      }));\n    } else if (error.request) {\n      // Request was made but no response received\n      return new Error(JSON.stringify({\n        message: 'Network error. Please check your connection.',\n        errors: [],\n        status: 0\n      }));\n    } else {\n      // Something else happened\n      return new Error(JSON.stringify({\n        message: error.message || 'An unexpected error occurred',\n        errors: [],\n        status: 0\n      }));\n    }\n  }\n\n  // Parse error message\n  parseError(error) {\n    try {\n      return JSON.parse(error.message);\n    } catch {\n      return {\n        message: error.message,\n        errors: [],\n        status: 0\n      };\n    }\n  }\n}\nexport default new AdminAuthService();","map":{"version":3,"names":["api","AdminAuthService","registerAccount","accountData","response","post","data","error","handleError","completeRegistration","accountId","profileData","verifyEmail","email","otp","resendVerificationEmail","login","credentials","success","token","localStorage","setItem","JSON","stringify","admin","getProfile","get","updateProfile","put","changePassword","passwordData","sendPasswordReset","resetPassword","newPassword","getDashboardStats","getRecentActivity","limit","getNotifications","markNotificationAsRead","notificationId","markAllNotificationsAsRead","logout","console","clearAuthData","removeItem","isLoggedIn","getItem","isAuthenticated","adminData","getAdminData","tokenParts","split","length","payload","parse","atob","currentTime","Math","floor","Date","now","exp","type","hasRole","requiredRole","role","hasAnyRole","roles","Array","isArray","some","getToken","sendOTP","purpose","firstName","verifyOTP","resendOTP","initializeAuth","message","errors","Error","status","request","parseError"],"sources":["D:/brgy_docu_hub/BOSFDR/src/services/adminAuthService.js"],"sourcesContent":["import api from './api';\n\nclass AdminAuthService {\n  // Register admin account (Step 1)\n  async registerAccount(accountData) {\n    try {\n      const response = await api.post('/admin/auth/register-account', accountData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Complete registration with profile (Step 2)\n  async completeRegistration(accountId, profileData) {\n    try {\n      const response = await api.post(`/admin/auth/complete-registration/${accountId}`, profileData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Verify email with OTP\n  async verifyEmail(email, otp) {\n    try {\n      const response = await api.post('/admin/auth/verify-email', { email, otp });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Resend verification email\n  async resendVerificationEmail(email) {\n    try {\n      const response = await api.post('/admin/auth/resend-verification', { email });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Admin login\n  async login(credentials) {\n    try {\n      const response = await api.post('/admin/auth/login', credentials);\n      \n      if (response.data.success && response.data.data.token) {\n        // Store token and admin data\n        localStorage.setItem('adminToken', response.data.data.token);\n        localStorage.setItem('adminData', JSON.stringify(response.data.data.admin));\n\n        // Note: Authorization header is now handled by API interceptor\n      }\n      \n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Get admin profile\n  async getProfile() {\n    try {\n      const response = await api.get('/admin/auth/profile');\n      \n      // Update stored admin data\n      if (response.data.success && response.data.data) {\n        localStorage.setItem('adminData', JSON.stringify(response.data.data));\n      }\n      \n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Update admin profile\n  async updateProfile(profileData) {\n    try {\n      const response = await api.put('/admin/auth/profile', profileData);\n\n      // Update stored admin data\n      if (response.data.success && response.data.data) {\n        localStorage.setItem('adminData', JSON.stringify(response.data.data));\n      }\n\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Change password\n  async changePassword(passwordData) {\n    try {\n      const response = await api.put('/admin/auth/change-password', passwordData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Send password reset email\n  async sendPasswordReset(email) {\n    try {\n      const response = await api.post('/admin/auth/forgot-password', { email });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Reset password with token\n  async resetPassword(token, newPassword) {\n    try {\n      const response = await api.post('/admin/auth/reset-password', { token, newPassword });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Get dashboard statistics\n  async getDashboardStats() {\n    try {\n      const response = await api.get('/admin/dashboard/stats');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Get recent activity\n  async getRecentActivity(limit = 10) {\n    try {\n      const response = await api.get(`/admin/dashboard/activity?limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Get notifications\n  async getNotifications(limit = 20) {\n    try {\n      const response = await api.get(`/admin/notifications?limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Mark notification as read\n  async markNotificationAsRead(notificationId) {\n    try {\n      const response = await api.put(`/admin/notifications/${notificationId}/read`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Mark all notifications as read\n  async markAllNotificationsAsRead() {\n    try {\n      const response = await api.put('/admin/notifications/read-all');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Logout\n  async logout() {\n    try {\n      // Call logout endpoint if available\n      await api.post('/admin/auth/logout');\n    } catch (error) {\n      // Continue with local logout even if API call fails\n      console.error('Logout API error:', error);\n    } finally {\n      // Always clear local storage and headers\n      this.clearAuthData();\n    }\n  }\n\n  // Clear authentication data\n  clearAuthData() {\n    localStorage.removeItem('adminToken');\n    localStorage.removeItem('adminData');\n    // Note: Authorization header is now handled by API interceptor\n  }\n\n  // Check if admin is logged in\n  isLoggedIn() {\n    const token = localStorage.getItem('adminToken');\n    return !!token;\n  }\n\n  // Check if admin is authenticated (with token validation)\n  isAuthenticated() {\n    const token = localStorage.getItem('adminToken');\n    const adminData = this.getAdminData();\n\n    if (!token || !adminData) {\n      return false;\n    }\n\n    try {\n      // Basic token validation\n      const tokenParts = token.split('.');\n      if (tokenParts.length !== 3) {\n        return false;\n      }\n\n      // Decode payload to check expiration\n      const payload = JSON.parse(atob(tokenParts[1]));\n      const currentTime = Math.floor(Date.now() / 1000);\n\n      if (payload.exp && payload.exp < currentTime) {\n        // Token expired\n        this.clearAuthData();\n        return false;\n      }\n\n      // Verify token type is admin\n      if (payload.type !== 'admin') {\n        this.clearAuthData();\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Token validation error:', error);\n      this.clearAuthData();\n      return false;\n    }\n  }\n\n  // Check if admin has specific role\n  hasRole(requiredRole) {\n    const adminData = this.getAdminData();\n    if (!adminData || !this.isAuthenticated()) {\n      return false;\n    }\n\n    // Admin role has access to everything\n    if (adminData.role === 'admin') {\n      return true;\n    }\n\n    // Check specific role\n    return adminData.role === requiredRole;\n  }\n\n  // Check if admin has any of the specified roles\n  hasAnyRole(roles) {\n    if (!Array.isArray(roles)) {\n      return this.hasRole(roles);\n    }\n\n    return roles.some(role => this.hasRole(role));\n  }\n\n  // Get stored admin data\n  getAdminData() {\n    const adminData = localStorage.getItem('adminData');\n    return adminData ? JSON.parse(adminData) : null;\n  }\n\n  // Get stored token\n  getToken() {\n    return localStorage.getItem('adminToken');\n  }\n\n  // Send OTP for registration or other purposes\n  async sendOTP(email, purpose = 'registration', firstName = '') {\n    try {\n      const response = await api.post('/otp/send', {\n        email,\n        purpose,\n        firstName\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Verify OTP (generic)\n  async verifyOTP(email, otp, purpose = 'registration') {\n    try {\n      const response = await api.post('/otp/verify', {\n        email,\n        otp,\n        purpose\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Resend OTP\n  async resendOTP(email, purpose = 'registration', firstName = '') {\n    try {\n      const response = await api.post('/otp/resend', {\n        email,\n        purpose,\n        firstName\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Initialize authentication on app start\n  initializeAuth() {\n    const token = this.getToken();\n    if (token) {\n      // Note: Authorization header is now handled by API interceptor\n      // Token is automatically included in requests by the interceptor\n    }\n  }\n\n  // Handle API errors\n  handleError(error) {\n    if (error.response) {\n      // Server responded with error status\n      const message = error.response.data?.message || 'An error occurred';\n      const errors = error.response.data?.errors || [];\n      return new Error(JSON.stringify({ message, errors, status: error.response.status }));\n    } else if (error.request) {\n      // Request was made but no response received\n      return new Error(JSON.stringify({ \n        message: 'Network error. Please check your connection.', \n        errors: [], \n        status: 0 \n      }));\n    } else {\n      // Something else happened\n      return new Error(JSON.stringify({ \n        message: error.message || 'An unexpected error occurred', \n        errors: [], \n        status: 0 \n      }));\n    }\n  }\n\n  // Parse error message\n  parseError(error) {\n    try {\n      return JSON.parse(error.message);\n    } catch {\n      return { message: error.message, errors: [], status: 0 };\n    }\n  }\n}\n\nexport default new AdminAuthService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}