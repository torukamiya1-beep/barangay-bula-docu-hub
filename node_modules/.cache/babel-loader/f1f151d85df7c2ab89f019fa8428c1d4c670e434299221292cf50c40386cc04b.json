{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\n// Form validation utilities\nexport const validators = {\n  // Required field validator\n  required: (value, fieldName = 'Field') => {\n    if (!value || typeof value === 'string' && value.trim() === '') {\n      return `${fieldName} is required`;\n    }\n    return null;\n  },\n  // Email validator\n  email: value => {\n    if (!value) return null;\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(value)) {\n      return 'Please enter a valid email address';\n    }\n    return null;\n  },\n  // Username validator\n  username: value => {\n    if (!value) return null;\n    if (value.length < 3 || value.length > 50) {\n      return 'Username must be between 3 and 50 characters';\n    }\n    if (!/^[a-zA-Z0-9_]+$/.test(value)) {\n      return 'Username can only contain letters, numbers, and underscores';\n    }\n    return null;\n  },\n  // Password validator\n  password: value => {\n    if (!value) return null;\n    if (value.length < 8) {\n      return 'Password must be at least 8 characters long';\n    }\n    if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/.test(value)) {\n      return 'Password must contain at least one uppercase letter, one lowercase letter, and one number';\n    }\n    return null;\n  },\n  // Confirm password validator\n  confirmPassword: (value, originalPassword) => {\n    if (!value) return null;\n    if (value !== originalPassword) {\n      return 'Passwords do not match';\n    }\n    return null;\n  },\n  // Phone number validator (Philippine format)\n  phoneNumber: value => {\n    if (!value) return null;\n    // Remove any spaces or special characters except digits\n    const cleanValue = value.replace(/\\s/g, '');\n    const phoneRegex = /^09\\d{9}$/;\n    if (!phoneRegex.test(cleanValue)) {\n      return 'Please enter a valid Philippine phone number (09XXXXXXXXX - 11 digits starting with 09)';\n    }\n    return null;\n  },\n  // Name validator\n  name: (value, fieldName = 'Name') => {\n    if (!value) return null;\n    if (value.length < 1 || value.length > 100) {\n      return `${fieldName} must be between 1 and 100 characters`;\n    }\n    if (!/^[a-zA-Z\\s\\-.]+$/.test(value)) {\n      return `${fieldName} can only contain letters, spaces, hyphens, and periods`;\n    }\n    return null;\n  },\n  // Date validator\n  date: (value, fieldName = 'Date') => {\n    if (!value) return null;\n    const date = new Date(value);\n    if (isNaN(date.getTime())) {\n      return `Please enter a valid ${fieldName.toLowerCase()}`;\n    }\n    return null;\n  },\n  // Birth date validator (must be in the past and reasonable age)\n  birthDate: value => {\n    if (!value) return null;\n    const date = new Date(value);\n    const today = new Date();\n    if (isNaN(date.getTime())) {\n      return 'Please enter a valid birth date';\n    }\n    if (date >= today) {\n      return 'Birth date must be in the past';\n    }\n    const age = today.getFullYear() - date.getFullYear();\n    if (age > 150) {\n      return 'Please enter a valid birth date';\n    }\n    if (age < 13) {\n      return 'You must be at least 13 years old to register';\n    }\n    return null;\n  },\n  // OTP validator\n  otp: value => {\n    if (!value) return null;\n    if (!/^\\d{4,10}$/.test(value)) {\n      return 'OTP must be a 4-10 digit number';\n    }\n    return null;\n  },\n  // Address field validator\n  address: (value, fieldName = 'Address') => {\n    if (!value) return null;\n    if (value.length < 1 || value.length > 100) {\n      return `${fieldName} must be between 1 and 100 characters`;\n    }\n    return null;\n  },\n  // Postal code validator\n  postalCode: value => {\n    if (!value) return null;\n    if (!/^\\d{4}$/.test(value)) {\n      return 'Postal code must be 4 digits';\n    }\n    return null;\n  },\n  // Min length validator\n  minLength: (value, min, fieldName = 'Field') => {\n    if (!value) return null;\n    if (value.length < min) {\n      return `${fieldName} must be at least ${min} characters`;\n    }\n    return null;\n  },\n  // Max length validator\n  maxLength: (value, max, fieldName = 'Field') => {\n    if (!value) return null;\n    if (value.length > max) {\n      return `${fieldName} must be less than ${max} characters`;\n    }\n    return null;\n  },\n  // Exact length validator\n  exactLength: (value, length, fieldName = 'Field') => {\n    if (!value) return null;\n    if (value.length !== length) {\n      return `${fieldName} must be exactly ${length} characters`;\n    }\n    return null;\n  },\n  // Password match validator\n  passwordMatch: (value, password) => {\n    if (!value) return null;\n    if (value !== password) {\n      return 'Passwords do not match';\n    }\n    return null;\n  },\n  // Phone validator (alias for phoneNumber)\n  phone: value => validators.phoneNumber(value)\n};\n\n// Validate multiple fields\nexport const validateForm = (formData, validationRules) => {\n  const errors = {};\n  let isValid = true;\n  for (const [fieldName, rules] of Object.entries(validationRules)) {\n    const value = formData[fieldName];\n    for (const rule of rules) {\n      let error = null;\n      if (typeof rule === 'function') {\n        error = rule(value);\n      } else if (typeof rule === 'object' && rule.validator) {\n        error = rule.validator(value, ...(rule.params || []));\n      }\n      if (error) {\n        errors[fieldName] = error;\n        isValid = false;\n        break; // Stop at first error for this field\n      }\n    }\n  }\n  return {\n    isValid,\n    errors\n  };\n};\n\n// Format error messages from API\nexport const formatApiErrors = apiErrors => {\n  if (!Array.isArray(apiErrors)) return {};\n  const formattedErrors = {};\n  apiErrors.forEach(error => {\n    if (error.path) {\n      formattedErrors[error.path] = error.msg || error.message;\n    }\n  });\n  return formattedErrors;\n};\n\n// Clear specific field errors\nexport const clearFieldError = (errors, fieldName) => {\n  const newErrors = {\n    ...errors\n  };\n  delete newErrors[fieldName];\n  return newErrors;\n};\n\n// Check if form has any errors\nexport const hasErrors = errors => {\n  return Object.keys(errors).length > 0;\n};","map":{"version":3,"names":["validators","required","value","fieldName","trim","email","emailRegex","test","username","length","password","confirmPassword","originalPassword","phoneNumber","cleanValue","replace","phoneRegex","name","date","Date","isNaN","getTime","toLowerCase","birthDate","today","age","getFullYear","otp","address","postalCode","minLength","min","maxLength","max","exactLength","passwordMatch","phone","validateForm","formData","validationRules","errors","isValid","rules","Object","entries","rule","error","validator","params","formatApiErrors","apiErrors","Array","isArray","formattedErrors","forEach","path","msg","message","clearFieldError","newErrors","hasErrors","keys"],"sources":["D:/brgy_docu_hub/BOSFDR/src/utils/validation.js"],"sourcesContent":["// Form validation utilities\nexport const validators = {\n  // Required field validator\n  required: (value, fieldName = 'Field') => {\n    if (!value || (typeof value === 'string' && value.trim() === '')) {\n      return `${fieldName} is required`;\n    }\n    return null;\n  },\n\n  // Email validator\n  email: (value) => {\n    if (!value) return null;\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(value)) {\n      return 'Please enter a valid email address';\n    }\n    return null;\n  },\n\n  // Username validator\n  username: (value) => {\n    if (!value) return null;\n    if (value.length < 3 || value.length > 50) {\n      return 'Username must be between 3 and 50 characters';\n    }\n    if (!/^[a-zA-Z0-9_]+$/.test(value)) {\n      return 'Username can only contain letters, numbers, and underscores';\n    }\n    return null;\n  },\n\n  // Password validator\n  password: (value) => {\n    if (!value) return null;\n    if (value.length < 8) {\n      return 'Password must be at least 8 characters long';\n    }\n    if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/.test(value)) {\n      return 'Password must contain at least one uppercase letter, one lowercase letter, and one number';\n    }\n    return null;\n  },\n\n  // Confirm password validator\n  confirmPassword: (value, originalPassword) => {\n    if (!value) return null;\n    if (value !== originalPassword) {\n      return 'Passwords do not match';\n    }\n    return null;\n  },\n\n  // Phone number validator (Philippine format)\n  phoneNumber: (value) => {\n    if (!value) return null;\n    // Remove any spaces or special characters except digits\n    const cleanValue = value.replace(/\\s/g, '');\n    const phoneRegex = /^09\\d{9}$/;\n    if (!phoneRegex.test(cleanValue)) {\n      return 'Please enter a valid Philippine phone number (09XXXXXXXXX - 11 digits starting with 09)';\n    }\n    return null;\n  },\n\n  // Name validator\n  name: (value, fieldName = 'Name') => {\n    if (!value) return null;\n    if (value.length < 1 || value.length > 100) {\n      return `${fieldName} must be between 1 and 100 characters`;\n    }\n    if (!/^[a-zA-Z\\s\\-.]+$/.test(value)) {\n      return `${fieldName} can only contain letters, spaces, hyphens, and periods`;\n    }\n    return null;\n  },\n\n  // Date validator\n  date: (value, fieldName = 'Date') => {\n    if (!value) return null;\n    const date = new Date(value);\n    if (isNaN(date.getTime())) {\n      return `Please enter a valid ${fieldName.toLowerCase()}`;\n    }\n    return null;\n  },\n\n  // Birth date validator (must be in the past and reasonable age)\n  birthDate: (value) => {\n    if (!value) return null;\n    const date = new Date(value);\n    const today = new Date();\n    \n    if (isNaN(date.getTime())) {\n      return 'Please enter a valid birth date';\n    }\n    \n    if (date >= today) {\n      return 'Birth date must be in the past';\n    }\n    \n    const age = today.getFullYear() - date.getFullYear();\n    if (age > 150) {\n      return 'Please enter a valid birth date';\n    }\n    \n    if (age < 13) {\n      return 'You must be at least 13 years old to register';\n    }\n    \n    return null;\n  },\n\n  // OTP validator\n  otp: (value) => {\n    if (!value) return null;\n    if (!/^\\d{4,10}$/.test(value)) {\n      return 'OTP must be a 4-10 digit number';\n    }\n    return null;\n  },\n\n  // Address field validator\n  address: (value, fieldName = 'Address') => {\n    if (!value) return null;\n    if (value.length < 1 || value.length > 100) {\n      return `${fieldName} must be between 1 and 100 characters`;\n    }\n    return null;\n  },\n\n  // Postal code validator\n  postalCode: (value) => {\n    if (!value) return null;\n    if (!/^\\d{4}$/.test(value)) {\n      return 'Postal code must be 4 digits';\n    }\n    return null;\n  },\n\n  // Min length validator\n  minLength: (value, min, fieldName = 'Field') => {\n    if (!value) return null;\n    if (value.length < min) {\n      return `${fieldName} must be at least ${min} characters`;\n    }\n    return null;\n  },\n\n  // Max length validator\n  maxLength: (value, max, fieldName = 'Field') => {\n    if (!value) return null;\n    if (value.length > max) {\n      return `${fieldName} must be less than ${max} characters`;\n    }\n    return null;\n  },\n\n  // Exact length validator\n  exactLength: (value, length, fieldName = 'Field') => {\n    if (!value) return null;\n    if (value.length !== length) {\n      return `${fieldName} must be exactly ${length} characters`;\n    }\n    return null;\n  },\n\n  // Password match validator\n  passwordMatch: (value, password) => {\n    if (!value) return null;\n    if (value !== password) {\n      return 'Passwords do not match';\n    }\n    return null;\n  },\n\n  // Phone validator (alias for phoneNumber)\n  phone: (value) => validators.phoneNumber(value)\n};\n\n// Validate multiple fields\nexport const validateForm = (formData, validationRules) => {\n  const errors = {};\n  let isValid = true;\n\n  for (const [fieldName, rules] of Object.entries(validationRules)) {\n    const value = formData[fieldName];\n    \n    for (const rule of rules) {\n      let error = null;\n      \n      if (typeof rule === 'function') {\n        error = rule(value);\n      } else if (typeof rule === 'object' && rule.validator) {\n        error = rule.validator(value, ...(rule.params || []));\n      }\n      \n      if (error) {\n        errors[fieldName] = error;\n        isValid = false;\n        break; // Stop at first error for this field\n      }\n    }\n  }\n\n  return { isValid, errors };\n};\n\n// Format error messages from API\nexport const formatApiErrors = (apiErrors) => {\n  if (!Array.isArray(apiErrors)) return {};\n  \n  const formattedErrors = {};\n  apiErrors.forEach(error => {\n    if (error.path) {\n      formattedErrors[error.path] = error.msg || error.message;\n    }\n  });\n  \n  return formattedErrors;\n};\n\n// Clear specific field errors\nexport const clearFieldError = (errors, fieldName) => {\n  const newErrors = { ...errors };\n  delete newErrors[fieldName];\n  return newErrors;\n};\n\n// Check if form has any errors\nexport const hasErrors = (errors) => {\n  return Object.keys(errors).length > 0;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}