{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport AdminHeader from './AdminHeader.vue';\nimport AdminSidebar from './AdminSidebar.vue';\nimport ResidencyDocumentsModal from './ResidencyDocumentsModal.vue';\nimport unifiedAuthService from '@/services/unifiedAuthService';\nimport userManagementService from '@/services/userManagementService';\nimport residencyService from '@/services/residencyService';\nimport api from '@/services/api';\nimport { Modal } from 'bootstrap';\nexport default {\n  name: 'AdminUsers',\n  components: {\n    AdminHeader,\n    AdminSidebar,\n    ResidencyDocumentsModal\n  },\n  data() {\n    return {\n      // UI State\n      sidebarCollapsed: false,\n      showUserDropdown: false,\n      isMobile: false,\n      adminData: null,\n      // Component Data\n      users: [],\n      searchQuery: '',\n      filterStatus: '',\n      filterType: '',\n      activeTab: 'clients',\n      // New property for tab management\n      currentPage: 1,\n      itemsPerPage: 10,\n      loading: false,\n      userStats: {\n        total: 0,\n        active: 0,\n        pending: 0,\n        admins: 0\n      },\n      // Modal data\n      viewUserData: null,\n      addUserLoading: false,\n      editUserLoading: false,\n      // Residency verification data\n      selectedUserForResidency: null,\n      processingResidencyAction: false,\n      processingQuickAction: false,\n      rejectionReason: '',\n      // Direct DOM modal (no reactive data needed)\n\n      // Form validation errors\n      formErrors: {},\n      editFormErrors: {},\n      // Add user form\n      addUserForm: {\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n        first_name: '',\n        middle_name: '',\n        last_name: '',\n        suffix: '',\n        role: '',\n        phone_number: '',\n        // Client specific fields\n        birth_date: '',\n        gender: '',\n        civil_status_id: 1,\n        nationality: 'Filipino',\n        house_number: '',\n        street: '',\n        subdivision: '',\n        barangay: '',\n        city_municipality: '',\n        province: '',\n        postal_code: '',\n        years_of_residency: null,\n        months_of_residency: null\n      },\n      // Edit user form\n      editUserForm: {\n        id: null,\n        username: '',\n        email: '',\n        first_name: '',\n        middle_name: '',\n        last_name: '',\n        suffix: '',\n        role: '',\n        status: '',\n        phone_number: '',\n        // Client specific fields\n        birth_date: '',\n        gender: '',\n        civil_status_id: 1,\n        nationality: 'Filipino',\n        house_number: '',\n        street: '',\n        subdivision: '',\n        barangay: '',\n        city_municipality: '',\n        province: '',\n        postal_code: '',\n        years_of_residency: null,\n        months_of_residency: null,\n        // Password reset fields\n        resetPassword: false,\n        newPassword: '',\n        confirmPassword: ''\n      },\n      // Available options\n      genderOptions: [{\n        value: 'male',\n        label: 'Male'\n      }, {\n        value: 'female',\n        label: 'Female'\n      }],\n      statusOptions: [{\n        value: 'active',\n        label: 'Active'\n      }, {\n        value: 'inactive',\n        label: 'Inactive'\n      }, {\n        value: 'suspended',\n        label: 'Suspended'\n      }, {\n        value: 'pending_verification',\n        label: 'Pending Verification'\n      }]\n    };\n  },\n  computed: {\n    activeMenu() {\n      const path = this.$route.path;\n      if (path.includes('/admin/users')) return 'users';\n      if (path.includes('/admin/requests')) return 'requests';\n      if (path.includes('/admin/reports')) return 'reports';\n      if (path.includes('/admin/settings')) return 'settings';\n      if (path.includes('/admin/activity-logs')) return 'activity';\n      if (path.includes('/admin/profile')) return 'profile';\n      return 'dashboard';\n    },\n    // Separate statistics for clients and admins\n    clientStats() {\n      const clients = this.users.filter(user => user.type === 'client' && user.status !== 'inactive');\n      return {\n        total: clients.length,\n        active: clients.filter(user => this.getDisplayStatus(user) === 'active').length,\n        pending: clients.filter(user => this.getDisplayStatus(user) === 'pending_residency_verification').length,\n        rejected: clients.filter(user => this.getDisplayStatus(user) === 'residency_rejected').length\n      };\n    },\n    adminStats() {\n      const admins = this.users.filter(user => user.type === 'admin' && user.status !== 'inactive');\n      return {\n        total: admins.length,\n        active: admins.filter(user => user.status === 'active').length,\n        suspended: admins.filter(user => user.status === 'suspended').length\n      };\n    },\n    filteredUsers() {\n      let filtered = [...this.users];\n\n      // Apply tab-based role filter and exclude inactive users\n      if (this.activeTab === 'clients') {\n        filtered = filtered.filter(user => user.type === 'client' && user.status !== 'inactive');\n      } else if (this.activeTab === 'admins') {\n        filtered = filtered.filter(user => user.type === 'admin' && user.status !== 'inactive');\n      }\n\n      // Apply search filter\n      if (this.searchQuery) {\n        const query = this.searchQuery.toLowerCase();\n        filtered = filtered.filter(user => {\n          const displayStatus = this.getDisplayStatus(user);\n          const formattedStatus = this.formatStatus(displayStatus);\n          return user.full_name?.toLowerCase().includes(query) || user.email?.toLowerCase().includes(query) || user.username?.toLowerCase().includes(query) || user.type?.toLowerCase().includes(query) || user.status?.toLowerCase().includes(query) || displayStatus?.toLowerCase().includes(query) || formattedStatus?.toLowerCase().includes(query) || user.first_name?.toLowerCase().includes(query) || user.last_name?.toLowerCase().includes(query);\n        });\n      }\n\n      // Apply status filter\n      if (this.filterStatus) {\n        filtered = filtered.filter(user => {\n          const displayStatus = this.getDisplayStatus(user);\n          return displayStatus === this.filterStatus;\n        });\n      }\n      return filtered;\n    },\n    paginatedUsers() {\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return this.filteredUsers.slice(start, end);\n    },\n    totalPages() {\n      return Math.ceil(this.filteredUsers.length / this.itemsPerPage);\n    },\n    visiblePages() {\n      const pages = [];\n      const start = Math.max(1, this.currentPage - 2);\n      const end = Math.min(this.totalPages, this.currentPage + 2);\n      for (let i = start; i <= end; i++) {\n        pages.push(i);\n      }\n      return pages;\n    },\n    // Check if we're creating an admin user (when admin tab is active)\n    isCreatingAdminUser() {\n      return this.activeTab === 'admins';\n    }\n  },\n  watch: {\n    // Reset pagination when search query changes\n    searchQuery() {\n      this.currentPage = 1;\n    },\n    // Reset pagination when status filter changes\n    filterStatus() {\n      this.currentPage = 1;\n    }\n  },\n  async mounted() {\n    // Check authentication\n    if (!unifiedAuthService.isLoggedIn() || unifiedAuthService.getUserType() !== 'admin') {\n      this.$router.push('/login');\n      return;\n    }\n\n    // Initialize UI state\n    this.initializeUI();\n\n    // Make bootstrap available globally for this component\n    this.$bootstrap = {\n      Modal\n    };\n\n    // Debug authentication - using unified auth system\n    const authToken = localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token');\n    const userData = localStorage.getItem('auth_user') || sessionStorage.getItem('auth_user');\n    console.log('🔍 Admin Authentication Debug:');\n    console.log('  Auth Token:', authToken ? 'EXISTS' : 'NOT FOUND');\n    console.log('  User Data:', userData ? 'EXISTS' : 'NOT FOUND');\n    if (userData) {\n      try {\n        const data = JSON.parse(userData);\n        console.log('  Username:', data.username);\n        console.log('  User Type:', data.type);\n        console.log('  Role:', data.role);\n        console.log('  Status:', data.status);\n      } catch (e) {\n        console.error('  Error parsing user data:', e);\n      }\n    }\n\n    // Check if user is authenticated and is an admin\n    if (!authToken || !userData) {\n      this.showToast('error', 'You are not logged in. Please login first.');\n      this.$router.push('/login');\n      return;\n    }\n    try {\n      const user = JSON.parse(userData);\n      if (user.type !== 'admin') {\n        this.showToast('error', 'Access denied. Admin privileges required.');\n        this.$router.push('/login');\n        return;\n      }\n    } catch (e) {\n      console.error('Error parsing user data:', e);\n      this.showToast('error', 'Invalid authentication data. Please login again.');\n      this.$router.push('/login');\n      return;\n    }\n\n    // Load component data\n    await this.loadAdminProfile();\n    await this.loadUserStats();\n    await this.loadUsers();\n\n    // Add event listener for image modal close to clean up blob URLs\n    const imageModal = document.getElementById('directImageModal');\n    if (imageModal) {\n      imageModal.addEventListener('hidden.bs.modal', () => {\n        // Clean up blob URLs from images in the modal\n        const contentDiv = document.getElementById('imageModalContent');\n        if (contentDiv) {\n          const images = contentDiv.querySelectorAll('img[src^=\"blob:\"]');\n          images.forEach(img => {\n            URL.revokeObjectURL(img.src);\n          });\n          // Clear content\n          contentDiv.innerHTML = '';\n        }\n      });\n    }\n  },\n  beforeUnmount() {\n    if (this.handleResize) {\n      window.removeEventListener('resize', this.handleResize);\n    }\n\n    // Clean up blob URLs to prevent memory leaks\n    const contentDiv = document.getElementById('imageModalContent');\n    if (contentDiv) {\n      const images = contentDiv.querySelectorAll('img[src^=\"blob:\"]');\n      images.forEach(img => {\n        URL.revokeObjectURL(img.src);\n      });\n    }\n  },\n  methods: {\n    // Initialize UI state\n    initializeUI() {\n      this.isMobile = window.innerWidth <= 768;\n\n      // Load saved sidebar state (only on desktop)\n      if (!this.isMobile) {\n        const saved = localStorage.getItem('adminSidebarCollapsed');\n        this.sidebarCollapsed = saved ? JSON.parse(saved) : false;\n      } else {\n        this.sidebarCollapsed = true; // Always collapsed on mobile\n      }\n\n      // Setup resize listener\n      this.handleResize = () => {\n        const wasMobile = this.isMobile;\n        this.isMobile = window.innerWidth <= 768;\n        if (this.isMobile && !wasMobile) {\n          this.sidebarCollapsed = true; // Collapse when switching to mobile\n        } else if (!this.isMobile && wasMobile) {\n          // Restore saved state when switching to desktop\n          const saved = localStorage.getItem('adminSidebarCollapsed');\n          this.sidebarCollapsed = saved ? JSON.parse(saved) : false;\n        }\n      };\n      window.addEventListener('resize', this.handleResize);\n    },\n    // Sidebar toggle\n    handleSidebarToggle() {\n      this.sidebarCollapsed = !this.sidebarCollapsed;\n      localStorage.setItem('adminSidebarCollapsed', JSON.stringify(this.sidebarCollapsed));\n    },\n    // Menu navigation\n    handleMenuChange(menu) {\n      const routes = {\n        'dashboard': '/admin/dashboard',\n        'users': '/admin/users',\n        'requests': '/admin/requests',\n        'reports': '/admin/reports',\n        'settings': '/admin/settings',\n        'activity': '/admin/activity-logs',\n        'profile': '/admin/profile'\n      };\n\n      // Close sidebar on mobile after navigation\n      if (this.isMobile) {\n        this.sidebarCollapsed = true;\n      }\n      if (routes[menu]) {\n        this.$router.push(routes[menu]);\n      }\n    },\n    // User dropdown toggle\n    handleUserDropdownToggle() {\n      this.showUserDropdown = !this.showUserDropdown;\n    },\n    // Menu actions\n    handleMenuAction(action) {\n      if (action === 'profile') {\n        this.$router.push('/admin/profile');\n      } else if (action === 'settings') {\n        this.$router.push('/admin/settings');\n      }\n      this.showUserDropdown = false;\n    },\n    // Close mobile sidebar\n    closeMobileSidebar() {\n      if (this.isMobile) {\n        this.sidebarCollapsed = true;\n      }\n    },\n    // Logout\n    handleLogout() {\n      unifiedAuthService.logout();\n      this.$router.push('/login');\n    },\n    // Handle phone number input to restrict to digits only\n    handlePhoneInput(event, formType) {\n      const value = event.target.value;\n      // Remove any non-digit characters\n      const digitsOnly = value.replace(/\\D/g, '');\n      // Limit to 11 digits\n      const limitedValue = digitsOnly.substring(0, 11);\n      if (formType === 'add') {\n        this.addUserForm.phone_number = limitedValue;\n      } else if (formType === 'edit') {\n        this.editUserForm.phone_number = limitedValue;\n      }\n    },\n    // Load admin profile data\n    async loadAdminProfile() {\n      try {\n        const currentUser = unifiedAuthService.getCurrentUser();\n        if (currentUser && currentUser.profile) {\n          this.adminData = currentUser.profile;\n        } else {\n          // Fallback to basic user data\n          this.adminData = {\n            first_name: currentUser?.username || 'Admin',\n            role: currentUser?.role || 'admin'\n          };\n        }\n      } catch (error) {\n        console.error('Failed to load admin data:', error);\n        const currentUser = unifiedAuthService.getCurrentUser();\n        this.adminData = {\n          first_name: currentUser?.username || 'Admin',\n          role: currentUser?.role || 'admin'\n        };\n      }\n    },\n    // Load user statistics\n    async loadUserStats() {\n      try {\n        const response = await userManagementService.getUserStats();\n        if (response.success) {\n          this.userStats = response.data;\n        } else {\n          this.calculateStats();\n        }\n      } catch (error) {\n        console.error('Failed to load user statistics:', error);\n        this.calculateStats();\n      }\n    },\n    // Load users data\n    async loadUsers() {\n      this.loading = true;\n      try {\n        const params = {\n          page: this.currentPage,\n          limit: 50,\n          search: this.searchQuery || undefined,\n          // Don't filter by role in API call since we handle it in frontend with tabs\n          is_active: this.filterStatus === 'active' ? true : this.filterStatus === 'inactive' ? false : undefined\n        };\n        const response = await userManagementService.getUsers(params);\n        if (response.success) {\n          this.users = response.data.users.map(user => userManagementService.formatUserData(user));\n          this.calculateStats();\n        } else {\n          throw new Error(response.message || 'Failed to load users');\n        }\n      } catch (error) {\n        console.error('Failed to load users:', error);\n        this.showToast('error', error.message || 'Failed to load users');\n        this.users = [];\n        this.calculateStats();\n      } finally {\n        this.loading = false;\n      }\n    },\n    // Calculate user statistics\n    calculateStats() {\n      this.userStats = {\n        total: this.users.length,\n        active: this.users.filter(u => this.getDisplayStatus(u) === 'active').length,\n        pending: this.users.filter(u => this.getDisplayStatus(u) === 'pending_residency_verification').length,\n        admins: this.users.filter(u => u.type === 'admin').length\n      };\n    },\n    // Change page\n    changePage(page) {\n      if (page >= 1 && page <= this.totalPages) {\n        this.currentPage = page;\n      }\n    },\n    // Get user initials for avatar\n    getInitials(fullName) {\n      if (!fullName) return '?';\n      return fullName.split(' ').map(name => name.charAt(0)).join('').toUpperCase().slice(0, 2);\n    },\n    // Get status badge class\n    getStatusBadgeClass(status) {\n      const classes = {\n        'active': 'bg-success',\n        'inactive': 'bg-secondary',\n        'pending': 'bg-warning',\n        'suspended': 'bg-danger',\n        'pending_verification': 'bg-warning',\n        'pending_residency_verification': 'bg-info',\n        'residency_rejected': 'bg-danger',\n        'residency_approved': 'bg-success',\n        'no_residency_documents': 'bg-warning'\n      };\n      return classes[status] || 'bg-secondary';\n    },\n    // Format status text\n    formatStatus(status) {\n      const statusLabels = {\n        'active': 'Active',\n        'inactive': 'Inactive',\n        'pending': 'Pending',\n        'suspended': 'Suspended',\n        'pending_verification': 'Pending Verification',\n        'pending_residency_verification': 'Pending Residency Verification',\n        'residency_rejected': 'Residency Rejected',\n        'residency_approved': 'Residency Approved',\n        'no_residency_documents': 'No Residency Documents'\n      };\n      return statusLabels[status] || status.charAt(0).toUpperCase() + status.slice(1);\n    },\n    // Format date\n    formatDate(dateString) {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      });\n    },\n    // User actions\n\n    async toggleUserStatus(user) {\n      try {\n        const newStatus = user.status === 'active' ? 'suspended' : 'active';\n        const reason = `Status changed by admin: ${this.adminData?.first_name || 'Admin'}`;\n        const response = await userManagementService.updateUserStatus(user.id, newStatus, reason);\n        if (response.success) {\n          // Update local data\n          user.status = newStatus;\n          this.calculateStats();\n          const statusText = newStatus === 'active' ? 'activated' : 'suspended';\n          this.showToast('success', `User ${user.full_name} has been ${statusText}.`);\n        } else {\n          throw new Error(response.message || 'Failed to update user status');\n        }\n      } catch (error) {\n        console.error('Failed to update user status:', error);\n        const errorMessage = error.response?.data?.message || error.message || 'Failed to update user status. Please try again.';\n        this.showToast('error', errorMessage);\n      }\n    },\n    async deleteUser(user) {\n      const confirmMessage = `Are you sure you want to delete user \"${user.full_name}\"?\\n\\nThis will:\\n- Deactivate the user account\\n- Prevent future logins\\n- Preserve data for audit purposes\\n\\nThis action can be reversed by reactivating the user.`;\n      if (!confirm(confirmMessage)) {\n        return;\n      }\n      try {\n        const reason = `User deleted by admin: ${this.adminData?.first_name || 'Admin'}`;\n        const response = await userManagementService.deleteUser(user.id, reason);\n        if (response.success) {\n          this.showToast('success', `User ${user.full_name} has been deleted successfully.`);\n\n          // Reload data to reflect changes\n          await this.loadUsers();\n          await this.loadUserStats();\n        } else {\n          throw new Error(response.message || 'Failed to delete user');\n        }\n      } catch (error) {\n        console.error('Failed to delete user:', error);\n        const errorMessage = error.response?.data?.message || error.message || 'Failed to delete user. Please try again.';\n        this.showToast('error', errorMessage);\n      }\n    },\n    // Helper methods\n    showToast(type, message) {\n      if (this.$toast?.[type]) {\n        this.$toast[type](message);\n      } else {\n        console.log(`${type.toUpperCase()}: ${message}`);\n        if (type === 'error') alert(`Error: ${message}`);else if (type === 'success') alert(`Success: ${message}`);\n      }\n    },\n    closeModal(modalId) {\n      try {\n        const modal = Modal.getInstance(document.getElementById(modalId));\n        if (modal) modal.hide();\n      } catch (error) {\n        console.error('Error closing modal:', error);\n      }\n    },\n    handleFormError(error, errorField) {\n      console.error('Form error:', error);\n\n      // Handle server validation errors\n      if (error.response?.data?.details) {\n        const serverErrors = {};\n        error.response.data.details.forEach(detail => {\n          if (detail.path) serverErrors[detail.path] = detail.msg;\n        });\n        this[errorField] = {\n          ...this[errorField],\n          ...serverErrors\n        };\n      }\n      const errorMessage = error.response?.data?.message || error.message || 'Operation failed';\n      this.showToast('error', errorMessage);\n    },\n    // Modal methods\n    showAddUserModal() {\n      this.resetAddUserForm();\n      try {\n        const modalElement = document.getElementById('addUserModal');\n        if (modalElement) {\n          const modal = new Modal(modalElement);\n          modal.show();\n        }\n      } catch (error) {\n        console.error('Error showing add user modal:', error);\n        this.$toast?.error?.('Failed to open add user modal');\n      }\n    },\n    resetAddUserForm() {\n      // Set default role based on active tab\n      const defaultRole = this.activeTab === 'admins' ? 'admin' : '';\n      Object.assign(this.addUserForm, {\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n        first_name: '',\n        middle_name: '',\n        last_name: '',\n        suffix: '',\n        role: defaultRole,\n        phone_number: '',\n        birth_date: '',\n        gender: '',\n        civil_status_id: 1,\n        nationality: 'Filipino',\n        house_number: '',\n        street: '',\n        subdivision: '',\n        barangay: '',\n        city_municipality: '',\n        province: '',\n        postal_code: '',\n        years_of_residency: null,\n        months_of_residency: null\n      });\n      // Clear form errors object safely\n      Object.keys(this.formErrors).forEach(key => delete this.formErrors[key]);\n    },\n    clearRoleSpecificFields() {\n      const form = this.addUserForm;\n      if (form.role === 'admin') {\n        // Clear client fields\n        Object.assign(form, {\n          birth_date: '',\n          gender: '',\n          civil_status_id: 1,\n          nationality: 'Filipino',\n          house_number: '',\n          street: '',\n          subdivision: '',\n          barangay: '',\n          city_municipality: '',\n          province: '',\n          postal_code: '',\n          years_of_residency: null,\n          months_of_residency: null\n        });\n      } else if (form.role === 'client') {\n        // No admin-specific fields to clear anymore\n      }\n    },\n    validateAddUserForm() {\n      const errors = {};\n      const form = this.addUserForm;\n\n      // Basic validation\n      if (!form.username?.length || form.username.length < 3) errors.username = 'Username must be at least 3 characters long';\n      if (!form.password?.length || form.password.length < 6) errors.password = 'Password must be at least 6 characters long';\n      if (!form.confirmPassword?.length) errors.confirmPassword = 'Please confirm your password';\n      if (form.password && form.confirmPassword && form.password !== form.confirmPassword) errors.confirmPassword = 'Passwords do not match';\n      if (!form.first_name?.trim() || form.first_name.trim().length < 2) errors.first_name = 'First name must be at least 2 characters long';\n      if (!form.last_name?.trim() || form.last_name.trim().length < 2) errors.last_name = 'Last name must be at least 2 characters long';\n      if (!form.role) errors.role = 'Please select a user type';\n      if (!form.phone_number?.trim() || form.phone_number.trim().length < 10) errors.phone_number = 'Please provide a valid phone number';\n      if (form.email && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(form.email)) errors.email = 'Please provide a valid email address';\n\n      // Client-specific validation\n      if (form.role === 'client') {\n        if (!form.birth_date) errors.birth_date = 'Birth date is required for clients';\n        if (!form.gender) errors.gender = 'Gender is required for clients';\n        if (!form.barangay?.trim()) errors.barangay = 'Barangay is required for clients';\n        if (!form.city_municipality?.trim()) errors.city_municipality = 'City/Municipality is required for clients';\n        if (!form.province?.trim()) errors.province = 'Province is required for clients';\n      }\n      this.formErrors = errors;\n      return Object.keys(errors).length === 0;\n    },\n    validateEditUserForm() {\n      const errors = {};\n      const form = this.editUserForm;\n\n      // Basic validation\n      if (!form.username?.length || form.username.length < 3) errors.username = 'Username must be at least 3 characters long';\n      if (!form.first_name?.trim() || form.first_name.trim().length < 2) errors.first_name = 'First name must be at least 2 characters long';\n      if (!form.last_name?.trim() || form.last_name.trim().length < 2) errors.last_name = 'Last name must be at least 2 characters long';\n      if (!form.phone_number?.trim() || form.phone_number.trim().length < 10) errors.phone_number = 'Please provide a valid phone number';\n      if (form.email && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(form.email)) errors.email = 'Please provide a valid email address';\n\n      // Password reset validation\n      if (form.resetPassword) {\n        if (!form.newPassword?.length || form.newPassword.length < 6) errors.newPassword = 'New password must be at least 6 characters long';\n        if (form.newPassword !== form.confirmPassword) errors.confirmPassword = 'Passwords do not match';\n      }\n      this.editFormErrors = errors;\n      return Object.keys(errors).length === 0;\n    },\n    getFullAddress(user) {\n      const parts = [];\n      if (user.house_number) parts.push(user.house_number);\n      if (user.street) parts.push(user.street);\n      if (user.subdivision) parts.push(user.subdivision);\n      if (user.barangay) parts.push(user.barangay);\n      if (user.city_municipality) parts.push(user.city_municipality);\n      if (user.province) parts.push(user.province);\n      return parts.join(', ') || 'No address provided';\n    },\n    async submitAddUser() {\n      if (!this.validateAddUserForm()) {\n        this.showToast('error', 'Please fix the validation errors before submitting.');\n        return;\n      }\n      this.addUserLoading = true;\n      try {\n        const userData = {\n          ...this.addUserForm\n        };\n\n        // Convert numeric fields\n        ['years_of_residency', 'months_of_residency', 'civil_status_id'].forEach(field => {\n          if (userData[field]) userData[field] = parseInt(userData[field]);\n        });\n\n        // Explicitly set status to 'active' for admin accounts created through AdminUsers.vue\n        if (this.isCreatingAdminUser || userData.role === 'admin') {\n          userData.status = 'active';\n        }\n        const response = await userManagementService.createUser(userData);\n        if (response.success) {\n          this.showToast('success', 'User created successfully');\n          this.closeModal('addUserModal');\n          this.resetAddUserForm();\n          await Promise.all([this.loadUsers(), this.loadUserStats()]);\n        } else {\n          throw new Error(response.message || 'Failed to create user');\n        }\n      } catch (error) {\n        this.handleFormError(error, 'formErrors');\n      } finally {\n        this.addUserLoading = false;\n      }\n    },\n    editUser(user) {\n      this.editUserForm = {\n        id: user.id,\n        username: user.username,\n        email: user.email || '',\n        first_name: user.first_name || '',\n        middle_name: user.middle_name || '',\n        last_name: user.last_name || '',\n        suffix: user.suffix || '',\n        role: user.type,\n        status: user.status,\n        phone_number: user.phone_number || '',\n        birth_date: user.birth_date ? user.birth_date.split('T')[0] : '',\n        gender: user.gender || '',\n        civil_status_id: user.civil_status_id || 1,\n        nationality: user.nationality || 'Filipino',\n        house_number: user.house_number || '',\n        street: user.street || '',\n        subdivision: user.subdivision || '',\n        barangay: user.barangay || '',\n        city_municipality: user.city_municipality || '',\n        province: user.province || '',\n        postal_code: user.postal_code || '',\n        years_of_residency: user.years_of_residency || null,\n        months_of_residency: user.months_of_residency || null,\n        resetPassword: false,\n        newPassword: '',\n        confirmPassword: ''\n      };\n      this.editFormErrors = {};\n      try {\n        const modal = new Modal(document.getElementById('editUserModal'));\n        modal.show();\n      } catch (error) {\n        this.showToast('error', 'Failed to open edit user modal');\n      }\n    },\n    async submitEditUser() {\n      if (!this.validateEditUserForm()) {\n        this.showToast('error', 'Please fix the validation errors before submitting.');\n        return;\n      }\n      this.editUserLoading = true;\n      try {\n        const form = this.editUserForm;\n        const updateData = {\n          username: form.username,\n          email: form.email,\n          first_name: form.first_name,\n          middle_name: form.middle_name,\n          last_name: form.last_name,\n          suffix: form.suffix,\n          status: form.status,\n          phone_number: form.phone_number\n        };\n\n        // Add role-specific fields\n        if (form.role === 'admin') {\n          Object.assign(updateData, {\n            position: form.position,\n            department: form.department,\n            employee_id: form.employee_id,\n            hire_date: form.hire_date\n          });\n        }\n\n        // Add password if resetting\n        if (form.resetPassword && form.newPassword) {\n          updateData.password = form.newPassword;\n        }\n        const response = await userManagementService.updateUser(form.id, updateData);\n        if (response.success) {\n          this.showToast('success', 'User updated successfully');\n          this.closeModal('editUserModal');\n          await Promise.all([this.loadUsers(), this.loadUserStats()]);\n        } else {\n          throw new Error(response.message || 'Failed to update user');\n        }\n      } catch (error) {\n        this.handleFormError(error, 'editFormErrors');\n      } finally {\n        this.editUserLoading = false;\n      }\n    },\n    async viewUser(user) {\n      try {\n        const response = await userManagementService.getUser(user.id);\n        if (response.success) {\n          this.viewUserData = userManagementService.formatUserData(response.data);\n          const modal = new Modal(document.getElementById('viewUserModal'));\n          modal.show();\n        } else {\n          throw new Error(response.message || 'Failed to load user details');\n        }\n      } catch (error) {\n        const errorMessage = error.response?.data?.message || error.message || 'Failed to load user details';\n        this.showToast('error', errorMessage);\n      }\n    },\n    // Handle tab switching\n    setActiveTab(tab) {\n      this.activeTab = tab;\n      this.filterStatus = ''; // Reset status filter when switching tabs\n      this.searchQuery = ''; // Reset search when switching tabs\n      this.currentPage = 1; // Reset pagination\n      console.log(`🔄 Switched to ${tab} tab`);\n    },\n    // Handle opening user modal from notifications\n    async handleOpenUserModal(modalData) {\n      console.log('🔔 AdminUsers: Opening user modal from notification:', modalData);\n      try {\n        const {\n          userId,\n          userType\n        } = modalData;\n        if (!userId) {\n          console.error('❌ No user ID provided for modal');\n          return;\n        }\n        console.log(`🔍 Looking for ${userType || 'unknown'} user with ID: ${userId}`);\n\n        // Switch to the appropriate tab based on user type\n        if (userType === 'client') {\n          this.setActiveTab('clients');\n        } else if (userType === 'admin') {\n          this.setActiveTab('admins');\n        }\n\n        // Find the user in the current users list\n        let user = this.users.find(u => u.id === userId || u.original_id === userId);\n        if (!user) {\n          // If user not found in current list, try to load it directly\n          console.log('🔍 User not found in current list, loading directly...');\n          const response = await userManagementService.getUser(userId);\n          if (response.success) {\n            user = userManagementService.formatUserData(response.data);\n          } else {\n            throw new Error('User not found');\n          }\n        }\n\n        // Open the user details modal\n        await this.viewUser(user);\n        console.log('✅ User modal opened successfully');\n      } catch (error) {\n        console.error('❌ Failed to open user modal:', error);\n        this.showToast('error', 'Failed to open user details');\n      }\n    },\n    // Residency verification methods\n    needsResidencyVerification(user) {\n      return ['pending_residency_verification', 'residency_rejected'].includes(user.status);\n    },\n    // Check if user has residency documents uploaded\n    hasResidencyDocuments(user) {\n      if (user.type !== 'client') return false;\n      return user.residency_document_count > 0;\n    },\n    // Check if user has residency documents that need review (not approved)\n    hasResidencyDocumentsNeedingReview(user) {\n      if (user.type !== 'client') return false;\n      // Only show review button if they have documents AND they're not already approved\n      return user.residency_document_count > 0 && user.residency_verification_status !== 'approved';\n    },\n    // Get the display status for a user (prioritizes residency verification status for clients)\n    getDisplayStatus(user) {\n      if (user.type !== 'client') {\n        return user.status; // For admin users, use regular status\n      }\n\n      // For clients, check if they have residency verification status\n      if (user.residency_verification_status) {\n        // Map residency verification status to display status\n        switch (user.residency_verification_status) {\n          case 'pending':\n            return 'pending_residency_verification';\n          case 'approved':\n            return 'active';\n          // Approved residency = active client\n          case 'rejected':\n            return 'residency_rejected';\n          default:\n            return user.status;\n        }\n      }\n\n      // If no residency documents uploaded yet\n      if (user.residency_document_count === 0 || user.residency_document_count === undefined) {\n        // Check if they're in a residency verification workflow\n        if (['pending_residency_verification', 'residency_rejected'].includes(user.status)) {\n          return 'no_residency_documents';\n        }\n      }\n\n      // If no residency verification status, check account status\n      if (['pending_residency_verification', 'residency_rejected'].includes(user.status)) {\n        return user.status;\n      }\n\n      // For other statuses, return as-is\n      return user.status;\n    },\n    // Check if user can be approved for residency verification\n    canApproveResidency(user) {\n      if (user.type !== 'client') return false;\n      const displayStatus = this.getDisplayStatus(user);\n      // Can approve if they have pending residency verification and have uploaded documents\n      return displayStatus === 'pending_residency_verification' && user.residency_document_count > 0;\n    },\n    // Check if user can be rejected for residency verification\n    canRejectResidency(user) {\n      if (user.type !== 'client') return false;\n      const displayStatus = this.getDisplayStatus(user);\n      // Can reject if they have pending residency verification and have uploaded documents\n      return displayStatus === 'pending_residency_verification' && user.residency_document_count > 0;\n    },\n    viewResidencyDocuments(user) {\n      // Set the selected user and show the modal\n      this.selectedUserForResidency = user;\n      this.rejectionReason = '';\n\n      // Show modal using Bootstrap\n      const modal = new Modal(document.getElementById('residencyDocumentsModal'));\n      modal.show();\n    },\n    // Direct DOM manipulation method to avoid Vue reactivity issues\n    async openImageModal(user) {\n      if (!user) return;\n      console.log('Opening image modal for user:', user);\n\n      // Get modal elements\n      const modal = new Modal(document.getElementById('directImageModal'));\n      const contentDiv = document.getElementById('imageModalContent');\n\n      // Show loading state directly in DOM\n      contentDiv.innerHTML = `\n        <div class=\"text-center py-5\">\n          <div class=\"spinner-border text-primary\" role=\"status\">\n            <span class=\"visually-hidden\">Loading...</span>\n          </div>\n          <p class=\"mt-3 text-muted\">Loading images...</p>\n        </div>\n      `;\n\n      // Show modal\n      modal.show();\n      try {\n        // Get account ID\n        const accountId = user.original_id || user.id;\n        const numericId = typeof accountId === 'string' && accountId.includes('_') ? accountId.split('_')[1] : accountId;\n        console.log('Fetching documents for account ID:', numericId);\n\n        // Get documents\n        const response = await residencyService.getAccountDocuments(numericId);\n        if (response.success && response.data && response.data.length > 0) {\n          console.log('Documents found:', response.data.length);\n\n          // Filter images only\n          const imageDocuments = response.data.filter(doc => {\n            const imageTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\n            return imageTypes.includes(doc.mime_type?.toLowerCase());\n          });\n          console.log('Image documents found:', imageDocuments.length);\n          if (imageDocuments.length > 0) {\n            // Start building HTML for images\n            let imagesHtml = '<div class=\"row g-3\">';\n            let loadedCount = 0;\n\n            // Load each image\n            for (const doc of imageDocuments) {\n              try {\n                console.log('Loading image:', doc.document_name);\n                const imgResponse = await api.get(`/residency/documents/${doc.id}/file`, {\n                  responseType: 'blob'\n                });\n                const blob = new Blob([imgResponse.data], {\n                  type: doc.mime_type\n                });\n                const url = URL.createObjectURL(blob);\n\n                // Add image card HTML\n                imagesHtml += `\n                  <div class=\"col-md-6 col-lg-4\">\n                    <div class=\"card shadow-sm\">\n                      <img src=\"${url}\" alt=\"${doc.document_name || 'Residency Document'}\"\n                           class=\"card-img-top\" style=\"height: 200px; object-fit: contain; background: #f8f9fa;\">\n                      <div class=\"card-body p-2\">\n                        <small class=\"text-muted\">${doc.document_name || 'Unknown Document'}</small>\n                        <br>\n                        <small class=\"text-muted\">${doc.document_type || 'Document'}</small>\n                      </div>\n                    </div>\n                  </div>\n                `;\n                loadedCount++;\n                console.log('✅ Successfully loaded:', doc.document_name);\n              } catch (error) {\n                console.error('❌ Failed to load image:', doc.document_name, error);\n\n                // Add error card\n                imagesHtml += `\n                  <div class=\"col-md-6 col-lg-4\">\n                    <div class=\"card shadow-sm\">\n                      <div class=\"card-body text-center p-4\">\n                        <i class=\"fas fa-exclamation-triangle fa-2x text-danger mb-2\"></i>\n                        <p class=\"text-muted small mb-0\">Failed to load</p>\n                        <p class=\"text-muted small mb-0\">${doc.document_name || 'Unknown'}</p>\n                      </div>\n                    </div>\n                  </div>\n                `;\n              }\n            }\n            imagesHtml += '</div>';\n            if (loadedCount > 0) {\n              // Show images\n              contentDiv.innerHTML = imagesHtml;\n              console.log('Successfully displayed', loadedCount, 'images');\n            } else {\n              // Show error\n              contentDiv.innerHTML = `\n                <div class=\"text-center py-5\">\n                  <i class=\"fas fa-exclamation-triangle fa-3x text-danger mb-3\"></i>\n                  <h5>Failed to Load Images</h5>\n                  <p class=\"text-muted\">All images failed to load. Please try again.</p>\n                </div>\n              `;\n            }\n          } else {\n            // No image documents\n            contentDiv.innerHTML = `\n              <div class=\"text-center py-5\">\n                <i class=\"fas fa-file fa-3x text-muted mb-3\"></i>\n                <h5>No Image Documents</h5>\n                <p class=\"text-muted\">This user has uploaded documents, but none are image files.</p>\n              </div>\n            `;\n          }\n        } else {\n          // No documents at all\n          contentDiv.innerHTML = `\n            <div class=\"text-center py-5\">\n              <i class=\"fas fa-folder-open fa-3x text-muted mb-3\"></i>\n              <h5>No Documents Found</h5>\n              <p class=\"text-muted\">This user has not uploaded any residency documents yet.</p>\n            </div>\n          `;\n        }\n      } catch (error) {\n        console.error('Error loading images:', error);\n\n        // Show error\n        contentDiv.innerHTML = `\n          <div class=\"text-center py-5\">\n            <i class=\"fas fa-exclamation-triangle fa-3x text-danger mb-3\"></i>\n            <h5>Error Loading Images</h5>\n            <p class=\"text-muted\">${error.message || 'An unexpected error occurred'}</p>\n            <button class=\"btn btn-outline-primary btn-sm mt-2\" onclick=\"location.reload()\">\n              <i class=\"fas fa-refresh me-1\"></i>\n              Refresh Page\n            </button>\n          </div>\n        `;\n      }\n    },\n    async approveResidencyVerification() {\n      if (!this.selectedUserForResidency) return;\n      this.processingResidencyAction = true;\n      try {\n        // Use the actual account ID, not the composite ID\n        const accountId = this.selectedUserForResidency.original_id || this.selectedUserForResidency.id;\n\n        // Extract numeric ID if it's in format like 'client_32'\n        const numericId = typeof accountId === 'string' && accountId.includes('_') ? parseInt(accountId.split('_')[1]) : parseInt(accountId);\n        console.log('Approving residency for account ID:', numericId);\n        const response = await residencyService.approveVerification(numericId);\n        if (response.success) {\n          this.showToast('success', 'Residency verification approved successfully');\n\n          // Close modal\n          const modal = Modal.getInstance(document.getElementById('residencyDocumentsModal'));\n          if (modal) {\n            modal.hide();\n          }\n\n          // Refresh user list\n          await this.loadUsers();\n        } else {\n          throw new Error(response.message || 'Failed to approve verification');\n        }\n      } catch (error) {\n        console.error('Failed to approve residency verification:', error);\n        this.showToast('error', error.message || 'Failed to approve verification');\n      } finally {\n        this.processingResidencyAction = false;\n      }\n    },\n    showRejectResidencyModal() {\n      // Close documents modal first\n      const documentsModal = Modal.getInstance(document.getElementById('residencyDocumentsModal'));\n      documentsModal.hide();\n\n      // Show reject modal\n      setTimeout(() => {\n        const rejectModal = new Modal(document.getElementById('rejectResidencyModal'));\n        rejectModal.show();\n      }, 300);\n    },\n    async rejectResidencyVerification() {\n      if (!this.selectedUserForResidency || !this.rejectionReason || this.rejectionReason.length < 10) return;\n      this.processingResidencyAction = true;\n      try {\n        // Use the actual account ID, not the composite ID\n        const accountId = this.selectedUserForResidency.original_id || this.selectedUserForResidency.id;\n\n        // Extract numeric ID if it's in format like 'client_32'\n        const numericId = typeof accountId === 'string' && accountId.includes('_') ? parseInt(accountId.split('_')[1]) : parseInt(accountId);\n        console.log('Rejecting residency for account ID:', numericId);\n        const response = await residencyService.rejectVerification(numericId, this.rejectionReason);\n        if (response.success) {\n          this.showToast('success', 'Residency verification rejected');\n\n          // Close modal\n          const modal = Modal.getInstance(document.getElementById('rejectResidencyModal'));\n          modal.hide();\n\n          // Refresh user list\n          await this.loadUsers();\n        } else {\n          throw new Error(response.message || 'Failed to reject verification');\n        }\n      } catch (error) {\n        console.error('Failed to reject residency verification:', error);\n        this.showToast('error', error.message || 'Failed to reject verification');\n      } finally {\n        this.processingResidencyAction = false;\n      }\n    },\n    // Quick approve client without viewing documents\n    async quickApproveClient(user) {\n      if (!user || !this.canApproveResidency(user)) return;\n      const confirmed = confirm(`Are you sure you want to approve residency verification for ${user.full_name}? This will activate their account and allow them to request documents.`);\n      if (!confirmed) return;\n      this.processingQuickAction = true;\n      try {\n        // Use the actual account ID, not the composite ID\n        const accountId = user.original_id || user.id;\n        const response = await residencyService.approveVerification(accountId);\n        if (response.success) {\n          this.showToast('success', `Residency verification approved for ${user.full_name}`);\n          // Reload users to reflect the change\n          await this.loadUsers();\n        } else {\n          throw new Error(response.message || 'Failed to approve residency verification');\n        }\n      } catch (error) {\n        console.error('Failed to approve residency verification:', error);\n        this.showToast('error', error.message || 'Failed to approve residency verification');\n      } finally {\n        this.processingQuickAction = false;\n      }\n    },\n    // Quick reject client with simple reason\n    async quickRejectClient(user) {\n      if (!user || !this.canRejectResidency(user)) return;\n      const reason = prompt(`Please provide a reason for rejecting residency verification for ${user.full_name}:`, 'Documents do not meet verification requirements');\n      if (!reason || reason.trim().length < 10) {\n        this.showToast('warning', 'Please provide a detailed reason (minimum 10 characters)');\n        return;\n      }\n      this.processingQuickAction = true;\n      try {\n        // Use the actual account ID, not the composite ID\n        const accountId = user.original_id || user.id;\n        const response = await residencyService.rejectVerification(accountId, reason.trim());\n        if (response.success) {\n          this.showToast('success', `Residency verification rejected for ${user.full_name}`);\n          // Reload users to reflect the change\n          await this.loadUsers();\n        } else {\n          throw new Error(response.message || 'Failed to reject residency verification');\n        }\n      } catch (error) {\n        console.error('Failed to reject residency verification:', error);\n        this.showToast('error', error.message || 'Failed to reject residency verification');\n      } finally {\n        this.processingQuickAction = false;\n      }\n    },\n    formatDocumentType(type) {\n      return residencyService.formatDocumentType(type);\n    },\n    formatDocumentStatus(status) {\n      return residencyService.formatVerificationStatus(status);\n    },\n    getDocumentStatusBadgeClass(status) {\n      return residencyService.getStatusBadgeClass(status);\n    },\n    formatFileSize(bytes) {\n      if (!bytes) return 'Unknown';\n      const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n      const i = Math.floor(Math.log(bytes) / Math.log(1024));\n      return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n    }\n\n    // Additional user-specific methods can be added here\n    // Navigation handlers are now provided by the mixin\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}