{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: process.env.VUE_APP_API_URL || 'http://localhost:7000/api',\n  timeout: 15000,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  withCredentials: true // Enable credentials for CORS\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  // Get unified auth token\n  const authToken = localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token');\n\n  // Add auth token to all requests if available\n  if (authToken) {\n    config.headers.Authorization = `Bearer ${authToken}`;\n  }\n\n  // Debug logging for API requests\n  if (config.url?.includes('/users') || config.url?.includes('/admin/') || config.url?.includes('/client/')) {\n    console.log('ðŸ”— API Request:', {\n      url: config.url,\n      hasAuthToken: !!authToken,\n      authHeader: config.headers.Authorization ? 'Bearer ***' : 'None'\n    });\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle errors\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // Enhanced error logging for debugging\n  const errorDetails = {\n    url: error.config?.url,\n    method: error.config?.method?.toUpperCase(),\n    status: error.response?.status,\n    statusText: error.response?.statusText,\n    message: error.response?.data?.message || error.message,\n    data: error.response?.data,\n    requestData: error.config?.data\n  };\n  console.error('API Error Details:', errorDetails);\n  console.error('Full Error Object:', error);\n  if (error.response?.status === 401) {\n    // Token expired or invalid - clear unified auth data\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('auth_user');\n    sessionStorage.removeItem('auth_token');\n    sessionStorage.removeItem('auth_user');\n    // Don't redirect here, let components handle it\n  }\n\n  // Add more helpful error messages\n  if (!error.response) {\n    error.message = 'Network error - please check if the backend server is running on port 7000';\n  } else if (error.response.status === 500) {\n    error.message = 'Server error - please check the backend logs for details';\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}