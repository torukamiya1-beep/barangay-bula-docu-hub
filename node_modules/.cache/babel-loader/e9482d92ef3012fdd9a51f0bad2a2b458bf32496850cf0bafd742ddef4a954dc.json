{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport api from '@/services/api';\nclass ActivityLogService {\n  /**\n   * Get activity logs with filtering and pagination (legacy endpoint)\n   * @param {Object} filters - Filter parameters\n   * @param {number} page - Page number\n   * @param {number} limit - Items per page\n   * @returns {Promise} Activity logs response\n   */\n  async getActivityLogs(filters = {}, page = 1, limit = 20) {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n        ...Object.fromEntries(Object.entries(filters).filter(([, value]) => value !== '' && value !== null && value !== undefined))\n      });\n      const response = await api.get(`/admin/activity-logs?${params}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get comprehensive activity logs from audit_logs table\n   * @param {Object} filters - Filter parameters\n   * @param {number} page - Page number\n   * @param {number} limit - Items per page\n   * @returns {Promise} Comprehensive activity logs response\n   */\n  async getComprehensiveActivityLogs(filters = {}, page = 1, limit = 50) {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n        ...Object.fromEntries(Object.entries(filters).filter(([, value]) => value !== '' && value !== null && value !== undefined))\n      });\n      const response = await api.get(`/admin/activity-logs/comprehensive?${params}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get recent activity (simplified version for dashboard)\n   * @param {number} limit - Number of recent activities to fetch\n   * @returns {Promise} Recent activity response\n   */\n  async getRecentActivity(limit = 10) {\n    try {\n      const response = await api.get(`/admin/dashboard/activity?limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get activity log details by ID\n   * @param {number} id - Activity log ID\n   * @returns {Promise} Activity log details\n   */\n  async getActivityLogDetails(id) {\n    try {\n      const response = await api.get(`/admin/activity-logs/${id}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Export activity logs as CSV\n   * @param {Object} filters - Filter parameters\n   * @returns {Promise} CSV export response\n   */\n  async exportActivityLogs(filters = {}) {\n    try {\n      const params = new URLSearchParams(Object.fromEntries(Object.entries(filters).filter(([, value]) => value !== '' && value !== null && value !== undefined)));\n      const response = await api.get(`/admin/activity-logs/export?${params}`, {\n        responseType: 'blob'\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get activity statistics\n   * @param {string} period - Time period (day, week, month)\n   * @returns {Promise} Activity statistics\n   */\n  async getActivityStats(period = 'week') {\n    try {\n      const response = await api.get(`/admin/activity-logs/stats?period=${period}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Transform request status history data to activity log format\n   * @param {Array} statusHistory - Raw status history data\n   * @returns {Array} Formatted activity logs\n   */\n  transformStatusHistoryToActivityLogs(statusHistory) {\n    return statusHistory.map(item => ({\n      id: item.id,\n      timestamp: item.changed_at,\n      user_name: item.changed_by_name || 'System',\n      user_role: this.getUserRole(item.changed_by_name),\n      user_type: this.getUserType(item.changed_by_name),\n      activity: this.generateActivityDescription(item),\n      type: 'status_change',\n      document_type: item.document_type,\n      status_change: item.new_status,\n      ip_address: item.ip_address || 'N/A',\n      details: this.generateDetailedDescription(item)\n    }));\n  }\n\n  /**\n   * Generate activity description from status history\n   * @param {Object} item - Status history item\n   * @returns {string} Activity description\n   */\n  generateActivityDescription(item) {\n    const action = item.old_status ? `changed status from \"${item.old_status}\" to \"${item.new_status}\"` : `set status to \"${item.new_status}\"`;\n    return `${item.changed_by_name || 'System'} ${action} for ${item.document_type} request ${item.request_number}`;\n  }\n\n  /**\n   * Generate detailed description\n   * @param {Object} item - Status history item\n   * @returns {string} Detailed description\n   */\n  generateDetailedDescription(item) {\n    let details = `Request: ${item.request_number}\\n`;\n    details += `Document Type: ${item.document_type}\\n`;\n    details += `Client: ${item.client_name || 'Unknown'}\\n`;\n    if (item.old_status) {\n      details += `Status Changed: ${item.old_status} â†’ ${item.new_status}\\n`;\n    } else {\n      details += `Status Set: ${item.new_status}\\n`;\n    }\n    if (item.change_reason) {\n      details += `Reason: ${item.change_reason}\\n`;\n    }\n    details += `Changed At: ${new Date(item.changed_at).toLocaleString()}\\n`;\n    details += `Changed By: ${item.changed_by_name || 'System'}`;\n    return details;\n  }\n\n  /**\n   * Determine user role from name\n   * @param {string} userName - User name\n   * @returns {string} User role\n   */\n  getUserRole(userName) {\n    if (!userName || userName === 'System') return 'System';\n    // This is a simplified approach - in a real system, you'd get this from the database\n    return 'Administrator'; // Default for now\n  }\n\n  /**\n   * Determine user type from name\n   * @param {string} userName - User name\n   * @returns {string} User type\n   */\n  getUserType(userName) {\n    if (!userName || userName === 'System') return 'system';\n    // This is a simplified approach - in a real system, you'd get this from the database\n    return 'admin'; // Default for now\n  }\n\n  /**\n   * Handle API errors\n   * @param {Error} error - API error\n   * @returns {Object} Formatted error\n   */\n  handleError(error) {\n    console.error('ActivityLogService error:', error);\n    if (error.response) {\n      return {\n        success: false,\n        message: error.response.data?.message || 'An error occurred',\n        errors: error.response.data?.errors || [],\n        status: error.response.status\n      };\n    }\n    return {\n      success: false,\n      message: error.message || 'Network error occurred',\n      errors: [],\n      status: 0\n    };\n  }\n\n  /**\n   * Parse error response\n   * @param {Error} error - Error object\n   * @returns {Object} Parsed error data\n   */\n  parseError(error) {\n    return this.handleError(error);\n  }\n}\nexport default new ActivityLogService();","map":{"version":3,"names":["api","ActivityLogService","getActivityLogs","filters","page","limit","params","URLSearchParams","toString","Object","fromEntries","entries","filter","value","undefined","response","get","data","error","handleError","getComprehensiveActivityLogs","getRecentActivity","getActivityLogDetails","id","exportActivityLogs","responseType","getActivityStats","period","transformStatusHistoryToActivityLogs","statusHistory","map","item","timestamp","changed_at","user_name","changed_by_name","user_role","getUserRole","user_type","getUserType","activity","generateActivityDescription","type","document_type","status_change","new_status","ip_address","details","generateDetailedDescription","action","old_status","request_number","client_name","change_reason","Date","toLocaleString","userName","console","success","message","errors","status","parseError"],"sources":["D:/brgy_docu_hub/BOSFDR/src/services/activityLogService.js"],"sourcesContent":["import api from '@/services/api';\n\nclass ActivityLogService {\n  /**\n   * Get activity logs with filtering and pagination (legacy endpoint)\n   * @param {Object} filters - Filter parameters\n   * @param {number} page - Page number\n   * @param {number} limit - Items per page\n   * @returns {Promise} Activity logs response\n   */\n  async getActivityLogs(filters = {}, page = 1, limit = 20) {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n        ...Object.fromEntries(\n          Object.entries(filters).filter(([, value]) => value !== '' && value !== null && value !== undefined)\n        )\n      });\n\n      const response = await api.get(`/admin/activity-logs?${params}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get comprehensive activity logs from audit_logs table\n   * @param {Object} filters - Filter parameters\n   * @param {number} page - Page number\n   * @param {number} limit - Items per page\n   * @returns {Promise} Comprehensive activity logs response\n   */\n  async getComprehensiveActivityLogs(filters = {}, page = 1, limit = 50) {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n        ...Object.fromEntries(\n          Object.entries(filters).filter(([, value]) => value !== '' && value !== null && value !== undefined)\n        )\n      });\n\n      const response = await api.get(`/admin/activity-logs/comprehensive?${params}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get recent activity (simplified version for dashboard)\n   * @param {number} limit - Number of recent activities to fetch\n   * @returns {Promise} Recent activity response\n   */\n  async getRecentActivity(limit = 10) {\n    try {\n      const response = await api.get(`/admin/dashboard/activity?limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get activity log details by ID\n   * @param {number} id - Activity log ID\n   * @returns {Promise} Activity log details\n   */\n  async getActivityLogDetails(id) {\n    try {\n      const response = await api.get(`/admin/activity-logs/${id}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Export activity logs as CSV\n   * @param {Object} filters - Filter parameters\n   * @returns {Promise} CSV export response\n   */\n  async exportActivityLogs(filters = {}) {\n    try {\n      const params = new URLSearchParams(\n        Object.fromEntries(\n          Object.entries(filters).filter(([, value]) => value !== '' && value !== null && value !== undefined)\n        )\n      );\n\n      const response = await api.get(`/admin/activity-logs/export?${params}`, {\n        responseType: 'blob'\n      });\n      \n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get activity statistics\n   * @param {string} period - Time period (day, week, month)\n   * @returns {Promise} Activity statistics\n   */\n  async getActivityStats(period = 'week') {\n    try {\n      const response = await api.get(`/admin/activity-logs/stats?period=${period}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Transform request status history data to activity log format\n   * @param {Array} statusHistory - Raw status history data\n   * @returns {Array} Formatted activity logs\n   */\n  transformStatusHistoryToActivityLogs(statusHistory) {\n    return statusHistory.map(item => ({\n      id: item.id,\n      timestamp: item.changed_at,\n      user_name: item.changed_by_name || 'System',\n      user_role: this.getUserRole(item.changed_by_name),\n      user_type: this.getUserType(item.changed_by_name),\n      activity: this.generateActivityDescription(item),\n      type: 'status_change',\n      document_type: item.document_type,\n      status_change: item.new_status,\n      ip_address: item.ip_address || 'N/A',\n      details: this.generateDetailedDescription(item)\n    }));\n  }\n\n  /**\n   * Generate activity description from status history\n   * @param {Object} item - Status history item\n   * @returns {string} Activity description\n   */\n  generateActivityDescription(item) {\n    const action = item.old_status ? \n      `changed status from \"${item.old_status}\" to \"${item.new_status}\"` :\n      `set status to \"${item.new_status}\"`;\n    \n    return `${item.changed_by_name || 'System'} ${action} for ${item.document_type} request ${item.request_number}`;\n  }\n\n  /**\n   * Generate detailed description\n   * @param {Object} item - Status history item\n   * @returns {string} Detailed description\n   */\n  generateDetailedDescription(item) {\n    let details = `Request: ${item.request_number}\\n`;\n    details += `Document Type: ${item.document_type}\\n`;\n    details += `Client: ${item.client_name || 'Unknown'}\\n`;\n    \n    if (item.old_status) {\n      details += `Status Changed: ${item.old_status} â†’ ${item.new_status}\\n`;\n    } else {\n      details += `Status Set: ${item.new_status}\\n`;\n    }\n    \n    if (item.change_reason) {\n      details += `Reason: ${item.change_reason}\\n`;\n    }\n    \n    details += `Changed At: ${new Date(item.changed_at).toLocaleString()}\\n`;\n    details += `Changed By: ${item.changed_by_name || 'System'}`;\n    \n    return details;\n  }\n\n  /**\n   * Determine user role from name\n   * @param {string} userName - User name\n   * @returns {string} User role\n   */\n  getUserRole(userName) {\n    if (!userName || userName === 'System') return 'System';\n    // This is a simplified approach - in a real system, you'd get this from the database\n    return 'Administrator'; // Default for now\n  }\n\n  /**\n   * Determine user type from name\n   * @param {string} userName - User name\n   * @returns {string} User type\n   */\n  getUserType(userName) {\n    if (!userName || userName === 'System') return 'system';\n    // This is a simplified approach - in a real system, you'd get this from the database\n    return 'admin'; // Default for now\n  }\n\n  /**\n   * Handle API errors\n   * @param {Error} error - API error\n   * @returns {Object} Formatted error\n   */\n  handleError(error) {\n    console.error('ActivityLogService error:', error);\n    \n    if (error.response) {\n      return {\n        success: false,\n        message: error.response.data?.message || 'An error occurred',\n        errors: error.response.data?.errors || [],\n        status: error.response.status\n      };\n    }\n    \n    return {\n      success: false,\n      message: error.message || 'Network error occurred',\n      errors: [],\n      status: 0\n    };\n  }\n\n  /**\n   * Parse error response\n   * @param {Error} error - Error object\n   * @returns {Object} Parsed error data\n   */\n  parseError(error) {\n    return this.handleError(error);\n  }\n}\n\nexport default new ActivityLogService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}