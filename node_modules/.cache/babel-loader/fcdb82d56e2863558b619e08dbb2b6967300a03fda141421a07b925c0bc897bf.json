{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport AdminHeader from './AdminHeader.vue';\nimport AdminSidebar from './AdminSidebar.vue';\nimport ResidencyDocumentsModal from './ResidencyDocumentsModal.vue';\nimport unifiedAuthService from '@/services/unifiedAuthService';\nimport userManagementService from '@/services/userManagementService';\nimport residencyService from '@/services/residencyService';\nimport api from '@/services/api';\nimport { Modal } from 'bootstrap';\nexport default {\n  name: 'AdminUsers',\n  components: {\n    AdminHeader,\n    AdminSidebar,\n    ResidencyDocumentsModal\n  },\n  data() {\n    return {\n      // UI State\n      sidebarCollapsed: false,\n      showUserDropdown: false,\n      isMobile: false,\n      adminData: null,\n      // Component Data\n      users: [],\n      searchQuery: '',\n      filterStatus: '',\n      filterType: '',\n      activeTab: 'clients',\n      // New property for tab management\n      currentPage: 1,\n      itemsPerPage: 10,\n      loading: false,\n      userStats: {\n        total: 0,\n        active: 0,\n        pending: 0,\n        admins: 0\n      },\n      // Modal data\n      viewUserData: null,\n      addUserLoading: false,\n      editUserLoading: false,\n      // Residency verification data\n      selectedUserForResidency: null,\n      processingResidencyAction: false,\n      processingQuickAction: false,\n      rejectionReason: '',\n      // Direct DOM modal (no reactive data needed)\n\n      // Form validation errors\n      formErrors: {},\n      editFormErrors: {},\n      // Add user form\n      addUserForm: {\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n        first_name: '',\n        middle_name: '',\n        last_name: '',\n        suffix: '',\n        role: '',\n        phone_number: '',\n        // Client specific fields\n        birth_date: '',\n        gender: '',\n        civil_status_id: 1,\n        nationality: 'Filipino',\n        house_number: '',\n        street: '',\n        subdivision: '',\n        barangay: '',\n        city_municipality: '',\n        province: '',\n        postal_code: '',\n        years_of_residency: null,\n        months_of_residency: null\n      },\n      // Edit user form\n      editUserForm: {\n        id: null,\n        username: '',\n        email: '',\n        first_name: '',\n        middle_name: '',\n        last_name: '',\n        suffix: '',\n        role: '',\n        status: '',\n        phone_number: '',\n        // Client specific fields\n        birth_date: '',\n        gender: '',\n        civil_status_id: 1,\n        nationality: 'Filipino',\n        house_number: '',\n        street: '',\n        subdivision: '',\n        barangay: '',\n        city_municipality: '',\n        province: '',\n        postal_code: '',\n        years_of_residency: null,\n        months_of_residency: null,\n        // Password reset fields\n        resetPassword: false,\n        newPassword: '',\n        confirmPassword: ''\n      },\n      // Available options\n      genderOptions: [{\n        value: 'male',\n        label: 'Male'\n      }, {\n        value: 'female',\n        label: 'Female'\n      }],\n      statusOptions: [{\n        value: 'active',\n        label: 'Active'\n      }, {\n        value: 'inactive',\n        label: 'Inactive'\n      }, {\n        value: 'suspended',\n        label: 'Suspended'\n      }, {\n        value: 'pending_verification',\n        label: 'Pending Verification'\n      }]\n    };\n  },\n  computed: {\n    activeMenu() {\n      const path = this.$route.path;\n      if (path.includes('/admin/users')) return 'users';\n      if (path.includes('/admin/requests')) return 'requests';\n      if (path.includes('/admin/reports')) return 'reports';\n      if (path.includes('/admin/settings')) return 'settings';\n      if (path.includes('/admin/activity-logs')) return 'activity';\n      if (path.includes('/admin/profile')) return 'profile';\n      return 'dashboard';\n    },\n    // Separate statistics for clients and admins\n    clientStats() {\n      const clients = this.users.filter(user => user.type === 'client' && user.status !== 'inactive');\n      return {\n        total: clients.length,\n        active: clients.filter(user => this.getDisplayStatus(user) === 'active').length,\n        pending: clients.filter(user => this.getDisplayStatus(user) === 'pending_residency_verification').length,\n        rejected: clients.filter(user => this.getDisplayStatus(user) === 'residency_rejected').length\n      };\n    },\n    adminStats() {\n      const admins = this.users.filter(user => user.type === 'admin' && user.status !== 'inactive');\n      return {\n        total: admins.length,\n        active: admins.filter(user => user.status === 'active').length,\n        suspended: admins.filter(user => user.status === 'suspended').length\n      };\n    },\n    filteredUsers() {\n      let filtered = [...this.users];\n\n      // Apply tab-based role filter and exclude inactive users\n      if (this.activeTab === 'clients') {\n        filtered = filtered.filter(user => user.type === 'client' && user.status !== 'inactive');\n      } else if (this.activeTab === 'admins') {\n        filtered = filtered.filter(user => user.type === 'admin' && user.status !== 'inactive');\n      }\n\n      // Apply search filter\n      if (this.searchQuery) {\n        const query = this.searchQuery.toLowerCase();\n        filtered = filtered.filter(user => {\n          const displayStatus = this.getDisplayStatus(user);\n          const formattedStatus = this.formatStatus(displayStatus);\n          return user.full_name?.toLowerCase().includes(query) || user.email?.toLowerCase().includes(query) || user.username?.toLowerCase().includes(query) || user.type?.toLowerCase().includes(query) || user.status?.toLowerCase().includes(query) || displayStatus?.toLowerCase().includes(query) || formattedStatus?.toLowerCase().includes(query) || user.first_name?.toLowerCase().includes(query) || user.last_name?.toLowerCase().includes(query);\n        });\n      }\n\n      // Apply status filter\n      if (this.filterStatus) {\n        filtered = filtered.filter(user => {\n          const displayStatus = this.getDisplayStatus(user);\n          return displayStatus === this.filterStatus;\n        });\n      }\n      return filtered;\n    },\n    paginatedUsers() {\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return this.filteredUsers.slice(start, end);\n    },\n    totalPages() {\n      return Math.ceil(this.filteredUsers.length / this.itemsPerPage);\n    },\n    visiblePages() {\n      const pages = [];\n      const start = Math.max(1, this.currentPage - 2);\n      const end = Math.min(this.totalPages, this.currentPage + 2);\n      for (let i = start; i <= end; i++) {\n        pages.push(i);\n      }\n      return pages;\n    },\n    // Check if we're creating an admin user (when admin tab is active)\n    isCreatingAdminUser() {\n      return this.activeTab === 'admins';\n    }\n  },\n  watch: {\n    // Reset pagination when search query changes\n    searchQuery() {\n      this.currentPage = 1;\n    },\n    // Reset pagination when status filter changes\n    filterStatus() {\n      this.currentPage = 1;\n    }\n  },\n  async mounted() {\n    // Check authentication\n    if (!unifiedAuthService.isLoggedIn() || unifiedAuthService.getUserType() !== 'admin') {\n      this.$router.push('/login');\n      return;\n    }\n\n    // Initialize UI state\n    this.initializeUI();\n\n    // Make bootstrap available globally for this component\n    this.$bootstrap = {\n      Modal\n    };\n\n    // Debug authentication - using unified auth system\n    const authToken = localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token');\n    const userData = localStorage.getItem('auth_user') || sessionStorage.getItem('auth_user');\n    console.log('🔍 Admin Authentication Debug:');\n    console.log('  Auth Token:', authToken ? 'EXISTS' : 'NOT FOUND');\n    console.log('  User Data:', userData ? 'EXISTS' : 'NOT FOUND');\n    if (userData) {\n      try {\n        const data = JSON.parse(userData);\n        console.log('  Username:', data.username);\n        console.log('  User Type:', data.type);\n        console.log('  Role:', data.role);\n        console.log('  Status:', data.status);\n      } catch (e) {\n        console.error('  Error parsing user data:', e);\n      }\n    }\n\n    // Check if user is authenticated and is an admin\n    if (!authToken || !userData) {\n      this.showToast('error', 'You are not logged in. Please login first.');\n      this.$router.push('/login');\n      return;\n    }\n    try {\n      const user = JSON.parse(userData);\n      if (user.type !== 'admin') {\n        this.showToast('error', 'Access denied. Admin privileges required.');\n        this.$router.push('/login');\n        return;\n      }\n    } catch (e) {\n      console.error('Error parsing user data:', e);\n      this.showToast('error', 'Invalid authentication data. Please login again.');\n      this.$router.push('/login');\n      return;\n    }\n\n    // Load component data\n    await this.loadAdminProfile();\n    await this.loadUserStats();\n    await this.loadUsers();\n\n    // Add event listener for image modal close to clean up blob URLs\n    const imageModal = document.getElementById('directImageModal');\n    if (imageModal) {\n      imageModal.addEventListener('hidden.bs.modal', () => {\n        // Clean up blob URLs from images in the modal\n        const contentDiv = document.getElementById('imageModalContent');\n        if (contentDiv) {\n          const images = contentDiv.querySelectorAll('img[src^=\"blob:\"]');\n          images.forEach(img => {\n            URL.revokeObjectURL(img.src);\n          });\n          // Clear content\n          contentDiv.innerHTML = '';\n        }\n      });\n    }\n  },\n  beforeUnmount() {\n    if (this.handleResize) {\n      window.removeEventListener('resize', this.handleResize);\n    }\n\n    // Clean up blob URLs to prevent memory leaks\n    const contentDiv = document.getElementById('imageModalContent');\n    if (contentDiv) {\n      const images = contentDiv.querySelectorAll('img[src^=\"blob:\"]');\n      images.forEach(img => {\n        URL.revokeObjectURL(img.src);\n      });\n    }\n  },\n  methods: {\n    // Initialize UI state\n    initializeUI() {\n      this.isMobile = window.innerWidth <= 768;\n\n      // Load saved sidebar state (only on desktop)\n      if (!this.isMobile) {\n        const saved = localStorage.getItem('adminSidebarCollapsed');\n        this.sidebarCollapsed = saved ? JSON.parse(saved) : false;\n      } else {\n        this.sidebarCollapsed = true; // Always collapsed on mobile\n      }\n\n      // Setup resize listener\n      this.handleResize = () => {\n        const wasMobile = this.isMobile;\n        this.isMobile = window.innerWidth <= 768;\n        if (this.isMobile && !wasMobile) {\n          this.sidebarCollapsed = true; // Collapse when switching to mobile\n        } else if (!this.isMobile && wasMobile) {\n          // Restore saved state when switching to desktop\n          const saved = localStorage.getItem('adminSidebarCollapsed');\n          this.sidebarCollapsed = saved ? JSON.parse(saved) : false;\n        }\n      };\n      window.addEventListener('resize', this.handleResize);\n    },\n    // Sidebar toggle\n    handleSidebarToggle() {\n      this.sidebarCollapsed = !this.sidebarCollapsed;\n      localStorage.setItem('adminSidebarCollapsed', JSON.stringify(this.sidebarCollapsed));\n    },\n    // Menu navigation\n    handleMenuChange(menu) {\n      const routes = {\n        'dashboard': '/admin/dashboard',\n        'users': '/admin/users',\n        'requests': '/admin/requests',\n        'reports': '/admin/reports',\n        'settings': '/admin/settings',\n        'activity': '/admin/activity-logs',\n        'profile': '/admin/profile'\n      };\n\n      // Close sidebar on mobile after navigation\n      if (this.isMobile) {\n        this.sidebarCollapsed = true;\n      }\n      if (routes[menu]) {\n        this.$router.push(routes[menu]);\n      }\n    },\n    // User dropdown toggle\n    handleUserDropdownToggle() {\n      this.showUserDropdown = !this.showUserDropdown;\n    },\n    // Menu actions\n    handleMenuAction(action) {\n      if (action === 'profile') {\n        this.$router.push('/admin/profile');\n      } else if (action === 'settings') {\n        this.$router.push('/admin/settings');\n      }\n      this.showUserDropdown = false;\n    },\n    // Close mobile sidebar\n    closeMobileSidebar() {\n      if (this.isMobile) {\n        this.sidebarCollapsed = true;\n      }\n    },\n    // Logout\n    handleLogout() {\n      unifiedAuthService.logout();\n      this.$router.push('/login');\n    },\n    // Handle phone number input to restrict to digits only\n    handlePhoneInput(event, formType) {\n      const value = event.target.value;\n      // Remove any non-digit characters\n      const digitsOnly = value.replace(/\\D/g, '');\n      // Limit to 11 digits\n      const limitedValue = digitsOnly.substring(0, 11);\n      if (formType === 'add') {\n        this.addUserForm.phone_number = limitedValue;\n      } else if (formType === 'edit') {\n        this.editUserForm.phone_number = limitedValue;\n      }\n    },\n    // Load admin profile data\n    async loadAdminProfile() {\n      try {\n        const currentUser = unifiedAuthService.getCurrentUser();\n        if (currentUser && currentUser.profile) {\n          this.adminData = currentUser.profile;\n        } else {\n          // Fallback to basic user data\n          this.adminData = {\n            first_name: currentUser?.username || 'Admin',\n            role: currentUser?.role || 'admin'\n          };\n        }\n      } catch (error) {\n        console.error('Failed to load admin data:', error);\n        const currentUser = unifiedAuthService.getCurrentUser();\n        this.adminData = {\n          first_name: currentUser?.username || 'Admin',\n          role: currentUser?.role || 'admin'\n        };\n      }\n    },\n    // Load user statistics\n    async loadUserStats() {\n      try {\n        const response = await userManagementService.getUserStats();\n        if (response.success) {\n          this.userStats = response.data;\n        } else {\n          this.calculateStats();\n        }\n      } catch (error) {\n        console.error('Failed to load user statistics:', error);\n        this.calculateStats();\n      }\n    },\n    // Load users data\n    async loadUsers() {\n      this.loading = true;\n      try {\n        const params = {\n          page: this.currentPage,\n          limit: 50,\n          search: this.searchQuery || undefined,\n          // Don't filter by role in API call since we handle it in frontend with tabs\n          is_active: this.filterStatus === 'active' ? true : this.filterStatus === 'inactive' ? false : undefined\n        };\n        const response = await userManagementService.getUsers(params);\n        if (response.success) {\n          this.users = response.data.users.map(user => userManagementService.formatUserData(user));\n          this.calculateStats();\n        } else {\n          throw new Error(response.message || 'Failed to load users');\n        }\n      } catch (error) {\n        console.error('Failed to load users:', error);\n        this.showToast('error', error.message || 'Failed to load users');\n        this.users = [];\n        this.calculateStats();\n      } finally {\n        this.loading = false;\n      }\n    },\n    // Calculate user statistics\n    calculateStats() {\n      this.userStats = {\n        total: this.users.length,\n        active: this.users.filter(u => this.getDisplayStatus(u) === 'active').length,\n        pending: this.users.filter(u => this.getDisplayStatus(u) === 'pending_residency_verification').length,\n        admins: this.users.filter(u => u.type === 'admin').length\n      };\n    },\n    // Change page\n    changePage(page) {\n      if (page >= 1 && page <= this.totalPages) {\n        this.currentPage = page;\n      }\n    },\n    // Get user initials for avatar\n    getInitials(fullName) {\n      if (!fullName) return '?';\n      return fullName.split(' ').map(name => name.charAt(0)).join('').toUpperCase().slice(0, 2);\n    },\n    // Get status badge class\n    getStatusBadgeClass(status) {\n      const classes = {\n        'active': 'bg-success',\n        'inactive': 'bg-secondary',\n        'pending': 'bg-warning',\n        'suspended': 'bg-danger',\n        'pending_verification': 'bg-warning',\n        'pending_residency_verification': 'bg-info',\n        'residency_rejected': 'bg-danger',\n        'residency_approved': 'bg-success',\n        'no_residency_documents': 'bg-warning'\n      };\n      return classes[status] || 'bg-secondary';\n    },\n    // Format status text\n    formatStatus(status) {\n      const statusLabels = {\n        'active': 'Active',\n        'inactive': 'Inactive',\n        'pending': 'Pending',\n        'suspended': 'Suspended',\n        'pending_verification': 'Pending Verification',\n        'pending_residency_verification': 'Pending Residency Verification',\n        'residency_rejected': 'Residency Rejected',\n        'residency_approved': 'Residency Approved',\n        'no_residency_documents': 'No Residency Documents'\n      };\n      return statusLabels[status] || status.charAt(0).toUpperCase() + status.slice(1);\n    },\n    // Format date\n    formatDate(dateString) {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      });\n    },\n    // User actions\n\n    async toggleUserStatus(user) {\n      try {\n        const newStatus = user.status === 'active' ? 'suspended' : 'active';\n        const reason = `Status changed by admin: ${this.adminData?.first_name || 'Admin'}`;\n        const response = await userManagementService.updateUserStatus(user.id, newStatus, reason);\n        if (response.success) {\n          // Update local data\n          user.status = newStatus;\n          this.calculateStats();\n          const statusText = newStatus === 'active' ? 'activated' : 'suspended';\n          this.showToast('success', `User ${user.full_name} has been ${statusText}.`);\n        } else {\n          throw new Error(response.message || 'Failed to update user status');\n        }\n      } catch (error) {\n        console.error('Failed to update user status:', error);\n        const errorMessage = error.response?.data?.message || error.message || 'Failed to update user status. Please try again.';\n        this.showToast('error', errorMessage);\n      }\n    },\n    async deleteUser(user) {\n      const confirmMessage = `Are you sure you want to delete user \"${user.full_name}\"?\\n\\nThis will:\\n- Deactivate the user account\\n- Prevent future logins\\n- Preserve data for audit purposes\\n\\nThis action can be reversed by reactivating the user.`;\n      if (!confirm(confirmMessage)) {\n        return;\n      }\n      try {\n        const reason = `User deleted by admin: ${this.adminData?.first_name || 'Admin'}`;\n        const response = await userManagementService.deleteUser(user.id, reason);\n        if (response.success) {\n          this.showToast('success', `User ${user.full_name} has been deleted successfully.`);\n\n          // Reload data to reflect changes\n          await this.loadUsers();\n          await this.loadUserStats();\n        } else {\n          throw new Error(response.message || 'Failed to delete user');\n        }\n      } catch (error) {\n        console.error('Failed to delete user:', error);\n        const errorMessage = error.response?.data?.message || error.message || 'Failed to delete user. Please try again.';\n        this.showToast('error', errorMessage);\n      }\n    },\n    // Helper methods\n    showToast(type, message) {\n      if (this.$toast?.[type]) {\n        this.$toast[type](message);\n      } else {\n        console.log(`${type.toUpperCase()}: ${message}`);\n        if (type === 'error') alert(`Error: ${message}`);else if (type === 'success') alert(`Success: ${message}`);\n      }\n    },\n    closeModal(modalId) {\n      try {\n        const modal = Modal.getInstance(document.getElementById(modalId));\n        if (modal) modal.hide();\n      } catch (error) {\n        console.error('Error closing modal:', error);\n      }\n    },\n    handleFormError(error, errorField) {\n      console.error('Form error:', error);\n\n      // Handle server validation errors\n      if (error.response?.data?.details) {\n        const serverErrors = {};\n        error.response.data.details.forEach(detail => {\n          if (detail.path) serverErrors[detail.path] = detail.msg;\n        });\n        this[errorField] = {\n          ...this[errorField],\n          ...serverErrors\n        };\n      }\n      const errorMessage = error.response?.data?.message || error.message || 'Operation failed';\n      this.showToast('error', errorMessage);\n    },\n    // Modal methods\n    showAddUserModal() {\n      this.resetAddUserForm();\n      try {\n        const modalElement = document.getElementById('addUserModal');\n        if (modalElement) {\n          const modal = new Modal(modalElement);\n          modal.show();\n        }\n      } catch (error) {\n        console.error('Error showing add user modal:', error);\n        this.$toast?.error?.('Failed to open add user modal');\n      }\n    },\n    resetAddUserForm() {\n      // Set default role based on active tab\n      const defaultRole = this.activeTab === 'admins' ? 'admin' : '';\n      Object.assign(this.addUserForm, {\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n        first_name: '',\n        middle_name: '',\n        last_name: '',\n        suffix: '',\n        role: defaultRole,\n        phone_number: '',\n        birth_date: '',\n        gender: '',\n        civil_status_id: 1,\n        nationality: 'Filipino',\n        house_number: '',\n        street: '',\n        subdivision: '',\n        barangay: '',\n        city_municipality: '',\n        province: '',\n        postal_code: '',\n        years_of_residency: null,\n        months_of_residency: null\n      });\n      // Clear form errors object safely\n      Object.keys(this.formErrors).forEach(key => delete this.formErrors[key]);\n    },\n    clearRoleSpecificFields() {\n      const form = this.addUserForm;\n      if (form.role === 'admin') {\n        // Clear client fields\n        Object.assign(form, {\n          birth_date: '',\n          gender: '',\n          civil_status_id: 1,\n          nationality: 'Filipino',\n          house_number: '',\n          street: '',\n          subdivision: '',\n          barangay: '',\n          city_municipality: '',\n          province: '',\n          postal_code: '',\n          years_of_residency: null,\n          months_of_residency: null\n        });\n      } else if (form.role === 'client') {\n        // No admin-specific fields to clear anymore\n      }\n    },\n    validateAddUserForm() {\n      const errors = {};\n      const form = this.addUserForm;\n\n      // Basic validation\n      if (!form.username?.length || form.username.length < 3) errors.username = 'Username must be at least 3 characters long';\n      if (!form.password?.length || form.password.length < 6) errors.password = 'Password must be at least 6 characters long';\n      if (!form.confirmPassword?.length) errors.confirmPassword = 'Please confirm your password';\n      if (form.password && form.confirmPassword && form.password !== form.confirmPassword) errors.confirmPassword = 'Passwords do not match';\n      if (!form.first_name?.trim() || form.first_name.trim().length < 2) errors.first_name = 'First name must be at least 2 characters long';\n      if (!form.last_name?.trim() || form.last_name.trim().length < 2) errors.last_name = 'Last name must be at least 2 characters long';\n      if (!form.role) errors.role = 'Please select a user type';\n      if (!form.phone_number?.trim() || form.phone_number.trim().length < 10) errors.phone_number = 'Please provide a valid phone number';\n      if (form.email && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(form.email)) errors.email = 'Please provide a valid email address';\n\n      // Client-specific validation\n      if (form.role === 'client') {\n        if (!form.birth_date) errors.birth_date = 'Birth date is required for clients';\n        if (!form.gender) errors.gender = 'Gender is required for clients';\n        if (!form.barangay?.trim()) errors.barangay = 'Barangay is required for clients';\n        if (!form.city_municipality?.trim()) errors.city_municipality = 'City/Municipality is required for clients';\n        if (!form.province?.trim()) errors.province = 'Province is required for clients';\n      }\n      this.formErrors = errors;\n      return Object.keys(errors).length === 0;\n    },\n    validateEditUserForm() {\n      const errors = {};\n      const form = this.editUserForm;\n\n      // Basic validation\n      if (!form.username?.length || form.username.length < 3) errors.username = 'Username must be at least 3 characters long';\n      if (!form.first_name?.trim() || form.first_name.trim().length < 2) errors.first_name = 'First name must be at least 2 characters long';\n      if (!form.last_name?.trim() || form.last_name.trim().length < 2) errors.last_name = 'Last name must be at least 2 characters long';\n      if (!form.phone_number?.trim() || form.phone_number.trim().length < 10) errors.phone_number = 'Please provide a valid phone number';\n      if (form.email && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(form.email)) errors.email = 'Please provide a valid email address';\n\n      // Password reset validation\n      if (form.resetPassword) {\n        if (!form.newPassword?.length || form.newPassword.length < 6) errors.newPassword = 'New password must be at least 6 characters long';\n        if (form.newPassword !== form.confirmPassword) errors.confirmPassword = 'Passwords do not match';\n      }\n      this.editFormErrors = errors;\n      return Object.keys(errors).length === 0;\n    },\n    getFullAddress(user) {\n      const parts = [];\n      if (user.house_number) parts.push(user.house_number);\n      if (user.street) parts.push(user.street);\n      if (user.subdivision) parts.push(user.subdivision);\n      if (user.barangay) parts.push(user.barangay);\n      if (user.city_municipality) parts.push(user.city_municipality);\n      if (user.province) parts.push(user.province);\n      return parts.join(', ') || 'No address provided';\n    },\n    async submitAddUser() {\n      if (!this.validateAddUserForm()) {\n        this.showToast('error', 'Please fix the validation errors before submitting.');\n        return;\n      }\n      this.addUserLoading = true;\n      try {\n        const userData = {\n          ...this.addUserForm\n        };\n\n        // Convert numeric fields\n        ['years_of_residency', 'months_of_residency', 'civil_status_id'].forEach(field => {\n          if (userData[field]) userData[field] = parseInt(userData[field]);\n        });\n\n        // Explicitly set status to 'active' for admin accounts created through AdminUsers.vue\n        if (this.isCreatingAdminUser || userData.role === 'admin') {\n          userData.status = 'active';\n        }\n        const response = await userManagementService.createUser(userData);\n        if (response.success) {\n          this.showToast('success', 'User created successfully');\n          this.closeModal('addUserModal');\n          this.resetAddUserForm();\n          await Promise.all([this.loadUsers(), this.loadUserStats()]);\n        } else {\n          throw new Error(response.message || 'Failed to create user');\n        }\n      } catch (error) {\n        this.handleFormError(error, 'formErrors');\n      } finally {\n        this.addUserLoading = false;\n      }\n    },\n    editUser(user) {\n      this.editUserForm = {\n        id: user.id,\n        username: user.username,\n        email: user.email || '',\n        first_name: user.first_name || '',\n        middle_name: user.middle_name || '',\n        last_name: user.last_name || '',\n        suffix: user.suffix || '',\n        role: user.type,\n        status: user.status,\n        phone_number: user.phone_number || '',\n        birth_date: user.birth_date ? user.birth_date.split('T')[0] : '',\n        gender: user.gender || '',\n        civil_status_id: user.civil_status_id || 1,\n        nationality: user.nationality || 'Filipino',\n        house_number: user.house_number || '',\n        street: user.street || '',\n        subdivision: user.subdivision || '',\n        barangay: user.barangay || '',\n        city_municipality: user.city_municipality || '',\n        province: user.province || '',\n        postal_code: user.postal_code || '',\n        years_of_residency: user.years_of_residency || null,\n        months_of_residency: user.months_of_residency || null,\n        resetPassword: false,\n        newPassword: '',\n        confirmPassword: ''\n      };\n      this.editFormErrors = {};\n      try {\n        const modal = new Modal(document.getElementById('editUserModal'));\n        modal.show();\n      } catch (error) {\n        this.showToast('error', 'Failed to open edit user modal');\n      }\n    },\n    async submitEditUser() {\n      if (!this.validateEditUserForm()) {\n        this.showToast('error', 'Please fix the validation errors before submitting.');\n        return;\n      }\n      this.editUserLoading = true;\n      try {\n        const form = this.editUserForm;\n        const updateData = {\n          username: form.username,\n          email: form.email,\n          first_name: form.first_name,\n          middle_name: form.middle_name,\n          last_name: form.last_name,\n          suffix: form.suffix,\n          status: form.status,\n          phone_number: form.phone_number\n        };\n\n        // Add role-specific fields\n        if (form.role === 'admin') {\n          Object.assign(updateData, {\n            position: form.position,\n            department: form.department,\n            employee_id: form.employee_id,\n            hire_date: form.hire_date\n          });\n        }\n\n        // Add password if resetting\n        if (form.resetPassword && form.newPassword) {\n          updateData.password = form.newPassword;\n        }\n        const response = await userManagementService.updateUser(form.id, updateData);\n        if (response.success) {\n          this.showToast('success', 'User updated successfully');\n          this.closeModal('editUserModal');\n          await Promise.all([this.loadUsers(), this.loadUserStats()]);\n        } else {\n          throw new Error(response.message || 'Failed to update user');\n        }\n      } catch (error) {\n        this.handleFormError(error, 'editFormErrors');\n      } finally {\n        this.editUserLoading = false;\n      }\n    },\n    async viewUser(user) {\n      try {\n        const response = await userManagementService.getUser(user.id);\n        if (response.success) {\n          this.viewUserData = userManagementService.formatUserData(response.data);\n          const modal = new Modal(document.getElementById('viewUserModal'));\n          modal.show();\n        } else {\n          throw new Error(response.message || 'Failed to load user details');\n        }\n      } catch (error) {\n        const errorMessage = error.response?.data?.message || error.message || 'Failed to load user details';\n        this.showToast('error', errorMessage);\n      }\n    },\n    // Handle tab switching\n    setActiveTab(tab) {\n      this.activeTab = tab;\n      this.filterStatus = ''; // Reset status filter when switching tabs\n      this.searchQuery = ''; // Reset search when switching tabs\n      this.currentPage = 1; // Reset pagination\n      console.log(`🔄 Switched to ${tab} tab`);\n    },\n    // Handle opening user modal from notifications\n    async handleOpenUserModal(modalData) {\n      console.log('🔔 AdminUsers: Opening user modal from notification:', modalData);\n      try {\n        const {\n          userId,\n          userType\n        } = modalData;\n        if (!userId) {\n          console.error('❌ No user ID provided for modal');\n          return;\n        }\n        console.log(`🔍 Looking for ${userType || 'unknown'} user with ID: ${userId}`);\n\n        // Switch to the appropriate tab based on user type\n        if (userType === 'client') {\n          this.setActiveTab('clients');\n        } else if (userType === 'admin') {\n          this.setActiveTab('admins');\n        }\n\n        // Find the user in the current users list\n        let user = this.users.find(u => u.id === userId || u.original_id === userId);\n        if (!user) {\n          // If user not found in current list, try to load it directly\n          console.log('🔍 User not found in current list, loading directly...');\n          const response = await userManagementService.getUser(userId);\n          if (response.success) {\n            user = userManagementService.formatUserData(response.data);\n          } else {\n            throw new Error('User not found');\n          }\n        }\n\n        // Open the user details modal\n        await this.viewUser(user);\n        console.log('✅ User modal opened successfully');\n      } catch (error) {\n        console.error('❌ Failed to open user modal:', error);\n        this.showToast('error', 'Failed to open user details');\n      }\n    },\n    // Residency verification methods\n    needsResidencyVerification(user) {\n      return ['pending_residency_verification', 'residency_rejected'].includes(user.status);\n    },\n    // Check if user has residency documents uploaded\n    hasResidencyDocuments(user) {\n      if (user.type !== 'client') return false;\n      return user.residency_document_count > 0;\n    },\n    // Check if user has residency documents that need review (not approved)\n    hasResidencyDocumentsNeedingReview(user) {\n      if (user.type !== 'client') return false;\n      // Only show review button if they have documents AND they're not already approved\n      return user.residency_document_count > 0 && user.residency_verification_status !== 'approved';\n    },\n    // Get the display status for a user (prioritizes residency verification status for clients)\n    getDisplayStatus(user) {\n      if (user.type !== 'client') {\n        return user.status; // For admin users, use regular status\n      }\n\n      // For clients, check if they have residency verification status\n      if (user.residency_verification_status) {\n        // Map residency verification status to display status\n        switch (user.residency_verification_status) {\n          case 'pending':\n            return 'pending_residency_verification';\n          case 'approved':\n            return 'active';\n          // Approved residency = active client\n          case 'rejected':\n            return 'residency_rejected';\n          default:\n            return user.status;\n        }\n      }\n\n      // If no residency documents uploaded yet\n      if (user.residency_document_count === 0 || user.residency_document_count === undefined) {\n        // Check if they're in a residency verification workflow\n        if (['pending_residency_verification', 'residency_rejected'].includes(user.status)) {\n          return 'no_residency_documents';\n        }\n      }\n\n      // If no residency verification status, check account status\n      if (['pending_residency_verification', 'residency_rejected'].includes(user.status)) {\n        return user.status;\n      }\n\n      // For other statuses, return as-is\n      return user.status;\n    },\n    // Check if user can be approved for residency verification\n    canApproveResidency(user) {\n      if (user.type !== 'client') return false;\n      const displayStatus = this.getDisplayStatus(user);\n      // Can approve if they have pending residency verification and have uploaded documents\n      return displayStatus === 'pending_residency_verification' && user.residency_document_count > 0;\n    },\n    // Check if user can be rejected for residency verification\n    canRejectResidency(user) {\n      if (user.type !== 'client') return false;\n      const displayStatus = this.getDisplayStatus(user);\n      // Can reject if they have pending residency verification and have uploaded documents\n      return displayStatus === 'pending_residency_verification' && user.residency_document_count > 0;\n    },\n    viewResidencyDocuments(user) {\n      // Set the selected user and show the modal\n      this.selectedUserForResidency = user;\n      this.rejectionReason = '';\n\n      // Show modal using Bootstrap\n      const modal = new Modal(document.getElementById('residencyDocumentsModal'));\n      modal.show();\n    },\n    // Direct DOM manipulation method to avoid Vue reactivity issues\n    async openImageModal(user) {\n      if (!user) return;\n      console.log('Opening image modal for user:', user);\n\n      // Get modal elements\n      const modal = new Modal(document.getElementById('directImageModal'));\n      const contentDiv = document.getElementById('imageModalContent');\n\n      // Show loading state directly in DOM\n      contentDiv.innerHTML = `\n        <div class=\"text-center py-5\">\n          <div class=\"spinner-border text-primary\" role=\"status\">\n            <span class=\"visually-hidden\">Loading...</span>\n          </div>\n          <p class=\"mt-3 text-muted\">Loading images...</p>\n        </div>\n      `;\n\n      // Show modal\n      modal.show();\n      try {\n        // Get account ID\n        const accountId = user.original_id || user.id;\n        const numericId = typeof accountId === 'string' && accountId.includes('_') ? accountId.split('_')[1] : accountId;\n        console.log('Fetching documents for account ID:', numericId);\n\n        // Get documents\n        const response = await residencyService.getAccountDocuments(numericId);\n        if (response.success && response.data && response.data.length > 0) {\n          console.log('Documents found:', response.data.length);\n\n          // Filter images only\n          const imageDocuments = response.data.filter(doc => {\n            const imageTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\n            return imageTypes.includes(doc.mime_type?.toLowerCase());\n          });\n          console.log('Image documents found:', imageDocuments.length);\n          if (imageDocuments.length > 0) {\n            // Start building HTML for images\n            let imagesHtml = '<div class=\"row g-3\">';\n            let loadedCount = 0;\n\n            // Load each image\n            for (const doc of imageDocuments) {\n              try {\n                console.log('Loading image:', doc.document_name);\n                const imgResponse = await api.get(`/residency/documents/${doc.id}/file`, {\n                  responseType: 'blob'\n                });\n                const blob = new Blob([imgResponse.data], {\n                  type: doc.mime_type\n                });\n                const url = URL.createObjectURL(blob);\n\n                // Add image card HTML\n                imagesHtml += `\n                  <div class=\"col-md-6 col-lg-4\">\n                    <div class=\"card shadow-sm\">\n                      <img src=\"${url}\" alt=\"${doc.document_name || 'Residency Document'}\"\n                           class=\"card-img-top\" style=\"height: 200px; object-fit: contain; background: #f8f9fa;\">\n                      <div class=\"card-body p-2\">\n                        <small class=\"text-muted\">${doc.document_name || 'Unknown Document'}</small>\n                        <br>\n                        <small class=\"text-muted\">${doc.document_type || 'Document'}</small>\n                      </div>\n                    </div>\n                  </div>\n                `;\n                loadedCount++;\n                console.log('✅ Successfully loaded:', doc.document_name);\n              } catch (error) {\n                console.error('❌ Failed to load image:', doc.document_name, error);\n\n                // Add error card\n                imagesHtml += `\n                  <div class=\"col-md-6 col-lg-4\">\n                    <div class=\"card shadow-sm\">\n                      <div class=\"card-body text-center p-4\">\n                        <i class=\"fas fa-exclamation-triangle fa-2x text-danger mb-2\"></i>\n                        <p class=\"text-muted small mb-0\">Failed to load</p>\n                        <p class=\"text-muted small mb-0\">${doc.document_name || 'Unknown'}</p>\n                      </div>\n                    </div>\n                  </div>\n                `;\n              }\n            }\n            imagesHtml += '</div>';\n            if (loadedCount > 0) {\n              // Show images\n              contentDiv.innerHTML = imagesHtml;\n              console.log('Successfully displayed', loadedCount, 'images');\n            } else {\n              // Show error\n              contentDiv.innerHTML = `\n                <div class=\"text-center py-5\">\n                  <i class=\"fas fa-exclamation-triangle fa-3x text-danger mb-3\"></i>\n                  <h5>Failed to Load Images</h5>\n                  <p class=\"text-muted\">All images failed to load. Please try again.</p>\n                </div>\n              `;\n            }\n          } else {\n            // No image documents\n            contentDiv.innerHTML = `\n              <div class=\"text-center py-5\">\n                <i class=\"fas fa-file fa-3x text-muted mb-3\"></i>\n                <h5>No Image Documents</h5>\n                <p class=\"text-muted\">This user has uploaded documents, but none are image files.</p>\n              </div>\n            `;\n          }\n        } else {\n          // No documents at all\n          contentDiv.innerHTML = `\n            <div class=\"text-center py-5\">\n              <i class=\"fas fa-folder-open fa-3x text-muted mb-3\"></i>\n              <h5>No Documents Found</h5>\n              <p class=\"text-muted\">This user has not uploaded any residency documents yet.</p>\n            </div>\n          `;\n        }\n      } catch (error) {\n        console.error('Error loading images:', error);\n\n        // Show error\n        contentDiv.innerHTML = `\n          <div class=\"text-center py-5\">\n            <i class=\"fas fa-exclamation-triangle fa-3x text-danger mb-3\"></i>\n            <h5>Error Loading Images</h5>\n            <p class=\"text-muted\">${error.message || 'An unexpected error occurred'}</p>\n            <button class=\"btn btn-outline-primary btn-sm mt-2\" onclick=\"location.reload()\">\n              <i class=\"fas fa-refresh me-1\"></i>\n              Refresh Page\n            </button>\n          </div>\n        `;\n      }\n    },\n    async approveResidencyVerification() {\n      if (!this.selectedUserForResidency) return;\n      this.processingResidencyAction = true;\n      try {\n        // Use the actual account ID, not the composite ID\n        const accountId = this.selectedUserForResidency.original_id || this.selectedUserForResidency.id;\n\n        // Extract numeric ID if it's in format like 'client_32'\n        const numericId = typeof accountId === 'string' && accountId.includes('_') ? parseInt(accountId.split('_')[1]) : parseInt(accountId);\n        console.log('Approving residency for account ID:', numericId);\n        const response = await residencyService.approveVerification(numericId);\n        if (response.success) {\n          this.showToast('success', 'Residency verification approved successfully');\n\n          // Close modal\n          const modal = Modal.getInstance(document.getElementById('residencyDocumentsModal'));\n          if (modal) {\n            modal.hide();\n          }\n\n          // Refresh user list\n          await this.loadUsers();\n        } else {\n          throw new Error(response.message || 'Failed to approve verification');\n        }\n      } catch (error) {\n        console.error('Failed to approve residency verification:', error);\n        this.showToast('error', error.message || 'Failed to approve verification');\n      } finally {\n        this.processingResidencyAction = false;\n      }\n    },\n    showRejectResidencyModal() {\n      // Close documents modal first\n      const documentsModal = Modal.getInstance(document.getElementById('residencyDocumentsModal'));\n      documentsModal.hide();\n\n      // Show reject modal\n      setTimeout(() => {\n        const rejectModal = new Modal(document.getElementById('rejectResidencyModal'));\n        rejectModal.show();\n      }, 300);\n    },\n    async rejectResidencyVerification() {\n      if (!this.selectedUserForResidency || !this.rejectionReason || this.rejectionReason.length < 10) return;\n      this.processingResidencyAction = true;\n      try {\n        // Use the actual account ID, not the composite ID\n        const accountId = this.selectedUserForResidency.original_id || this.selectedUserForResidency.id;\n\n        // Extract numeric ID if it's in format like 'client_32'\n        const numericId = typeof accountId === 'string' && accountId.includes('_') ? parseInt(accountId.split('_')[1]) : parseInt(accountId);\n        console.log('Rejecting residency for account ID:', numericId);\n        const response = await residencyService.rejectVerification(numericId, this.rejectionReason);\n        if (response.success) {\n          this.showToast('success', 'Residency verification rejected');\n\n          // Close modal\n          const modal = Modal.getInstance(document.getElementById('rejectResidencyModal'));\n          modal.hide();\n\n          // Refresh user list\n          await this.loadUsers();\n        } else {\n          throw new Error(response.message || 'Failed to reject verification');\n        }\n      } catch (error) {\n        console.error('Failed to reject residency verification:', error);\n        this.showToast('error', error.message || 'Failed to reject verification');\n      } finally {\n        this.processingResidencyAction = false;\n      }\n    },\n    // Quick approve client without viewing documents\n    async quickApproveClient(user) {\n      if (!user || !this.canApproveResidency(user)) return;\n      const confirmed = confirm(`Are you sure you want to approve residency verification for ${user.full_name}? This will activate their account and allow them to request documents.`);\n      if (!confirmed) return;\n      this.processingQuickAction = true;\n      try {\n        // Use the actual account ID, not the composite ID\n        const accountId = user.original_id || user.id;\n        const response = await residencyService.approveVerification(accountId);\n        if (response.success) {\n          this.showToast('success', `Residency verification approved for ${user.full_name}`);\n          // Reload users to reflect the change\n          await this.loadUsers();\n        } else {\n          throw new Error(response.message || 'Failed to approve residency verification');\n        }\n      } catch (error) {\n        console.error('Failed to approve residency verification:', error);\n        this.showToast('error', error.message || 'Failed to approve residency verification');\n      } finally {\n        this.processingQuickAction = false;\n      }\n    },\n    // Quick reject client with simple reason\n    async quickRejectClient(user) {\n      if (!user || !this.canRejectResidency(user)) return;\n      const reason = prompt(`Please provide a reason for rejecting residency verification for ${user.full_name}:`, 'Documents do not meet verification requirements');\n      if (!reason || reason.trim().length < 10) {\n        this.showToast('warning', 'Please provide a detailed reason (minimum 10 characters)');\n        return;\n      }\n      this.processingQuickAction = true;\n      try {\n        // Use the actual account ID, not the composite ID\n        const accountId = user.original_id || user.id;\n        const response = await residencyService.rejectVerification(accountId, reason.trim());\n        if (response.success) {\n          this.showToast('success', `Residency verification rejected for ${user.full_name}`);\n          // Reload users to reflect the change\n          await this.loadUsers();\n        } else {\n          throw new Error(response.message || 'Failed to reject residency verification');\n        }\n      } catch (error) {\n        console.error('Failed to reject residency verification:', error);\n        this.showToast('error', error.message || 'Failed to reject residency verification');\n      } finally {\n        this.processingQuickAction = false;\n      }\n    },\n    formatDocumentType(type) {\n      return residencyService.formatDocumentType(type);\n    },\n    formatDocumentStatus(status) {\n      return residencyService.formatVerificationStatus(status);\n    },\n    getDocumentStatusBadgeClass(status) {\n      return residencyService.getStatusBadgeClass(status);\n    },\n    formatFileSize(bytes) {\n      if (!bytes) return 'Unknown';\n      const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n      const i = Math.floor(Math.log(bytes) / Math.log(1024));\n      return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n    }\n\n    // Additional user-specific methods can be added here\n    // Navigation handlers are now provided by the mixin\n  }\n};","map":{"version":3,"names":["AdminHeader","AdminSidebar","ResidencyDocumentsModal","unifiedAuthService","userManagementService","residencyService","api","Modal","name","components","data","sidebarCollapsed","showUserDropdown","isMobile","adminData","users","searchQuery","filterStatus","filterType","activeTab","currentPage","itemsPerPage","loading","userStats","total","active","pending","admins","viewUserData","addUserLoading","editUserLoading","selectedUserForResidency","processingResidencyAction","processingQuickAction","rejectionReason","formErrors","editFormErrors","addUserForm","username","email","password","confirmPassword","first_name","middle_name","last_name","suffix","role","phone_number","birth_date","gender","civil_status_id","nationality","house_number","street","subdivision","barangay","city_municipality","province","postal_code","years_of_residency","months_of_residency","editUserForm","id","status","resetPassword","newPassword","genderOptions","value","label","statusOptions","computed","activeMenu","path","$route","includes","clientStats","clients","filter","user","type","length","getDisplayStatus","rejected","adminStats","suspended","filteredUsers","filtered","query","toLowerCase","displayStatus","formattedStatus","formatStatus","full_name","paginatedUsers","start","end","slice","totalPages","Math","ceil","visiblePages","pages","max","min","i","push","isCreatingAdminUser","watch","mounted","isLoggedIn","getUserType","$router","initializeUI","$bootstrap","authToken","localStorage","getItem","sessionStorage","userData","console","log","JSON","parse","e","error","showToast","loadAdminProfile","loadUserStats","loadUsers","imageModal","document","getElementById","addEventListener","contentDiv","images","querySelectorAll","forEach","img","URL","revokeObjectURL","src","innerHTML","beforeUnmount","handleResize","window","removeEventListener","methods","innerWidth","saved","wasMobile","handleSidebarToggle","setItem","stringify","handleMenuChange","menu","routes","handleUserDropdownToggle","handleMenuAction","action","closeMobileSidebar","handleLogout","logout","handlePhoneInput","event","formType","target","digitsOnly","replace","limitedValue","substring","currentUser","getCurrentUser","profile","response","getUserStats","success","calculateStats","params","page","limit","search","undefined","is_active","getUsers","map","formatUserData","Error","message","u","changePage","getInitials","fullName","split","charAt","join","toUpperCase","getStatusBadgeClass","classes","statusLabels","formatDate","dateString","date","Date","toLocaleDateString","year","month","day","toggleUserStatus","newStatus","reason","updateUserStatus","statusText","errorMessage","deleteUser","confirmMessage","confirm","$toast","alert","closeModal","modalId","modal","getInstance","hide","handleFormError","errorField","details","serverErrors","detail","msg","showAddUserModal","resetAddUserForm","modalElement","show","defaultRole","Object","assign","keys","key","clearRoleSpecificFields","form","validateAddUserForm","errors","trim","test","validateEditUserForm","getFullAddress","parts","submitAddUser","field","parseInt","createUser","Promise","all","editUser","submitEditUser","updateData","position","department","employee_id","hire_date","updateUser","viewUser","getUser","setActiveTab","tab","handleOpenUserModal","modalData","userId","userType","find","original_id","needsResidencyVerification","hasResidencyDocuments","residency_document_count","hasResidencyDocumentsNeedingReview","residency_verification_status","canApproveResidency","canRejectResidency","viewResidencyDocuments","openImageModal","accountId","numericId","getAccountDocuments","imageDocuments","doc","imageTypes","mime_type","imagesHtml","loadedCount","document_name","imgResponse","get","responseType","blob","Blob","url","createObjectURL","document_type","approveResidencyVerification","approveVerification","showRejectResidencyModal","documentsModal","setTimeout","rejectModal","rejectResidencyVerification","rejectVerification","quickApproveClient","confirmed","quickRejectClient","prompt","formatDocumentType","formatDocumentStatus","formatVerificationStatus","getDocumentStatusBadgeClass","formatFileSize","bytes","sizes","floor","round","pow"],"sources":["D:\\brgy_docu_hub\\BOSFDR\\src\\components\\admin\\AdminUsers.vue"],"sourcesContent":["<template>\n  <div class=\"admin-users\">\n    <AdminHeader\n      :userName=\"adminData?.first_name || 'Admin'\"\n      :showUserDropdown=\"showUserDropdown\"\n      :sidebarCollapsed=\"sidebarCollapsed\"\n      :activeMenu=\"activeMenu\"\n      @sidebar-toggle=\"handleSidebarToggle\"\n      @user-dropdown-toggle=\"handleUserDropdownToggle\"\n      @menu-action=\"handleMenuAction\"\n      @logout=\"handleLogout\"\n      @open-user-modal=\"handleOpenUserModal\"\n    />\n\n    <!-- Mobile Overlay -->\n    <div\n      class=\"mobile-overlay\"\n      :class=\"{ active: !sidebarCollapsed && isMobile }\"\n      @click=\"closeMobileSidebar\"\n    ></div>\n\n    <div class=\"dashboard-container\">\n      <AdminSidebar\n        :collapsed=\"sidebarCollapsed\"\n        :activeMenu=\"activeMenu\"\n        @menu-change=\"handleMenuChange\"\n        @logout=\"handleLogout\"\n        @toggle-sidebar=\"handleSidebarToggle\"\n      />\n\n      <main class=\"main-content\" :class=\"{ 'sidebar-collapsed': sidebarCollapsed }\">\n        <div class=\"container-fluid p-4\">\n          <!-- Page Header -->\n          <!-- <div class=\"row mb-4\">\n            <div class=\"col-12\">\n              <div class=\"d-flex justify-content-between align-items-center flex-wrap\">\n\n                <div class=\"d-flex gap-2\">\n                  <button class=\"btn btn-outline-success btn-sm\" @click=\"loadUsers\" :disabled=\"loading\">\n                    <i class=\"fas fa-sync-alt me-1\" :class=\"{ 'fa-spin': loading }\"></i>\n                    Refresh\n                  </button>\n                  <button class=\"btn btn-success btn-sm\" @click=\"showAddUserModal\">\n                    <i class=\"fas fa-user-plus me-1\"></i>\n                    Add User\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div> -->\n\n          <!-- I dont need this statistics for now so I comment it -->\n          <!-- User Statistics -->\n          <!-- <div class=\"row mb-4\">\n            <div class=\"col-md-3 mb-3\">\n              <div class=\"card border-left-primary shadow h-100 py-2\">\n                <div class=\"card-body\">\n                  <div class=\"row no-gutters align-items-center\">\n                    <div class=\"col mr-2\">\n                      <div class=\"text-xs font-weight-bold text-primary text-uppercase mb-1\">\n                        Total Users\n                      </div>\n                      <div class=\"h5 mb-0 font-weight-bold text-gray-800\">{{ userStats.total || 0 }}</div>\n                    </div>\n                    <div class=\"col-auto\">\n                      <i class=\"fas fa-users fa-2x text-gray-300\"></i>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"col-md-3 mb-3\">\n              <div class=\"card border-left-success shadow h-100 py-2\">\n                <div class=\"card-body\">\n                  <div class=\"row no-gutters align-items-center\">\n                    <div class=\"col mr-2\">\n                      <div class=\"text-xs font-weight-bold text-success text-uppercase mb-1\">\n                        Active Users\n                      </div>\n                      <div class=\"h5 mb-0 font-weight-bold text-gray-800\">{{ userStats.active || 0 }}</div>\n                    </div>\n                    <div class=\"col-auto\">\n                      <i class=\"fas fa-user-check fa-2x text-gray-300\"></i>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"col-md-3 mb-3\">\n              <div class=\"card border-left-warning shadow h-100 py-2\">\n                <div class=\"card-body\">\n                  <div class=\"row no-gutters align-items-center\">\n                    <div class=\"col mr-2\">\n                      <div class=\"text-xs font-weight-bold text-warning text-uppercase mb-1\">\n                        Pending Verification\n                      </div>\n                      <div class=\"h5 mb-0 font-weight-bold text-gray-800\">{{ userStats.pending || 0 }}</div>\n                    </div>\n                    <div class=\"col-auto\">\n                      <i class=\"fas fa-user-clock fa-2x text-gray-300\"></i>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div class=\"col-md-3 mb-3\">\n              <div class=\"card border-left-info shadow h-100 py-2\">\n                <div class=\"card-body\">\n                  <div class=\"row no-gutters align-items-center\">\n                    <div class=\"col mr-2\">\n                      <div class=\"text-xs font-weight-bold text-info text-uppercase mb-1\">\n                        Admin Users\n                      </div>\n                      <div class=\"h5 mb-0 font-weight-bold text-gray-800\">{{ userStats.admins || 0 }}</div>\n                    </div>\n                    <div class=\"col-auto\">\n                      <i class=\"fas fa-user-shield fa-2x text-gray-300\"></i>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div> -->\n\n          <!-- Users Table -->\n          <div class=\"row\">\n            <div class=\"col-12\">\n              <!-- Navigation Tabs -->\n              <div class=\"card shadow mb-3\">\n                <div class=\"card-body py-2\">\n                  <ul class=\"nav nav-pills nav-fill\" role=\"tablist\">\n                    <li class=\"nav-item\" role=\"presentation\">\n                      <button\n                        class=\"nav-link\"\n                        :class=\"{ active: activeTab === 'clients' }\"\n                        @click=\"setActiveTab('clients')\"\n                        type=\"button\"\n                        role=\"tab\"\n                      >\n                        <i class=\"fas fa-users me-2\"></i>\n                        Client\n                        <span v-if=\"clientStats.total > 0\" class=\"badge bg-light text-dark ms-2\">{{ clientStats.total }}</span>\n                      </button>\n                    </li>\n                    <li class=\"nav-item\" role=\"presentation\">\n                      <button\n                        class=\"nav-link\"\n                        :class=\"{ active: activeTab === 'admins' }\"\n                        @click=\"setActiveTab('admins')\"\n                        type=\"button\"\n                        role=\"tab\"\n                      >\n                        <i class=\"fas fa-user-shield me-2\"></i>\n                        Admin\n                        <span v-if=\"adminStats.total > 0\" class=\"badge bg-light text-dark ms-2\">{{ adminStats.total }}</span>\n                      </button>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n\n              <div class=\"card shadow\">\n                <div class=\"card-header py-3 d-flex justify-content-between align-items-center\">\n                  <!-- <h6 class=\"m-0 font-weight-bold text-primary\">\n                    <i class=\"fas fa-users me-2\"></i>\n                    {{ activeTab === 'clients' ? 'Client Management' : 'Admin Management' }}\n                  </h6> -->\n                  <div class=\"d-flex gap-2\">\n                    <button class=\"btn btn-outline-success btn-sm\" @click=\"loadUsers\" :disabled=\"loading\">\n                      <i class=\"fas fa-sync-alt me-1\" :class=\"{ 'fa-spin': loading }\"></i>\n                      Refresh\n                    </button>\n                    <button v-if=\"activeTab === 'admins'\" class=\"btn btn-success btn-sm\" @click=\"showAddUserModal\">\n                      <i class=\"fas fa-user-plus me-1\"></i>\n                      Add Admin\n                    </button>\n\n                    <!-- ill comment this status because I dont use this -->\n                    <!-- <select class=\"form-select form-select-sm\" v-model=\"filterStatus\">\n                      <option value=\"\">All Status</option>\n                      <option value=\"active\">Active</option>\n                      <option value=\"inactive\">Inactive</option>\n                      <option value=\"pending\">Pending</option>\n                      <option value=\"suspended\">Suspended</option>\n                      <option v-if=\"activeTab === 'clients'\" value=\"pending_residency_verification\">Pending Residency Verification</option>\n                      <option v-if=\"activeTab === 'clients'\" value=\"residency_rejected\">Residency Rejected</option>\n                    </select> -->\n                  </div>\n                </div>\n                <div class=\"card-body\">\n                  <!-- Search Bar -->\n                  <div class=\"row mb-3\">\n                    <div class=\"col-md-6\">\n                      <div class=\"input-group\">\n                        <span class=\"input-group-text\">\n                          <i class=\"fas fa-search\"></i>\n                        </span>\n                        <input\n                          type=\"text\"\n                          class=\"form-control\"\n                          placeholder=\"Search users by name, email, or username...\"\n                          v-model=\"searchQuery\"\n                        >\n                      </div>\n                    </div>\n                    <div class=\"col-md-6 text-end\">\n                      <span class=\"text-muted\">\n                        Showing {{ filteredUsers.length }} of {{ users.length }} users\n                      </span>\n                    </div>\n                  </div>\n\n                  <!-- Loading State -->\n                  <div v-if=\"loading\" class=\"text-center py-4\">\n                    <div class=\"spinner-border text-primary\" role=\"status\">\n                      <span class=\"visually-hidden\">Loading...</span>\n                    </div>\n                    <p class=\"text-muted mt-2\">Loading users...</p>\n                  </div>\n\n                  <!-- Empty State -->\n                  <div v-else-if=\"filteredUsers.length === 0\" class=\"text-center py-5\">\n                    <i class=\"fas fa-users fa-3x text-gray-300 mb-3\"></i>\n                    <h5 class=\"text-gray-600\">No users found</h5>\n                    <p class=\"text-muted\">\n                      {{ searchQuery ? 'Try adjusting your search criteria.' : 'No users have been registered yet.' }}\n                    </p>\n                  </div>\n\n                  <!-- Users Table -->\n                  <div v-else class=\"table-responsive\">\n                    <table class=\"table table-hover\">\n                      <thead class=\"table-light\">\n                        <tr>\n                          <th>User</th>\n                          <th>Email</th>\n                          <th>Type</th>\n                          <th>Status</th>\n                          <th>Registered</th>\n                          <th>Actions</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr v-for=\"user in paginatedUsers\" :key=\"user.id\">\n                          <td>\n                            <div class=\"d-flex align-items-center\">\n                              <div class=\"user-avatar me-3\">\n                                <img v-if=\"user.profile_picture\" :src=\"user.profile_picture\" :alt=\"user.full_name\" class=\"rounded-circle\">\n                                <div v-else class=\"avatar-placeholder rounded-circle\">\n                                  {{ getInitials(user.full_name) }}\n                                </div>\n                              </div>\n                              <div>\n                                <div class=\"fw-bold\">{{ user.full_name }}</div>\n                                <div class=\"text-muted small\">@{{ user.username }}</div>\n                              </div>\n                            </div>\n                          </td>\n                          <td>{{ user.email }}</td>\n                          <td>\n                            <span class=\"badge\" :class=\"user.type === 'admin' ? 'bg-primary' : 'bg-info'\">\n                              {{ user.type === 'admin' ? 'Admin' : 'Client' }}\n                            </span>\n                          </td>\n                          <td>\n                            <span class=\"badge\" :class=\"getStatusBadgeClass(getDisplayStatus(user))\">\n                              {{ formatStatus(getDisplayStatus(user)) }}\n                            </span>\n                          </td>\n                          <td>{{ formatDate(user.created_at) }}</td>\n                          <td>\n                            <div class=\"btn-group btn-group-sm\">\n                              <button class=\"btn btn-outline-primary\" @click=\"viewUser(user)\" title=\"View Details\">\n                                <i class=\"fas fa-eye\"></i>\n                              </button>\n                              <!-- Residency Documents Button (only for clients with residency documents that need review) -->\n                              <button\n                                v-if=\"user.type === 'client' && hasResidencyDocumentsNeedingReview(user)\"\n                                class=\"btn btn-outline-info\"\n                                @click=\"viewResidencyDocuments(user)\"\n                                title=\"Review Residency Documents\"\n                              >\n                                <i class=\"fas fa-file-image\"></i>\n                              </button>\n                              <!-- I will comment the quick approve and quick reject button and uncomment this in future -->\n                              <!-- Quick Approve Button (only for pending residency verification) -->\n                              <!-- <button\n                                v-if=\"user.type === 'client' && canApproveResidency(user)\"\n                                class=\"btn btn-outline-success\"\n                                @click=\"quickApproveClient(user)\"\n                                title=\"Quick Approve Residency Verification\"\n                                :disabled=\"processingQuickAction\"\n                              >\n                                <i class=\"fas fa-check\"></i>\n                              </button> -->\n                              <!-- Quick Reject Button (only for pending residency verification) -->\n                              <!-- <button\n                                v-if=\"user.type === 'client' && canRejectResidency(user)\"\n                                class=\"btn btn-outline-danger\"\n                                @click=\"quickRejectClient(user)\"\n                                title=\"Quick Reject Residency Verification\"\n                                :disabled=\"processingQuickAction\"\n                              >\n                                <i class=\"fas fa-times\"></i>\n                              </button> -->\n                              <button class=\"btn btn-outline-warning\" @click=\"editUser(user)\" title=\"Edit User\">\n                                <i class=\"fas fa-edit\"></i>\n                              </button>\n                              <!-- ill comment this for now and uncomment in the future -->\n                              <!-- <button\n                                class=\"btn\"\n                                :class=\"user.status === 'active' ? 'btn-outline-warning' : 'btn-outline-success'\"\n                                @click=\"toggleUserStatus(user)\"\n                                :title=\"user.status === 'active' ? 'Suspend User' : 'Activate User'\"\n                              >\n                                <i :class=\"user.status === 'active' ? 'fas fa-pause' : 'fas fa-play'\"></i>\n                              </button> -->\n                              <button class=\"btn btn-outline-danger\" @click=\"deleteUser(user)\" title=\"Delete User\">\n                                <i class=\"fas fa-trash\"></i>\n                              </button>\n                            </div>\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </div>\n\n                  <!-- Pagination -->\n                  <div v-if=\"totalPages > 1\" class=\"d-flex justify-content-between align-items-center mt-3\">\n                    <div class=\"text-muted\">\n                      Page {{ currentPage }} of {{ totalPages }}\n                    </div>\n                    <nav>\n                      <ul class=\"pagination pagination-sm mb-0\">\n                        <li class=\"page-item\" :class=\"{ disabled: currentPage === 1 }\">\n                          <button class=\"page-link\" @click=\"changePage(currentPage - 1)\" :disabled=\"currentPage === 1\">\n                            Previous\n                          </button>\n                        </li>\n                        <li\n                          v-for=\"page in visiblePages\"\n                          :key=\"page\"\n                          class=\"page-item\"\n                          :class=\"{ active: page === currentPage }\"\n                        >\n                          <button class=\"page-link\" @click=\"changePage(page)\">{{ page }}</button>\n                        </li>\n                        <li class=\"page-item\" :class=\"{ disabled: currentPage === totalPages }\">\n                          <button class=\"page-link\" @click=\"changePage(currentPage + 1)\" :disabled=\"currentPage === totalPages\">\n                            Next\n                          </button>\n                        </li>\n                      </ul>\n                    </nav>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n\n\n\n    <!-- Add User Modal -->\n    <div class=\"modal fade\" id=\"addUserModal\" tabindex=\"-1\" aria-labelledby=\"addUserModalLabel\" aria-hidden=\"true\">\n      <div class=\"modal-dialog modal-lg modal-dialog-scrollable\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 class=\"modal-title\" id=\"addUserModalLabel\">\n              <i class=\"fas fa-user-plus me-2\"></i>\n              Add New User\n            </h5>\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n          </div>\n          <div class=\"modal-body\">\n            <form @submit.prevent=\"submitAddUser\">\n              <!-- Basic Information -->\n              <div class=\"row\">\n                <div class=\"col-md-12 mb-3\">\n                  <label for=\"addUsername\" class=\"form-label\">Username *</label>\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"addUsername\"\n                    v-model=\"addUserForm.username\"\n                    :class=\"{ 'is-invalid': formErrors.username }\"\n                    required\n                  >\n                  <div v-if=\"formErrors.username\" class=\"invalid-feedback\">\n                    {{ formErrors.username }}\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"row\">\n                <div class=\"col-md-6 mb-3\">\n                  <label for=\"addPassword\" class=\"form-label\">Password *</label>\n                  <input\n                    type=\"password\"\n                    class=\"form-control\"\n                    id=\"addPassword\"\n                    v-model=\"addUserForm.password\"\n                    :class=\"{ 'is-invalid': formErrors.password }\"\n                    required\n                    minlength=\"6\"\n                  >\n                  <div v-if=\"formErrors.password\" class=\"invalid-feedback\">\n                    {{ formErrors.password }}\n                  </div>\n                </div>\n                <div class=\"col-md-6 mb-3\">\n                  <label for=\"addConfirmPassword\" class=\"form-label\">Confirm Password *</label>\n                  <input\n                    type=\"password\"\n                    class=\"form-control\"\n                    id=\"addConfirmPassword\"\n                    v-model=\"addUserForm.confirmPassword\"\n                    :class=\"{ 'is-invalid': formErrors.confirmPassword }\"\n                    required\n                    minlength=\"6\"\n                  >\n                  <div v-if=\"formErrors.confirmPassword\" class=\"invalid-feedback\">\n                    {{ formErrors.confirmPassword }}\n                  </div>\n                </div>\n              </div>\n\n              <!-- Personal Information -->\n              <div class=\"row\">\n                <div class=\"col-md-4 mb-3\">\n                  <label for=\"addFirstName\" class=\"form-label\">First Name *</label>\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"addFirstName\"\n                    v-model=\"addUserForm.first_name\"\n                    :class=\"{ 'is-invalid': formErrors.first_name }\"\n                    required\n                  >\n                  <div v-if=\"formErrors.first_name\" class=\"invalid-feedback\">\n                    {{ formErrors.first_name }}\n                  </div>\n                </div>\n                <div class=\"col-md-4 mb-3\">\n                  <label for=\"addMiddleName\" class=\"form-label\">Middle Name</label>\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"addMiddleName\"\n                    v-model=\"addUserForm.middle_name\"\n                  >\n                </div>\n                <div class=\"col-md-4 mb-3\">\n                  <label for=\"addLastName\" class=\"form-label\">Last Name *</label>\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"addLastName\"\n                    v-model=\"addUserForm.last_name\"\n                    :class=\"{ 'is-invalid': formErrors.last_name }\"\n                    required\n                  >\n                  <div v-if=\"formErrors.last_name\" class=\"invalid-feedback\">\n                    {{ formErrors.last_name }}\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"row\">\n                <div class=\"col-md-6 mb-3\">\n                  <label for=\"addSuffix\" class=\"form-label\">Suffix</label>\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"addSuffix\"\n                    v-model=\"addUserForm.suffix\"\n                    placeholder=\"Jr, Sr, III, etc.\"\n                  >\n                </div>\n                <div class=\"col-md-6 mb-3\" v-if=\"!isCreatingAdminUser\">\n                  <label for=\"addRole\" class=\"form-label\">User Type *</label>\n                  <select\n                    class=\"form-select\"\n                    id=\"addRole\"\n                    v-model=\"addUserForm.role\"\n                    :class=\"{ 'is-invalid': formErrors.role }\"\n                    required\n                    @change=\"clearRoleSpecificFields\"\n                  >\n                    <option value=\"\">Select User Type</option>\n                    <option value=\"admin\">Administrator</option>\n                    <option value=\"client\">Client</option>\n                  </select>\n                  <div v-if=\"formErrors.role\" class=\"invalid-feedback\">\n                    {{ formErrors.role }}\n                  </div>\n                </div>\n                <!-- Hidden field for admin user creation -->\n                <div class=\"col-md-6 mb-3\" v-if=\"isCreatingAdminUser\">\n                  <label class=\"form-label\">User Type *</label>\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    value=\"Administrator\"\n                    readonly\n                    disabled\n                  >\n                  <small class=\"text-muted\">Creating administrator account</small>\n                </div>\n              </div>\n\n              <!-- Contact Information -->\n              <div class=\"row\">\n                <div class=\"col-md-6 mb-3\">\n                  <label for=\"addEmail\" class=\"form-label\">Email</label>\n                  <input\n                    type=\"email\"\n                    class=\"form-control\"\n                    id=\"addEmail\"\n                    v-model=\"addUserForm.email\"\n                    :class=\"{ 'is-invalid': formErrors.email }\"\n                  >\n                  <div v-if=\"formErrors.email\" class=\"invalid-feedback\">\n                    {{ formErrors.email }}\n                  </div>\n                </div>\n                <div class=\"col-md-6 mb-3\">\n                  <label for=\"addPhone\" class=\"form-label\">Phone Number *</label>\n                  <input\n                    type=\"tel\"\n                    class=\"form-control\"\n                    id=\"addPhone\"\n                    v-model=\"addUserForm.phone_number\"\n                    :class=\"{ 'is-invalid': formErrors.phone_number }\"\n                    @input=\"handlePhoneInput($event, 'add')\"\n                    placeholder=\"09123456789\"\n                    maxlength=\"11\"\n                    pattern=\"[0-9]*\"\n                    required\n                  >\n                  <div v-if=\"formErrors.phone_number\" class=\"invalid-feedback\">\n                    {{ formErrors.phone_number }}\n                  </div>\n                </div>\n              </div>\n\n              <!-- Admin-specific fields -->\n              <div v-if=\"addUserForm.role === 'admin'\">\n                <hr>\n                <h6 class=\"text-primary mb-3\">\n                  <i class=\"fas fa-user-shield me-2\"></i>\n                  Administrator Information\n                </h6>\n                <div class=\"alert alert-info\">\n                  <i class=\"fas fa-info-circle me-2\"></i>\n                  Administrator accounts will be created with basic information. Additional details can be updated later.\n                </div>\n              </div>\n\n              <!-- Client-specific fields -->\n              <div v-if=\"addUserForm.role === 'client'\">\n                <hr>\n                <h6 class=\"text-info mb-3\">\n                  <i class=\"fas fa-user me-2\"></i>\n                  Client Information\n                </h6>\n                <div class=\"row\">\n                  <div class=\"col-md-6 mb-3\">\n                    <label for=\"addBirthDate\" class=\"form-label\">Birth Date *</label>\n                    <input\n                      type=\"date\"\n                      class=\"form-control\"\n                      id=\"addBirthDate\"\n                      v-model=\"addUserForm.birth_date\"\n                      :class=\"{ 'is-invalid': formErrors.birth_date }\"\n                      required\n                    >\n                    <div v-if=\"formErrors.birth_date\" class=\"invalid-feedback\">\n                      {{ formErrors.birth_date }}\n                    </div>\n                  </div>\n                  <div class=\"col-md-6 mb-3\">\n                    <label for=\"addGender\" class=\"form-label\">Gender *</label>\n                    <select\n                      class=\"form-select\"\n                      id=\"addGender\"\n                      v-model=\"addUserForm.gender\"\n                      :class=\"{ 'is-invalid': formErrors.gender }\"\n                      required\n                    >\n                      <option value=\"\">Select Gender</option>\n                      <option value=\"male\">Male</option>\n                      <option value=\"female\">Female</option>\n                    </select>\n                    <div v-if=\"formErrors.gender\" class=\"invalid-feedback\">\n                      {{ formErrors.gender }}\n                    </div>\n                  </div>\n                </div>\n\n                <div class=\"row\">\n                  <div class=\"col-md-6 mb-3\">\n                    <label for=\"addCivilStatus\" class=\"form-label\">Civil Status *</label>\n                    <select\n                      class=\"form-select\"\n                      id=\"addCivilStatus\"\n                      v-model=\"addUserForm.civil_status_id\"\n                      required\n                    >\n                      <option value=\"1\">Single</option>\n                      <option value=\"2\">Married</option>\n                      <option value=\"3\">Widowed</option>\n                      <option value=\"4\">Divorced</option>\n                      <option value=\"5\">Separated</option>\n                    </select>\n                  </div>\n                  <div class=\"col-md-6 mb-3\">\n                    <label for=\"addNationality\" class=\"form-label\">Nationality</label>\n                    <input\n                      type=\"text\"\n                      class=\"form-control\"\n                      id=\"addNationality\"\n                      v-model=\"addUserForm.nationality\"\n                      placeholder=\"Filipino\"\n                    >\n                  </div>\n                </div>\n\n                <!-- Address Information -->\n                <h6 class=\"text-secondary mb-3 mt-4\">\n                  <i class=\"fas fa-map-marker-alt me-2\"></i>\n                  Address Information\n                </h6>\n                <div class=\"row\">\n                  <div class=\"col-md-6 mb-3\">\n                    <label for=\"addHouseNumber\" class=\"form-label\">House Number</label>\n                    <input\n                      type=\"text\"\n                      class=\"form-control\"\n                      id=\"addHouseNumber\"\n                      v-model=\"addUserForm.house_number\"\n                      placeholder=\"e.g., 123\"\n                    >\n                  </div>\n                  <div class=\"col-md-6 mb-3\">\n                    <label for=\"addStreet\" class=\"form-label\">Street</label>\n                    <input\n                      type=\"text\"\n                      class=\"form-control\"\n                      id=\"addStreet\"\n                      v-model=\"addUserForm.street\"\n                      placeholder=\"e.g., Main Street\"\n                    >\n                  </div>\n                </div>\n\n                <div class=\"row\">\n                  <div class=\"col-md-6 mb-3\">\n                    <label for=\"addSubdivision\" class=\"form-label\">Subdivision</label>\n                    <input\n                      type=\"text\"\n                      class=\"form-control\"\n                      id=\"addSubdivision\"\n                      v-model=\"addUserForm.subdivision\"\n                      placeholder=\"e.g., Greenfield Village\"\n                    >\n                  </div>\n                  <div class=\"col-md-6 mb-3\">\n                    <label for=\"addBarangay\" class=\"form-label\">Barangay *</label>\n                    <input\n                      type=\"text\"\n                      class=\"form-control\"\n                      id=\"addBarangay\"\n                      v-model=\"addUserForm.barangay\"\n                      :class=\"{ 'is-invalid': formErrors.barangay }\"\n                      required\n                      placeholder=\"e.g., Barangay Bula\"\n                    >\n                    <div v-if=\"formErrors.barangay\" class=\"invalid-feedback\">\n                      {{ formErrors.barangay }}\n                    </div>\n                  </div>\n                </div>\n\n                <div class=\"row\">\n                  <div class=\"col-md-4 mb-3\">\n                    <label for=\"addCity\" class=\"form-label\">City/Municipality *</label>\n                    <input\n                      type=\"text\"\n                      class=\"form-control\"\n                      id=\"addCity\"\n                      v-model=\"addUserForm.city_municipality\"\n                      :class=\"{ 'is-invalid': formErrors.city_municipality }\"\n                      required\n                      placeholder=\"e.g., Camarines Sur\"\n                    >\n                    <div v-if=\"formErrors.city_municipality\" class=\"invalid-feedback\">\n                      {{ formErrors.city_municipality }}\n                    </div>\n                  </div>\n                  <div class=\"col-md-4 mb-3\">\n                    <label for=\"addProvince\" class=\"form-label\">Province *</label>\n                    <input\n                      type=\"text\"\n                      class=\"form-control\"\n                      id=\"addProvince\"\n                      v-model=\"addUserForm.province\"\n                      :class=\"{ 'is-invalid': formErrors.province }\"\n                      required\n                      placeholder=\"e.g., Camarines Sur\"\n                    >\n                    <div v-if=\"formErrors.province\" class=\"invalid-feedback\">\n                      {{ formErrors.province }}\n                    </div>\n                  </div>\n                  <div class=\"col-md-4 mb-3\">\n                    <label for=\"addPostalCode\" class=\"form-label\">Postal Code</label>\n                    <input\n                      type=\"text\"\n                      class=\"form-control\"\n                      id=\"addPostalCode\"\n                      v-model=\"addUserForm.postal_code\"\n                      placeholder=\"e.g., 4422\"\n                    >\n                  </div>\n                </div>\n\n                <!-- Residency Information -->\n                <div class=\"row\">\n                  <div class=\"col-md-6 mb-3\">\n                    <label for=\"addYearsResidency\" class=\"form-label\">Years of Residency</label>\n                    <input\n                      type=\"number\"\n                      class=\"form-control\"\n                      id=\"addYearsResidency\"\n                      v-model=\"addUserForm.years_of_residency\"\n                      min=\"0\"\n                      placeholder=\"e.g., 5\"\n                    >\n                  </div>\n                  <div class=\"col-md-6 mb-3\">\n                    <label for=\"addMonthsResidency\" class=\"form-label\">Additional Months</label>\n                    <input\n                      type=\"number\"\n                      class=\"form-control\"\n                      id=\"addMonthsResidency\"\n                      v-model=\"addUserForm.months_of_residency\"\n                      min=\"0\"\n                      max=\"11\"\n                      placeholder=\"e.g., 6\"\n                    >\n                  </div>\n                </div>\n              </div>\n            </form>\n          </div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\n            <button type=\"button\" class=\"btn btn-primary\" @click=\"submitAddUser\" :disabled=\"addUserLoading\">\n              <span v-if=\"addUserLoading\" class=\"spinner-border spinner-border-sm me-2\" role=\"status\"></span>\n              <i v-else class=\"fas fa-plus me-2\"></i>\n              {{ addUserLoading ? 'Creating...' : 'Create User' }}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Edit User Modal -->\n    <div class=\"modal fade\" id=\"editUserModal\" tabindex=\"-1\" aria-labelledby=\"editUserModalLabel\" aria-hidden=\"true\">\n      <div class=\"modal-dialog modal-lg modal-dialog-scrollable\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 class=\"modal-title\" id=\"editUserModalLabel\">\n              <i class=\"fas fa-user-edit me-2\"></i>\n              Edit User\n            </h5>\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n          </div>\n          <div class=\"modal-body\">\n            <form @submit.prevent=\"submitEditUser\" v-if=\"editUserForm.id\">\n              <!-- Basic Information -->\n              <div class=\"row\">\n                <div class=\"col-md-6 mb-3\">\n                  <label for=\"editUsername\" class=\"form-label\">Username *</label>\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"editUsername\"\n                    v-model=\"editUserForm.username\"\n                    :class=\"{ 'is-invalid': editFormErrors.username }\"\n                    required\n                  >\n                  <div v-if=\"editFormErrors.username\" class=\"invalid-feedback\">\n                    {{ editFormErrors.username }}\n                  </div>\n                </div>\n                <div class=\"col-md-6 mb-3\">\n                  <label for=\"editStatus\" class=\"form-label\">Account Status *</label>\n                  <select\n                    class=\"form-select\"\n                    id=\"editStatus\"\n                    v-model=\"editUserForm.status\"\n                    :class=\"{ 'is-invalid': editFormErrors.status }\"\n                    required\n                  >\n                    <!-- Account status options only - residency verification is managed separately -->\n                    <option value=\"active\">Active</option>\n                    <!-- I comment the inactive because I prefer to use suspended for deactivation of account of clients -->\n                    <!-- <option value=\"inactive\">Inactive</option> -->\n                    <option value=\"suspended\">Suspended</option>\n                  </select>\n                  <div v-if=\"editFormErrors.status\" class=\"invalid-feedback\">\n                    {{ editFormErrors.status }}\n                  </div>\n\n                </div>\n              </div>\n\n              <!-- Personal Information -->\n              <div class=\"row\">\n                <div class=\"col-md-4 mb-3\">\n                  <label for=\"editFirstName\" class=\"form-label\">First Name *</label>\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"editFirstName\"\n                    v-model=\"editUserForm.first_name\"\n                    :class=\"{ 'is-invalid': editFormErrors.first_name }\"\n                    required\n                  >\n                  <div v-if=\"editFormErrors.first_name\" class=\"invalid-feedback\">\n                    {{ editFormErrors.first_name }}\n                  </div>\n                </div>\n                <div class=\"col-md-4 mb-3\">\n                  <label for=\"editMiddleName\" class=\"form-label\">Middle Name</label>\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"editMiddleName\"\n                    v-model=\"editUserForm.middle_name\"\n                  >\n                </div>\n                <div class=\"col-md-4 mb-3\">\n                  <label for=\"editLastName\" class=\"form-label\">Last Name *</label>\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"editLastName\"\n                    v-model=\"editUserForm.last_name\"\n                    :class=\"{ 'is-invalid': editFormErrors.last_name }\"\n                    required\n                  >\n                  <div v-if=\"editFormErrors.last_name\" class=\"invalid-feedback\">\n                    {{ editFormErrors.last_name }}\n                  </div>\n                </div>\n              </div>\n\n              <div class=\"row\">\n                <div class=\"col-md-6 mb-3\">\n                  <label for=\"editSuffix\" class=\"form-label\">Suffix</label>\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    id=\"editSuffix\"\n                    v-model=\"editUserForm.suffix\"\n                    placeholder=\"Jr, Sr, III, etc.\"\n                  >\n                </div>\n                <div class=\"col-md-6 mb-3\">\n                  <label for=\"editRole\" class=\"form-label\">User Type *</label>\n                  <select\n                    class=\"form-select\"\n                    id=\"editRole\"\n                    v-model=\"editUserForm.role\"\n                    :class=\"{ 'is-invalid': editFormErrors.role }\"\n                    required\n                    disabled\n                  >\n                    <option value=\"admin\">Administrator</option>\n                    <option value=\"client\">Client</option>\n                  </select>\n                  <small class=\"text-muted\">User type cannot be changed after creation</small>\n                  <div v-if=\"editFormErrors.role\" class=\"invalid-feedback\">\n                    {{ editFormErrors.role }}\n                  </div>\n                </div>\n              </div>\n\n              <!-- Contact Information -->\n              <div class=\"row\">\n                <div class=\"col-md-6 mb-3\">\n                  <label for=\"editEmail\" class=\"form-label\">Email</label>\n                  <input\n                    type=\"email\"\n                    class=\"form-control\"\n                    id=\"editEmail\"\n                    v-model=\"editUserForm.email\"\n                    :class=\"{ 'is-invalid': editFormErrors.email }\"\n                  >\n                  <div v-if=\"editFormErrors.email\" class=\"invalid-feedback\">\n                    {{ editFormErrors.email }}\n                  </div>\n                </div>\n                <div class=\"col-md-6 mb-3\">\n                  <label for=\"editPhone\" class=\"form-label\">Phone Number *</label>\n                  <input\n                    type=\"tel\"\n                    class=\"form-control\"\n                    id=\"editPhone\"\n                    v-model=\"editUserForm.phone_number\"\n                    :class=\"{ 'is-invalid': editFormErrors.phone_number }\"\n                    @input=\"handlePhoneInput($event, 'edit')\"\n                    placeholder=\"09123456789\"\n                    maxlength=\"11\"\n                    pattern=\"[0-9]*\"\n                    required\n                  >\n                  <div v-if=\"editFormErrors.phone_number\" class=\"invalid-feedback\">\n                    {{ editFormErrors.phone_number }}\n                  </div>\n                </div>\n              </div>\n\n              <!-- Admin-specific fields -->\n              <div v-if=\"editUserForm.role === 'admin'\">\n                <hr>\n                <h6 class=\"text-primary mb-3\">\n                  <i class=\"fas fa-user-shield me-2\"></i>\n                  Administrator Information\n                </h6>\n                <div class=\"alert alert-info\">\n                  <i class=\"fas fa-info-circle me-2\"></i>\n                  Administrator-specific information has been simplified. Only basic profile information is managed here.\n                </div>\n              </div>\n\n              <!-- Client-specific fields (read-only for editing) -->\n              <div v-if=\"editUserForm.role === 'client'\">\n                <hr>\n                <h6 class=\"text-info mb-3\">\n                  <i class=\"fas fa-user me-2\"></i>\n                  Client Information\n                </h6>\n                <div class=\"alert alert-info\">\n                  <i class=\"fas fa-info-circle me-2\"></i>\n                  Client-specific information can only be updated by the client through their profile.\n                </div>\n                <div class=\"row\">\n                  <div class=\"col-md-6 mb-3\">\n                    <label class=\"form-label\">Birth Date</label>\n                    <input\n                      type=\"date\"\n                      class=\"form-control\"\n                      v-model=\"editUserForm.birth_date\"\n                      readonly\n                    >\n                  </div>\n                  <div class=\"col-md-6 mb-3\">\n                    <label class=\"form-label\">Gender</label>\n                    <input\n                      type=\"text\"\n                      class=\"form-control\"\n                      :value=\"editUserForm.gender ? editUserForm.gender.charAt(0).toUpperCase() + editUserForm.gender.slice(1) : ''\"\n                      readonly\n                    >\n                  </div>\n                </div>\n                <div class=\"row\">\n                  <div class=\"col-md-12 mb-3\">\n                    <label class=\"form-label\">Address</label>\n                    <input\n                      type=\"text\"\n                      class=\"form-control\"\n                      :value=\"getFullAddress(editUserForm)\"\n                      readonly\n                    >\n                  </div>\n                </div>\n              </div>\n\n              <!-- Password Reset Section -->\n              <hr>\n              <div class=\"row\">\n                <div class=\"col-12 mb-3\">\n                  <div class=\"form-check\">\n                    <input\n                      class=\"form-check-input\"\n                      type=\"checkbox\"\n                      id=\"resetPassword\"\n                      v-model=\"editUserForm.resetPassword\"\n                    >\n                    <label class=\"form-check-label\" for=\"resetPassword\">\n                      Reset user password\n                    </label>\n                  </div>\n                </div>\n              </div>\n\n              <div v-if=\"editUserForm.resetPassword\" class=\"row\">\n                <div class=\"col-md-6 mb-3\">\n                  <label for=\"editNewPassword\" class=\"form-label\">New Password *</label>\n                  <input\n                    type=\"password\"\n                    class=\"form-control\"\n                    id=\"editNewPassword\"\n                    v-model=\"editUserForm.newPassword\"\n                    :class=\"{ 'is-invalid': editFormErrors.newPassword }\"\n                    minlength=\"6\"\n                  >\n                  <div v-if=\"editFormErrors.newPassword\" class=\"invalid-feedback\">\n                    {{ editFormErrors.newPassword }}\n                  </div>\n                </div>\n                <div class=\"col-md-6 mb-3\">\n                  <label for=\"editConfirmPassword\" class=\"form-label\">Confirm Password *</label>\n                  <input\n                    type=\"password\"\n                    class=\"form-control\"\n                    id=\"editConfirmPassword\"\n                    v-model=\"editUserForm.confirmPassword\"\n                    :class=\"{ 'is-invalid': editFormErrors.confirmPassword }\"\n                    minlength=\"6\"\n                  >\n                  <div v-if=\"editFormErrors.confirmPassword\" class=\"invalid-feedback\">\n                    {{ editFormErrors.confirmPassword }}\n                  </div>\n                </div>\n              </div>\n            </form>\n          </div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\n            <button type=\"button\" class=\"btn btn-primary\" @click=\"submitEditUser\" :disabled=\"editUserLoading\">\n              <span v-if=\"editUserLoading\" class=\"spinner-border spinner-border-sm me-2\" role=\"status\"></span>\n              <i v-else class=\"fas fa-save me-2\"></i>\n              {{ editUserLoading ? 'Updating...' : 'Update User' }}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- View User Modal -->\n    <div class=\"modal fade\" id=\"viewUserModal\" tabindex=\"-1\" aria-labelledby=\"viewUserModalLabel\" aria-hidden=\"true\">\n      <div class=\"modal-dialog modal-lg modal-dialog-scrollable\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 class=\"modal-title\" id=\"viewUserModalLabel\">\n              <i class=\"fas fa-user me-2\"></i>\n              User Details\n            </h5>\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n          </div>\n          <div class=\"modal-body\" v-if=\"viewUserData\">\n            <div class=\"row\">\n              <div class=\"col-md-4 text-center mb-4\">\n                <div class=\"user-avatar-large mx-auto mb-3\">\n                  <div v-if=\"viewUserData.profile_picture\" class=\"avatar-image\">\n                    <img :src=\"viewUserData.profile_picture\" :alt=\"viewUserData.full_name\" class=\"rounded-circle\" style=\"width: 80px; height: 80px; object-fit: cover;\">\n                  </div>\n                  <div v-else class=\"avatar-placeholder-large rounded-circle bg-light d-flex align-items-center justify-content-center mx-auto\" style=\"width: 80px; height: 80px;\">\n                    <i :class=\"viewUserData.type === 'admin' ? 'fas fa-user-shield fa-2x text-primary' : 'fas fa-user fa-2x text-info'\"></i>\n                  </div>\n                </div>\n                <h5>{{ viewUserData.full_name || 'No Name' }}</h5>\n                <span class=\"badge\" :class=\"getStatusBadgeClass(viewUserData.status)\">\n                  <i class=\"fas fa-circle me-1\" style=\"font-size: 0.6em;\"></i>\n                  {{ formatStatus(viewUserData.status) }}\n                </span>\n                <div class=\"mt-2\">\n                  <span class=\"badge\" :class=\"viewUserData.type === 'admin' ? 'bg-primary' : 'bg-info'\">\n                    <i :class=\"viewUserData.type === 'admin' ? 'fas fa-user-shield me-1' : 'fas fa-user me-1'\"></i>\n                    {{ viewUserData.type === 'admin' ? 'Administrator' : 'Client' }}\n                  </span>\n                </div>\n              </div>\n              <div class=\"col-md-8\">\n                <!-- Basic Information -->\n                <h6 class=\"text-primary mb-3\">\n                  <i class=\"fas fa-id-card me-2\"></i>\n                  Basic Information\n                </h6>\n                <table class=\"table table-sm table-borderless\">\n                  <tr>\n                    <td class=\"text-muted\" style=\"width: 30%;\"><strong><i class=\"fas fa-at me-1\"></i>Username:</strong></td>\n                    <td>{{ viewUserData.username }}</td>\n                  </tr>\n                  <tr>\n                    <td class=\"text-muted\"><strong><i class=\"fas fa-envelope me-1\"></i>Email:</strong></td>\n                    <td>{{ viewUserData.email || 'Not provided' }}</td>\n                  </tr>\n                  <tr>\n                    <td class=\"text-muted\"><strong><i class=\"fas fa-phone me-1\"></i>Phone:</strong></td>\n                    <td>{{ viewUserData.phone_number || 'Not provided' }}</td>\n                  </tr>\n                  <tr>\n                    <td class=\"text-muted\"><strong><i class=\"fas fa-info-circle me-1\"></i>Status:</strong></td>\n                    <td>\n                      <span class=\"badge\" :class=\"getStatusBadgeClass(viewUserData.status)\">\n                        <i class=\"fas fa-circle me-1\" style=\"font-size: 0.6em;\"></i>\n                        {{ formatStatus(viewUserData.status) }}\n                      </span>\n                    </td>\n                  </tr>\n                </table>\n\n                <!-- Admin-specific Information -->\n                <div v-if=\"viewUserData.type === 'admin'\">\n                  <h6 class=\"text-primary mb-3\">\n                    <i class=\"fas fa-user-shield me-2\"></i>\n                    Administrator Details\n                  </h6>\n                  <div class=\"alert alert-info\">\n                    <i class=\"fas fa-info-circle me-2\"></i>\n                    Administrator accounts use simplified profile management. Additional administrative details can be managed through dedicated admin settings.\n                  </div>\n                  <div class=\"row mb-2\">\n                    <div class=\"col-sm-4\"><strong>Account Type:</strong></div>\n                    <div class=\"col-sm-8\">\n                      <span class=\"badge bg-primary\">\n                        <i class=\"fas fa-user-shield me-1\"></i>\n                        Administrator\n                      </span>\n                    </div>\n                  </div>\n                  <div class=\"row mb-3\">\n                    <div class=\"col-sm-4\"><strong>Permissions:</strong></div>\n                    <div class=\"col-sm-8\">Full system access and user management</div>\n                  </div>\n                </div>\n\n                <!-- Client-specific Information -->\n                <div v-if=\"viewUserData.type === 'client'\">\n                  <h6 class=\"text-info mb-3\">\n                    <i class=\"fas fa-user me-2\"></i>\n                    Client Details\n                  </h6>\n                  <table class=\"table table-sm table-borderless\">\n                    <tr>\n                      <td class=\"text-muted\" style=\"width: 30%;\"><strong><i class=\"fas fa-birthday-cake me-1\"></i>Birth Date:</strong></td>\n                      <td>{{ viewUserData.birth_date ? formatDate(viewUserData.birth_date) : 'Not provided' }}</td>\n                    </tr>\n                    <tr>\n                      <td class=\"text-muted\"><strong><i class=\"fas fa-venus-mars me-1\"></i>Gender:</strong></td>\n                      <td>{{ viewUserData.gender ? viewUserData.gender.charAt(0).toUpperCase() + viewUserData.gender.slice(1) : 'Not specified' }}</td>\n                    </tr>\n                    <tr>\n                      <td class=\"text-muted\"><strong><i class=\"fas fa-flag me-1\"></i>Nationality:</strong></td>\n                      <td>{{ viewUserData.nationality || 'Not specified' }}</td>\n                    </tr>\n                    <tr>\n                      <td class=\"text-muted\"><strong><i class=\"fas fa-map-marker-alt me-1\"></i>Address:</strong></td>\n                      <td>{{ getFullAddress(viewUserData) }}</td>\n                    </tr>\n                    <tr v-if=\"viewUserData.years_of_residency || viewUserData.months_of_residency\">\n                      <td class=\"text-muted\"><strong><i class=\"fas fa-home me-1\"></i>Residency:</strong></td>\n                      <td>\n                        <span class=\"badge bg-light text-dark\">\n                          {{ viewUserData.years_of_residency || 0 }} years, {{ viewUserData.months_of_residency || 0 }} months\n                        </span>\n                      </td>\n                    </tr>\n                  </table>\n                </div>\n\n                <!-- Account Information -->\n                <h6 class=\"text-secondary mb-3 mt-4\">\n                  <i class=\"fas fa-clock me-2\"></i>\n                  Account Information\n                </h6>\n                <table class=\"table table-sm table-borderless\">\n                  <tr>\n                    <td class=\"text-muted\" style=\"width: 30%;\"><strong><i class=\"fas fa-calendar-plus me-1\"></i>Registered:</strong></td>\n                    <td>{{ formatDate(viewUserData.created_at) }}</td>\n                  </tr>\n                  <tr>\n                    <td class=\"text-muted\"><strong><i class=\"fas fa-edit me-1\"></i>Last Updated:</strong></td>\n                    <td>{{ viewUserData.updated_at ? formatDate(viewUserData.updated_at) : 'Never' }}</td>\n                  </tr>\n                  <tr>\n                    <td class=\"text-muted\"><strong><i class=\"fas fa-sign-in-alt me-1\"></i>Last Login:</strong></td>\n                    <td>\n                      <span v-if=\"viewUserData.last_login\" class=\"badge bg-success\">\n                        {{ formatDate(viewUserData.last_login) }}\n                      </span>\n                      <span v-else class=\"badge bg-secondary\">Never</span>\n                    </td>\n                  </tr>\n                </table>\n\n                <!-- Residency Documents Section (for clients) -->\n                <div v-if=\"viewUserData && viewUserData.type === 'client'\" class=\"mt-4\">\n                  <div class=\"d-flex justify-content-between align-items-center mb-3\">\n                    <h6 class=\"text-warning mb-0\">\n                      <i class=\"fas fa-home me-2\"></i>\n                      Residency Documents\n                    </h6>\n                    <button\n                      class=\"btn btn-outline-primary btn-sm me-2\"\n                      @click=\"openImageModal(viewUserData)\"\n                    >\n                      <i class=\"fas fa-images me-1\"></i>\n                      View Images\n                    </button>\n\n                  </div>\n\n                  <!-- ill comment this because i dont really much needed this -->\n                  <!-- Simple instruction -->\n                  <!-- <div class=\"text-center py-4\">\n                    <i class=\"fas fa-images fa-3x text-muted mb-3\"></i>\n                    <p class=\"text-muted mb-0\">Click \"View Images\" button above to open image viewer</p>\n                  </div> -->\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">\n              <i class=\"fas fa-times me-1\"></i>\n              Close\n            </button>\n\n            <!-- Residency Documents Button (only for clients needing verification) -->\n            <button\n              v-if=\"viewUserData && viewUserData.type === 'client' && needsResidencyVerification(viewUserData)\"\n              type=\"button\"\n              class=\"btn btn-warning\"\n              @click=\"viewResidencyDocuments(viewUserData)\"\n              data-bs-dismiss=\"modal\"\n            >\n              <i class=\"fas fa-home me-1\"></i>\n              View Residency Documents\n            </button>\n\n            <button type=\"button\" class=\"btn btn-primary\" @click=\"editUser(viewUserData)\" data-bs-dismiss=\"modal\">\n              <i class=\"fas fa-edit me-1\"></i>\n              Edit User\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Residency Documents Modal Component -->\n    <ResidencyDocumentsModal\n      :user=\"selectedUserForResidency\"\n      :processing=\"processingResidencyAction\"\n      @approve=\"approveResidencyVerification\"\n      @reject=\"showRejectResidencyModal\"\n    />\n\n    <!-- Direct DOM Image Modal -->\n    <div class=\"modal fade\" id=\"directImageModal\" tabindex=\"-1\" aria-labelledby=\"directImageModalLabel\" aria-hidden=\"true\">\n      <div class=\"modal-dialog modal-xl modal-dialog-scrollable\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 class=\"modal-title\" id=\"directImageModalLabel\">\n              <i class=\"fas fa-images me-2\"></i>\n              Residency Images\n            </h5>\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n          </div>\n          <div class=\"modal-body\" id=\"imageModalContent\">\n            <!-- Content will be inserted directly via DOM manipulation -->\n          </div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Reject Residency Modal -->\n    <div class=\"modal fade\" id=\"rejectResidencyModal\" tabindex=\"-1\" aria-labelledby=\"rejectResidencyModalLabel\" aria-hidden=\"true\">\n      <div class=\"modal-dialog modal-dialog-scrollable\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 class=\"modal-title\" id=\"rejectResidencyModalLabel\">\n              <i class=\"fas fa-times-circle me-2\"></i>\n              Reject Residency Verification\n            </h5>\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n          </div>\n          <div class=\"modal-body\">\n            <div class=\"alert alert-warning\">\n              <i class=\"fas fa-exclamation-triangle me-2\"></i>\n              You are about to reject the residency verification for <strong>{{ selectedUserForResidency?.full_name }}</strong>.\n            </div>\n            <div class=\"mb-3\">\n              <label for=\"rejectionReason\" class=\"form-label\">Reason for Rejection *</label>\n              <textarea\n                id=\"rejectionReason\"\n                class=\"form-control\"\n                v-model=\"rejectionReason\"\n                rows=\"4\"\n                placeholder=\"Please provide a detailed reason for rejecting the residency verification...\"\n                required\n              ></textarea>\n              <div class=\"form-text\">Minimum 10 characters required</div>\n            </div>\n          </div>\n          <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\n            <button\n              type=\"button\"\n              class=\"btn btn-danger\"\n              @click=\"rejectResidencyVerification\"\n              :disabled=\"!rejectionReason || rejectionReason.length < 10 || processingResidencyAction\"\n            >\n              <span v-if=\"processingResidencyAction\" class=\"spinner-border spinner-border-sm me-1\" role=\"status\"></span>\n              <i v-else class=\"fas fa-times me-1\"></i>\n              Reject Verification\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport AdminHeader from './AdminHeader.vue';\nimport AdminSidebar from './AdminSidebar.vue';\nimport ResidencyDocumentsModal from './ResidencyDocumentsModal.vue';\nimport unifiedAuthService from '@/services/unifiedAuthService';\nimport userManagementService from '@/services/userManagementService';\nimport residencyService from '@/services/residencyService';\nimport api from '@/services/api';\nimport { Modal } from 'bootstrap';\n\nexport default {\n  name: 'AdminUsers',\n  components: {\n    AdminHeader,\n    AdminSidebar,\n    ResidencyDocumentsModal\n  },\n\n  data() {\n    return {\n      // UI State\n      sidebarCollapsed: false,\n      showUserDropdown: false,\n      isMobile: false,\n      adminData: null,\n      // Component Data\n      users: [],\n      searchQuery: '',\n      filterStatus: '',\n      filterType: '',\n      activeTab: 'clients', // New property for tab management\n      currentPage: 1,\n      itemsPerPage: 10,\n      loading: false,\n      userStats: {\n        total: 0,\n        active: 0,\n        pending: 0,\n        admins: 0\n      },\n\n      // Modal data\n      viewUserData: null,\n      addUserLoading: false,\n      editUserLoading: false,\n\n      // Residency verification data\n      selectedUserForResidency: null,\n      processingResidencyAction: false,\n      processingQuickAction: false,\n      rejectionReason: '',\n\n\n\n\n\n      // Direct DOM modal (no reactive data needed)\n\n      // Form validation errors\n      formErrors: {},\n      editFormErrors: {},\n\n      // Add user form\n      addUserForm: {\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n        first_name: '',\n        middle_name: '',\n        last_name: '',\n        suffix: '',\n        role: '',\n        phone_number: '',\n        // Client specific fields\n        birth_date: '',\n        gender: '',\n        civil_status_id: 1,\n        nationality: 'Filipino',\n        house_number: '',\n        street: '',\n        subdivision: '',\n        barangay: '',\n        city_municipality: '',\n        province: '',\n        postal_code: '',\n        years_of_residency: null,\n        months_of_residency: null\n      },\n\n      // Edit user form\n      editUserForm: {\n        id: null,\n        username: '',\n        email: '',\n        first_name: '',\n        middle_name: '',\n        last_name: '',\n        suffix: '',\n        role: '',\n        status: '',\n        phone_number: '',\n        // Client specific fields\n        birth_date: '',\n        gender: '',\n        civil_status_id: 1,\n        nationality: 'Filipino',\n        house_number: '',\n        street: '',\n        subdivision: '',\n        barangay: '',\n        city_municipality: '',\n        province: '',\n        postal_code: '',\n        years_of_residency: null,\n        months_of_residency: null,\n        // Password reset fields\n        resetPassword: false,\n        newPassword: '',\n        confirmPassword: ''\n      },\n\n      // Available options\n      genderOptions: [\n        { value: 'male', label: 'Male' },\n        { value: 'female', label: 'Female' }\n      ],\n\n      statusOptions: [\n        { value: 'active', label: 'Active' },\n        { value: 'inactive', label: 'Inactive' },\n        { value: 'suspended', label: 'Suspended' },\n        { value: 'pending_verification', label: 'Pending Verification' }\n      ]\n    };\n  },\n\n  computed: {\n    activeMenu() {\n      const path = this.$route.path;\n      if (path.includes('/admin/users')) return 'users';\n      if (path.includes('/admin/requests')) return 'requests';\n      if (path.includes('/admin/reports')) return 'reports';\n      if (path.includes('/admin/settings')) return 'settings';\n      if (path.includes('/admin/activity-logs')) return 'activity';\n      if (path.includes('/admin/profile')) return 'profile';\n      return 'dashboard';\n    },\n\n    // Separate statistics for clients and admins\n    clientStats() {\n      const clients = this.users.filter(user => user.type === 'client' && user.status !== 'inactive');\n      return {\n        total: clients.length,\n        active: clients.filter(user => this.getDisplayStatus(user) === 'active').length,\n        pending: clients.filter(user => this.getDisplayStatus(user) === 'pending_residency_verification').length,\n        rejected: clients.filter(user => this.getDisplayStatus(user) === 'residency_rejected').length\n      };\n    },\n\n    adminStats() {\n      const admins = this.users.filter(user => user.type === 'admin' && user.status !== 'inactive');\n      return {\n        total: admins.length,\n        active: admins.filter(user => user.status === 'active').length,\n        suspended: admins.filter(user => user.status === 'suspended').length\n      };\n    },\n\n    filteredUsers() {\n      let filtered = [...this.users];\n\n      // Apply tab-based role filter and exclude inactive users\n      if (this.activeTab === 'clients') {\n        filtered = filtered.filter(user => user.type === 'client' && user.status !== 'inactive');\n      } else if (this.activeTab === 'admins') {\n        filtered = filtered.filter(user => user.type === 'admin' && user.status !== 'inactive');\n      }\n\n      // Apply search filter\n      if (this.searchQuery) {\n        const query = this.searchQuery.toLowerCase();\n        filtered = filtered.filter(user => {\n          const displayStatus = this.getDisplayStatus(user);\n          const formattedStatus = this.formatStatus(displayStatus);\n\n          return user.full_name?.toLowerCase().includes(query) ||\n                 user.email?.toLowerCase().includes(query) ||\n                 user.username?.toLowerCase().includes(query) ||\n                 user.type?.toLowerCase().includes(query) ||\n                 user.status?.toLowerCase().includes(query) ||\n                 displayStatus?.toLowerCase().includes(query) ||\n                 formattedStatus?.toLowerCase().includes(query) ||\n                 user.first_name?.toLowerCase().includes(query) ||\n                 user.last_name?.toLowerCase().includes(query);\n        });\n      }\n\n      // Apply status filter\n      if (this.filterStatus) {\n        filtered = filtered.filter(user => {\n          const displayStatus = this.getDisplayStatus(user);\n          return displayStatus === this.filterStatus;\n        });\n      }\n\n      return filtered;\n    },\n\n    paginatedUsers() {\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return this.filteredUsers.slice(start, end);\n    },\n\n    totalPages() {\n      return Math.ceil(this.filteredUsers.length / this.itemsPerPage);\n    },\n\n    visiblePages() {\n      const pages = [];\n      const start = Math.max(1, this.currentPage - 2);\n      const end = Math.min(this.totalPages, this.currentPage + 2);\n\n      for (let i = start; i <= end; i++) {\n        pages.push(i);\n      }\n      return pages;\n    },\n\n    // Check if we're creating an admin user (when admin tab is active)\n    isCreatingAdminUser() {\n      return this.activeTab === 'admins';\n    }\n\n  },\n\n  watch: {\n    // Reset pagination when search query changes\n    searchQuery() {\n      this.currentPage = 1;\n    },\n\n    // Reset pagination when status filter changes\n    filterStatus() {\n      this.currentPage = 1;\n    }\n  },\n\n  async mounted() {\n    // Check authentication\n    if (!unifiedAuthService.isLoggedIn() || unifiedAuthService.getUserType() !== 'admin') {\n      this.$router.push('/login');\n      return;\n    }\n\n    // Initialize UI state\n    this.initializeUI();\n\n    // Make bootstrap available globally for this component\n    this.$bootstrap = { Modal };\n\n    // Debug authentication - using unified auth system\n    const authToken = localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token');\n    const userData = localStorage.getItem('auth_user') || sessionStorage.getItem('auth_user');\n\n    console.log('🔍 Admin Authentication Debug:');\n    console.log('  Auth Token:', authToken ? 'EXISTS' : 'NOT FOUND');\n    console.log('  User Data:', userData ? 'EXISTS' : 'NOT FOUND');\n\n    if (userData) {\n      try {\n        const data = JSON.parse(userData);\n        console.log('  Username:', data.username);\n        console.log('  User Type:', data.type);\n        console.log('  Role:', data.role);\n        console.log('  Status:', data.status);\n      } catch (e) {\n        console.error('  Error parsing user data:', e);\n      }\n    }\n\n    // Check if user is authenticated and is an admin\n    if (!authToken || !userData) {\n      this.showToast('error', 'You are not logged in. Please login first.');\n      this.$router.push('/login');\n      return;\n    }\n\n    try {\n      const user = JSON.parse(userData);\n      if (user.type !== 'admin') {\n        this.showToast('error', 'Access denied. Admin privileges required.');\n        this.$router.push('/login');\n        return;\n      }\n    } catch (e) {\n      console.error('Error parsing user data:', e);\n      this.showToast('error', 'Invalid authentication data. Please login again.');\n      this.$router.push('/login');\n      return;\n    }\n\n    // Load component data\n    await this.loadAdminProfile();\n    await this.loadUserStats();\n    await this.loadUsers();\n\n    // Add event listener for image modal close to clean up blob URLs\n    const imageModal = document.getElementById('directImageModal');\n    if (imageModal) {\n      imageModal.addEventListener('hidden.bs.modal', () => {\n        // Clean up blob URLs from images in the modal\n        const contentDiv = document.getElementById('imageModalContent');\n        if (contentDiv) {\n          const images = contentDiv.querySelectorAll('img[src^=\"blob:\"]');\n          images.forEach(img => {\n            URL.revokeObjectURL(img.src);\n          });\n          // Clear content\n          contentDiv.innerHTML = '';\n        }\n      });\n    }\n  },\n\n  beforeUnmount() {\n    if (this.handleResize) {\n      window.removeEventListener('resize', this.handleResize);\n    }\n\n    // Clean up blob URLs to prevent memory leaks\n    const contentDiv = document.getElementById('imageModalContent');\n    if (contentDiv) {\n      const images = contentDiv.querySelectorAll('img[src^=\"blob:\"]');\n      images.forEach(img => {\n        URL.revokeObjectURL(img.src);\n      });\n    }\n  },\n\n  methods: {\n    // Initialize UI state\n    initializeUI() {\n      this.isMobile = window.innerWidth <= 768;\n\n      // Load saved sidebar state (only on desktop)\n      if (!this.isMobile) {\n        const saved = localStorage.getItem('adminSidebarCollapsed');\n        this.sidebarCollapsed = saved ? JSON.parse(saved) : false;\n      } else {\n        this.sidebarCollapsed = true; // Always collapsed on mobile\n      }\n\n      // Setup resize listener\n      this.handleResize = () => {\n        const wasMobile = this.isMobile;\n        this.isMobile = window.innerWidth <= 768;\n\n        if (this.isMobile && !wasMobile) {\n          this.sidebarCollapsed = true; // Collapse when switching to mobile\n        } else if (!this.isMobile && wasMobile) {\n          // Restore saved state when switching to desktop\n          const saved = localStorage.getItem('adminSidebarCollapsed');\n          this.sidebarCollapsed = saved ? JSON.parse(saved) : false;\n        }\n      };\n      window.addEventListener('resize', this.handleResize);\n    },\n\n    // Sidebar toggle\n    handleSidebarToggle() {\n      this.sidebarCollapsed = !this.sidebarCollapsed;\n      localStorage.setItem('adminSidebarCollapsed', JSON.stringify(this.sidebarCollapsed));\n    },\n\n    // Menu navigation\n    handleMenuChange(menu) {\n      const routes = {\n        'dashboard': '/admin/dashboard',\n        'users': '/admin/users',\n        'requests': '/admin/requests',\n        'reports': '/admin/reports',\n        'settings': '/admin/settings',\n        'activity': '/admin/activity-logs',\n        'profile': '/admin/profile'\n      };\n\n      // Close sidebar on mobile after navigation\n      if (this.isMobile) {\n        this.sidebarCollapsed = true;\n      }\n\n      if (routes[menu]) {\n        this.$router.push(routes[menu]);\n      }\n    },\n\n    // User dropdown toggle\n    handleUserDropdownToggle() {\n      this.showUserDropdown = !this.showUserDropdown;\n    },\n\n    // Menu actions\n    handleMenuAction(action) {\n      if (action === 'profile') {\n        this.$router.push('/admin/profile');\n      } else if (action === 'settings') {\n        this.$router.push('/admin/settings');\n      }\n      this.showUserDropdown = false;\n    },\n\n    // Close mobile sidebar\n    closeMobileSidebar() {\n      if (this.isMobile) {\n        this.sidebarCollapsed = true;\n      }\n    },\n\n    // Logout\n    handleLogout() {\n      unifiedAuthService.logout();\n      this.$router.push('/login');\n    },\n\n    // Handle phone number input to restrict to digits only\n    handlePhoneInput(event, formType) {\n      const value = event.target.value;\n      // Remove any non-digit characters\n      const digitsOnly = value.replace(/\\D/g, '');\n      // Limit to 11 digits\n      const limitedValue = digitsOnly.substring(0, 11);\n\n      if (formType === 'add') {\n        this.addUserForm.phone_number = limitedValue;\n      } else if (formType === 'edit') {\n        this.editUserForm.phone_number = limitedValue;\n      }\n    },\n\n    // Load admin profile data\n    async loadAdminProfile() {\n      try {\n        const currentUser = unifiedAuthService.getCurrentUser();\n        if (currentUser && currentUser.profile) {\n          this.adminData = currentUser.profile;\n        } else {\n          // Fallback to basic user data\n          this.adminData = {\n            first_name: currentUser?.username || 'Admin',\n            role: currentUser?.role || 'admin'\n          };\n        }\n      } catch (error) {\n        console.error('Failed to load admin data:', error);\n        const currentUser = unifiedAuthService.getCurrentUser();\n        this.adminData = {\n          first_name: currentUser?.username || 'Admin',\n          role: currentUser?.role || 'admin'\n        };\n      }\n    },\n\n    // Load user statistics\n    async loadUserStats() {\n      try {\n        const response = await userManagementService.getUserStats();\n        if (response.success) {\n          this.userStats = response.data;\n        } else {\n          this.calculateStats();\n        }\n      } catch (error) {\n        console.error('Failed to load user statistics:', error);\n        this.calculateStats();\n      }\n    },\n\n    // Load users data\n    async loadUsers() {\n      this.loading = true;\n      try {\n        const params = {\n          page: this.currentPage,\n          limit: 50,\n          search: this.searchQuery || undefined,\n          // Don't filter by role in API call since we handle it in frontend with tabs\n          is_active: this.filterStatus === 'active' ? true :\n                     this.filterStatus === 'inactive' ? false : undefined\n        };\n\n        const response = await userManagementService.getUsers(params);\n\n        if (response.success) {\n          this.users = response.data.users.map(user =>\n            userManagementService.formatUserData(user)\n          );\n          this.calculateStats();\n        } else {\n          throw new Error(response.message || 'Failed to load users');\n        }\n      } catch (error) {\n        console.error('Failed to load users:', error);\n        this.showToast('error', error.message || 'Failed to load users');\n        this.users = [];\n        this.calculateStats();\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    // Calculate user statistics\n    calculateStats() {\n      this.userStats = {\n        total: this.users.length,\n        active: this.users.filter(u => this.getDisplayStatus(u) === 'active').length,\n        pending: this.users.filter(u => this.getDisplayStatus(u) === 'pending_residency_verification').length,\n        admins: this.users.filter(u => u.type === 'admin').length\n      };\n    },\n\n\n\n\n\n    // Change page\n    changePage(page) {\n      if (page >= 1 && page <= this.totalPages) {\n        this.currentPage = page;\n      }\n    },\n\n    // Get user initials for avatar\n    getInitials(fullName) {\n      if (!fullName) return '?';\n      return fullName.split(' ').map(name => name.charAt(0)).join('').toUpperCase().slice(0, 2);\n    },\n\n    // Get status badge class\n    getStatusBadgeClass(status) {\n      const classes = {\n        'active': 'bg-success',\n        'inactive': 'bg-secondary',\n        'pending': 'bg-warning',\n        'suspended': 'bg-danger',\n        'pending_verification': 'bg-warning',\n        'pending_residency_verification': 'bg-info',\n        'residency_rejected': 'bg-danger',\n        'residency_approved': 'bg-success',\n        'no_residency_documents': 'bg-warning'\n      };\n      return classes[status] || 'bg-secondary';\n    },\n\n    // Format status text\n    formatStatus(status) {\n      const statusLabels = {\n        'active': 'Active',\n        'inactive': 'Inactive',\n        'pending': 'Pending',\n        'suspended': 'Suspended',\n        'pending_verification': 'Pending Verification',\n        'pending_residency_verification': 'Pending Residency Verification',\n        'residency_rejected': 'Residency Rejected',\n        'residency_approved': 'Residency Approved',\n        'no_residency_documents': 'No Residency Documents'\n      };\n      return statusLabels[status] || status.charAt(0).toUpperCase() + status.slice(1);\n    },\n\n    // Format date\n    formatDate(dateString) {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      });\n    },\n\n    // User actions\n\n\n    async toggleUserStatus(user) {\n      try {\n        const newStatus = user.status === 'active' ? 'suspended' : 'active';\n        const reason = `Status changed by admin: ${this.adminData?.first_name || 'Admin'}`;\n\n        const response = await userManagementService.updateUserStatus(user.id, newStatus, reason);\n\n        if (response.success) {\n          // Update local data\n          user.status = newStatus;\n          this.calculateStats();\n\n          const statusText = newStatus === 'active' ? 'activated' : 'suspended';\n          this.showToast('success', `User ${user.full_name} has been ${statusText}.`);\n        } else {\n          throw new Error(response.message || 'Failed to update user status');\n        }\n      } catch (error) {\n        console.error('Failed to update user status:', error);\n        const errorMessage = error.response?.data?.message || error.message || 'Failed to update user status. Please try again.';\n        this.showToast('error', errorMessage);\n      }\n    },\n\n    async deleteUser(user) {\n      const confirmMessage = `Are you sure you want to delete user \"${user.full_name}\"?\\n\\nThis will:\\n- Deactivate the user account\\n- Prevent future logins\\n- Preserve data for audit purposes\\n\\nThis action can be reversed by reactivating the user.`;\n\n      if (!confirm(confirmMessage)) {\n        return;\n      }\n\n      try {\n        const reason = `User deleted by admin: ${this.adminData?.first_name || 'Admin'}`;\n        const response = await userManagementService.deleteUser(user.id, reason);\n\n        if (response.success) {\n          this.showToast('success', `User ${user.full_name} has been deleted successfully.`);\n\n          // Reload data to reflect changes\n          await this.loadUsers();\n          await this.loadUserStats();\n        } else {\n          throw new Error(response.message || 'Failed to delete user');\n        }\n      } catch (error) {\n        console.error('Failed to delete user:', error);\n        const errorMessage = error.response?.data?.message || error.message || 'Failed to delete user. Please try again.';\n        this.showToast('error', errorMessage);\n      }\n    },\n\n    // Helper methods\n    showToast(type, message) {\n      if (this.$toast?.[type]) {\n        this.$toast[type](message);\n      } else {\n        console.log(`${type.toUpperCase()}: ${message}`);\n        if (type === 'error') alert(`Error: ${message}`);\n        else if (type === 'success') alert(`Success: ${message}`);\n      }\n    },\n\n    closeModal(modalId) {\n      try {\n        const modal = Modal.getInstance(document.getElementById(modalId));\n        if (modal) modal.hide();\n      } catch (error) {\n        console.error('Error closing modal:', error);\n      }\n    },\n\n    handleFormError(error, errorField) {\n      console.error('Form error:', error);\n\n      // Handle server validation errors\n      if (error.response?.data?.details) {\n        const serverErrors = {};\n        error.response.data.details.forEach(detail => {\n          if (detail.path) serverErrors[detail.path] = detail.msg;\n        });\n        this[errorField] = { ...this[errorField], ...serverErrors };\n      }\n\n      const errorMessage = error.response?.data?.message || error.message || 'Operation failed';\n      this.showToast('error', errorMessage);\n    },\n\n\n\n    // Modal methods\n    showAddUserModal() {\n      this.resetAddUserForm();\n      try {\n        const modalElement = document.getElementById('addUserModal');\n        if (modalElement) {\n          const modal = new Modal(modalElement);\n          modal.show();\n        }\n      } catch (error) {\n        console.error('Error showing add user modal:', error);\n        this.$toast?.error?.('Failed to open add user modal');\n      }\n    },\n\n    resetAddUserForm() {\n      // Set default role based on active tab\n      const defaultRole = this.activeTab === 'admins' ? 'admin' : '';\n\n      Object.assign(this.addUserForm, {\n        username: '', email: '', password: '', confirmPassword: '', first_name: '', middle_name: '', last_name: '',\n        suffix: '', role: defaultRole, phone_number: '', birth_date: '', gender: '', civil_status_id: 1, nationality: 'Filipino',\n        house_number: '', street: '', subdivision: '', barangay: '', city_municipality: '',\n        province: '', postal_code: '', years_of_residency: null, months_of_residency: null\n      });\n      // Clear form errors object safely\n      Object.keys(this.formErrors).forEach(key => delete this.formErrors[key]);\n    },\n\n    clearRoleSpecificFields() {\n      const form = this.addUserForm;\n      if (form.role === 'admin') {\n        // Clear client fields\n        Object.assign(form, {\n          birth_date: '', gender: '', civil_status_id: 1, nationality: 'Filipino',\n          house_number: '', street: '', subdivision: '', barangay: '',\n          city_municipality: '', province: '', postal_code: '',\n          years_of_residency: null, months_of_residency: null\n        });\n      } else if (form.role === 'client') {\n        // No admin-specific fields to clear anymore\n      }\n    },\n\n    validateAddUserForm() {\n      const errors = {};\n      const form = this.addUserForm;\n\n      // Basic validation\n      if (!form.username?.length || form.username.length < 3) errors.username = 'Username must be at least 3 characters long';\n      if (!form.password?.length || form.password.length < 6) errors.password = 'Password must be at least 6 characters long';\n      if (!form.confirmPassword?.length) errors.confirmPassword = 'Please confirm your password';\n      if (form.password && form.confirmPassword && form.password !== form.confirmPassword) errors.confirmPassword = 'Passwords do not match';\n      if (!form.first_name?.trim() || form.first_name.trim().length < 2) errors.first_name = 'First name must be at least 2 characters long';\n      if (!form.last_name?.trim() || form.last_name.trim().length < 2) errors.last_name = 'Last name must be at least 2 characters long';\n      if (!form.role) errors.role = 'Please select a user type';\n      if (!form.phone_number?.trim() || form.phone_number.trim().length < 10) errors.phone_number = 'Please provide a valid phone number';\n      if (form.email && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(form.email)) errors.email = 'Please provide a valid email address';\n\n      // Client-specific validation\n      if (form.role === 'client') {\n        if (!form.birth_date) errors.birth_date = 'Birth date is required for clients';\n        if (!form.gender) errors.gender = 'Gender is required for clients';\n        if (!form.barangay?.trim()) errors.barangay = 'Barangay is required for clients';\n        if (!form.city_municipality?.trim()) errors.city_municipality = 'City/Municipality is required for clients';\n        if (!form.province?.trim()) errors.province = 'Province is required for clients';\n      }\n\n      this.formErrors = errors;\n      return Object.keys(errors).length === 0;\n    },\n\n    validateEditUserForm() {\n      const errors = {};\n      const form = this.editUserForm;\n\n      // Basic validation\n      if (!form.username?.length || form.username.length < 3) errors.username = 'Username must be at least 3 characters long';\n      if (!form.first_name?.trim() || form.first_name.trim().length < 2) errors.first_name = 'First name must be at least 2 characters long';\n      if (!form.last_name?.trim() || form.last_name.trim().length < 2) errors.last_name = 'Last name must be at least 2 characters long';\n      if (!form.phone_number?.trim() || form.phone_number.trim().length < 10) errors.phone_number = 'Please provide a valid phone number';\n      if (form.email && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(form.email)) errors.email = 'Please provide a valid email address';\n\n      // Password reset validation\n      if (form.resetPassword) {\n        if (!form.newPassword?.length || form.newPassword.length < 6) errors.newPassword = 'New password must be at least 6 characters long';\n        if (form.newPassword !== form.confirmPassword) errors.confirmPassword = 'Passwords do not match';\n      }\n\n      this.editFormErrors = errors;\n      return Object.keys(errors).length === 0;\n    },\n\n    getFullAddress(user) {\n      const parts = [];\n      if (user.house_number) parts.push(user.house_number);\n      if (user.street) parts.push(user.street);\n      if (user.subdivision) parts.push(user.subdivision);\n      if (user.barangay) parts.push(user.barangay);\n      if (user.city_municipality) parts.push(user.city_municipality);\n      if (user.province) parts.push(user.province);\n      return parts.join(', ') || 'No address provided';\n    },\n\n    async submitAddUser() {\n      if (!this.validateAddUserForm()) {\n        this.showToast('error', 'Please fix the validation errors before submitting.');\n        return;\n      }\n\n      this.addUserLoading = true;\n      try {\n        const userData = { ...this.addUserForm };\n\n        // Convert numeric fields\n        ['years_of_residency', 'months_of_residency', 'civil_status_id'].forEach(field => {\n          if (userData[field]) userData[field] = parseInt(userData[field]);\n        });\n\n        // Explicitly set status to 'active' for admin accounts created through AdminUsers.vue\n        if (this.isCreatingAdminUser || userData.role === 'admin') {\n          userData.status = 'active';\n        }\n\n        const response = await userManagementService.createUser(userData);\n\n        if (response.success) {\n          this.showToast('success', 'User created successfully');\n          this.closeModal('addUserModal');\n          this.resetAddUserForm();\n          await Promise.all([this.loadUsers(), this.loadUserStats()]);\n        } else {\n          throw new Error(response.message || 'Failed to create user');\n        }\n      } catch (error) {\n        this.handleFormError(error, 'formErrors');\n      } finally {\n        this.addUserLoading = false;\n      }\n    },\n\n    editUser(user) {\n      this.editUserForm = {\n        id: user.id,\n        username: user.username,\n        email: user.email || '',\n        first_name: user.first_name || '',\n        middle_name: user.middle_name || '',\n        last_name: user.last_name || '',\n        suffix: user.suffix || '',\n        role: user.type,\n        status: user.status,\n        phone_number: user.phone_number || '',\n        birth_date: user.birth_date ? user.birth_date.split('T')[0] : '',\n        gender: user.gender || '',\n        civil_status_id: user.civil_status_id || 1,\n        nationality: user.nationality || 'Filipino',\n        house_number: user.house_number || '',\n        street: user.street || '',\n        subdivision: user.subdivision || '',\n        barangay: user.barangay || '',\n        city_municipality: user.city_municipality || '',\n        province: user.province || '',\n        postal_code: user.postal_code || '',\n        years_of_residency: user.years_of_residency || null,\n        months_of_residency: user.months_of_residency || null,\n        resetPassword: false,\n        newPassword: '',\n        confirmPassword: ''\n      };\n\n      this.editFormErrors = {};\n\n      try {\n        const modal = new Modal(document.getElementById('editUserModal'));\n        modal.show();\n      } catch (error) {\n        this.showToast('error', 'Failed to open edit user modal');\n      }\n    },\n\n    async submitEditUser() {\n      if (!this.validateEditUserForm()) {\n        this.showToast('error', 'Please fix the validation errors before submitting.');\n        return;\n      }\n\n      this.editUserLoading = true;\n      try {\n        const form = this.editUserForm;\n        const updateData = {\n          username: form.username,\n          email: form.email,\n          first_name: form.first_name,\n          middle_name: form.middle_name,\n          last_name: form.last_name,\n          suffix: form.suffix,\n          status: form.status,\n          phone_number: form.phone_number\n        };\n\n        // Add role-specific fields\n        if (form.role === 'admin') {\n          Object.assign(updateData, {\n            position: form.position,\n            department: form.department,\n            employee_id: form.employee_id,\n            hire_date: form.hire_date\n          });\n        }\n\n        // Add password if resetting\n        if (form.resetPassword && form.newPassword) {\n          updateData.password = form.newPassword;\n        }\n\n        const response = await userManagementService.updateUser(form.id, updateData);\n\n        if (response.success) {\n          this.showToast('success', 'User updated successfully');\n          this.closeModal('editUserModal');\n          await Promise.all([this.loadUsers(), this.loadUserStats()]);\n        } else {\n          throw new Error(response.message || 'Failed to update user');\n        }\n      } catch (error) {\n        this.handleFormError(error, 'editFormErrors');\n      } finally {\n        this.editUserLoading = false;\n      }\n    },\n\n    async viewUser(user) {\n      try {\n        const response = await userManagementService.getUser(user.id);\n        if (response.success) {\n          this.viewUserData = userManagementService.formatUserData(response.data);\n          const modal = new Modal(document.getElementById('viewUserModal'));\n          modal.show();\n        } else {\n          throw new Error(response.message || 'Failed to load user details');\n        }\n      } catch (error) {\n        const errorMessage = error.response?.data?.message || error.message || 'Failed to load user details';\n        this.showToast('error', errorMessage);\n      }\n    },\n\n    // Handle tab switching\n    setActiveTab(tab) {\n      this.activeTab = tab;\n      this.filterStatus = ''; // Reset status filter when switching tabs\n      this.searchQuery = ''; // Reset search when switching tabs\n      this.currentPage = 1; // Reset pagination\n      console.log(`🔄 Switched to ${tab} tab`);\n    },\n\n    // Handle opening user modal from notifications\n    async handleOpenUserModal(modalData) {\n      console.log('🔔 AdminUsers: Opening user modal from notification:', modalData);\n\n      try {\n        const { userId, userType } = modalData;\n\n        if (!userId) {\n          console.error('❌ No user ID provided for modal');\n          return;\n        }\n\n        console.log(`🔍 Looking for ${userType || 'unknown'} user with ID: ${userId}`);\n\n        // Switch to the appropriate tab based on user type\n        if (userType === 'client') {\n          this.setActiveTab('clients');\n        } else if (userType === 'admin') {\n          this.setActiveTab('admins');\n        }\n\n        // Find the user in the current users list\n        let user = this.users.find(u => u.id === userId || u.original_id === userId);\n\n        if (!user) {\n          // If user not found in current list, try to load it directly\n          console.log('🔍 User not found in current list, loading directly...');\n          const response = await userManagementService.getUser(userId);\n          if (response.success) {\n            user = userManagementService.formatUserData(response.data);\n          } else {\n            throw new Error('User not found');\n          }\n        }\n\n        // Open the user details modal\n        await this.viewUser(user);\n\n        console.log('✅ User modal opened successfully');\n\n      } catch (error) {\n        console.error('❌ Failed to open user modal:', error);\n        this.showToast('error', 'Failed to open user details');\n      }\n    },\n\n    // Residency verification methods\n    needsResidencyVerification(user) {\n      return ['pending_residency_verification', 'residency_rejected'].includes(user.status);\n    },\n\n    // Check if user has residency documents uploaded\n    hasResidencyDocuments(user) {\n      if (user.type !== 'client') return false;\n      return user.residency_document_count > 0;\n    },\n\n    // Check if user has residency documents that need review (not approved)\n    hasResidencyDocumentsNeedingReview(user) {\n      if (user.type !== 'client') return false;\n      // Only show review button if they have documents AND they're not already approved\n      return user.residency_document_count > 0 && user.residency_verification_status !== 'approved';\n    },\n\n    // Get the display status for a user (prioritizes residency verification status for clients)\n    getDisplayStatus(user) {\n      if (user.type !== 'client') {\n        return user.status; // For admin users, use regular status\n      }\n\n      // For clients, check if they have residency verification status\n      if (user.residency_verification_status) {\n        // Map residency verification status to display status\n        switch (user.residency_verification_status) {\n          case 'pending':\n            return 'pending_residency_verification';\n          case 'approved':\n            return 'active'; // Approved residency = active client\n          case 'rejected':\n            return 'residency_rejected';\n          default:\n            return user.status;\n        }\n      }\n\n      // If no residency documents uploaded yet\n      if (user.residency_document_count === 0 || user.residency_document_count === undefined) {\n        // Check if they're in a residency verification workflow\n        if (['pending_residency_verification', 'residency_rejected'].includes(user.status)) {\n          return 'no_residency_documents';\n        }\n      }\n\n      // If no residency verification status, check account status\n      if (['pending_residency_verification', 'residency_rejected'].includes(user.status)) {\n        return user.status;\n      }\n\n      // For other statuses, return as-is\n      return user.status;\n    },\n\n    // Check if user can be approved for residency verification\n    canApproveResidency(user) {\n      if (user.type !== 'client') return false;\n\n      const displayStatus = this.getDisplayStatus(user);\n      // Can approve if they have pending residency verification and have uploaded documents\n      return displayStatus === 'pending_residency_verification' && user.residency_document_count > 0;\n    },\n\n    // Check if user can be rejected for residency verification\n    canRejectResidency(user) {\n      if (user.type !== 'client') return false;\n\n      const displayStatus = this.getDisplayStatus(user);\n      // Can reject if they have pending residency verification and have uploaded documents\n      return displayStatus === 'pending_residency_verification' && user.residency_document_count > 0;\n    },\n\n    viewResidencyDocuments(user) {\n      // Set the selected user and show the modal\n      this.selectedUserForResidency = user;\n      this.rejectionReason = '';\n\n      // Show modal using Bootstrap\n      const modal = new Modal(document.getElementById('residencyDocumentsModal'));\n      modal.show();\n    },\n\n    // Direct DOM manipulation method to avoid Vue reactivity issues\n    async openImageModal(user) {\n      if (!user) return;\n\n      console.log('Opening image modal for user:', user);\n\n      // Get modal elements\n      const modal = new Modal(document.getElementById('directImageModal'));\n      const contentDiv = document.getElementById('imageModalContent');\n\n      // Show loading state directly in DOM\n      contentDiv.innerHTML = `\n        <div class=\"text-center py-5\">\n          <div class=\"spinner-border text-primary\" role=\"status\">\n            <span class=\"visually-hidden\">Loading...</span>\n          </div>\n          <p class=\"mt-3 text-muted\">Loading images...</p>\n        </div>\n      `;\n\n      // Show modal\n      modal.show();\n\n      try {\n        // Get account ID\n        const accountId = user.original_id || user.id;\n        const numericId = typeof accountId === 'string' && accountId.includes('_')\n          ? accountId.split('_')[1]\n          : accountId;\n\n        console.log('Fetching documents for account ID:', numericId);\n\n        // Get documents\n        const response = await residencyService.getAccountDocuments(numericId);\n\n        if (response.success && response.data && response.data.length > 0) {\n          console.log('Documents found:', response.data.length);\n\n          // Filter images only\n          const imageDocuments = response.data.filter(doc => {\n            const imageTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\n            return imageTypes.includes(doc.mime_type?.toLowerCase());\n          });\n\n          console.log('Image documents found:', imageDocuments.length);\n\n          if (imageDocuments.length > 0) {\n            // Start building HTML for images\n            let imagesHtml = '<div class=\"row g-3\">';\n            let loadedCount = 0;\n\n            // Load each image\n            for (const doc of imageDocuments) {\n              try {\n                console.log('Loading image:', doc.document_name);\n\n                const imgResponse = await api.get(`/residency/documents/${doc.id}/file`, {\n                  responseType: 'blob'\n                });\n\n                const blob = new Blob([imgResponse.data], { type: doc.mime_type });\n                const url = URL.createObjectURL(blob);\n\n                // Add image card HTML\n                imagesHtml += `\n                  <div class=\"col-md-6 col-lg-4\">\n                    <div class=\"card shadow-sm\">\n                      <img src=\"${url}\" alt=\"${doc.document_name || 'Residency Document'}\"\n                           class=\"card-img-top\" style=\"height: 200px; object-fit: contain; background: #f8f9fa;\">\n                      <div class=\"card-body p-2\">\n                        <small class=\"text-muted\">${doc.document_name || 'Unknown Document'}</small>\n                        <br>\n                        <small class=\"text-muted\">${doc.document_type || 'Document'}</small>\n                      </div>\n                    </div>\n                  </div>\n                `;\n\n                loadedCount++;\n                console.log('✅ Successfully loaded:', doc.document_name);\n\n              } catch (error) {\n                console.error('❌ Failed to load image:', doc.document_name, error);\n\n                // Add error card\n                imagesHtml += `\n                  <div class=\"col-md-6 col-lg-4\">\n                    <div class=\"card shadow-sm\">\n                      <div class=\"card-body text-center p-4\">\n                        <i class=\"fas fa-exclamation-triangle fa-2x text-danger mb-2\"></i>\n                        <p class=\"text-muted small mb-0\">Failed to load</p>\n                        <p class=\"text-muted small mb-0\">${doc.document_name || 'Unknown'}</p>\n                      </div>\n                    </div>\n                  </div>\n                `;\n              }\n            }\n\n            imagesHtml += '</div>';\n\n            if (loadedCount > 0) {\n              // Show images\n              contentDiv.innerHTML = imagesHtml;\n              console.log('Successfully displayed', loadedCount, 'images');\n            } else {\n              // Show error\n              contentDiv.innerHTML = `\n                <div class=\"text-center py-5\">\n                  <i class=\"fas fa-exclamation-triangle fa-3x text-danger mb-3\"></i>\n                  <h5>Failed to Load Images</h5>\n                  <p class=\"text-muted\">All images failed to load. Please try again.</p>\n                </div>\n              `;\n            }\n          } else {\n            // No image documents\n            contentDiv.innerHTML = `\n              <div class=\"text-center py-5\">\n                <i class=\"fas fa-file fa-3x text-muted mb-3\"></i>\n                <h5>No Image Documents</h5>\n                <p class=\"text-muted\">This user has uploaded documents, but none are image files.</p>\n              </div>\n            `;\n          }\n        } else {\n          // No documents at all\n          contentDiv.innerHTML = `\n            <div class=\"text-center py-5\">\n              <i class=\"fas fa-folder-open fa-3x text-muted mb-3\"></i>\n              <h5>No Documents Found</h5>\n              <p class=\"text-muted\">This user has not uploaded any residency documents yet.</p>\n            </div>\n          `;\n        }\n      } catch (error) {\n        console.error('Error loading images:', error);\n\n        // Show error\n        contentDiv.innerHTML = `\n          <div class=\"text-center py-5\">\n            <i class=\"fas fa-exclamation-triangle fa-3x text-danger mb-3\"></i>\n            <h5>Error Loading Images</h5>\n            <p class=\"text-muted\">${error.message || 'An unexpected error occurred'}</p>\n            <button class=\"btn btn-outline-primary btn-sm mt-2\" onclick=\"location.reload()\">\n              <i class=\"fas fa-refresh me-1\"></i>\n              Refresh Page\n            </button>\n          </div>\n        `;\n      }\n    },\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    async approveResidencyVerification() {\n      if (!this.selectedUserForResidency) return;\n\n      this.processingResidencyAction = true;\n      try {\n        // Use the actual account ID, not the composite ID\n        const accountId = this.selectedUserForResidency.original_id || this.selectedUserForResidency.id;\n\n        // Extract numeric ID if it's in format like 'client_32'\n        const numericId = typeof accountId === 'string' && accountId.includes('_')\n          ? parseInt(accountId.split('_')[1])\n          : parseInt(accountId);\n\n        console.log('Approving residency for account ID:', numericId);\n\n        const response = await residencyService.approveVerification(numericId);\n        if (response.success) {\n          this.showToast('success', 'Residency verification approved successfully');\n\n          // Close modal\n          const modal = Modal.getInstance(document.getElementById('residencyDocumentsModal'));\n          if (modal) {\n            modal.hide();\n          }\n\n          // Refresh user list\n          await this.loadUsers();\n        } else {\n          throw new Error(response.message || 'Failed to approve verification');\n        }\n      } catch (error) {\n        console.error('Failed to approve residency verification:', error);\n        this.showToast('error', error.message || 'Failed to approve verification');\n      } finally {\n        this.processingResidencyAction = false;\n      }\n    },\n\n    showRejectResidencyModal() {\n      // Close documents modal first\n      const documentsModal = Modal.getInstance(document.getElementById('residencyDocumentsModal'));\n      documentsModal.hide();\n\n      // Show reject modal\n      setTimeout(() => {\n        const rejectModal = new Modal(document.getElementById('rejectResidencyModal'));\n        rejectModal.show();\n      }, 300);\n    },\n\n    async rejectResidencyVerification() {\n      if (!this.selectedUserForResidency || !this.rejectionReason || this.rejectionReason.length < 10) return;\n\n      this.processingResidencyAction = true;\n      try {\n        // Use the actual account ID, not the composite ID\n        const accountId = this.selectedUserForResidency.original_id || this.selectedUserForResidency.id;\n\n        // Extract numeric ID if it's in format like 'client_32'\n        const numericId = typeof accountId === 'string' && accountId.includes('_')\n          ? parseInt(accountId.split('_')[1])\n          : parseInt(accountId);\n\n        console.log('Rejecting residency for account ID:', numericId);\n\n        const response = await residencyService.rejectVerification(\n          numericId,\n          this.rejectionReason\n        );\n        if (response.success) {\n          this.showToast('success', 'Residency verification rejected');\n\n          // Close modal\n          const modal = Modal.getInstance(document.getElementById('rejectResidencyModal'));\n          modal.hide();\n\n          // Refresh user list\n          await this.loadUsers();\n        } else {\n          throw new Error(response.message || 'Failed to reject verification');\n        }\n      } catch (error) {\n        console.error('Failed to reject residency verification:', error);\n        this.showToast('error', error.message || 'Failed to reject verification');\n      } finally {\n        this.processingResidencyAction = false;\n      }\n    },\n\n    // Quick approve client without viewing documents\n    async quickApproveClient(user) {\n      if (!user || !this.canApproveResidency(user)) return;\n\n      const confirmed = confirm(`Are you sure you want to approve residency verification for ${user.full_name}? This will activate their account and allow them to request documents.`);\n      if (!confirmed) return;\n\n      this.processingQuickAction = true;\n      try {\n        // Use the actual account ID, not the composite ID\n        const accountId = user.original_id || user.id;\n        const response = await residencyService.approveVerification(accountId);\n        if (response.success) {\n          this.showToast('success', `Residency verification approved for ${user.full_name}`);\n          // Reload users to reflect the change\n          await this.loadUsers();\n        } else {\n          throw new Error(response.message || 'Failed to approve residency verification');\n        }\n      } catch (error) {\n        console.error('Failed to approve residency verification:', error);\n        this.showToast('error', error.message || 'Failed to approve residency verification');\n      } finally {\n        this.processingQuickAction = false;\n      }\n    },\n\n    // Quick reject client with simple reason\n    async quickRejectClient(user) {\n      if (!user || !this.canRejectResidency(user)) return;\n\n      const reason = prompt(`Please provide a reason for rejecting residency verification for ${user.full_name}:`, 'Documents do not meet verification requirements');\n      if (!reason || reason.trim().length < 10) {\n        this.showToast('warning', 'Please provide a detailed reason (minimum 10 characters)');\n        return;\n      }\n\n      this.processingQuickAction = true;\n      try {\n        // Use the actual account ID, not the composite ID\n        const accountId = user.original_id || user.id;\n        const response = await residencyService.rejectVerification(accountId, reason.trim());\n        if (response.success) {\n          this.showToast('success', `Residency verification rejected for ${user.full_name}`);\n          // Reload users to reflect the change\n          await this.loadUsers();\n        } else {\n          throw new Error(response.message || 'Failed to reject residency verification');\n        }\n      } catch (error) {\n        console.error('Failed to reject residency verification:', error);\n        this.showToast('error', error.message || 'Failed to reject residency verification');\n      } finally {\n        this.processingQuickAction = false;\n      }\n    },\n\n    formatDocumentType(type) {\n      return residencyService.formatDocumentType(type);\n    },\n\n    formatDocumentStatus(status) {\n      return residencyService.formatVerificationStatus(status);\n    },\n\n    getDocumentStatusBadgeClass(status) {\n      return residencyService.getStatusBadgeClass(status);\n    },\n\n    formatFileSize(bytes) {\n      if (!bytes) return 'Unknown';\n      const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n      const i = Math.floor(Math.log(bytes) / Math.log(1024));\n      return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n    },\n\n    // Additional user-specific methods can be added here\n    // Navigation handlers are now provided by the mixin\n  }\n};\n</script>\n\n\n<style scoped>\n@import './css/adminDashboard.css';\n\n.image-placeholder {\n  height: 200px;\n  min-height: 200px;\n  border: 2px dashed #dee2e6;\n  border-radius: 8px;\n}\n\n/* Simple styles for image modal */\n#simpleImageModal .card-img-top {\n  background: #f8f9fa;\n}\n\n#simpleImageModal .card {\n  transition: transform 0.2s ease;\n}\n\n#simpleImageModal .card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n}\n\n/* Navigation tabs styling */\n.nav-pills .nav-link {\n  border-radius: 0.375rem;\n  font-weight: 500;\n  transition: all 0.3s ease;\n}\n\n.nav-pills .nav-link:not(.active) {\n  color: #5a5c69;\n  background-color: transparent;\n}\n\n.nav-pills .nav-link:not(.active):hover {\n  color: #4e73df;\n  background-color: #f8f9fc;\n}\n\n.nav-pills .nav-link.active {\n  background-color: #4e73df;\n  color: white;\n}\n\n.nav-pills .nav-link.active .badge {\n  background-color: rgba(255, 255, 255, 0.2) !important;\n  color: white !important;\n}\n\n.nav-pills .nav-link:not(.active) .badge {\n  background-color: #e3e6f0 !important;\n  color: #5a5c69 !important;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}