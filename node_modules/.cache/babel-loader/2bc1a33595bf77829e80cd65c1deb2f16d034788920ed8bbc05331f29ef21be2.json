{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport api from './api';\n\n/**\n * Payment Service for PayMongo Integration\n * Handles online payments and payment verification\n */\nclass PaymentService {\n  /**\n   * Get PayMongo configuration for frontend\n   * @returns {Promise<Object>} PayMongo configuration\n   */\n  async getPaymentConfig() {\n    try {\n      const response = await api.get('/payments/config');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get payment config:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initiate payment process\n   * @param {Object} paymentData - Payment information\n   * @param {number} paymentData.request_id - Document request ID\n   * @param {number} paymentData.payment_method_id - Payment method ID\n   * @param {string} paymentData.customer_email - Customer email (optional)\n   * @returns {Promise<Object>} Payment initiation response\n   */\n  async initiatePayment(paymentData) {\n    try {\n      const response = await api.post('/payments/initiate', paymentData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to initiate payment:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get payment status\n   * @param {string} transactionId - Transaction ID\n   * @returns {Promise<Object>} Payment status\n   */\n  async getPaymentStatus(transactionId) {\n    try {\n      const response = await api.get(`/payments/status/${transactionId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get payment status:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get payment verification queue (Admin only)\n   * @returns {Promise<Object>} Pending payment verifications\n   */\n  async getPaymentVerificationQueue() {\n    try {\n      const response = await api.get('/admin/documents/payment-verification-queue');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get payment verification queue:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Verify in-person payment (Admin only)\n   * @param {number} requestId - Document request ID\n   * @param {Object} paymentDetails - Payment verification details\n   * @param {number} paymentDetails.amount_received - Amount received\n   * @param {number} paymentDetails.payment_method_id - Payment method ID\n   * @param {string} paymentDetails.receipt_number - Receipt number (optional)\n   * @param {string} paymentDetails.notes - Verification notes (optional)\n   * @returns {Promise<Object>} Verification response\n   */\n  async verifyInPersonPayment(requestId, paymentDetails) {\n    try {\n      const response = await api.post(`/admin/documents/requests/${requestId}/verify-payment`, paymentDetails);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to verify in-person payment:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Handle PayMongo checkout redirect\n   * @param {string} checkoutUrl - PayMongo checkout URL\n   */\n  redirectToPayMongo(checkoutUrl) {\n    if (checkoutUrl) {\n      window.location.href = checkoutUrl;\n    } else {\n      throw new Error('Invalid checkout URL');\n    }\n  }\n\n  /**\n   * Format amount for display\n   * @param {number} amount - Amount in PHP\n   * @returns {string} Formatted amount\n   */\n  formatAmount(amount) {\n    return new Intl.NumberFormat('en-PH', {\n      style: 'currency',\n      currency: 'PHP'\n    }).format(amount);\n  }\n\n  /**\n   * Get payment method display name\n   * @param {string} methodCode - Payment method code\n   * @returns {string} Display name\n   */\n  getPaymentMethodDisplayName(methodCode) {\n    const methodNames = {\n      'CASH': 'Cash Payment',\n      'ONLINE_PAYMENT_GROUP': 'Online Payment',\n      'PAYMONGO_CARD': 'Credit/Debit Card',\n      'PAYMONGO_GCASH': 'GCash',\n      'PAYMONGO_GRABPAY': 'GrabPay',\n      'PAYMONGO_PAYMAYA': 'Maya (PayMaya)',\n      'PAYMONGO_BANK': 'Bank Transfer'\n    };\n    return methodNames[methodCode] || methodCode;\n  }\n\n  /**\n   * Group payment methods for simplified UI display\n   * @param {Array} paymentMethods - Array of payment method objects from backend\n   * @returns {Array} Grouped payment methods\n   */\n  groupPaymentMethods(paymentMethods) {\n    if (!Array.isArray(paymentMethods)) return [];\n    const cashMethods = [];\n    const onlineMethods = [];\n    paymentMethods.forEach(method => {\n      if (this.isOnlinePaymentMethod(method.method_code)) {\n        onlineMethods.push(method);\n      } else {\n        cashMethods.push(method);\n      }\n    });\n    const groupedMethods = [];\n\n    // Add cash payment methods (typically just one)\n    cashMethods.forEach(method => {\n      groupedMethods.push({\n        id: method.id,\n        method_name: method.method_name,\n        method_code: method.method_code,\n        description: method.description,\n        is_online: method.is_online,\n        is_active: method.is_active,\n        processing_fee_percentage: method.processing_fee_percentage,\n        processing_fee_fixed: method.processing_fee_fixed,\n        group_type: 'individual'\n      });\n    });\n\n    // Add grouped online payment option if there are online methods\n    if (onlineMethods.length > 0) {\n      groupedMethods.push({\n        id: 'ONLINE_PAYMENT_GROUP',\n        method_name: 'Online Payment',\n        method_code: 'ONLINE_PAYMENT_GROUP',\n        description: 'Pay securely online using credit/debit card, GCash, GrabPay, Maya, or bank transfer',\n        is_online: true,\n        is_active: true,\n        processing_fee_percentage: onlineMethods[0]?.processing_fee_percentage || 0,\n        processing_fee_fixed: onlineMethods[0]?.processing_fee_fixed || 0,\n        group_type: 'group',\n        grouped_methods: onlineMethods\n      });\n    }\n    return groupedMethods;\n  }\n\n  /**\n   * Get the actual payment method ID for backend submission\n   * @param {string|number} selectedMethodId - Selected method ID (could be group ID)\n   * @param {Array} originalMethods - Original payment methods from backend\n   * @returns {number|null} Actual payment method ID for backend\n   */\n  getActualPaymentMethodId(selectedMethodId, originalMethods) {\n    // If it's the online payment group, return the preferred online method ID\n    // Priority: Card > GCash > GrabPay > Maya > Bank Transfer\n    if (selectedMethodId === 'ONLINE_PAYMENT_GROUP') {\n      const methodPriority = ['PAYMONGO_CARD', 'PAYMONGO_GCASH', 'PAYMONGO_GRABPAY', 'PAYMONGO_PAYMAYA', 'PAYMONGO_BANK'];\n      for (const methodCode of methodPriority) {\n        const method = originalMethods.find(m => m.method_code === methodCode && m.is_active);\n        if (method) {\n          return method.id;\n        }\n      }\n\n      // Fallback to first available online method\n      const firstOnlineMethod = originalMethods.find(method => this.isOnlinePaymentMethod(method.method_code) && method.is_active);\n      return firstOnlineMethod ? firstOnlineMethod.id : null;\n    }\n\n    // For individual methods, return the ID as-is\n    return parseInt(selectedMethodId);\n  }\n\n  /**\n   * Check if payment method is online\n   * @param {string} methodCode - Payment method code\n   * @returns {boolean} True if online payment method\n   */\n  isOnlinePaymentMethod(methodCode) {\n    return methodCode && methodCode.startsWith('PAYMONGO_');\n  }\n\n  /**\n   * Get payment status display info\n   * @param {string} status - Payment status\n   * @returns {Object} Status display information\n   */\n  getPaymentStatusDisplay(status) {\n    const statusInfo = {\n      'pending': {\n        text: 'Pending',\n        color: 'warning',\n        icon: 'clock'\n      },\n      'succeeded': {\n        text: 'Paid',\n        color: 'success',\n        icon: 'check-circle'\n      },\n      'failed': {\n        text: 'Failed',\n        color: 'danger',\n        icon: 'x-circle'\n      },\n      'cancelled': {\n        text: 'Cancelled',\n        color: 'secondary',\n        icon: 'x'\n      }\n    };\n    return statusInfo[status] || {\n      text: status,\n      color: 'secondary',\n      icon: 'help-circle'\n    };\n  }\n\n  /**\n   * Calculate processing fee\n   * @param {number} baseAmount - Base amount\n   * @param {number} feePercentage - Fee percentage\n   * @param {number} feeFixed - Fixed fee\n   * @returns {number} Processing fee\n   */\n  calculateProcessingFee(baseAmount, feePercentage = 0, feeFixed = 0) {\n    const percentageFee = baseAmount * feePercentage / 100;\n    return percentageFee + feeFixed;\n  }\n\n  /**\n   * Calculate total amount including fees\n   * @param {number} baseAmount - Base amount\n   * @param {number} feePercentage - Fee percentage\n   * @param {number} feeFixed - Fixed fee\n   * @returns {Object} Amount breakdown\n   */\n  calculateTotalAmount(baseAmount, feePercentage = 0, feeFixed = 0) {\n    const processingFee = this.calculateProcessingFee(baseAmount, feePercentage, feeFixed);\n    const totalAmount = baseAmount + processingFee;\n    return {\n      baseAmount,\n      processingFee,\n      totalAmount,\n      formattedBase: this.formatAmount(baseAmount),\n      formattedFee: this.formatAmount(processingFee),\n      formattedTotal: this.formatAmount(totalAmount)\n    };\n  }\n\n  /**\n   * Validate payment data before submission\n   * @param {Object} paymentData - Payment data to validate\n   * @returns {Object} Validation result\n   */\n  validatePaymentData(paymentData) {\n    const errors = [];\n    if (!paymentData.request_id) {\n      errors.push('Request ID is required');\n    }\n    if (!paymentData.payment_method_id) {\n      errors.push('Payment method is required');\n    }\n    if (paymentData.customer_email && !this.isValidEmail(paymentData.customer_email)) {\n      errors.push('Invalid email format');\n    }\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Validate email format\n   * @param {string} email - Email to validate\n   * @returns {boolean} True if valid email\n   */\n  isValidEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  /**\n   * Handle payment errors with user-friendly messages\n   * @param {Error} error - Error object\n   * @returns {string} User-friendly error message\n   */\n  getErrorMessage(error) {\n    if (error.response?.data?.message) {\n      return error.response.data.message;\n    }\n    if (error.response?.status === 400) {\n      return 'Invalid payment information. Please check your details and try again.';\n    }\n    if (error.response?.status === 401) {\n      return 'You need to be logged in to make a payment.';\n    }\n    if (error.response?.status === 404) {\n      return 'Payment service not found. Please contact support.';\n    }\n    if (error.response?.status >= 500) {\n      return 'Payment service is temporarily unavailable. Please try again later.';\n    }\n    return error.message || 'An unexpected error occurred during payment processing.';\n  }\n}\nexport default new PaymentService();","map":{"version":3,"names":["api","PaymentService","getPaymentConfig","response","get","data","error","console","initiatePayment","paymentData","post","getPaymentStatus","transactionId","getPaymentVerificationQueue","verifyInPersonPayment","requestId","paymentDetails","redirectToPayMongo","checkoutUrl","window","location","href","Error","formatAmount","amount","Intl","NumberFormat","style","currency","format","getPaymentMethodDisplayName","methodCode","methodNames","groupPaymentMethods","paymentMethods","Array","isArray","cashMethods","onlineMethods","forEach","method","isOnlinePaymentMethod","method_code","push","groupedMethods","id","method_name","description","is_online","is_active","processing_fee_percentage","processing_fee_fixed","group_type","length","grouped_methods","getActualPaymentMethodId","selectedMethodId","originalMethods","methodPriority","find","m","firstOnlineMethod","parseInt","startsWith","getPaymentStatusDisplay","status","statusInfo","text","color","icon","calculateProcessingFee","baseAmount","feePercentage","feeFixed","percentageFee","calculateTotalAmount","processingFee","totalAmount","formattedBase","formattedFee","formattedTotal","validatePaymentData","errors","request_id","payment_method_id","customer_email","isValidEmail","isValid","email","emailRegex","test","getErrorMessage","message"],"sources":["D:/brgy_docu_hub/BOSFDR/src/services/paymentService.js"],"sourcesContent":["import api from './api';\n\n/**\n * Payment Service for PayMongo Integration\n * Handles online payments and payment verification\n */\nclass PaymentService {\n  \n  /**\n   * Get PayMongo configuration for frontend\n   * @returns {Promise<Object>} PayMongo configuration\n   */\n  async getPaymentConfig() {\n    try {\n      const response = await api.get('/payments/config');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get payment config:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initiate payment process\n   * @param {Object} paymentData - Payment information\n   * @param {number} paymentData.request_id - Document request ID\n   * @param {number} paymentData.payment_method_id - Payment method ID\n   * @param {string} paymentData.customer_email - Customer email (optional)\n   * @returns {Promise<Object>} Payment initiation response\n   */\n  async initiatePayment(paymentData) {\n    try {\n      const response = await api.post('/payments/initiate', paymentData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to initiate payment:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get payment status\n   * @param {string} transactionId - Transaction ID\n   * @returns {Promise<Object>} Payment status\n   */\n  async getPaymentStatus(transactionId) {\n    try {\n      const response = await api.get(`/payments/status/${transactionId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get payment status:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get payment verification queue (Admin only)\n   * @returns {Promise<Object>} Pending payment verifications\n   */\n  async getPaymentVerificationQueue() {\n    try {\n      const response = await api.get('/admin/documents/payment-verification-queue');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get payment verification queue:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Verify in-person payment (Admin only)\n   * @param {number} requestId - Document request ID\n   * @param {Object} paymentDetails - Payment verification details\n   * @param {number} paymentDetails.amount_received - Amount received\n   * @param {number} paymentDetails.payment_method_id - Payment method ID\n   * @param {string} paymentDetails.receipt_number - Receipt number (optional)\n   * @param {string} paymentDetails.notes - Verification notes (optional)\n   * @returns {Promise<Object>} Verification response\n   */\n  async verifyInPersonPayment(requestId, paymentDetails) {\n    try {\n      const response = await api.post(`/admin/documents/requests/${requestId}/verify-payment`, paymentDetails);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to verify in-person payment:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Handle PayMongo checkout redirect\n   * @param {string} checkoutUrl - PayMongo checkout URL\n   */\n  redirectToPayMongo(checkoutUrl) {\n    if (checkoutUrl) {\n      window.location.href = checkoutUrl;\n    } else {\n      throw new Error('Invalid checkout URL');\n    }\n  }\n\n  /**\n   * Format amount for display\n   * @param {number} amount - Amount in PHP\n   * @returns {string} Formatted amount\n   */\n  formatAmount(amount) {\n    return new Intl.NumberFormat('en-PH', {\n      style: 'currency',\n      currency: 'PHP'\n    }).format(amount);\n  }\n\n  /**\n   * Get payment method display name\n   * @param {string} methodCode - Payment method code\n   * @returns {string} Display name\n   */\n  getPaymentMethodDisplayName(methodCode) {\n    const methodNames = {\n      'CASH': 'Cash Payment',\n      'ONLINE_PAYMENT_GROUP': 'Online Payment',\n      'PAYMONGO_CARD': 'Credit/Debit Card',\n      'PAYMONGO_GCASH': 'GCash',\n      'PAYMONGO_GRABPAY': 'GrabPay',\n      'PAYMONGO_PAYMAYA': 'Maya (PayMaya)',\n      'PAYMONGO_BANK': 'Bank Transfer'\n    };\n    return methodNames[methodCode] || methodCode;\n  }\n\n  /**\n   * Group payment methods for simplified UI display\n   * @param {Array} paymentMethods - Array of payment method objects from backend\n   * @returns {Array} Grouped payment methods\n   */\n  groupPaymentMethods(paymentMethods) {\n    if (!Array.isArray(paymentMethods)) return [];\n\n    const cashMethods = [];\n    const onlineMethods = [];\n\n    paymentMethods.forEach(method => {\n      if (this.isOnlinePaymentMethod(method.method_code)) {\n        onlineMethods.push(method);\n      } else {\n        cashMethods.push(method);\n      }\n    });\n\n    const groupedMethods = [];\n\n    // Add cash payment methods (typically just one)\n    cashMethods.forEach(method => {\n      groupedMethods.push({\n        id: method.id,\n        method_name: method.method_name,\n        method_code: method.method_code,\n        description: method.description,\n        is_online: method.is_online,\n        is_active: method.is_active,\n        processing_fee_percentage: method.processing_fee_percentage,\n        processing_fee_fixed: method.processing_fee_fixed,\n        group_type: 'individual'\n      });\n    });\n\n    // Add grouped online payment option if there are online methods\n    if (onlineMethods.length > 0) {\n      groupedMethods.push({\n        id: 'ONLINE_PAYMENT_GROUP',\n        method_name: 'Online Payment',\n        method_code: 'ONLINE_PAYMENT_GROUP',\n        description: 'Pay securely online using credit/debit card, GCash, GrabPay, Maya, or bank transfer',\n        is_online: true,\n        is_active: true,\n        processing_fee_percentage: onlineMethods[0]?.processing_fee_percentage || 0,\n        processing_fee_fixed: onlineMethods[0]?.processing_fee_fixed || 0,\n        group_type: 'group',\n        grouped_methods: onlineMethods\n      });\n    }\n\n    return groupedMethods;\n  }\n\n  /**\n   * Get the actual payment method ID for backend submission\n   * @param {string|number} selectedMethodId - Selected method ID (could be group ID)\n   * @param {Array} originalMethods - Original payment methods from backend\n   * @returns {number|null} Actual payment method ID for backend\n   */\n  getActualPaymentMethodId(selectedMethodId, originalMethods) {\n    // If it's the online payment group, return the preferred online method ID\n    // Priority: Card > GCash > GrabPay > Maya > Bank Transfer\n    if (selectedMethodId === 'ONLINE_PAYMENT_GROUP') {\n      const methodPriority = ['PAYMONGO_CARD', 'PAYMONGO_GCASH', 'PAYMONGO_GRABPAY', 'PAYMONGO_PAYMAYA', 'PAYMONGO_BANK'];\n\n      for (const methodCode of methodPriority) {\n        const method = originalMethods.find(m =>\n          m.method_code === methodCode && m.is_active\n        );\n        if (method) {\n          return method.id;\n        }\n      }\n\n      // Fallback to first available online method\n      const firstOnlineMethod = originalMethods.find(method =>\n        this.isOnlinePaymentMethod(method.method_code) && method.is_active\n      );\n      return firstOnlineMethod ? firstOnlineMethod.id : null;\n    }\n\n    // For individual methods, return the ID as-is\n    return parseInt(selectedMethodId);\n  }\n\n  /**\n   * Check if payment method is online\n   * @param {string} methodCode - Payment method code\n   * @returns {boolean} True if online payment method\n   */\n  isOnlinePaymentMethod(methodCode) {\n    return methodCode && methodCode.startsWith('PAYMONGO_');\n  }\n\n  /**\n   * Get payment status display info\n   * @param {string} status - Payment status\n   * @returns {Object} Status display information\n   */\n  getPaymentStatusDisplay(status) {\n    const statusInfo = {\n      'pending': { text: 'Pending', color: 'warning', icon: 'clock' },\n      'succeeded': { text: 'Paid', color: 'success', icon: 'check-circle' },\n      'failed': { text: 'Failed', color: 'danger', icon: 'x-circle' },\n      'cancelled': { text: 'Cancelled', color: 'secondary', icon: 'x' }\n    };\n    return statusInfo[status] || { text: status, color: 'secondary', icon: 'help-circle' };\n  }\n\n  /**\n   * Calculate processing fee\n   * @param {number} baseAmount - Base amount\n   * @param {number} feePercentage - Fee percentage\n   * @param {number} feeFixed - Fixed fee\n   * @returns {number} Processing fee\n   */\n  calculateProcessingFee(baseAmount, feePercentage = 0, feeFixed = 0) {\n    const percentageFee = (baseAmount * feePercentage) / 100;\n    return percentageFee + feeFixed;\n  }\n\n  /**\n   * Calculate total amount including fees\n   * @param {number} baseAmount - Base amount\n   * @param {number} feePercentage - Fee percentage\n   * @param {number} feeFixed - Fixed fee\n   * @returns {Object} Amount breakdown\n   */\n  calculateTotalAmount(baseAmount, feePercentage = 0, feeFixed = 0) {\n    const processingFee = this.calculateProcessingFee(baseAmount, feePercentage, feeFixed);\n    const totalAmount = baseAmount + processingFee;\n    \n    return {\n      baseAmount,\n      processingFee,\n      totalAmount,\n      formattedBase: this.formatAmount(baseAmount),\n      formattedFee: this.formatAmount(processingFee),\n      formattedTotal: this.formatAmount(totalAmount)\n    };\n  }\n\n  /**\n   * Validate payment data before submission\n   * @param {Object} paymentData - Payment data to validate\n   * @returns {Object} Validation result\n   */\n  validatePaymentData(paymentData) {\n    const errors = [];\n\n    if (!paymentData.request_id) {\n      errors.push('Request ID is required');\n    }\n\n    if (!paymentData.payment_method_id) {\n      errors.push('Payment method is required');\n    }\n\n    if (paymentData.customer_email && !this.isValidEmail(paymentData.customer_email)) {\n      errors.push('Invalid email format');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  /**\n   * Validate email format\n   * @param {string} email - Email to validate\n   * @returns {boolean} True if valid email\n   */\n  isValidEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  /**\n   * Handle payment errors with user-friendly messages\n   * @param {Error} error - Error object\n   * @returns {string} User-friendly error message\n   */\n  getErrorMessage(error) {\n    if (error.response?.data?.message) {\n      return error.response.data.message;\n    }\n    \n    if (error.response?.status === 400) {\n      return 'Invalid payment information. Please check your details and try again.';\n    }\n    \n    if (error.response?.status === 401) {\n      return 'You need to be logged in to make a payment.';\n    }\n    \n    if (error.response?.status === 404) {\n      return 'Payment service not found. Please contact support.';\n    }\n    \n    if (error.response?.status >= 500) {\n      return 'Payment service is temporarily unavailable. Please try again later.';\n    }\n    \n    return error.message || 'An unexpected error occurred during payment processing.';\n  }\n}\n\nexport default new PaymentService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}