{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\n/**\n * Error Handler Composable\n * Centralized error handling with logging, user notifications, and recovery\n * Implements Google's error handling best practices\n */\n\nimport { ref } from 'vue';\nexport function useErrorHandler() {\n  // Error state\n  const errors = ref([]);\n  const globalError = ref(null);\n  const isErrorModalOpen = ref(false);\n\n  // Error types\n  const ERROR_TYPES = {\n    NETWORK: 'network',\n    VALIDATION: 'validation',\n    AUTHENTICATION: 'authentication',\n    AUTHORIZATION: 'authorization',\n    SERVER: 'server',\n    CLIENT: 'client',\n    UNKNOWN: 'unknown'\n  };\n\n  // Error severity levels\n  const SEVERITY_LEVELS = {\n    LOW: 'low',\n    MEDIUM: 'medium',\n    HIGH: 'high',\n    CRITICAL: 'critical'\n  };\n\n  // Methods\n  const handleError = (error, context = '', options = {}) => {\n    const errorInfo = processError(error, context, options);\n\n    // Log error\n    logError(errorInfo);\n\n    // Store error\n    addError(errorInfo);\n\n    // Show user notification if needed\n    if (options.showToUser !== false) {\n      showErrorToUser(errorInfo);\n    }\n\n    // Report to monitoring service if critical\n    if (errorInfo.severity === SEVERITY_LEVELS.CRITICAL) {\n      reportCriticalError(errorInfo);\n    }\n    return errorInfo;\n  };\n  const processError = (error, context, options) => {\n    const timestamp = new Date().toISOString();\n    const errorId = generateErrorId();\n    let errorInfo = {\n      id: errorId,\n      timestamp,\n      context,\n      severity: options.severity || SEVERITY_LEVELS.MEDIUM,\n      type: ERROR_TYPES.UNKNOWN,\n      message: 'An unexpected error occurred',\n      originalError: error,\n      stack: null,\n      userAgent: navigator.userAgent,\n      url: window.location.href,\n      userId: getCurrentUserId(),\n      sessionId: getSessionId()\n    };\n\n    // Process different error types\n    if (error instanceof Error) {\n      errorInfo.message = error.message;\n      errorInfo.stack = error.stack;\n      errorInfo.type = classifyError(error);\n    } else if (typeof error === 'string') {\n      errorInfo.message = error;\n      errorInfo.type = ERROR_TYPES.CLIENT;\n    } else if (error?.response) {\n      // Axios error\n      errorInfo = processAxiosError(error, errorInfo);\n    } else if (error?.code) {\n      // Custom error with code\n      errorInfo.type = error.code;\n      errorInfo.message = error.message || errorInfo.message;\n    }\n    return errorInfo;\n  };\n  const processAxiosError = (axiosError, errorInfo) => {\n    const response = axiosError.response;\n    const request = axiosError.request;\n    if (response) {\n      // Server responded with error status\n      errorInfo.type = response.status >= 500 ? ERROR_TYPES.SERVER : ERROR_TYPES.CLIENT;\n      errorInfo.message = response.data?.message || `HTTP ${response.status}: ${response.statusText}`;\n      errorInfo.statusCode = response.status;\n      errorInfo.responseData = response.data;\n\n      // Set severity based on status code\n      if (response.status >= 500) {\n        errorInfo.severity = SEVERITY_LEVELS.HIGH;\n      } else if (response.status === 401) {\n        errorInfo.type = ERROR_TYPES.AUTHENTICATION;\n        errorInfo.severity = SEVERITY_LEVELS.MEDIUM;\n      } else if (response.status === 403) {\n        errorInfo.type = ERROR_TYPES.AUTHORIZATION;\n        errorInfo.severity = SEVERITY_LEVELS.MEDIUM;\n      }\n    } else if (request) {\n      // Network error\n      errorInfo.type = ERROR_TYPES.NETWORK;\n      errorInfo.message = 'Network error - please check your connection';\n      errorInfo.severity = SEVERITY_LEVELS.HIGH;\n    }\n    return errorInfo;\n  };\n  const classifyError = error => {\n    const message = error.message.toLowerCase();\n    if (message.includes('network') || message.includes('fetch')) {\n      return ERROR_TYPES.NETWORK;\n    } else if (message.includes('validation') || message.includes('invalid')) {\n      return ERROR_TYPES.VALIDATION;\n    } else if (message.includes('unauthorized') || message.includes('authentication')) {\n      return ERROR_TYPES.AUTHENTICATION;\n    } else if (message.includes('forbidden') || message.includes('permission')) {\n      return ERROR_TYPES.AUTHORIZATION;\n    }\n    return ERROR_TYPES.CLIENT;\n  };\n  const logError = errorInfo => {\n    // Console logging with appropriate level\n    const logLevel = getLogLevel(errorInfo.severity);\n    const logMessage = `[${errorInfo.type.toUpperCase()}] ${errorInfo.context}: ${errorInfo.message}`;\n    console[logLevel](logMessage, {\n      errorId: errorInfo.id,\n      timestamp: errorInfo.timestamp,\n      originalError: errorInfo.originalError,\n      stack: errorInfo.stack\n    });\n  };\n  const getLogLevel = severity => {\n    switch (severity) {\n      case SEVERITY_LEVELS.LOW:\n        return 'info';\n      case SEVERITY_LEVELS.MEDIUM:\n        return 'warn';\n      case SEVERITY_LEVELS.HIGH:\n      case SEVERITY_LEVELS.CRITICAL:\n        return 'error';\n      default:\n        return 'warn';\n    }\n  };\n  const addError = errorInfo => {\n    errors.value.unshift(errorInfo);\n\n    // Keep only last 50 errors to prevent memory issues\n    if (errors.value.length > 50) {\n      errors.value = errors.value.slice(0, 50);\n    }\n\n    // Set global error for critical issues\n    if (errorInfo.severity === SEVERITY_LEVELS.CRITICAL) {\n      globalError.value = errorInfo;\n    }\n  };\n  const showErrorToUser = errorInfo => {\n    const userMessage = getUserFriendlyMessage(errorInfo);\n\n    // You can integrate with your notification system here\n    // For now, we'll use a simple approach\n    if (errorInfo.severity === SEVERITY_LEVELS.CRITICAL) {\n      // Show modal for critical errors\n      globalError.value = errorInfo;\n      isErrorModalOpen.value = true;\n    } else {\n      // Show toast notification for other errors\n      showToastNotification(userMessage, errorInfo.severity);\n    }\n  };\n  const getUserFriendlyMessage = errorInfo => {\n    switch (errorInfo.type) {\n      case ERROR_TYPES.NETWORK:\n        return 'Please check your internet connection and try again.';\n      case ERROR_TYPES.AUTHENTICATION:\n        return 'Please log in again to continue.';\n      case ERROR_TYPES.AUTHORIZATION:\n        return 'You do not have permission to perform this action.';\n      case ERROR_TYPES.VALIDATION:\n        return errorInfo.message;\n      // Validation messages are usually user-friendly\n      case ERROR_TYPES.SERVER:\n        return 'Server error. Please try again later.';\n      default:\n        return 'Something went wrong. Please try again.';\n    }\n  };\n  const showToastNotification = (message, severity) => {\n    // Placeholder for toast notification\n    // You would integrate with your actual notification system\n    console.log(`Toast [${severity}]: ${message}`);\n  };\n  const reportCriticalError = errorInfo => {\n    // Report to external monitoring service (e.g., Sentry, LogRocket)\n    // This is a placeholder implementation\n    console.error('CRITICAL ERROR REPORTED:', errorInfo);\n  };\n\n  // Utility functions\n  const generateErrorId = () => {\n    return `err_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  };\n  const getCurrentUserId = () => {\n    // Get current user ID from auth service\n    try {\n      const user = JSON.parse(localStorage.getItem('auth_user') || '{}');\n      return user.id || 'anonymous';\n    } catch {\n      return 'anonymous';\n    }\n  };\n  const getSessionId = () => {\n    // Get or generate session ID\n    let sessionId = sessionStorage.getItem('session_id');\n    if (!sessionId) {\n      sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      sessionStorage.setItem('session_id', sessionId);\n    }\n    return sessionId;\n  };\n\n  // Error management\n  const clearErrors = () => {\n    errors.value = [];\n    globalError.value = null;\n  };\n  const clearError = errorId => {\n    errors.value = errors.value.filter(error => error.id !== errorId);\n    if (globalError.value?.id === errorId) {\n      globalError.value = null;\n    }\n  };\n  const closeErrorModal = () => {\n    isErrorModalOpen.value = false;\n    globalError.value = null;\n  };\n  const retryLastAction = () => {\n    // Placeholder for retry functionality\n    console.log('Retrying last action...');\n  };\n\n  // Return public API\n  return {\n    // State\n    errors,\n    globalError,\n    isErrorModalOpen,\n    // Constants\n    ERROR_TYPES,\n    SEVERITY_LEVELS,\n    // Methods\n    handleError,\n    clearErrors,\n    clearError,\n    closeErrorModal,\n    retryLastAction,\n    // Utilities\n    getUserFriendlyMessage\n  };\n}","map":{"version":3,"names":["ref","useErrorHandler","errors","globalError","isErrorModalOpen","ERROR_TYPES","NETWORK","VALIDATION","AUTHENTICATION","AUTHORIZATION","SERVER","CLIENT","UNKNOWN","SEVERITY_LEVELS","LOW","MEDIUM","HIGH","CRITICAL","handleError","error","context","options","errorInfo","processError","logError","addError","showToUser","showErrorToUser","severity","reportCriticalError","timestamp","Date","toISOString","errorId","generateErrorId","id","type","message","originalError","stack","userAgent","navigator","url","window","location","href","userId","getCurrentUserId","sessionId","getSessionId","Error","classifyError","response","processAxiosError","code","axiosError","request","status","data","statusText","statusCode","responseData","toLowerCase","includes","logLevel","getLogLevel","logMessage","toUpperCase","console","value","unshift","length","slice","userMessage","getUserFriendlyMessage","showToastNotification","log","now","Math","random","toString","substr","user","JSON","parse","localStorage","getItem","sessionStorage","setItem","clearErrors","clearError","filter","closeErrorModal","retryLastAction"],"sources":["D:/brgy_docu_hub/BOSFDR/src/composables/useErrorHandler.js"],"sourcesContent":["/**\n * Error Handler Composable\n * Centralized error handling with logging, user notifications, and recovery\n * Implements Google's error handling best practices\n */\n\nimport { ref } from 'vue'\n\nexport function useErrorHandler() {\n  // Error state\n  const errors = ref([])\n  const globalError = ref(null)\n  const isErrorModalOpen = ref(false)\n\n  // Error types\n  const ERROR_TYPES = {\n    NETWORK: 'network',\n    VALIDATION: 'validation',\n    AUTHENTICATION: 'authentication',\n    AUTHORIZATION: 'authorization',\n    SERVER: 'server',\n    CLIENT: 'client',\n    UNKNOWN: 'unknown'\n  }\n\n  // Error severity levels\n  const SEVERITY_LEVELS = {\n    LOW: 'low',\n    MEDIUM: 'medium',\n    HIGH: 'high',\n    CRITICAL: 'critical'\n  }\n\n  // Methods\n  const handleError = (error, context = '', options = {}) => {\n    const errorInfo = processError(error, context, options)\n    \n    // Log error\n    logError(errorInfo)\n    \n    // Store error\n    addError(errorInfo)\n    \n    // Show user notification if needed\n    if (options.showToUser !== false) {\n      showErrorToUser(errorInfo)\n    }\n    \n    // Report to monitoring service if critical\n    if (errorInfo.severity === SEVERITY_LEVELS.CRITICAL) {\n      reportCriticalError(errorInfo)\n    }\n    \n    return errorInfo\n  }\n\n  const processError = (error, context, options) => {\n    const timestamp = new Date().toISOString()\n    const errorId = generateErrorId()\n    \n    let errorInfo = {\n      id: errorId,\n      timestamp,\n      context,\n      severity: options.severity || SEVERITY_LEVELS.MEDIUM,\n      type: ERROR_TYPES.UNKNOWN,\n      message: 'An unexpected error occurred',\n      originalError: error,\n      stack: null,\n      userAgent: navigator.userAgent,\n      url: window.location.href,\n      userId: getCurrentUserId(),\n      sessionId: getSessionId()\n    }\n\n    // Process different error types\n    if (error instanceof Error) {\n      errorInfo.message = error.message\n      errorInfo.stack = error.stack\n      errorInfo.type = classifyError(error)\n    } else if (typeof error === 'string') {\n      errorInfo.message = error\n      errorInfo.type = ERROR_TYPES.CLIENT\n    } else if (error?.response) {\n      // Axios error\n      errorInfo = processAxiosError(error, errorInfo)\n    } else if (error?.code) {\n      // Custom error with code\n      errorInfo.type = error.code\n      errorInfo.message = error.message || errorInfo.message\n    }\n\n    return errorInfo\n  }\n\n  const processAxiosError = (axiosError, errorInfo) => {\n    const response = axiosError.response\n    const request = axiosError.request\n    \n    if (response) {\n      // Server responded with error status\n      errorInfo.type = response.status >= 500 ? ERROR_TYPES.SERVER : ERROR_TYPES.CLIENT\n      errorInfo.message = response.data?.message || `HTTP ${response.status}: ${response.statusText}`\n      errorInfo.statusCode = response.status\n      errorInfo.responseData = response.data\n      \n      // Set severity based on status code\n      if (response.status >= 500) {\n        errorInfo.severity = SEVERITY_LEVELS.HIGH\n      } else if (response.status === 401) {\n        errorInfo.type = ERROR_TYPES.AUTHENTICATION\n        errorInfo.severity = SEVERITY_LEVELS.MEDIUM\n      } else if (response.status === 403) {\n        errorInfo.type = ERROR_TYPES.AUTHORIZATION\n        errorInfo.severity = SEVERITY_LEVELS.MEDIUM\n      }\n    } else if (request) {\n      // Network error\n      errorInfo.type = ERROR_TYPES.NETWORK\n      errorInfo.message = 'Network error - please check your connection'\n      errorInfo.severity = SEVERITY_LEVELS.HIGH\n    }\n    \n    return errorInfo\n  }\n\n  const classifyError = (error) => {\n    const message = error.message.toLowerCase()\n    \n    if (message.includes('network') || message.includes('fetch')) {\n      return ERROR_TYPES.NETWORK\n    } else if (message.includes('validation') || message.includes('invalid')) {\n      return ERROR_TYPES.VALIDATION\n    } else if (message.includes('unauthorized') || message.includes('authentication')) {\n      return ERROR_TYPES.AUTHENTICATION\n    } else if (message.includes('forbidden') || message.includes('permission')) {\n      return ERROR_TYPES.AUTHORIZATION\n    }\n    \n    return ERROR_TYPES.CLIENT\n  }\n\n  const logError = (errorInfo) => {\n    // Console logging with appropriate level\n    const logLevel = getLogLevel(errorInfo.severity)\n    const logMessage = `[${errorInfo.type.toUpperCase()}] ${errorInfo.context}: ${errorInfo.message}`\n    \n    console[logLevel](logMessage, {\n      errorId: errorInfo.id,\n      timestamp: errorInfo.timestamp,\n      originalError: errorInfo.originalError,\n      stack: errorInfo.stack\n    })\n  }\n\n  const getLogLevel = (severity) => {\n    switch (severity) {\n      case SEVERITY_LEVELS.LOW:\n        return 'info'\n      case SEVERITY_LEVELS.MEDIUM:\n        return 'warn'\n      case SEVERITY_LEVELS.HIGH:\n      case SEVERITY_LEVELS.CRITICAL:\n        return 'error'\n      default:\n        return 'warn'\n    }\n  }\n\n  const addError = (errorInfo) => {\n    errors.value.unshift(errorInfo)\n    \n    // Keep only last 50 errors to prevent memory issues\n    if (errors.value.length > 50) {\n      errors.value = errors.value.slice(0, 50)\n    }\n    \n    // Set global error for critical issues\n    if (errorInfo.severity === SEVERITY_LEVELS.CRITICAL) {\n      globalError.value = errorInfo\n    }\n  }\n\n  const showErrorToUser = (errorInfo) => {\n    const userMessage = getUserFriendlyMessage(errorInfo)\n    \n    // You can integrate with your notification system here\n    // For now, we'll use a simple approach\n    if (errorInfo.severity === SEVERITY_LEVELS.CRITICAL) {\n      // Show modal for critical errors\n      globalError.value = errorInfo\n      isErrorModalOpen.value = true\n    } else {\n      // Show toast notification for other errors\n      showToastNotification(userMessage, errorInfo.severity)\n    }\n  }\n\n  const getUserFriendlyMessage = (errorInfo) => {\n    switch (errorInfo.type) {\n      case ERROR_TYPES.NETWORK:\n        return 'Please check your internet connection and try again.'\n      case ERROR_TYPES.AUTHENTICATION:\n        return 'Please log in again to continue.'\n      case ERROR_TYPES.AUTHORIZATION:\n        return 'You do not have permission to perform this action.'\n      case ERROR_TYPES.VALIDATION:\n        return errorInfo.message // Validation messages are usually user-friendly\n      case ERROR_TYPES.SERVER:\n        return 'Server error. Please try again later.'\n      default:\n        return 'Something went wrong. Please try again.'\n    }\n  }\n\n  const showToastNotification = (message, severity) => {\n    // Placeholder for toast notification\n    // You would integrate with your actual notification system\n    console.log(`Toast [${severity}]: ${message}`)\n  }\n\n  const reportCriticalError = (errorInfo) => {\n    // Report to external monitoring service (e.g., Sentry, LogRocket)\n    // This is a placeholder implementation\n    console.error('CRITICAL ERROR REPORTED:', errorInfo)\n  }\n\n  // Utility functions\n  const generateErrorId = () => {\n    return `err_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n  }\n\n  const getCurrentUserId = () => {\n    // Get current user ID from auth service\n    try {\n      const user = JSON.parse(localStorage.getItem('auth_user') || '{}')\n      return user.id || 'anonymous'\n    } catch {\n      return 'anonymous'\n    }\n  }\n\n  const getSessionId = () => {\n    // Get or generate session ID\n    let sessionId = sessionStorage.getItem('session_id')\n    if (!sessionId) {\n      sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n      sessionStorage.setItem('session_id', sessionId)\n    }\n    return sessionId\n  }\n\n  // Error management\n  const clearErrors = () => {\n    errors.value = []\n    globalError.value = null\n  }\n\n  const clearError = (errorId) => {\n    errors.value = errors.value.filter(error => error.id !== errorId)\n    \n    if (globalError.value?.id === errorId) {\n      globalError.value = null\n    }\n  }\n\n  const closeErrorModal = () => {\n    isErrorModalOpen.value = false\n    globalError.value = null\n  }\n\n  const retryLastAction = () => {\n    // Placeholder for retry functionality\n    console.log('Retrying last action...')\n  }\n\n  // Return public API\n  return {\n    // State\n    errors,\n    globalError,\n    isErrorModalOpen,\n    \n    // Constants\n    ERROR_TYPES,\n    SEVERITY_LEVELS,\n    \n    // Methods\n    handleError,\n    clearErrors,\n    clearError,\n    closeErrorModal,\n    retryLastAction,\n    \n    // Utilities\n    getUserFriendlyMessage\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}