{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport api from './api';\n\n/**\n * Document Request Service\n * Handles all document request related API calls\n */\nclass DocumentRequestService {\n  /**\n   * Get available document types\n   */\n  async getDocumentTypes() {\n    try {\n      const response = await api.get('/client/document-requests/document-types');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching document types:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get purpose categories\n   */\n  async getPurposeCategories() {\n    try {\n      const response = await api.get('/client/document-requests/purpose-categories');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching purpose categories:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get payment methods\n   */\n  async getPaymentMethods() {\n    try {\n      const response = await api.get('/client/document-requests/payment-methods');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching payment methods:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Submit a new document request\n   */\n  async submitRequest(requestData) {\n    try {\n      const response = await api.post('/client/document-requests', requestData);\n      return response.data;\n    } catch (error) {\n      console.error('Error submitting request:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get client's requests\n   */\n  async getMyRequests(filters = {}) {\n    try {\n      const params = new URLSearchParams();\n      Object.keys(filters).forEach(key => {\n        if (filters[key] !== null && filters[key] !== undefined && filters[key] !== '') {\n          params.append(key, filters[key]);\n        }\n      });\n      const response = await api.get(`/client/document-requests?${params.toString()}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching requests:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get specific request details\n   */\n  async getRequestDetails(requestId) {\n    try {\n      const response = await api.get(`/client/document-requests/${requestId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching request details:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update request (for additional information)\n   */\n  async updateRequest(requestId, updateData) {\n    try {\n      const response = await api.put(`/client/document-requests/${requestId}`, updateData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating request:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Cancel a request\n   */\n  async cancelRequest(requestId, reason) {\n    try {\n      const response = await api.put(`/client/document-requests/${requestId}/cancel`, {\n        reason\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error cancelling request:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get request status history\n   */\n  async getRequestHistory(requestId) {\n    try {\n      const response = await api.get(`/client/document-requests/${requestId}/history`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching request history:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Process payment for a request\n   */\n  async processPayment(requestId, paymentData) {\n    try {\n      const response = await api.post(`/client/document-requests/${requestId}/payment`, paymentData);\n      return response.data;\n    } catch (error) {\n      console.error('Error processing payment:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get payment status\n   */\n  async getPaymentStatus(requestId) {\n    try {\n      const response = await api.get(`/client/document-requests/${requestId}/payment/status`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching payment status:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Calculate fees for a request\n   */\n  async calculateFees(requestData) {\n    try {\n      const response = await api.post('/client/document-requests/calculate-cedula-tax', requestData);\n      return response.data;\n    } catch (error) {\n      console.error('Error calculating fees:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get dashboard statistics\n   * TODO: Implement client dashboard endpoints in backend\n   */\n  async getDashboardStats() {\n    // TODO: Uncomment when backend endpoint is implemented\n    // try {\n    //   const response = await api.get('/client/dashboard/stats');\n    //   return response.data;\n    // } catch (error) {\n    //   console.error('Error fetching dashboard stats:', error);\n    //   throw error;\n    // }\n\n    // Temporary placeholder until backend endpoint is implemented\n    return {\n      success: true,\n      data: {\n        total_requests: 0,\n        pending_requests: 0,\n        completed_requests: 0,\n        recent_activity: []\n      },\n      message: 'Dashboard stats placeholder'\n    };\n  }\n\n  /**\n   * Get recent activity\n   * TODO: Implement client dashboard endpoints in backend\n   */\n  async getRecentActivity(limit = 10) {\n    try {\n      // const response = await api.get(`/client/dashboard/activity?limit=${limit}`);\n      // return response.data;\n\n      // Temporary placeholder until backend endpoint is implemented\n      // eslint-disable-next-line no-unused-vars\n      const activityLimit = limit; // Acknowledge the parameter for future use\n      return {\n        success: true,\n        data: [],\n        message: 'Recent activity placeholder'\n      };\n    } catch (error) {\n      console.error('Error fetching recent activity:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Upload supporting documents for a request\n   */\n  async uploadDocuments(requestId, files) {\n    try {\n      const formData = new FormData();\n\n      // Add each file to the form data\n      files.forEach(({\n        type,\n        file\n      }) => {\n        formData.append(type, file);\n      });\n      const response = await api.post(`/client/document-requests/${requestId}/documents`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error uploading documents:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get uploaded documents for a request\n   */\n  async getDocuments(requestId) {\n    try {\n      const response = await api.get(`/client/document-requests/${requestId}/documents`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching documents:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete an uploaded document\n   */\n  async deleteDocument(requestId, documentId) {\n    try {\n      const response = await api.delete(`/client/document-requests/${requestId}/documents/${documentId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting document:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Fetch verification image as blob with authentication\n   */\n  async fetchVerificationImageBlob(requestId, imageType, filename) {\n    try {\n      // Check if user is authenticated before making request\n      const authToken = localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token');\n      if (!authToken) {\n        throw new Error('Please log in to view images');\n      }\n      console.log('🔗 Fetching verification image:', {\n        requestId,\n        imageType,\n        filename,\n        hasToken: !!authToken\n      });\n      const response = await api.get(`/client/document-requests/${requestId}/verification-image/${imageType}/${filename}`, {\n        responseType: 'blob'\n      });\n      console.log('✅ Image fetched successfully:', {\n        filename,\n        size: response.data.size,\n        type: response.data.type\n      });\n      return response.data;\n    } catch (error) {\n      console.error(`❌ Error fetching ${imageType} verification image:`, {\n        status: error.response?.status,\n        statusText: error.response?.statusText,\n        data: error.response?.data,\n        filename,\n        imageType,\n        requestId,\n        message: error.message\n      });\n\n      // Provide descriptive error messages based on status code\n      if (error.response?.status === 404) {\n        throw new Error(`Image not found: ${filename}`);\n      } else if (error.response?.status === 401) {\n        throw new Error('Please log in to view images');\n      } else if (error.response?.status === 403) {\n        throw new Error('Access denied to this image');\n      } else if (error.response?.status === 500) {\n        throw new Error('Server error - please contact support');\n      } else if (error.response?.status >= 500) {\n        throw new Error('Server error - please contact support');\n      } else if (error.code === 'NETWORK_ERROR' || error.message.includes('Network Error')) {\n        throw new Error('Network error - check your connection');\n      } else if (error.message.includes('log in')) {\n        throw new Error(error.message); // Pass through authentication messages\n      } else {\n        throw new Error(error.response?.data?.message || error.message || 'Failed to load image');\n      }\n    }\n  }\n\n  /**\n   * Create object URL for verification image\n   */\n  async getVerificationImageObjectUrl(requestId, imageType, filename) {\n    try {\n      const blob = await this.fetchVerificationImageBlob(requestId, imageType, filename);\n      return URL.createObjectURL(blob);\n    } catch (error) {\n      console.error(`Error creating object URL for ${imageType} image:`, error);\n      throw error;\n    }\n  }\n}\nexport default new DocumentRequestService();","map":{"version":3,"names":["api","DocumentRequestService","getDocumentTypes","response","get","data","error","console","getPurposeCategories","getPaymentMethods","submitRequest","requestData","post","getMyRequests","filters","params","URLSearchParams","Object","keys","forEach","key","undefined","append","toString","getRequestDetails","requestId","updateRequest","updateData","put","cancelRequest","reason","getRequestHistory","processPayment","paymentData","getPaymentStatus","calculateFees","getDashboardStats","success","total_requests","pending_requests","completed_requests","recent_activity","message","getRecentActivity","limit","activityLimit","uploadDocuments","files","formData","FormData","type","file","headers","getDocuments","deleteDocument","documentId","delete","fetchVerificationImageBlob","imageType","filename","authToken","localStorage","getItem","sessionStorage","Error","log","hasToken","responseType","size","status","statusText","code","includes","getVerificationImageObjectUrl","blob","URL","createObjectURL"],"sources":["D:/brgy_docu_hub/BOSFDR/src/services/documentRequestService.js"],"sourcesContent":["import api from './api';\n\n/**\n * Document Request Service\n * Handles all document request related API calls\n */\nclass DocumentRequestService {\n  \n  /**\n   * Get available document types\n   */\n  async getDocumentTypes() {\n    try {\n      const response = await api.get('/client/document-requests/document-types');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching document types:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get purpose categories\n   */\n  async getPurposeCategories() {\n    try {\n      const response = await api.get('/client/document-requests/purpose-categories');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching purpose categories:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get payment methods\n   */\n  async getPaymentMethods() {\n    try {\n      const response = await api.get('/client/document-requests/payment-methods');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching payment methods:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Submit a new document request\n   */\n  async submitRequest(requestData) {\n    try {\n      const response = await api.post('/client/document-requests', requestData);\n      return response.data;\n    } catch (error) {\n      console.error('Error submitting request:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get client's requests\n   */\n  async getMyRequests(filters = {}) {\n    try {\n      const params = new URLSearchParams();\n      Object.keys(filters).forEach(key => {\n        if (filters[key] !== null && filters[key] !== undefined && filters[key] !== '') {\n          params.append(key, filters[key]);\n        }\n      });\n      \n      const response = await api.get(`/client/document-requests?${params.toString()}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching requests:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get specific request details\n   */\n  async getRequestDetails(requestId) {\n    try {\n      const response = await api.get(`/client/document-requests/${requestId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching request details:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update request (for additional information)\n   */\n  async updateRequest(requestId, updateData) {\n    try {\n      const response = await api.put(`/client/document-requests/${requestId}`, updateData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating request:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Cancel a request\n   */\n  async cancelRequest(requestId, reason) {\n    try {\n      const response = await api.put(`/client/document-requests/${requestId}/cancel`, { reason });\n      return response.data;\n    } catch (error) {\n      console.error('Error cancelling request:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get request status history\n   */\n  async getRequestHistory(requestId) {\n    try {\n      const response = await api.get(`/client/document-requests/${requestId}/history`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching request history:', error);\n      throw error;\n    }\n  }\n\n\n\n  /**\n   * Process payment for a request\n   */\n  async processPayment(requestId, paymentData) {\n    try {\n      const response = await api.post(`/client/document-requests/${requestId}/payment`, paymentData);\n      return response.data;\n    } catch (error) {\n      console.error('Error processing payment:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get payment status\n   */\n  async getPaymentStatus(requestId) {\n    try {\n      const response = await api.get(`/client/document-requests/${requestId}/payment/status`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching payment status:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Calculate fees for a request\n   */\n  async calculateFees(requestData) {\n    try {\n      const response = await api.post('/client/document-requests/calculate-cedula-tax', requestData);\n      return response.data;\n    } catch (error) {\n      console.error('Error calculating fees:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get dashboard statistics\n   * TODO: Implement client dashboard endpoints in backend\n   */\n  async getDashboardStats() {\n    // TODO: Uncomment when backend endpoint is implemented\n    // try {\n    //   const response = await api.get('/client/dashboard/stats');\n    //   return response.data;\n    // } catch (error) {\n    //   console.error('Error fetching dashboard stats:', error);\n    //   throw error;\n    // }\n\n    // Temporary placeholder until backend endpoint is implemented\n    return {\n      success: true,\n      data: {\n        total_requests: 0,\n        pending_requests: 0,\n        completed_requests: 0,\n        recent_activity: []\n      },\n      message: 'Dashboard stats placeholder'\n    };\n  }\n\n  /**\n   * Get recent activity\n   * TODO: Implement client dashboard endpoints in backend\n   */\n  async getRecentActivity(limit = 10) {\n    try {\n      // const response = await api.get(`/client/dashboard/activity?limit=${limit}`);\n      // return response.data;\n\n      // Temporary placeholder until backend endpoint is implemented\n      // eslint-disable-next-line no-unused-vars\n      const activityLimit = limit; // Acknowledge the parameter for future use\n      return {\n        success: true,\n        data: [],\n        message: 'Recent activity placeholder'\n      };\n    } catch (error) {\n      console.error('Error fetching recent activity:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Upload supporting documents for a request\n   */\n  async uploadDocuments(requestId, files) {\n    try {\n      const formData = new FormData();\n\n      // Add each file to the form data\n      files.forEach(({ type, file }) => {\n        formData.append(type, file);\n      });\n\n      const response = await api.post(`/client/document-requests/${requestId}/documents`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error('Error uploading documents:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get uploaded documents for a request\n   */\n  async getDocuments(requestId) {\n    try {\n      const response = await api.get(`/client/document-requests/${requestId}/documents`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching documents:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete an uploaded document\n   */\n  async deleteDocument(requestId, documentId) {\n    try {\n      const response = await api.delete(`/client/document-requests/${requestId}/documents/${documentId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting document:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Fetch verification image as blob with authentication\n   */\n  async fetchVerificationImageBlob(requestId, imageType, filename) {\n    try {\n      // Check if user is authenticated before making request\n      const authToken = localStorage.getItem('auth_token') || sessionStorage.getItem('auth_token');\n      if (!authToken) {\n        throw new Error('Please log in to view images');\n      }\n\n      console.log('🔗 Fetching verification image:', {\n        requestId,\n        imageType,\n        filename,\n        hasToken: !!authToken\n      });\n\n      const response = await api.get(`/client/document-requests/${requestId}/verification-image/${imageType}/${filename}`, {\n        responseType: 'blob'\n      });\n\n      console.log('✅ Image fetched successfully:', {\n        filename,\n        size: response.data.size,\n        type: response.data.type\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error(`❌ Error fetching ${imageType} verification image:`, {\n        status: error.response?.status,\n        statusText: error.response?.statusText,\n        data: error.response?.data,\n        filename,\n        imageType,\n        requestId,\n        message: error.message\n      });\n\n      // Provide descriptive error messages based on status code\n      if (error.response?.status === 404) {\n        throw new Error(`Image not found: ${filename}`);\n      } else if (error.response?.status === 401) {\n        throw new Error('Please log in to view images');\n      } else if (error.response?.status === 403) {\n        throw new Error('Access denied to this image');\n      } else if (error.response?.status === 500) {\n        throw new Error('Server error - please contact support');\n      } else if (error.response?.status >= 500) {\n        throw new Error('Server error - please contact support');\n      } else if (error.code === 'NETWORK_ERROR' || error.message.includes('Network Error')) {\n        throw new Error('Network error - check your connection');\n      } else if (error.message.includes('log in')) {\n        throw new Error(error.message); // Pass through authentication messages\n      } else {\n        throw new Error(error.response?.data?.message || error.message || 'Failed to load image');\n      }\n    }\n  }\n\n  /**\n   * Create object URL for verification image\n   */\n  async getVerificationImageObjectUrl(requestId, imageType, filename) {\n    try {\n      const blob = await this.fetchVerificationImageBlob(requestId, imageType, filename);\n      return URL.createObjectURL(blob);\n    } catch (error) {\n      console.error(`Error creating object URL for ${imageType} image:`, error);\n      throw error;\n    }\n  }\n}\n\nexport default new DocumentRequestService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}