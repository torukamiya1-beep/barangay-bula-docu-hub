{"ast":null,"code":"/**\n * UI State Composable\n * Manages global UI state like sidebar, dropdowns, modals\n * Implements reactive state management with proper cleanup\n */\n\nimport { reactive, computed, onMounted, onUnmounted } from 'vue';\nexport function useUIState() {\n  // Reactive state\n  const uiState = reactive({\n    sidebarCollapsed: false,\n    showUserDropdown: false,\n    showNotifications: false,\n    showMobileMenu: false,\n    activeModal: null,\n    isLoading: false,\n    isMobile: false,\n    screenWidth: 0,\n    screenHeight: 0\n  });\n\n  // Computed properties\n  const isMobileDevice = computed(() => {\n    return uiState.screenWidth <= 768;\n  });\n  const isTabletDevice = computed(() => {\n    return uiState.screenWidth > 768 && uiState.screenWidth <= 1024;\n  });\n  const isDesktopDevice = computed(() => {\n    return uiState.screenWidth > 1024;\n  });\n  const deviceType = computed(() => {\n    if (isMobileDevice.value) return 'mobile';\n    if (isTabletDevice.value) return 'tablet';\n    return 'desktop';\n  });\n  const hasAnyDropdownOpen = computed(() => {\n    return uiState.showUserDropdown || uiState.showNotifications || uiState.showMobileMenu;\n  });\n\n  // Methods\n  const toggleSidebar = () => {\n    uiState.sidebarCollapsed = !uiState.sidebarCollapsed;\n\n    // Store preference in localStorage\n    try {\n      localStorage.setItem('sidebar-collapsed', uiState.sidebarCollapsed.toString());\n    } catch (error) {\n      console.warn('Could not save sidebar state to localStorage:', error);\n    }\n  };\n  const collapseSidebar = () => {\n    uiState.sidebarCollapsed = true;\n    try {\n      localStorage.setItem('sidebar-collapsed', 'true');\n    } catch (error) {\n      console.warn('Could not save sidebar state to localStorage:', error);\n    }\n  };\n  const expandSidebar = () => {\n    uiState.sidebarCollapsed = false;\n    try {\n      localStorage.setItem('sidebar-collapsed', 'false');\n    } catch (error) {\n      console.warn('Could not save sidebar state to localStorage:', error);\n    }\n  };\n  const toggleUserDropdown = () => {\n    // Close other dropdowns first\n    if (uiState.showNotifications) uiState.showNotifications = false;\n    if (uiState.showMobileMenu) uiState.showMobileMenu = false;\n    uiState.showUserDropdown = !uiState.showUserDropdown;\n  };\n  const toggleNotifications = () => {\n    // Close other dropdowns first\n    if (uiState.showUserDropdown) uiState.showUserDropdown = false;\n    if (uiState.showMobileMenu) uiState.showMobileMenu = false;\n    uiState.showNotifications = !uiState.showNotifications;\n  };\n  const toggleMobileMenu = () => {\n    // Close other dropdowns first\n    if (uiState.showUserDropdown) uiState.showUserDropdown = false;\n    if (uiState.showNotifications) uiState.showNotifications = false;\n    uiState.showMobileMenu = !uiState.showMobileMenu;\n  };\n  const closeAllDropdowns = () => {\n    uiState.showUserDropdown = false;\n    uiState.showNotifications = false;\n    uiState.showMobileMenu = false;\n  };\n  const openModal = modalName => {\n    uiState.activeModal = modalName;\n    // Prevent body scroll when modal is open\n    document.body.style.overflow = 'hidden';\n  };\n  const closeModal = () => {\n    uiState.activeModal = null;\n    // Restore body scroll\n    document.body.style.overflow = '';\n  };\n  const setLoading = loading => {\n    uiState.isLoading = loading;\n  };\n\n  // Screen size handling\n  const updateScreenSize = () => {\n    uiState.screenWidth = window.innerWidth;\n    uiState.screenHeight = window.innerHeight;\n    uiState.isMobile = window.innerWidth <= 768;\n\n    // Auto-collapse sidebar on mobile\n    if (uiState.isMobile && !uiState.sidebarCollapsed) {\n      uiState.sidebarCollapsed = true;\n    }\n  };\n  const handleResize = () => {\n    updateScreenSize();\n\n    // Close dropdowns on resize to prevent positioning issues\n    if (hasAnyDropdownOpen.value) {\n      closeAllDropdowns();\n    }\n  };\n  const handleClickOutside = event => {\n    // Close dropdowns when clicking outside\n    if (hasAnyDropdownOpen.value) {\n      const isClickInsideDropdown = event.target.closest('.dropdown-container, .user-profile, .notifications-container, .mobile-menu');\n      if (!isClickInsideDropdown) {\n        closeAllDropdowns();\n      }\n    }\n  };\n  const handleEscapeKey = event => {\n    if (event.key === 'Escape') {\n      if (uiState.activeModal) {\n        closeModal();\n      } else if (hasAnyDropdownOpen.value) {\n        closeAllDropdowns();\n      }\n    }\n  };\n\n  // Initialize UI state\n  const initializeUIState = () => {\n    // Restore sidebar state from localStorage\n    try {\n      const savedSidebarState = localStorage.getItem('sidebar-collapsed');\n      if (savedSidebarState !== null) {\n        uiState.sidebarCollapsed = savedSidebarState === 'true';\n      }\n    } catch (error) {\n      console.warn('Could not restore sidebar state from localStorage:', error);\n    }\n\n    // Set initial screen size\n    updateScreenSize();\n\n    // Add event listeners\n    window.addEventListener('resize', handleResize);\n    document.addEventListener('click', handleClickOutside);\n    document.addEventListener('keydown', handleEscapeKey);\n  };\n  const cleanupUIState = () => {\n    // Remove event listeners\n    window.removeEventListener('resize', handleResize);\n    document.removeEventListener('click', handleClickOutside);\n    document.removeEventListener('keydown', handleEscapeKey);\n\n    // Restore body scroll if modal was open\n    document.body.style.overflow = '';\n  };\n\n  // Auto-initialize when composable is used\n  onMounted(() => {\n    initializeUIState();\n  });\n  onUnmounted(() => {\n    cleanupUIState();\n  });\n\n  // Return public API\n  return {\n    // State\n    uiState,\n    // Computed\n    isMobileDevice,\n    isTabletDevice,\n    isDesktopDevice,\n    deviceType,\n    hasAnyDropdownOpen,\n    // Methods\n    toggleSidebar,\n    collapseSidebar,\n    expandSidebar,\n    toggleUserDropdown,\n    toggleNotifications,\n    toggleMobileMenu,\n    closeAllDropdowns,\n    openModal,\n    closeModal,\n    setLoading,\n    updateScreenSize,\n    // Cleanup\n    cleanupUIState\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}