{"ast":null,"code":"import api from './api';\nclass AdminDocumentService {\n  // ==================== DASHBOARD ENDPOINTS ====================\n\n  /**\n   * Get dashboard statistics\n   * @returns {Promise} Dashboard stats including total requests, pending count, revenue, etc.\n   */\n  async getDashboardStats() {\n    try {\n      const response = await api.get('/admin/documents/dashboard/stats');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get recent activity for dashboard\n   * @param {number} limit - Number of activities to fetch (default: 10)\n   * @returns {Promise} Recent activity list\n   */\n  async getRecentActivity(limit = 10) {\n    try {\n      const response = await api.get(`/admin/documents/dashboard/recent?limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // ==================== REQUEST MANAGEMENT ENDPOINTS ====================\n\n  /**\n   * Get all document requests with filtering and pagination\n   * @param {Object} params - Query parameters\n   * @param {number} params.page - Page number\n   * @param {number} params.limit - Items per page\n   * @param {string} params.status - Filter by status\n   * @param {string} params.document_type - Filter by document type\n   * @param {string} params.priority - Filter by priority\n   * @param {string} params.search - Search term\n   * @param {string} params.date_from - Start date filter\n   * @param {string} params.date_to - End date filter\n   * @returns {Promise} Paginated list of requests\n   */\n  async getAllRequests(params = {}) {\n    try {\n      const queryString = new URLSearchParams(params).toString();\n      const response = await api.get(`/admin/documents/requests?${queryString}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get specific document request details\n   * @param {number} requestId - Request ID\n   * @returns {Promise} Request details with client information\n   */\n  async getRequestDetails(requestId) {\n    try {\n      const response = await api.get(`/admin/documents/requests/${requestId}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get request status history\n   * @param {number} requestId - Request ID\n   * @returns {Promise} Status change history\n   */\n  async getRequestHistory(requestId) {\n    try {\n      const response = await api.get(`/admin/documents/requests/${requestId}/history`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // ==================== STATUS MANAGEMENT ENDPOINTS ====================\n\n  /**\n   * Get all available status options\n   * @returns {Promise} List of status options\n   */\n  async getStatusOptions() {\n    try {\n      const response = await api.get('/admin/documents/status-options');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get all document types\n   * @returns {Promise} List of document types\n   */\n  async getDocumentTypes() {\n    try {\n      const response = await api.get('/admin/documents/document-types');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Update request status\n   * @param {number} requestId - Request ID\n   * @param {Object} statusData - Status update data\n   * @param {number} statusData.status_id - New status ID\n   * @param {string} statusData.reason - Optional reason for status change\n   * @returns {Promise} Update result\n   */\n  async updateRequestStatus(requestId, statusData) {\n    try {\n      const response = await api.put(`/admin/documents/requests/${requestId}/status`, statusData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Approve document request\n   * @param {number} requestId - Request ID\n   * @param {Object} approvalData - Approval data\n   * @param {string} approvalData.reason - Optional approval reason\n   * @returns {Promise} Approval result\n   */\n  async approveRequest(requestId, approvalData = {}) {\n    try {\n      const response = await api.post(`/admin/documents/requests/${requestId}/approve`, approvalData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Reject document request\n   * @param {number} requestId - Request ID\n   * @param {Object} rejectionData - Rejection data\n   * @param {string} rejectionData.reason - Required rejection reason\n   * @returns {Promise} Rejection result\n   */\n  async rejectRequest(requestId, rejectionData) {\n    try {\n      const response = await api.post(`/admin/documents/requests/${requestId}/reject`, rejectionData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Mark request as processing\n   * @param {number} requestId - Request ID\n   * @param {Object} processingData - Processing data\n   * @param {string} processingData.reason - Optional processing reason\n   * @returns {Promise} Processing result\n   */\n  async markAsProcessing(requestId, processingData = {}) {\n    try {\n      const response = await api.post(`/admin/documents/requests/${requestId}/process`, processingData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Mark request as completed\n   * @param {number} requestId - Request ID\n   * @param {Object} completionData - Completion data\n   * @param {string} completionData.reason - Optional completion reason\n   * @returns {Promise} Completion result\n   */\n  async markAsCompleted(requestId, completionData = {}) {\n    try {\n      const response = await api.post(`/admin/documents/requests/${requestId}/complete`, completionData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Removed requireAdditionalInfo method - additional_info_required status is no longer used\n\n  // ==================== BULK OPERATIONS ENDPOINTS ====================\n\n  /**\n   * Bulk update multiple requests\n   * @param {Object} bulkData - Bulk update data\n   * @param {Array} bulkData.request_ids - Array of request IDs\n   * @param {number} bulkData.status_id - New status ID for all requests\n   * @param {string} bulkData.reason - Optional reason for bulk update\n   * @returns {Promise} Bulk update result\n   */\n  async bulkUpdateRequests(bulkData) {\n    try {\n      const response = await api.post('/admin/documents/requests/bulk-update', bulkData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // ==================== DATA EXPORT ENDPOINTS ====================\n\n  /**\n   * Export requests data as CSV\n   * @param {Object} filters - Export filters\n   * @param {string} filters.status - Filter by status\n   * @param {string} filters.document_type - Filter by document type\n   * @param {string} filters.date_from - Start date filter\n   * @param {string} filters.date_to - End date filter\n   * @returns {Promise} CSV data\n   */\n  async exportRequests(filters = {}) {\n    try {\n      const queryString = new URLSearchParams(filters).toString();\n      const response = await api.get(`/admin/documents/requests/export?${queryString}`, {\n        responseType: 'text' // Expect CSV text response\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // ==================== UTILITY METHODS ====================\n\n  /**\n   * Download CSV data as file\n   * @param {string} csvData - CSV data string\n   * @param {string} filename - Filename for download\n   */\n  downloadCSV(csvData, filename = 'document_requests.csv') {\n    const blob = new Blob([csvData], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', filename);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  }\n\n  /**\n   * Get analytics data for reporting\n   * @param {string} period - Time period ('day', 'week', 'month')\n   * @returns {Promise} Analytics data\n   */\n  async getAnalyticsData(period = 'month') {\n    try {\n      const response = await api.get(`/admin/documents/analytics?period=${period}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Generate comprehensive report\n   * @param {string} reportType - Report type ('daily', 'weekly', 'monthly', 'custom')\n   * @param {Object} filters - Report filters\n   * @param {string} filters.date_from - Start date\n   * @param {string} filters.date_to - End date\n   * @param {string} filters.format - Output format ('csv' or 'json')\n   * @returns {Promise} Report data\n   */\n  async generateReport(reportType, filters = {}) {\n    try {\n      const queryString = new URLSearchParams(filters).toString();\n      const response = await api.get(`/admin/documents/reports/${reportType}?${queryString}`, {\n        responseType: filters.format === 'csv' ? 'text' : 'json'\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Verify in-person payment\n   * @param {number} requestId - Request ID\n   * @param {Object} paymentData - Payment verification data\n   * @returns {Promise} Verification result\n   */\n  async verifyInPersonPayment(requestId, paymentData) {\n    try {\n      const response = await api.post(`/admin/documents/requests/${requestId}/verify-payment`, paymentData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Schedule pickup appointment\n   * @param {number} requestId - Request ID\n   * @param {Object} scheduleData - Pickup schedule data\n   * @returns {Promise} Schedule result\n   */\n  async schedulePickup(requestId, scheduleData) {\n    try {\n      const response = await api.post(`/admin/documents/requests/${requestId}/schedule-pickup`, scheduleData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Confirm document pickup\n   * @param {number} requestId - Request ID\n   * @param {Object} pickupData - Pickup confirmation data\n   * @returns {Promise} Confirmation result\n   */\n  async confirmPickup(requestId, pickupData) {\n    try {\n      const response = await api.post(`/admin/documents/requests/${requestId}/confirm-pickup`, pickupData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Download report as CSV file\n   * @param {string} reportType - Report type\n   * @param {Object} filters - Report filters\n   * @returns {Promise} Downloads CSV file\n   */\n  async downloadReport(reportType, filters = {}) {\n    try {\n      const csvData = await this.generateReport(reportType, {\n        ...filters,\n        format: 'csv'\n      });\n      const filename = `${reportType}_report_${new Date().toISOString().split('T')[0]}.csv`;\n      this.downloadCSV(csvData, filename);\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Format status name for display\n   * @param {string} status - Status string\n   * @returns {string} Formatted status\n   */\n  formatStatus(status) {\n    if (!status) return 'Unknown';\n    return status.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n  }\n\n  /**\n   * Get status color class\n   * @param {string} status - Status string\n   * @returns {string} CSS class for status color\n   */\n  getStatusColor(status) {\n    const statusColors = {\n      'pending': 'warning',\n      'under_review': 'info',\n      'additional_info_required': 'secondary',\n      'approved': 'success',\n      'processing': 'primary',\n      'ready_for_pickup': 'info',\n      'completed': 'success',\n      'cancelled': 'secondary',\n      'rejected': 'danger'\n    };\n    return statusColors[status] || 'secondary';\n  }\n\n  /**\n   * Handle API errors\n   * @param {Error} error - API error\n   * @returns {Error} Formatted error\n   */\n  handleError(error) {\n    if (error.response) {\n      // Server responded with error status\n      const message = error.response.data?.message || 'An error occurred';\n      const errors = error.response.data?.errors || [];\n      return new Error(JSON.stringify({\n        message,\n        errors,\n        status: error.response.status\n      }));\n    } else if (error.request) {\n      // Request was made but no response received\n      return new Error(JSON.stringify({\n        message: 'Network error. Please check your connection.',\n        errors: [],\n        status: 0\n      }));\n    } else {\n      // Something else happened\n      return new Error(JSON.stringify({\n        message: error.message || 'An unexpected error occurred',\n        errors: [],\n        status: 0\n      }));\n    }\n  }\n\n  /**\n   * Parse error message\n   * @param {Error} error - Error object\n   * @returns {Object} Parsed error data\n   */\n  parseError(error) {\n    try {\n      return JSON.parse(error.message);\n    } catch {\n      return {\n        message: error.message,\n        errors: [],\n        status: 0\n      };\n    }\n  }\n}\nexport default new AdminDocumentService();","map":{"version":3,"names":["api","AdminDocumentService","getDashboardStats","response","get","data","error","handleError","getRecentActivity","limit","getAllRequests","params","queryString","URLSearchParams","toString","getRequestDetails","requestId","getRequestHistory","getStatusOptions","getDocumentTypes","updateRequestStatus","statusData","put","approveRequest","approvalData","post","rejectRequest","rejectionData","markAsProcessing","processingData","markAsCompleted","completionData","bulkUpdateRequests","bulkData","exportRequests","filters","responseType","downloadCSV","csvData","filename","blob","Blob","type","link","document","createElement","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","revokeObjectURL","getAnalyticsData","period","generateReport","reportType","format","verifyInPersonPayment","paymentData","schedulePickup","scheduleData","confirmPickup","pickupData","downloadReport","Date","toISOString","split","formatStatus","status","replace","l","toUpperCase","getStatusColor","statusColors","message","errors","Error","JSON","stringify","request","parseError","parse"],"sources":["D:/brgy_docu_hub/BOSFDR/src/services/adminDocumentService.js"],"sourcesContent":["import api from './api';\n\nclass AdminDocumentService {\n  // ==================== DASHBOARD ENDPOINTS ====================\n  \n  /**\n   * Get dashboard statistics\n   * @returns {Promise} Dashboard stats including total requests, pending count, revenue, etc.\n   */\n  async getDashboardStats() {\n    try {\n      const response = await api.get('/admin/documents/dashboard/stats');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get recent activity for dashboard\n   * @param {number} limit - Number of activities to fetch (default: 10)\n   * @returns {Promise} Recent activity list\n   */\n  async getRecentActivity(limit = 10) {\n    try {\n      const response = await api.get(`/admin/documents/dashboard/recent?limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // ==================== REQUEST MANAGEMENT ENDPOINTS ====================\n\n  /**\n   * Get all document requests with filtering and pagination\n   * @param {Object} params - Query parameters\n   * @param {number} params.page - Page number\n   * @param {number} params.limit - Items per page\n   * @param {string} params.status - Filter by status\n   * @param {string} params.document_type - Filter by document type\n   * @param {string} params.priority - Filter by priority\n   * @param {string} params.search - Search term\n   * @param {string} params.date_from - Start date filter\n   * @param {string} params.date_to - End date filter\n   * @returns {Promise} Paginated list of requests\n   */\n  async getAllRequests(params = {}) {\n    try {\n      const queryString = new URLSearchParams(params).toString();\n      const response = await api.get(`/admin/documents/requests?${queryString}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get specific document request details\n   * @param {number} requestId - Request ID\n   * @returns {Promise} Request details with client information\n   */\n  async getRequestDetails(requestId) {\n    try {\n      const response = await api.get(`/admin/documents/requests/${requestId}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get request status history\n   * @param {number} requestId - Request ID\n   * @returns {Promise} Status change history\n   */\n  async getRequestHistory(requestId) {\n    try {\n      const response = await api.get(`/admin/documents/requests/${requestId}/history`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // ==================== STATUS MANAGEMENT ENDPOINTS ====================\n\n  /**\n   * Get all available status options\n   * @returns {Promise} List of status options\n   */\n  async getStatusOptions() {\n    try {\n      const response = await api.get('/admin/documents/status-options');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Get all document types\n   * @returns {Promise} List of document types\n   */\n  async getDocumentTypes() {\n    try {\n      const response = await api.get('/admin/documents/document-types');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Update request status\n   * @param {number} requestId - Request ID\n   * @param {Object} statusData - Status update data\n   * @param {number} statusData.status_id - New status ID\n   * @param {string} statusData.reason - Optional reason for status change\n   * @returns {Promise} Update result\n   */\n  async updateRequestStatus(requestId, statusData) {\n    try {\n      const response = await api.put(`/admin/documents/requests/${requestId}/status`, statusData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Approve document request\n   * @param {number} requestId - Request ID\n   * @param {Object} approvalData - Approval data\n   * @param {string} approvalData.reason - Optional approval reason\n   * @returns {Promise} Approval result\n   */\n  async approveRequest(requestId, approvalData = {}) {\n    try {\n      const response = await api.post(`/admin/documents/requests/${requestId}/approve`, approvalData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Reject document request\n   * @param {number} requestId - Request ID\n   * @param {Object} rejectionData - Rejection data\n   * @param {string} rejectionData.reason - Required rejection reason\n   * @returns {Promise} Rejection result\n   */\n  async rejectRequest(requestId, rejectionData) {\n    try {\n      const response = await api.post(`/admin/documents/requests/${requestId}/reject`, rejectionData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Mark request as processing\n   * @param {number} requestId - Request ID\n   * @param {Object} processingData - Processing data\n   * @param {string} processingData.reason - Optional processing reason\n   * @returns {Promise} Processing result\n   */\n  async markAsProcessing(requestId, processingData = {}) {\n    try {\n      const response = await api.post(`/admin/documents/requests/${requestId}/process`, processingData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Mark request as completed\n   * @param {number} requestId - Request ID\n   * @param {Object} completionData - Completion data\n   * @param {string} completionData.reason - Optional completion reason\n   * @returns {Promise} Completion result\n   */\n  async markAsCompleted(requestId, completionData = {}) {\n    try {\n      const response = await api.post(`/admin/documents/requests/${requestId}/complete`, completionData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Removed requireAdditionalInfo method - additional_info_required status is no longer used\n\n  // ==================== BULK OPERATIONS ENDPOINTS ====================\n\n  /**\n   * Bulk update multiple requests\n   * @param {Object} bulkData - Bulk update data\n   * @param {Array} bulkData.request_ids - Array of request IDs\n   * @param {number} bulkData.status_id - New status ID for all requests\n   * @param {string} bulkData.reason - Optional reason for bulk update\n   * @returns {Promise} Bulk update result\n   */\n  async bulkUpdateRequests(bulkData) {\n    try {\n      const response = await api.post('/admin/documents/requests/bulk-update', bulkData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // ==================== DATA EXPORT ENDPOINTS ====================\n\n  /**\n   * Export requests data as CSV\n   * @param {Object} filters - Export filters\n   * @param {string} filters.status - Filter by status\n   * @param {string} filters.document_type - Filter by document type\n   * @param {string} filters.date_from - Start date filter\n   * @param {string} filters.date_to - End date filter\n   * @returns {Promise} CSV data\n   */\n  async exportRequests(filters = {}) {\n    try {\n      const queryString = new URLSearchParams(filters).toString();\n      const response = await api.get(`/admin/documents/requests/export?${queryString}`, {\n        responseType: 'text' // Expect CSV text response\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // ==================== UTILITY METHODS ====================\n\n  /**\n   * Download CSV data as file\n   * @param {string} csvData - CSV data string\n   * @param {string} filename - Filename for download\n   */\n  downloadCSV(csvData, filename = 'document_requests.csv') {\n    const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', filename);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  }\n\n  /**\n   * Get analytics data for reporting\n   * @param {string} period - Time period ('day', 'week', 'month')\n   * @returns {Promise} Analytics data\n   */\n  async getAnalyticsData(period = 'month') {\n    try {\n      const response = await api.get(`/admin/documents/analytics?period=${period}`);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Generate comprehensive report\n   * @param {string} reportType - Report type ('daily', 'weekly', 'monthly', 'custom')\n   * @param {Object} filters - Report filters\n   * @param {string} filters.date_from - Start date\n   * @param {string} filters.date_to - End date\n   * @param {string} filters.format - Output format ('csv' or 'json')\n   * @returns {Promise} Report data\n   */\n  async generateReport(reportType, filters = {}) {\n    try {\n      const queryString = new URLSearchParams(filters).toString();\n      const response = await api.get(`/admin/documents/reports/${reportType}?${queryString}`, {\n        responseType: filters.format === 'csv' ? 'text' : 'json'\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Verify in-person payment\n   * @param {number} requestId - Request ID\n   * @param {Object} paymentData - Payment verification data\n   * @returns {Promise} Verification result\n   */\n  async verifyInPersonPayment(requestId, paymentData) {\n    try {\n      const response = await api.post(`/admin/documents/requests/${requestId}/verify-payment`, paymentData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Schedule pickup appointment\n   * @param {number} requestId - Request ID\n   * @param {Object} scheduleData - Pickup schedule data\n   * @returns {Promise} Schedule result\n   */\n  async schedulePickup(requestId, scheduleData) {\n    try {\n      const response = await api.post(`/admin/documents/requests/${requestId}/schedule-pickup`, scheduleData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Confirm document pickup\n   * @param {number} requestId - Request ID\n   * @param {Object} pickupData - Pickup confirmation data\n   * @returns {Promise} Confirmation result\n   */\n  async confirmPickup(requestId, pickupData) {\n    try {\n      const response = await api.post(`/admin/documents/requests/${requestId}/confirm-pickup`, pickupData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Download report as CSV file\n   * @param {string} reportType - Report type\n   * @param {Object} filters - Report filters\n   * @returns {Promise} Downloads CSV file\n   */\n  async downloadReport(reportType, filters = {}) {\n    try {\n      const csvData = await this.generateReport(reportType, { ...filters, format: 'csv' });\n      const filename = `${reportType}_report_${new Date().toISOString().split('T')[0]}.csv`;\n      this.downloadCSV(csvData, filename);\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  /**\n   * Format status name for display\n   * @param {string} status - Status string\n   * @returns {string} Formatted status\n   */\n  formatStatus(status) {\n    if (!status) return 'Unknown';\n    return status.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n  }\n\n  /**\n   * Get status color class\n   * @param {string} status - Status string\n   * @returns {string} CSS class for status color\n   */\n  getStatusColor(status) {\n    const statusColors = {\n      'pending': 'warning',\n      'under_review': 'info',\n      'additional_info_required': 'secondary',\n      'approved': 'success',\n      'processing': 'primary',\n      'ready_for_pickup': 'info',\n      'completed': 'success',\n      'cancelled': 'secondary',\n      'rejected': 'danger'\n    };\n    return statusColors[status] || 'secondary';\n  }\n\n  /**\n   * Handle API errors\n   * @param {Error} error - API error\n   * @returns {Error} Formatted error\n   */\n  handleError(error) {\n    if (error.response) {\n      // Server responded with error status\n      const message = error.response.data?.message || 'An error occurred';\n      const errors = error.response.data?.errors || [];\n      return new Error(JSON.stringify({ message, errors, status: error.response.status }));\n    } else if (error.request) {\n      // Request was made but no response received\n      return new Error(JSON.stringify({ \n        message: 'Network error. Please check your connection.', \n        errors: [], \n        status: 0 \n      }));\n    } else {\n      // Something else happened\n      return new Error(JSON.stringify({ \n        message: error.message || 'An unexpected error occurred', \n        errors: [], \n        status: 0 \n      }));\n    }\n  }\n\n  /**\n   * Parse error message\n   * @param {Error} error - Error object\n   * @returns {Object} Parsed error data\n   */\n  parseError(error) {\n    try {\n      return JSON.parse(error.message);\n    } catch {\n      return { message: error.message, errors: [], status: 0 };\n    }\n  }\n}\n\nexport default new AdminDocumentService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}