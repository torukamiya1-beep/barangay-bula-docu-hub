{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport AdminNotifications from './AdminNotifications.vue';\nexport default {\n  name: 'AdminHeader',\n  components: {\n    AdminNotifications\n  },\n  props: {\n    userName: {\n      type: String,\n      default: 'Admin'\n    },\n    showUserDropdown: {\n      type: Boolean,\n      default: false\n    },\n    sidebarCollapsed: {\n      type: Boolean,\n      default: false\n    },\n    activeMenu: {\n      type: String,\n      default: 'dashboard'\n    }\n  },\n  emits: ['sidebar-toggle', 'user-dropdown-toggle', 'menu-action', 'logout', 'error', 'new-notification'],\n  computed: {\n    // Get display name from admin data or fallback to prop\n    displayUserName() {\n      const adminData = this.$adminAuth?.getAdminData();\n      if (adminData) {\n        // Check if user has profile data\n        if (adminData.profile && adminData.profile.first_name) {\n          return adminData.profile.last_name ? `${adminData.profile.first_name} ${adminData.profile.last_name}` : adminData.profile.first_name;\n        }\n        // Fallback to username\n        return adminData.username || this.userName;\n      }\n      return this.userName || 'Admin';\n    },\n    // Get display role from admin data\n    displayUserRole() {\n      const adminData = this.$adminAuth?.getAdminData();\n      if (adminData && adminData.role) {\n        return adminData.role.charAt(0).toUpperCase() + adminData.role.slice(1);\n      }\n      return 'Admin';\n    }\n  },\n  mounted() {\n    // Setup event listeners for outside clicks\n    document.addEventListener('click', this.handleOutsideClick);\n  },\n  beforeUnmount() {\n    // Clean up event listeners\n    document.removeEventListener('click', this.handleOutsideClick);\n  },\n  methods: {\n    // Get page title based on current route\n    getPageTitle() {\n      const path = this.$route.path;\n      const routeTitles = {\n        '/admin/dashboard': 'Admin Dashboard',\n        '/admin/users': 'User Management',\n        '/admin/requests': 'Document Requests',\n        '/admin/reports': 'Reports & Analytics',\n        '/admin/settings': 'System Settings',\n        '/admin/activity-logs': 'Activity Logs',\n        '/admin/audit-logs': 'Audit Logs',\n        '/admin/profile': 'Admin Profile'\n      };\n\n      // Use route-based title first, then fall back to activeMenu prop, then default\n      return routeTitles[path] || this.$route.meta?.title || 'Admin Dashboard';\n    },\n    // Handle sidebar toggle\n    handleSidebarToggle() {\n      this.$emit('sidebar-toggle');\n    },\n    // Handle user dropdown toggle\n    handleUserDropdownToggle() {\n      this.$emit('user-dropdown-toggle');\n    },\n    // Handle menu actions (profile, settings, etc.)\n    handleMenuAction(action, event) {\n      // Prevent default link behavior\n      if (event) {\n        event.preventDefault();\n      }\n\n      // Navigate to the appropriate route\n      const routes = {\n        'profile': '/admin/profile',\n        'settings': '/admin/settings',\n        'account': '/admin/profile' // Account info redirects to profile\n      };\n      const route = routes[action];\n      if (route && this.$route.path !== route) {\n        this.$router.push(route).catch(err => {\n          // Handle navigation errors gracefully\n          if (err.name !== 'NavigationDuplicated') {\n            console.error('Navigation error:', err);\n          }\n        });\n      }\n\n      // Close dropdown after navigation\n      if (this.showUserDropdown) {\n        this.$emit('user-dropdown-toggle');\n      }\n\n      // Still emit for parent components that need to track actions\n      this.$emit('menu-action', action);\n    },\n    // Handle logout\n    handleLogout(event) {\n      // Prevent default link behavior\n      if (event) {\n        event.preventDefault();\n      }\n      this.$emit('logout');\n    },\n    // Handle outside clicks to close dropdowns\n    handleOutsideClick(event) {\n      // Check if click is outside user dropdown\n      if (!event.target.closest('.user-dropdown')) {\n        if (this.showUserDropdown) {\n          this.$emit('user-dropdown-toggle');\n        }\n      }\n    },\n    // Notification handlers\n    handleNewNotification(notification) {\n      console.log('New notification received:', notification);\n      // Emit to parent component if needed\n      this.$emit('new-notification', notification);\n    },\n    async handleNotificationClick(notification) {\n      console.log('üîî AdminHeader: Notification clicked:', notification);\n      try {\n        // The AdminNotifications component now handles navigation internally,\n        // but we can add additional logic here if needed\n\n        // Parse notification data\n        const notificationData = typeof notification.data === 'string' ? JSON.parse(notification.data) : notification.data || {};\n\n        // Log navigation for debugging\n        console.log('üìä AdminHeader: Notification data:', notificationData);\n\n        // Additional header-specific logic can go here\n        // For example, updating header state, showing badges, etc.\n\n        // The navigation is now handled by the AdminNotifications component\n        // This handler can focus on header-specific updates\n      } catch (error) {\n        console.error('‚ùå AdminHeader: Error handling notification click:', error);\n      }\n\n      // Always emit the event for other components that might need it\n      this.$emit('notification-click', notification);\n    },\n    handleOpenRequestModal(modalData) {\n      console.log('üîî AdminHeader: Request to open modal:', modalData);\n\n      // Emit event to parent component (likely AdminRequests or main layout)\n      // to handle opening the request details modal\n      this.$emit('open-request-modal', modalData);\n    },\n    handleOpenUserModal(modalData) {\n      console.log('üîî AdminHeader: Request to open user modal:', modalData);\n\n      // Emit event to parent component (likely AdminUsers or main layout)\n      // to handle opening the user details modal\n      this.$emit('open-user-modal', modalData);\n    },\n    handleNotificationError(error) {\n      console.error('Notification error:', error);\n      this.$emit('error', error);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}