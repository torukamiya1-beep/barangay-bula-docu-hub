{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\n// Philippine Address Service\n// Uses data from https://github.com/isaacdarcilla/philippine-addresses\n\nclass AddressService {\n  constructor() {\n    // Use absolute URL if proxy is not working, otherwise use relative URL\n    this.baseUrl = process.env.NODE_ENV === 'development' ? 'http://localhost:7000/api/address' : '/api/address';\n    this.cache = {\n      regions: null,\n      provinces: null,\n      cities: null,\n      barangays: null\n    };\n  }\n\n  // Get all regions\n  async getRegions() {\n    if (this.cache.regions) {\n      return this.cache.regions;\n    }\n    try {\n      const response = await fetch(`${this.baseUrl}/regions`);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch regions: ${response.status} ${response.statusText}`);\n      }\n      const result = await response.json();\n      // Handle API response format: {success: true, data: [...]}\n      const regions = result.success ? result.data : result;\n      if (!Array.isArray(regions)) {\n        throw new Error('Invalid regions data format');\n      }\n      this.cache.regions = regions;\n      return regions;\n    } catch (error) {\n      console.error('Error fetching regions:', error);\n      throw error;\n    }\n  }\n\n  // Get provinces by region\n  async getProvincesByRegion(regionCode) {\n    try {\n      if (!this.cache.provinces) {\n        const response = await fetch(`${this.baseUrl}/provinces`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch provinces');\n        }\n        const result = await response.json();\n        const provinces = result.success ? result.data : result;\n        if (!Array.isArray(provinces)) {\n          throw new Error('Invalid provinces data format');\n        }\n        this.cache.provinces = provinces;\n      }\n      return this.cache.provinces.filter(province => province.region_code === regionCode).sort((a, b) => a.province_name.localeCompare(b.province_name));\n    } catch (error) {\n      console.error('Error fetching provinces:', error);\n      throw error;\n    }\n  }\n\n  // Get cities/municipalities by province\n  async getCitiesByProvince(provinceCode) {\n    try {\n      if (!this.cache.cities) {\n        const response = await fetch(`${this.baseUrl}/cities`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch cities');\n        }\n        const result = await response.json();\n        const cities = result.success ? result.data : result;\n        if (!Array.isArray(cities)) {\n          throw new Error('Invalid cities data format');\n        }\n        this.cache.cities = cities;\n      }\n      return this.cache.cities.filter(city => city.province_code === provinceCode).sort((a, b) => a.city_name.localeCompare(b.city_name));\n    } catch (error) {\n      console.error('Error fetching cities:', error);\n      throw error;\n    }\n  }\n\n  // Get barangays by city\n  async getBarangaysByCity(cityCode) {\n    try {\n      if (!this.cache.barangays) {\n        const response = await fetch(`${this.baseUrl}/barangays`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch barangays');\n        }\n        const result = await response.json();\n        const barangays = result.success ? result.data : result;\n        if (!Array.isArray(barangays)) {\n          throw new Error('Invalid barangays data format');\n        }\n        this.cache.barangays = barangays;\n      }\n      return this.cache.barangays.filter(barangay => barangay.city_code === cityCode).sort((a, b) => a.brgy_name.localeCompare(b.brgy_name));\n    } catch (error) {\n      console.error('Error fetching barangays:', error);\n      throw error;\n    }\n  }\n\n  // Search for Barangay Bula specifically\n  async findBarangayBula() {\n    try {\n      if (!this.cache.barangays) {\n        const response = await fetch(`${this.baseUrl}/barangays`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch barangays');\n        }\n        this.cache.barangays = await response.json();\n      }\n      const bulaBarangays = this.cache.barangays.filter(barangay => barangay.brgy_name.toLowerCase().includes('bula'));\n\n      // Get additional details for each Barangay Bula found\n      const detailedResults = [];\n      for (const barangay of bulaBarangays) {\n        try {\n          const city = this.cache.cities?.find(c => c.city_code === barangay.city_code);\n          const province = this.cache.provinces?.find(p => p.province_code === barangay.province_code);\n          const region = this.cache.regions?.find(r => r.region_code === barangay.region_code);\n          detailedResults.push({\n            ...barangay,\n            city_name: city?.city_name || 'Unknown City',\n            province_name: province?.province_name || 'Unknown Province',\n            region_name: region?.region_name || 'Unknown Region'\n          });\n        } catch (error) {\n          console.warn('Error getting details for barangay:', barangay.brgy_name, error);\n          detailedResults.push(barangay);\n        }\n      }\n      return detailedResults;\n    } catch (error) {\n      console.error('Error finding Barangay Bula:', error);\n      throw error;\n    }\n  }\n\n  // Get complete address hierarchy for a barangay\n  async getCompleteAddress(barangayCode) {\n    try {\n      if (!this.cache.barangays) {\n        await this.getBarangaysByCity(''); // This will load all barangays\n      }\n      const barangay = this.cache.barangays.find(b => b.brgy_code === barangayCode);\n      if (!barangay) {\n        throw new Error('Barangay not found');\n      }\n      const city = this.cache.cities?.find(c => c.city_code === barangay.city_code);\n      const province = this.cache.provinces?.find(p => p.province_code === barangay.province_code);\n      const region = this.cache.regions?.find(r => r.region_code === barangay.region_code);\n      return {\n        barangay: barangay.brgy_name,\n        city: city?.city_name || 'Unknown City',\n        province: province?.province_name || 'Unknown Province',\n        region: region?.region_name || 'Unknown Region',\n        codes: {\n          barangay: barangayCode,\n          city: barangay.city_code,\n          province: barangay.province_code,\n          region: barangay.region_code\n        }\n      };\n    } catch (error) {\n      console.error('Error getting complete address:', error);\n      throw error;\n    }\n  }\n\n  // Clear cache (useful for refreshing data)\n  clearCache() {\n    this.cache = {\n      regions: null,\n      provinces: null,\n      cities: null,\n      barangays: null\n    };\n  }\n\n  // Preload all address data (useful for better performance)\n  async preloadAddressData() {\n    try {\n      await Promise.all([this.getRegions(), this.getProvincesByRegion('01'),\n      // Load at least one province set\n      this.getCitiesByProvince('0128'),\n      // Load at least one city set\n      this.getBarangaysByCity('012801') // Load at least one barangay set\n      ]);\n      console.log('Address data preloaded successfully');\n    } catch (error) {\n      console.warn('Failed to preload address data:', error);\n    }\n  }\n\n  // Validate if an address combination is valid\n  async validateAddress(regionCode, provinceCode, cityCode, barangayCode) {\n    try {\n      const regions = await this.getRegions();\n      const region = regions.find(r => r.region_code === regionCode);\n      if (!region) return {\n        valid: false,\n        error: 'Invalid region'\n      };\n      const provinces = await this.getProvincesByRegion(regionCode);\n      const province = provinces.find(p => p.province_code === provinceCode);\n      if (!province) return {\n        valid: false,\n        error: 'Invalid province for selected region'\n      };\n      const cities = await this.getCitiesByProvince(provinceCode);\n      const city = cities.find(c => c.city_code === cityCode);\n      if (!city) return {\n        valid: false,\n        error: 'Invalid city for selected province'\n      };\n      const barangays = await this.getBarangaysByCity(cityCode);\n      const barangay = barangays.find(b => b.brgy_code === barangayCode);\n      if (!barangay) return {\n        valid: false,\n        error: 'Invalid barangay for selected city'\n      };\n      return {\n        valid: true\n      };\n    } catch (error) {\n      return {\n        valid: false,\n        error: error.message\n      };\n    }\n  }\n}\n\n// Create and export a singleton instance\nconst addressService = new AddressService();\nexport default addressService;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}