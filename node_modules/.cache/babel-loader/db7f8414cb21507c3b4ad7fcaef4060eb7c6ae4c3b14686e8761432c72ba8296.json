{"ast":null,"code":"/**\n * UI State Composable\n * Manages global UI state like sidebar, dropdowns, modals\n * Implements reactive state management with proper cleanup\n */\n\nimport { reactive, computed, onMounted, onUnmounted } from 'vue';\nexport function useUIState() {\n  // Reactive state\n  const uiState = reactive({\n    sidebarCollapsed: false,\n    showUserDropdown: false,\n    showNotifications: false,\n    showMobileMenu: false,\n    activeModal: null,\n    isLoading: false,\n    isMobile: false,\n    screenWidth: 0,\n    screenHeight: 0\n  });\n\n  // Computed properties\n  const isMobileDevice = computed(() => {\n    return uiState.screenWidth <= 768;\n  });\n  const isTabletDevice = computed(() => {\n    return uiState.screenWidth > 768 && uiState.screenWidth <= 1024;\n  });\n  const isDesktopDevice = computed(() => {\n    return uiState.screenWidth > 1024;\n  });\n  const deviceType = computed(() => {\n    if (isMobileDevice.value) return 'mobile';\n    if (isTabletDevice.value) return 'tablet';\n    return 'desktop';\n  });\n  const hasAnyDropdownOpen = computed(() => {\n    return uiState.showUserDropdown || uiState.showNotifications || uiState.showMobileMenu;\n  });\n\n  // Methods\n  const toggleSidebar = () => {\n    uiState.sidebarCollapsed = !uiState.sidebarCollapsed;\n\n    // Store preference in localStorage\n    try {\n      localStorage.setItem('sidebar-collapsed', uiState.sidebarCollapsed.toString());\n    } catch (error) {\n      console.warn('Could not save sidebar state to localStorage:', error);\n    }\n  };\n  const collapseSidebar = () => {\n    uiState.sidebarCollapsed = true;\n    try {\n      localStorage.setItem('sidebar-collapsed', 'true');\n    } catch (error) {\n      console.warn('Could not save sidebar state to localStorage:', error);\n    }\n  };\n  const expandSidebar = () => {\n    uiState.sidebarCollapsed = false;\n    try {\n      localStorage.setItem('sidebar-collapsed', 'false');\n    } catch (error) {\n      console.warn('Could not save sidebar state to localStorage:', error);\n    }\n  };\n  const toggleUserDropdown = () => {\n    // Close other dropdowns first\n    if (uiState.showNotifications) uiState.showNotifications = false;\n    if (uiState.showMobileMenu) uiState.showMobileMenu = false;\n    uiState.showUserDropdown = !uiState.showUserDropdown;\n  };\n  const toggleNotifications = () => {\n    // Close other dropdowns first\n    if (uiState.showUserDropdown) uiState.showUserDropdown = false;\n    if (uiState.showMobileMenu) uiState.showMobileMenu = false;\n    uiState.showNotifications = !uiState.showNotifications;\n  };\n  const toggleMobileMenu = () => {\n    // Close other dropdowns first\n    if (uiState.showUserDropdown) uiState.showUserDropdown = false;\n    if (uiState.showNotifications) uiState.showNotifications = false;\n    uiState.showMobileMenu = !uiState.showMobileMenu;\n  };\n  const closeAllDropdowns = () => {\n    uiState.showUserDropdown = false;\n    uiState.showNotifications = false;\n    uiState.showMobileMenu = false;\n  };\n  const openModal = modalName => {\n    uiState.activeModal = modalName;\n    // Prevent body scroll when modal is open\n    document.body.style.overflow = 'hidden';\n  };\n  const closeModal = () => {\n    uiState.activeModal = null;\n    // Restore body scroll\n    document.body.style.overflow = '';\n  };\n  const setLoading = loading => {\n    uiState.isLoading = loading;\n  };\n\n  // Screen size handling\n  const updateScreenSize = () => {\n    uiState.screenWidth = window.innerWidth;\n    uiState.screenHeight = window.innerHeight;\n    uiState.isMobile = window.innerWidth <= 768;\n\n    // Auto-collapse sidebar on mobile\n    if (uiState.isMobile && !uiState.sidebarCollapsed) {\n      uiState.sidebarCollapsed = true;\n    }\n  };\n  const handleResize = () => {\n    updateScreenSize();\n\n    // Close dropdowns on resize to prevent positioning issues\n    if (hasAnyDropdownOpen.value) {\n      closeAllDropdowns();\n    }\n  };\n  const handleClickOutside = event => {\n    // Close dropdowns when clicking outside\n    if (hasAnyDropdownOpen.value) {\n      const isClickInsideDropdown = event.target.closest('.dropdown-container, .user-profile, .notifications-container, .mobile-menu');\n      if (!isClickInsideDropdown) {\n        closeAllDropdowns();\n      }\n    }\n  };\n  const handleEscapeKey = event => {\n    if (event.key === 'Escape') {\n      if (uiState.activeModal) {\n        closeModal();\n      } else if (hasAnyDropdownOpen.value) {\n        closeAllDropdowns();\n      }\n    }\n  };\n\n  // Initialize UI state\n  const initializeUIState = () => {\n    // Restore sidebar state from localStorage\n    try {\n      const savedSidebarState = localStorage.getItem('sidebar-collapsed');\n      if (savedSidebarState !== null) {\n        uiState.sidebarCollapsed = savedSidebarState === 'true';\n      }\n    } catch (error) {\n      console.warn('Could not restore sidebar state from localStorage:', error);\n    }\n\n    // Set initial screen size\n    updateScreenSize();\n\n    // Add event listeners\n    window.addEventListener('resize', handleResize);\n    document.addEventListener('click', handleClickOutside);\n    document.addEventListener('keydown', handleEscapeKey);\n  };\n  const cleanupUIState = () => {\n    // Remove event listeners\n    window.removeEventListener('resize', handleResize);\n    document.removeEventListener('click', handleClickOutside);\n    document.removeEventListener('keydown', handleEscapeKey);\n\n    // Restore body scroll if modal was open\n    document.body.style.overflow = '';\n  };\n\n  // Auto-initialize when composable is used\n  onMounted(() => {\n    initializeUIState();\n  });\n  onUnmounted(() => {\n    cleanupUIState();\n  });\n\n  // Return public API\n  return {\n    // State\n    uiState,\n    // Computed\n    isMobileDevice,\n    isTabletDevice,\n    isDesktopDevice,\n    deviceType,\n    hasAnyDropdownOpen,\n    // Methods\n    toggleSidebar,\n    collapseSidebar,\n    expandSidebar,\n    toggleUserDropdown,\n    toggleNotifications,\n    toggleMobileMenu,\n    closeAllDropdowns,\n    openModal,\n    closeModal,\n    setLoading,\n    updateScreenSize,\n    // Cleanup\n    cleanupUIState\n  };\n}","map":{"version":3,"names":["reactive","computed","onMounted","onUnmounted","useUIState","uiState","sidebarCollapsed","showUserDropdown","showNotifications","showMobileMenu","activeModal","isLoading","isMobile","screenWidth","screenHeight","isMobileDevice","isTabletDevice","isDesktopDevice","deviceType","value","hasAnyDropdownOpen","toggleSidebar","localStorage","setItem","toString","error","console","warn","collapseSidebar","expandSidebar","toggleUserDropdown","toggleNotifications","toggleMobileMenu","closeAllDropdowns","openModal","modalName","document","body","style","overflow","closeModal","setLoading","loading","updateScreenSize","window","innerWidth","innerHeight","handleResize","handleClickOutside","event","isClickInsideDropdown","target","closest","handleEscapeKey","key","initializeUIState","savedSidebarState","getItem","addEventListener","cleanupUIState","removeEventListener"],"sources":["D:/brgy_docu_hub/BOSFDR/src/composables/useUIState.js"],"sourcesContent":["/**\n * UI State Composable\n * Manages global UI state like sidebar, dropdowns, modals\n * Implements reactive state management with proper cleanup\n */\n\nimport { reactive, computed, onMounted, onUnmounted } from 'vue'\n\nexport function useUIState() {\n  // Reactive state\n  const uiState = reactive({\n    sidebarCollapsed: false,\n    showUserDropdown: false,\n    showNotifications: false,\n    showMobileMenu: false,\n    activeModal: null,\n    isLoading: false,\n    isMobile: false,\n    screenWidth: 0,\n    screenHeight: 0\n  })\n\n  // Computed properties\n  const isMobileDevice = computed(() => {\n    return uiState.screenWidth <= 768\n  })\n\n  const isTabletDevice = computed(() => {\n    return uiState.screenWidth > 768 && uiState.screenWidth <= 1024\n  })\n\n  const isDesktopDevice = computed(() => {\n    return uiState.screenWidth > 1024\n  })\n\n  const deviceType = computed(() => {\n    if (isMobileDevice.value) return 'mobile'\n    if (isTabletDevice.value) return 'tablet'\n    return 'desktop'\n  })\n\n  const hasAnyDropdownOpen = computed(() => {\n    return uiState.showUserDropdown || uiState.showNotifications || uiState.showMobileMenu\n  })\n\n  // Methods\n  const toggleSidebar = () => {\n    uiState.sidebarCollapsed = !uiState.sidebarCollapsed\n    \n    // Store preference in localStorage\n    try {\n      localStorage.setItem('sidebar-collapsed', uiState.sidebarCollapsed.toString())\n    } catch (error) {\n      console.warn('Could not save sidebar state to localStorage:', error)\n    }\n  }\n\n  const collapseSidebar = () => {\n    uiState.sidebarCollapsed = true\n    try {\n      localStorage.setItem('sidebar-collapsed', 'true')\n    } catch (error) {\n      console.warn('Could not save sidebar state to localStorage:', error)\n    }\n  }\n\n  const expandSidebar = () => {\n    uiState.sidebarCollapsed = false\n    try {\n      localStorage.setItem('sidebar-collapsed', 'false')\n    } catch (error) {\n      console.warn('Could not save sidebar state to localStorage:', error)\n    }\n  }\n\n  const toggleUserDropdown = () => {\n    // Close other dropdowns first\n    if (uiState.showNotifications) uiState.showNotifications = false\n    if (uiState.showMobileMenu) uiState.showMobileMenu = false\n    \n    uiState.showUserDropdown = !uiState.showUserDropdown\n  }\n\n  const toggleNotifications = () => {\n    // Close other dropdowns first\n    if (uiState.showUserDropdown) uiState.showUserDropdown = false\n    if (uiState.showMobileMenu) uiState.showMobileMenu = false\n    \n    uiState.showNotifications = !uiState.showNotifications\n  }\n\n  const toggleMobileMenu = () => {\n    // Close other dropdowns first\n    if (uiState.showUserDropdown) uiState.showUserDropdown = false\n    if (uiState.showNotifications) uiState.showNotifications = false\n    \n    uiState.showMobileMenu = !uiState.showMobileMenu\n  }\n\n  const closeAllDropdowns = () => {\n    uiState.showUserDropdown = false\n    uiState.showNotifications = false\n    uiState.showMobileMenu = false\n  }\n\n  const openModal = (modalName) => {\n    uiState.activeModal = modalName\n    // Prevent body scroll when modal is open\n    document.body.style.overflow = 'hidden'\n  }\n\n  const closeModal = () => {\n    uiState.activeModal = null\n    // Restore body scroll\n    document.body.style.overflow = ''\n  }\n\n  const setLoading = (loading) => {\n    uiState.isLoading = loading\n  }\n\n  // Screen size handling\n  const updateScreenSize = () => {\n    uiState.screenWidth = window.innerWidth\n    uiState.screenHeight = window.innerHeight\n    uiState.isMobile = window.innerWidth <= 768\n    \n    // Auto-collapse sidebar on mobile\n    if (uiState.isMobile && !uiState.sidebarCollapsed) {\n      uiState.sidebarCollapsed = true\n    }\n  }\n\n  const handleResize = () => {\n    updateScreenSize()\n    \n    // Close dropdowns on resize to prevent positioning issues\n    if (hasAnyDropdownOpen.value) {\n      closeAllDropdowns()\n    }\n  }\n\n  const handleClickOutside = (event) => {\n    // Close dropdowns when clicking outside\n    if (hasAnyDropdownOpen.value) {\n      const isClickInsideDropdown = event.target.closest('.dropdown-container, .user-profile, .notifications-container, .mobile-menu')\n      \n      if (!isClickInsideDropdown) {\n        closeAllDropdowns()\n      }\n    }\n  }\n\n  const handleEscapeKey = (event) => {\n    if (event.key === 'Escape') {\n      if (uiState.activeModal) {\n        closeModal()\n      } else if (hasAnyDropdownOpen.value) {\n        closeAllDropdowns()\n      }\n    }\n  }\n\n  // Initialize UI state\n  const initializeUIState = () => {\n    // Restore sidebar state from localStorage\n    try {\n      const savedSidebarState = localStorage.getItem('sidebar-collapsed')\n      if (savedSidebarState !== null) {\n        uiState.sidebarCollapsed = savedSidebarState === 'true'\n      }\n    } catch (error) {\n      console.warn('Could not restore sidebar state from localStorage:', error)\n    }\n\n    // Set initial screen size\n    updateScreenSize()\n\n    // Add event listeners\n    window.addEventListener('resize', handleResize)\n    document.addEventListener('click', handleClickOutside)\n    document.addEventListener('keydown', handleEscapeKey)\n  }\n\n  const cleanupUIState = () => {\n    // Remove event listeners\n    window.removeEventListener('resize', handleResize)\n    document.removeEventListener('click', handleClickOutside)\n    document.removeEventListener('keydown', handleEscapeKey)\n    \n    // Restore body scroll if modal was open\n    document.body.style.overflow = ''\n  }\n\n  // Auto-initialize when composable is used\n  onMounted(() => {\n    initializeUIState()\n  })\n\n  onUnmounted(() => {\n    cleanupUIState()\n  })\n\n  // Return public API\n  return {\n    // State\n    uiState,\n    \n    // Computed\n    isMobileDevice,\n    isTabletDevice,\n    isDesktopDevice,\n    deviceType,\n    hasAnyDropdownOpen,\n    \n    // Methods\n    toggleSidebar,\n    collapseSidebar,\n    expandSidebar,\n    toggleUserDropdown,\n    toggleNotifications,\n    toggleMobileMenu,\n    closeAllDropdowns,\n    openModal,\n    closeModal,\n    setLoading,\n    updateScreenSize,\n    \n    // Cleanup\n    cleanupUIState\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}