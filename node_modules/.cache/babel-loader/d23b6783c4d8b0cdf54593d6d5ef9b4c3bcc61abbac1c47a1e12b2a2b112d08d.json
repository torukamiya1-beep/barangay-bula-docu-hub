{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nexport default {\n  name: 'AuthorizedPickupDocumentsModal',\n  props: {\n    request: {\n      type: Object,\n      default: null\n    },\n    processing: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: ['verify', 'reject'],\n  data() {\n    return {\n      loading: false,\n      error: null,\n      documentBlobUrls: {}\n    };\n  },\n  computed: {\n    hasDocuments() {\n      return this.request?.authorized_pickup && (this.request.authorized_pickup.id_image_path || this.request.authorized_pickup.authorization_letter_path);\n    },\n    canVerify() {\n      return this.request?.authorized_pickup?.verification_status !== 'verified';\n    },\n    isVerified() {\n      return this.request?.authorized_pickup?.verification_status === 'verified';\n    }\n  },\n  watch: {\n    request: {\n      handler(newRequest) {\n        if (newRequest) {\n          console.log('AuthorizedPickupDocumentsModal - Request data:', newRequest);\n          console.log('AuthorizedPickupDocumentsModal - Authorized pickup:', newRequest.authorized_pickup);\n          if (newRequest.authorized_pickup) {\n            console.log('AuthorizedPickupDocumentsModal - ID image path:', newRequest.authorized_pickup.id_image_path);\n            console.log('AuthorizedPickupDocumentsModal - Auth letter path:', newRequest.authorized_pickup.authorization_letter_path);\n            console.log('AuthorizedPickupDocumentsModal - Pickup person ID:', newRequest.authorized_pickup.id);\n          }\n          this.loadDocuments();\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async loadDocuments() {\n      if (!this.request || !this.hasDocuments) return;\n      this.loading = true;\n      this.error = null;\n      this.documentBlobUrls = {};\n      try {\n        // Load ID document\n        if (this.request.authorized_pickup?.id_image_path) {\n          await this.loadDocument('pickup-id', this.request.authorized_pickup.id_image_path);\n        }\n\n        // Load authorization letter\n        if (this.request.authorized_pickup?.authorization_letter_path) {\n          await this.loadDocument('pickup-auth', this.request.authorized_pickup.authorization_letter_path);\n        }\n      } catch (error) {\n        console.error('Error loading pickup documents:', error);\n        this.error = 'Failed to load documents. Please try again.';\n      } finally {\n        this.loading = false;\n      }\n    },\n    async loadDocument(type, filename) {\n      try {\n        console.log(`Loading ${type} document from path: \"${filename}\"`);\n\n        // Convert database path to web-accessible URL\n        const webUrl = this.convertPathToUrl(filename);\n        console.log(`Converted to web URL: ${webUrl}`);\n        if (!webUrl) {\n          console.error('Could not convert path to URL');\n          return;\n        }\n\n        // Use fetch directly instead of api (which adds /api prefix)\n        const API_BASE_URL = process.env.VUE_APP_API_URL?.replace('/api', '') || 'http://localhost:7000';\n        const response = await fetch(`${API_BASE_URL}${webUrl}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const blob = await response.blob();\n        const url = URL.createObjectURL(blob);\n        this.documentBlobUrls[type] = url;\n        console.log(`Successfully loaded ${type} document`);\n      } catch (error) {\n        console.error(`Error loading ${type} document:`, error);\n        const API_BASE_URL = process.env.VUE_APP_API_URL?.replace('/api', '') || 'http://localhost:7000';\n        console.error(`Failed URL: ${API_BASE_URL}${this.convertPathToUrl(filename)}`);\n        // Don't throw here, just log the error for individual documents\n      }\n    },\n    convertPathToUrl(dbPath) {\n      if (!dbPath) return null;\n\n      // Convert database path to web URL\n      // From: \"uploads\\\\verification\\\\pickup_authorization\\\\filename.jpg\"\n      // To: \"/uploads/verification/pickup_authorization/filename.jpg\"\n\n      let webPath = dbPath;\n\n      // Replace backslashes with forward slashes\n      webPath = webPath.replace(/\\\\/g, '/');\n\n      // Ensure it starts with /\n      if (!webPath.startsWith('/')) {\n        webPath = '/' + webPath;\n      }\n      console.log(`Path conversion: \"${dbPath}\" -> \"${webPath}\"`);\n      return webPath;\n    },\n    viewDocument(type) {\n      let filename = '';\n      switch (type) {\n        case 'pickup-id':\n          filename = this.request.authorized_pickup?.id_image_path;\n          break;\n        case 'pickup-auth':\n          filename = this.request.authorized_pickup?.authorization_letter_path;\n          break;\n        default:\n          return;\n      }\n      if (!filename) return;\n\n      // Convert database path to web-accessible URL\n      const webUrl = this.convertPathToUrl(filename);\n      const API_BASE_URL = process.env.VUE_APP_API_URL?.replace('/api', '') || 'http://localhost:7000';\n      const fullUrl = `${API_BASE_URL}${webUrl}`;\n      console.log(`Opening document: ${fullUrl}`);\n      if (webUrl) {\n        window.open(fullUrl, '_blank');\n      }\n    },\n    getFileName(path) {\n      return path ? path.split('/').pop() : 'Unknown';\n    },\n    getStatusBadgeClass(status) {\n      const statusMap = {\n        'pending': 'bg-warning text-dark',\n        'processing': 'bg-info',\n        'approved': 'bg-success',\n        'rejected': 'bg-danger',\n        'completed': 'bg-success'\n      };\n      return statusMap[status?.toLowerCase()] || 'bg-secondary';\n    },\n    getVerificationStatusClass(status) {\n      const statusMap = {\n        'pending': 'bg-warning text-dark',\n        'verified': 'bg-success',\n        'rejected': 'bg-danger'\n      };\n      return statusMap[status?.toLowerCase()] || 'bg-secondary';\n    },\n    formatVerificationStatus(status) {\n      if (!status) return 'Pending';\n      return status.charAt(0).toUpperCase() + status.slice(1);\n    },\n    formatDate(dateString) {\n      if (!dateString) return 'N/A';\n      return new Date(dateString).toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    handleImageError(event) {\n      console.error('Image failed to load:', event.target.src);\n      event.target.style.display = 'none';\n    }\n  },\n  beforeUnmount() {\n    // Clean up blob URLs to prevent memory leaks\n    Object.values(this.documentBlobUrls).forEach(url => {\n      URL.revokeObjectURL(url);\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}