{"ast":null,"code":"import api from './api';\nclass ClientAuthService {\n  // Register client account (Step 1)\n  async registerAccount(accountData) {\n    try {\n      const response = await api.post('/client/auth/register-account', accountData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Complete registration with profile (Step 2)\n  async completeRegistration(accountId, profileData) {\n    try {\n      const response = await api.post(`/client/auth/complete-registration/${accountId}`, profileData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Verify email with OTP\n  async verifyEmail(email, otp) {\n    try {\n      const response = await api.post('/client/auth/verify-email', {\n        email,\n        otp\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Resend verification email\n  async resendVerificationEmail(email) {\n    try {\n      const response = await api.post('/client/auth/resend-verification', {\n        email\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Send SMS OTP\n  async sendSMSOTP(phoneNumber, purpose = 'registration', firstName = '') {\n    try {\n      const response = await api.post('/otp/send-sms', {\n        phoneNumber,\n        purpose,\n        firstName\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Verify SMS OTP\n  async verifySMSOTP(phoneNumber, otp, purpose = 'email_verification') {\n    try {\n      const response = await api.post('/otp/verify-sms', {\n        phoneNumber,\n        otp,\n        purpose\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Resend SMS OTP\n  async resendSMSOTP(phoneNumber, purpose = 'registration', firstName = '') {\n    try {\n      const response = await api.post('/otp/resend-sms', {\n        phoneNumber,\n        purpose,\n        firstName\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Send unified OTP (same code via both email and SMS)\n  async sendUnifiedOTP(email, phoneNumber, purpose = 'registration', firstName = '') {\n    try {\n      const response = await api.post('/otp/send-unified', {\n        email,\n        phoneNumber,\n        purpose,\n        firstName\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Resend unified OTP (same code via both email and SMS)\n  async resendUnifiedOTP(email, phoneNumber, purpose = 'registration', firstName = '') {\n    try {\n      const response = await api.post('/otp/resend-unified', {\n        email,\n        phoneNumber,\n        purpose,\n        firstName\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Send OTP (for backward compatibility)\n  async sendOTP(email, purpose = 'registration', firstName = '') {\n    try {\n      const response = await api.post('/otp/send', {\n        email,\n        purpose,\n        firstName\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Client login\n  async login(credentials) {\n    try {\n      const response = await api.post('/client/auth/login', credentials);\n      if (response.data.success && response.data.data.token) {\n        // Store token and client data using unified auth system\n        localStorage.setItem('auth_token', response.data.data.token);\n        localStorage.setItem('auth_user', JSON.stringify(response.data.data.client));\n\n        // Keep legacy storage for backward compatibility\n        localStorage.setItem('clientToken', response.data.data.token);\n        localStorage.setItem('clientData', JSON.stringify(response.data.data.client));\n      }\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Get client profile\n  async getProfile() {\n    try {\n      const response = await api.get('/client/auth/profile');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Logout\n  logout() {\n    // Clear unified auth tokens\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('auth_user');\n    sessionStorage.removeItem('auth_token');\n    sessionStorage.removeItem('auth_user');\n\n    // Clear legacy tokens\n    localStorage.removeItem('clientToken');\n    localStorage.removeItem('clientData');\n  }\n\n  // Check if client is logged in\n  isLoggedIn() {\n    // Check unified auth token first, then fallback to legacy\n    return !!(localStorage.getItem('auth_token') || localStorage.getItem('clientToken'));\n  }\n\n  // Get stored client data\n  getClientData() {\n    // Try unified auth first, then fallback to legacy\n    let clientData = localStorage.getItem('auth_user') || localStorage.getItem('clientData');\n    return clientData ? JSON.parse(clientData) : null;\n  }\n\n  // Get current user (alias for getClientData for compatibility)\n  getCurrentUser() {\n    return this.getClientData();\n  }\n\n  // Get stored token\n  getToken() {\n    // Try unified auth first, then fallback to legacy\n    return localStorage.getItem('auth_token') || localStorage.getItem('clientToken');\n  }\n\n  // Migrate legacy auth to unified auth\n  migrateLegacyAuth() {\n    const clientToken = localStorage.getItem('clientToken');\n    const clientData = localStorage.getItem('clientData');\n    const authToken = localStorage.getItem('auth_token');\n\n    // If we have legacy auth but no unified auth, migrate it\n    if (clientToken && clientData && !authToken) {\n      console.log('ðŸ”„ Migrating legacy client auth to unified auth system');\n      localStorage.setItem('auth_token', clientToken);\n      localStorage.setItem('auth_user', clientData);\n      console.log('âœ… Migration completed');\n    }\n  }\n\n  // Initialize authentication on app start\n  initializeAuth() {\n    // First, migrate any legacy auth\n    this.migrateLegacyAuth();\n    const token = this.getToken();\n    if (token) {\n      // Set authorization header for API requests\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    }\n  }\n\n  // Verify OTP\n  async verifyOTP(email, otp, purpose = 'registration') {\n    try {\n      const response = await api.post('/otp/verify', {\n        email,\n        otp,\n        purpose\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Resend OTP\n  async resendOTP(email, purpose = 'registration', firstName = '') {\n    try {\n      const response = await api.post('/otp/resend', {\n        email,\n        purpose,\n        firstName\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Handle API errors\n  handleError(error) {\n    if (error.response) {\n      // Server responded with error status\n      const message = error.response.data?.message || 'An error occurred';\n      const errors = error.response.data?.errors || [];\n      return new Error(JSON.stringify({\n        message,\n        errors,\n        status: error.response.status\n      }));\n    } else if (error.request) {\n      // Request was made but no response received\n      return new Error(JSON.stringify({\n        message: 'Network error. Please check your connection.',\n        errors: [],\n        status: 0\n      }));\n    } else {\n      // Something else happened\n      return new Error(JSON.stringify({\n        message: error.message || 'An unexpected error occurred',\n        errors: [],\n        status: 0\n      }));\n    }\n  }\n\n  // Parse error message\n  parseError(error) {\n    try {\n      return JSON.parse(error.message);\n    } catch {\n      return {\n        message: error.message,\n        errors: [],\n        status: 0\n      };\n    }\n  }\n}\nexport default new ClientAuthService();","map":{"version":3,"names":["api","ClientAuthService","registerAccount","accountData","response","post","data","error","handleError","completeRegistration","accountId","profileData","verifyEmail","email","otp","resendVerificationEmail","sendSMSOTP","phoneNumber","purpose","firstName","verifySMSOTP","resendSMSOTP","sendUnifiedOTP","resendUnifiedOTP","sendOTP","login","credentials","success","token","localStorage","setItem","JSON","stringify","client","getProfile","get","logout","removeItem","sessionStorage","isLoggedIn","getItem","getClientData","clientData","parse","getCurrentUser","getToken","migrateLegacyAuth","clientToken","authToken","console","log","initializeAuth","defaults","headers","common","verifyOTP","resendOTP","message","errors","Error","status","request","parseError"],"sources":["D:/brgy_docu_hub/BOSFDR/src/services/clientAuthService.js"],"sourcesContent":["import api from './api';\n\nclass ClientAuthService {\n  // Register client account (Step 1)\n  async registerAccount(accountData) {\n    try {\n      const response = await api.post('/client/auth/register-account', accountData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Complete registration with profile (Step 2)\n  async completeRegistration(accountId, profileData) {\n    try {\n      const response = await api.post(`/client/auth/complete-registration/${accountId}`, profileData);\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Verify email with OTP\n  async verifyEmail(email, otp) {\n    try {\n      const response = await api.post('/client/auth/verify-email', { email, otp });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Resend verification email\n  async resendVerificationEmail(email) {\n    try {\n      const response = await api.post('/client/auth/resend-verification', { email });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Send SMS OTP\n  async sendSMSOTP(phoneNumber, purpose = 'registration', firstName = '') {\n    try {\n      const response = await api.post('/otp/send-sms', {\n        phoneNumber,\n        purpose,\n        firstName\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Verify SMS OTP\n  async verifySMSOTP(phoneNumber, otp, purpose = 'email_verification') {\n    try {\n      const response = await api.post('/otp/verify-sms', {\n        phoneNumber,\n        otp,\n        purpose\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Resend SMS OTP\n  async resendSMSOTP(phoneNumber, purpose = 'registration', firstName = '') {\n    try {\n      const response = await api.post('/otp/resend-sms', {\n        phoneNumber,\n        purpose,\n        firstName\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Send unified OTP (same code via both email and SMS)\n  async sendUnifiedOTP(email, phoneNumber, purpose = 'registration', firstName = '') {\n    try {\n      const response = await api.post('/otp/send-unified', {\n        email,\n        phoneNumber,\n        purpose,\n        firstName\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Resend unified OTP (same code via both email and SMS)\n  async resendUnifiedOTP(email, phoneNumber, purpose = 'registration', firstName = '') {\n    try {\n      const response = await api.post('/otp/resend-unified', {\n        email,\n        phoneNumber,\n        purpose,\n        firstName\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Send OTP (for backward compatibility)\n  async sendOTP(email, purpose = 'registration', firstName = '') {\n    try {\n      const response = await api.post('/otp/send', {\n        email,\n        purpose,\n        firstName\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Client login\n  async login(credentials) {\n    try {\n      const response = await api.post('/client/auth/login', credentials);\n      \n      if (response.data.success && response.data.data.token) {\n        // Store token and client data using unified auth system\n        localStorage.setItem('auth_token', response.data.data.token);\n        localStorage.setItem('auth_user', JSON.stringify(response.data.data.client));\n\n        // Keep legacy storage for backward compatibility\n        localStorage.setItem('clientToken', response.data.data.token);\n        localStorage.setItem('clientData', JSON.stringify(response.data.data.client));\n      }\n      \n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Get client profile\n  async getProfile() {\n    try {\n      const response = await api.get('/client/auth/profile');\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Logout\n  logout() {\n    // Clear unified auth tokens\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('auth_user');\n    sessionStorage.removeItem('auth_token');\n    sessionStorage.removeItem('auth_user');\n\n    // Clear legacy tokens\n    localStorage.removeItem('clientToken');\n    localStorage.removeItem('clientData');\n  }\n\n  // Check if client is logged in\n  isLoggedIn() {\n    // Check unified auth token first, then fallback to legacy\n    return !!(localStorage.getItem('auth_token') || localStorage.getItem('clientToken'));\n  }\n\n  // Get stored client data\n  getClientData() {\n    // Try unified auth first, then fallback to legacy\n    let clientData = localStorage.getItem('auth_user') || localStorage.getItem('clientData');\n    return clientData ? JSON.parse(clientData) : null;\n  }\n\n  // Get current user (alias for getClientData for compatibility)\n  getCurrentUser() {\n    return this.getClientData();\n  }\n\n  // Get stored token\n  getToken() {\n    // Try unified auth first, then fallback to legacy\n    return localStorage.getItem('auth_token') || localStorage.getItem('clientToken');\n  }\n\n  // Migrate legacy auth to unified auth\n  migrateLegacyAuth() {\n    const clientToken = localStorage.getItem('clientToken');\n    const clientData = localStorage.getItem('clientData');\n    const authToken = localStorage.getItem('auth_token');\n\n    // If we have legacy auth but no unified auth, migrate it\n    if (clientToken && clientData && !authToken) {\n      console.log('ðŸ”„ Migrating legacy client auth to unified auth system');\n      localStorage.setItem('auth_token', clientToken);\n      localStorage.setItem('auth_user', clientData);\n      console.log('âœ… Migration completed');\n    }\n  }\n\n  // Initialize authentication on app start\n  initializeAuth() {\n    // First, migrate any legacy auth\n    this.migrateLegacyAuth();\n\n    const token = this.getToken();\n    if (token) {\n      // Set authorization header for API requests\n      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    }\n  }\n\n\n\n  // Verify OTP\n  async verifyOTP(email, otp, purpose = 'registration') {\n    try {\n      const response = await api.post('/otp/verify', {\n        email,\n        otp,\n        purpose\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Resend OTP\n  async resendOTP(email, purpose = 'registration', firstName = '') {\n    try {\n      const response = await api.post('/otp/resend', {\n        email,\n        purpose,\n        firstName\n      });\n      return response.data;\n    } catch (error) {\n      throw this.handleError(error);\n    }\n  }\n\n  // Handle API errors\n  handleError(error) {\n    if (error.response) {\n      // Server responded with error status\n      const message = error.response.data?.message || 'An error occurred';\n      const errors = error.response.data?.errors || [];\n      return new Error(JSON.stringify({ message, errors, status: error.response.status }));\n    } else if (error.request) {\n      // Request was made but no response received\n      return new Error(JSON.stringify({ \n        message: 'Network error. Please check your connection.', \n        errors: [], \n        status: 0 \n      }));\n    } else {\n      // Something else happened\n      return new Error(JSON.stringify({ \n        message: error.message || 'An unexpected error occurred', \n        errors: [], \n        status: 0 \n      }));\n    }\n  }\n\n  // Parse error message\n  parseError(error) {\n    try {\n      return JSON.parse(error.message);\n    } catch {\n      return { message: error.message, errors: [], status: 0 };\n    }\n  }\n}\n\nexport default new ClientAuthService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}