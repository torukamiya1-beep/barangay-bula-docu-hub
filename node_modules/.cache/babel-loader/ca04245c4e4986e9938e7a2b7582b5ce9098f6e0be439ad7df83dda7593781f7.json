{"ast":null,"code":"import AdminHeader from './AdminHeader.vue';\nimport AdminSidebar from './AdminSidebar.vue';\nimport DocumentReviewModal from './DocumentReviewModal.vue';\nimport { adminDashboard } from './js/adminDashboard.js';\nexport default {\n  name: 'ResidencyReview',\n  components: {\n    AdminHeader,\n    AdminSidebar,\n    DocumentReviewModal\n  },\n  mixins: [adminDashboard],\n  data() {\n    return {\n      pendingVerifications: [],\n      pendingCount: 0,\n      loading: false,\n      error: null,\n      showReviewModal: false,\n      selectedClient: null,\n      clientDocuments: []\n    };\n  },\n  async mounted() {\n    await this.loadPendingVerifications();\n  },\n  methods: {\n    async loadPendingVerifications() {\n      this.loading = true;\n      this.error = null;\n      try {\n        const response = await this.$http.get('/api/residency/pending', {\n          headers: {\n            'Authorization': `Bearer ${this.$store.getters.getToken}`\n          }\n        });\n        if (response.data.success) {\n          this.pendingVerifications = response.data.data;\n          this.pendingCount = response.data.data.length;\n        } else {\n          this.error = response.data.message || 'Failed to load pending verifications';\n        }\n      } catch (error) {\n        console.error('Error loading pending verifications:', error);\n        this.error = error.response?.data?.message || 'Failed to load pending verifications';\n      } finally {\n        this.loading = false;\n      }\n    },\n    async reviewDocuments(client) {\n      this.loading = true;\n      try {\n        const response = await this.$http.get(`/api/residency/documents/${client.account_id}`, {\n          headers: {\n            'Authorization': `Bearer ${this.$store.getters.getToken}`\n          }\n        });\n        if (response.data.success) {\n          this.selectedClient = client;\n          this.clientDocuments = response.data.data;\n          this.showReviewModal = true;\n        } else {\n          this.error = response.data.message || 'Failed to load client documents';\n        }\n      } catch (error) {\n        console.error('Error loading client documents:', error);\n        this.error = error.response?.data?.message || 'Failed to load client documents';\n      } finally {\n        this.loading = false;\n      }\n    },\n    closeReviewModal() {\n      this.showReviewModal = false;\n      this.selectedClient = null;\n      this.clientDocuments = [];\n    },\n    async handleApprove(accountId) {\n      try {\n        const response = await this.$http.post('/api/residency/approve', {\n          account_id: accountId\n        }, {\n          headers: {\n            'Authorization': `Bearer ${this.$store.getters.getToken}`\n          }\n        });\n        if (response.data.success) {\n          this.$toast.success('Residency verification approved successfully');\n          this.closeReviewModal();\n          await this.loadPendingVerifications();\n        } else {\n          this.$toast.error(response.data.message || 'Failed to approve verification');\n        }\n      } catch (error) {\n        console.error('Error approving verification:', error);\n        this.$toast.error(error.response?.data?.message || 'Failed to approve verification');\n      }\n    },\n    async handleReject(data) {\n      try {\n        const response = await this.$http.post('/api/residency/reject', {\n          account_id: data.accountId,\n          rejection_reason: data.reason\n        }, {\n          headers: {\n            'Authorization': `Bearer ${this.$store.getters.getToken}`\n          }\n        });\n        if (response.data.success) {\n          this.$toast.success('Residency verification rejected');\n          this.closeReviewModal();\n          await this.loadPendingVerifications();\n        } else {\n          this.$toast.error(response.data.message || 'Failed to reject verification');\n        }\n      } catch (error) {\n        console.error('Error rejecting verification:', error);\n        this.$toast.error(error.response?.data?.message || 'Failed to reject verification');\n      }\n    },\n    getFullName(client) {\n      const parts = [client.first_name, client.middle_name, client.last_name].filter(Boolean);\n      return parts.join(' ') || client.username;\n    },\n    formatDate(dateString) {\n      return new Date(dateString).toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      });\n    },\n    formatStatus(status) {\n      const statusMap = {\n        'pending_residency_verification': 'Pending Review',\n        'residency_rejected': 'Rejected'\n      };\n      return statusMap[status] || status;\n    },\n    getStatusBadgeClass(status) {\n      const classMap = {\n        'pending_residency_verification': 'bg-warning',\n        'residency_rejected': 'bg-danger'\n      };\n      return classMap[status] || 'bg-secondary';\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}