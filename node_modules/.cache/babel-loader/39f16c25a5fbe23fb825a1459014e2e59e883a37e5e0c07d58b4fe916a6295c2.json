{"ast":null,"code":"/**\n * User Statistics Composable\n * Manages user statistics and dashboard metrics\n * Implements caching and error handling\n */\n\nimport { reactive, computed } from 'vue';\nimport documentRequestService from '@/services/documentRequestService';\nexport function useUserStats() {\n  // Reactive state\n  const userStats = reactive({\n    totalRequests: 0,\n    pendingRequests: 0,\n    completedRequests: 0,\n    rejectedRequests: 0,\n    totalSpent: 0,\n    averageProcessingTime: 0,\n    isLoading: false,\n    error: null,\n    lastUpdated: null\n  });\n\n  // Computed properties\n  const completionRate = computed(() => {\n    if (userStats.totalRequests === 0) return 0;\n    return Math.round(userStats.completedRequests / userStats.totalRequests * 100);\n  });\n  const pendingRate = computed(() => {\n    if (userStats.totalRequests === 0) return 0;\n    return Math.round(userStats.pendingRequests / userStats.totalRequests * 100);\n  });\n  const rejectionRate = computed(() => {\n    if (userStats.totalRequests === 0) return 0;\n    return Math.round(userStats.rejectedRequests / userStats.totalRequests * 100);\n  });\n  const averageSpentPerRequest = computed(() => {\n    if (userStats.totalRequests === 0) return 0;\n    return userStats.totalSpent / userStats.totalRequests;\n  });\n  const statsCards = computed(() => [{\n    id: 'total',\n    title: 'Total Requests',\n    value: userStats.totalRequests,\n    icon: 'fas fa-file-alt',\n    color: 'blue',\n    trend: null\n  }, {\n    id: 'pending',\n    title: 'Pending',\n    value: userStats.pendingRequests,\n    icon: 'fas fa-clock',\n    color: 'yellow',\n    percentage: pendingRate.value\n  }, {\n    id: 'completed',\n    title: 'Completed',\n    value: userStats.completedRequests,\n    icon: 'fas fa-check-circle',\n    color: 'green',\n    percentage: completionRate.value\n  }, {\n    id: 'spent',\n    title: 'Total Spent',\n    value: `₱${formatCurrency(userStats.totalSpent)}`,\n    icon: 'fas fa-peso-sign',\n    color: 'purple',\n    average: `₱${formatCurrency(averageSpentPerRequest.value)} avg`\n  }]);\n\n  // Methods\n  const loadUserStats = async (forceRefresh = false) => {\n    // Cache for 2 minutes to avoid excessive API calls\n    const twoMinutesAgo = Date.now() - 2 * 60 * 1000;\n    if (!forceRefresh && userStats.lastUpdated && userStats.lastUpdated > twoMinutesAgo) {\n      return;\n    }\n    try {\n      userStats.isLoading = true;\n      userStats.error = null;\n\n      // Try to get real stats from API\n      try {\n        const response = await documentRequestService.getDashboardStats();\n        if (response && response.data) {\n          updateStatsFromAPI(response.data);\n        } else {\n          // Fallback to placeholder data\n          updateStatsWithPlaceholder();\n        }\n      } catch (apiError) {\n        console.warn('API stats not available, using placeholder data:', apiError);\n        updateStatsWithPlaceholder();\n      }\n      userStats.lastUpdated = Date.now();\n    } catch (error) {\n      console.error('Error loading user stats:', error);\n      userStats.error = 'Failed to load statistics';\n      updateStatsWithPlaceholder();\n    } finally {\n      userStats.isLoading = false;\n    }\n  };\n  const updateStatsFromAPI = data => {\n    userStats.totalRequests = data.total_requests || 0;\n    userStats.pendingRequests = data.pending_requests || 0;\n    userStats.completedRequests = data.completed_requests || 0;\n    userStats.rejectedRequests = data.rejected_requests || 0;\n    userStats.totalSpent = parseFloat(data.total_spent) || 0;\n    userStats.averageProcessingTime = data.average_processing_time || 0;\n  };\n  const updateStatsWithPlaceholder = () => {\n    // Placeholder data for development/demo\n    userStats.totalRequests = 5;\n    userStats.pendingRequests = 2;\n    userStats.completedRequests = 3;\n    userStats.rejectedRequests = 0;\n    userStats.totalSpent = 450.00;\n    userStats.averageProcessingTime = 3.5;\n  };\n  const refreshStats = () => {\n    return loadUserStats(true);\n  };\n  const resetStats = () => {\n    userStats.totalRequests = 0;\n    userStats.pendingRequests = 0;\n    userStats.completedRequests = 0;\n    userStats.rejectedRequests = 0;\n    userStats.totalSpent = 0;\n    userStats.averageProcessingTime = 0;\n    userStats.error = null;\n    userStats.lastUpdated = null;\n  };\n  const incrementStat = (statName, amount = 1) => {\n    if (Object.prototype.hasOwnProperty.call(userStats, statName)) {\n      userStats[statName] += amount;\n    }\n  };\n  const decrementStat = (statName, amount = 1) => {\n    if (Object.prototype.hasOwnProperty.call(userStats, statName)) {\n      userStats[statName] = Math.max(0, userStats[statName] - amount);\n    }\n  };\n\n  // Utility functions\n  const formatCurrency = amount => {\n    const numAmount = parseFloat(amount) || 0;\n    return numAmount.toFixed(2);\n  };\n  const formatProcessingTime = days => {\n    if (days < 1) return 'Less than 1 day';\n    if (days === 1) return '1 day';\n    return `${Math.round(days)} days`;\n  };\n  const getStatsByDateRange = (startDate, endDate) => {\n    // This would typically make an API call with date filters\n    // For now, return current stats\n    console.log('Getting stats for date range:', startDate, 'to', endDate);\n    return {\n      ...userStats\n    };\n  };\n  const clearError = () => {\n    userStats.error = null;\n  };\n\n  // Return public API\n  return {\n    // State\n    userStats,\n    // Computed\n    completionRate,\n    pendingRate,\n    rejectionRate,\n    averageSpentPerRequest,\n    statsCards,\n    // Methods\n    loadUserStats,\n    refreshStats,\n    resetStats,\n    incrementStat,\n    decrementStat,\n    getStatsByDateRange,\n    clearError,\n    // Utilities\n    formatCurrency,\n    formatProcessingTime\n  };\n}","map":{"version":3,"names":["reactive","computed","documentRequestService","useUserStats","userStats","totalRequests","pendingRequests","completedRequests","rejectedRequests","totalSpent","averageProcessingTime","isLoading","error","lastUpdated","completionRate","Math","round","pendingRate","rejectionRate","averageSpentPerRequest","statsCards","id","title","value","icon","color","trend","percentage","formatCurrency","average","loadUserStats","forceRefresh","twoMinutesAgo","Date","now","response","getDashboardStats","data","updateStatsFromAPI","updateStatsWithPlaceholder","apiError","console","warn","total_requests","pending_requests","completed_requests","rejected_requests","parseFloat","total_spent","average_processing_time","refreshStats","resetStats","incrementStat","statName","amount","Object","prototype","hasOwnProperty","call","decrementStat","max","numAmount","toFixed","formatProcessingTime","days","getStatsByDateRange","startDate","endDate","log","clearError"],"sources":["D:/brgy_docu_hub/BOSFDR/src/composables/useUserStats.js"],"sourcesContent":["/**\n * User Statistics Composable\n * Manages user statistics and dashboard metrics\n * Implements caching and error handling\n */\n\nimport { reactive, computed } from 'vue'\nimport documentRequestService from '@/services/documentRequestService'\n\nexport function useUserStats() {\n  // Reactive state\n  const userStats = reactive({\n    totalRequests: 0,\n    pendingRequests: 0,\n    completedRequests: 0,\n    rejectedRequests: 0,\n    totalSpent: 0,\n    averageProcessingTime: 0,\n    isLoading: false,\n    error: null,\n    lastUpdated: null\n  })\n\n  // Computed properties\n  const completionRate = computed(() => {\n    if (userStats.totalRequests === 0) return 0\n    return Math.round((userStats.completedRequests / userStats.totalRequests) * 100)\n  })\n\n  const pendingRate = computed(() => {\n    if (userStats.totalRequests === 0) return 0\n    return Math.round((userStats.pendingRequests / userStats.totalRequests) * 100)\n  })\n\n  const rejectionRate = computed(() => {\n    if (userStats.totalRequests === 0) return 0\n    return Math.round((userStats.rejectedRequests / userStats.totalRequests) * 100)\n  })\n\n  const averageSpentPerRequest = computed(() => {\n    if (userStats.totalRequests === 0) return 0\n    return userStats.totalSpent / userStats.totalRequests\n  })\n\n  const statsCards = computed(() => [\n    {\n      id: 'total',\n      title: 'Total Requests',\n      value: userStats.totalRequests,\n      icon: 'fas fa-file-alt',\n      color: 'blue',\n      trend: null\n    },\n    {\n      id: 'pending',\n      title: 'Pending',\n      value: userStats.pendingRequests,\n      icon: 'fas fa-clock',\n      color: 'yellow',\n      percentage: pendingRate.value\n    },\n    {\n      id: 'completed',\n      title: 'Completed',\n      value: userStats.completedRequests,\n      icon: 'fas fa-check-circle',\n      color: 'green',\n      percentage: completionRate.value\n    },\n    {\n      id: 'spent',\n      title: 'Total Spent',\n      value: `₱${formatCurrency(userStats.totalSpent)}`,\n      icon: 'fas fa-peso-sign',\n      color: 'purple',\n      average: `₱${formatCurrency(averageSpentPerRequest.value)} avg`\n    }\n  ])\n\n  // Methods\n  const loadUserStats = async (forceRefresh = false) => {\n    // Cache for 2 minutes to avoid excessive API calls\n    const twoMinutesAgo = Date.now() - (2 * 60 * 1000)\n    if (!forceRefresh && userStats.lastUpdated && userStats.lastUpdated > twoMinutesAgo) {\n      return\n    }\n\n    try {\n      userStats.isLoading = true\n      userStats.error = null\n\n      // Try to get real stats from API\n      try {\n        const response = await documentRequestService.getDashboardStats()\n        \n        if (response && response.data) {\n          updateStatsFromAPI(response.data)\n        } else {\n          // Fallback to placeholder data\n          updateStatsWithPlaceholder()\n        }\n      } catch (apiError) {\n        console.warn('API stats not available, using placeholder data:', apiError)\n        updateStatsWithPlaceholder()\n      }\n\n      userStats.lastUpdated = Date.now()\n    } catch (error) {\n      console.error('Error loading user stats:', error)\n      userStats.error = 'Failed to load statistics'\n      updateStatsWithPlaceholder()\n    } finally {\n      userStats.isLoading = false\n    }\n  }\n\n  const updateStatsFromAPI = (data) => {\n    userStats.totalRequests = data.total_requests || 0\n    userStats.pendingRequests = data.pending_requests || 0\n    userStats.completedRequests = data.completed_requests || 0\n    userStats.rejectedRequests = data.rejected_requests || 0\n    userStats.totalSpent = parseFloat(data.total_spent) || 0\n    userStats.averageProcessingTime = data.average_processing_time || 0\n  }\n\n  const updateStatsWithPlaceholder = () => {\n    // Placeholder data for development/demo\n    userStats.totalRequests = 5\n    userStats.pendingRequests = 2\n    userStats.completedRequests = 3\n    userStats.rejectedRequests = 0\n    userStats.totalSpent = 450.00\n    userStats.averageProcessingTime = 3.5\n  }\n\n  const refreshStats = () => {\n    return loadUserStats(true)\n  }\n\n  const resetStats = () => {\n    userStats.totalRequests = 0\n    userStats.pendingRequests = 0\n    userStats.completedRequests = 0\n    userStats.rejectedRequests = 0\n    userStats.totalSpent = 0\n    userStats.averageProcessingTime = 0\n    userStats.error = null\n    userStats.lastUpdated = null\n  }\n\n  const incrementStat = (statName, amount = 1) => {\n    if (Object.prototype.hasOwnProperty.call(userStats, statName)) {\n      userStats[statName] += amount\n    }\n  }\n\n  const decrementStat = (statName, amount = 1) => {\n    if (Object.prototype.hasOwnProperty.call(userStats, statName)) {\n      userStats[statName] = Math.max(0, userStats[statName] - amount)\n    }\n  }\n\n  // Utility functions\n  const formatCurrency = (amount) => {\n    const numAmount = parseFloat(amount) || 0\n    return numAmount.toFixed(2)\n  }\n\n  const formatProcessingTime = (days) => {\n    if (days < 1) return 'Less than 1 day'\n    if (days === 1) return '1 day'\n    return `${Math.round(days)} days`\n  }\n\n  const getStatsByDateRange = (startDate, endDate) => {\n    // This would typically make an API call with date filters\n    // For now, return current stats\n    console.log('Getting stats for date range:', startDate, 'to', endDate)\n    return { ...userStats }\n  }\n\n  const clearError = () => {\n    userStats.error = null\n  }\n\n  // Return public API\n  return {\n    // State\n    userStats,\n    \n    // Computed\n    completionRate,\n    pendingRate,\n    rejectionRate,\n    averageSpentPerRequest,\n    statsCards,\n    \n    // Methods\n    loadUserStats,\n    refreshStats,\n    resetStats,\n    incrementStat,\n    decrementStat,\n    getStatsByDateRange,\n    clearError,\n    \n    // Utilities\n    formatCurrency,\n    formatProcessingTime\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}