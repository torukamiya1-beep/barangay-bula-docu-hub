{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { getClientNotificationService } from '../../services/notificationService';\nimport notificationNavigationService from '../../services/notificationNavigationService';\nexport default {\n  name: 'ClientNotifications',\n  emits: ['new-notification', 'notification-click', 'notification-read', 'notifications-read', 'connected', 'error'],\n  data() {\n    return {\n      showPanel: false,\n      notifications: [],\n      unreadCount: 0,\n      loading: false,\n      loadingMore: false,\n      markingAllRead: false,\n      error: null,\n      currentPage: 1,\n      hasMore: true,\n      pageSize: 20,\n      notificationService: null // Store the client-specific service instance\n    };\n  },\n  async mounted() {\n    await this.initializeNotifications();\n\n    // Close panel when clicking outside\n    document.addEventListener('click', this.handleOutsideClick);\n  },\n  beforeUnmount() {\n    // Clean up event listeners\n    document.removeEventListener('click', this.handleOutsideClick);\n\n    // Remove notification service listeners\n    if (this.notificationService) {\n      this.notificationService.off('notification', this.handleNewNotification);\n      this.notificationService.off('connected', this.onConnected);\n      this.notificationService.off('error', this.onError);\n    }\n  },\n  methods: {\n    async initializeNotifications() {\n      try {\n        console.log('üöÄ ClientNotifications: Initializing client notification service');\n\n        // Get the client-specific notification service\n        this.notificationService = getClientNotificationService();\n\n        // Request notification permission\n        await this.notificationService.requestNotificationPermission();\n\n        // Initialize the client notification service\n        await this.notificationService.init();\n\n        // Set up event listeners\n        this.notificationService.on('notification', this.handleNewNotification);\n        this.notificationService.on('connected', this.onConnected);\n        this.notificationService.on('error', this.onError);\n\n        // Load initial data\n        await this.loadUnreadCount();\n        console.log('‚úÖ ClientNotifications: Client notification service initialized successfully');\n      } catch (error) {\n        console.error('‚ùå ClientNotifications: Failed to initialize client notifications:', error);\n        this.error = error.message || 'Failed to connect to notification service';\n      }\n    },\n    toggleNotificationPanel() {\n      this.showPanel = !this.showPanel;\n      if (this.showPanel && this.notifications.length === 0) {\n        this.loadNotifications(1);\n      }\n    },\n    handleOutsideClick(event) {\n      if (!event.target.closest('.client-notifications')) {\n        this.showPanel = false;\n      }\n    },\n    async loadNotifications(page = 1) {\n      try {\n        if (page === 1) {\n          this.loading = true;\n          this.error = null;\n        } else {\n          this.loadingMore = true;\n        }\n        const response = await this.notificationService.getNotifications(page, this.pageSize);\n        console.log('Notifications response:', response);\n\n        // Handle the correct response structure from backend\n        let notifications = [];\n        let pagination = {};\n        if (response.data && response.data.notifications) {\n          // Backend returns: { success: true, data: { notifications: [...], pagination: {...} } }\n          if (Array.isArray(response.data.notifications)) {\n            notifications = response.data.notifications;\n            pagination = response.data.pagination || {};\n          }\n        }\n        if (page === 1) {\n          this.notifications = notifications;\n        } else {\n          this.notifications.push(...notifications);\n        }\n        this.currentPage = page;\n        this.hasMore = pagination.page < pagination.pages;\n        console.log('Loaded notifications:', this.notifications);\n      } catch (error) {\n        console.error('Failed to load notifications:', error);\n        this.error = 'Failed to load notifications';\n      } finally {\n        this.loading = false;\n        this.loadingMore = false;\n      }\n    },\n    async loadMore() {\n      if (this.hasMore && !this.loadingMore) {\n        await this.loadNotifications(this.currentPage + 1);\n      }\n    },\n    async loadUnreadCount() {\n      try {\n        this.unreadCount = await this.notificationService.getUnreadCount();\n      } catch (error) {\n        console.error('Failed to load unread count:', error);\n      }\n    },\n    async markAllAsRead() {\n      try {\n        this.markingAllRead = true;\n        await this.notificationService.markAllAsRead();\n\n        // Update local state\n        this.notifications.forEach(notification => {\n          notification.is_read = true;\n        });\n        this.unreadCount = 0;\n        this.$emit('notifications-read');\n      } catch (error) {\n        console.error('Failed to mark all as read:', error);\n        this.$emit('error', 'Failed to mark notifications as read');\n      } finally {\n        this.markingAllRead = false;\n      }\n    },\n    async handleNotificationClick(notification) {\n      console.log('üîî Client notification clicked:', notification);\n\n      // Ensure we have a valid notification object with an ID\n      if (!notification || !notification.id) {\n        console.error('Invalid notification object:', notification);\n        return;\n      }\n\n      // Show loading state\n      this.showLoadingState(notification);\n      try {\n        // Mark as read if not already read\n        if (!notification.is_read) {\n          await this.notificationService.markAsRead(notification.id);\n          notification.is_read = true;\n          this.unreadCount = Math.max(0, this.unreadCount - 1);\n          this.$emit('notification-read', notification);\n        }\n\n        // Navigate based on notification type and data\n        await this.navigateToRelevantPage(notification);\n\n        // Close notification panel after successful navigation\n        this.showPanel = false;\n      } catch (error) {\n        console.error('‚ùå Failed to handle notification click:', error);\n        this.showErrorToast('Failed to process notification');\n      } finally {\n        this.hideLoadingState(notification);\n      }\n\n      // Emit click event for parent components to handle\n      this.$emit('notification-click', notification);\n    },\n    /**\n     * Navigate to the relevant page based on notification type and data\n     */\n    async navigateToRelevantPage(notification) {\n      console.log('üß≠ Determining navigation for notification:', notification.type, notification.data);\n      try {\n        const notificationData = typeof notification.data === 'string' ? JSON.parse(notification.data) : notification.data || {};\n        let targetRoute = null;\n        switch (notification.type) {\n          case 'status_change':\n          case 'request_update':\n            targetRoute = await this.handleRequestUpdateNavigation(notificationData);\n            break;\n          case 'payment_confirmed':\n          case 'payment_required':\n          case 'payment_update':\n            targetRoute = await this.handlePaymentNavigation(notificationData);\n            break;\n          case 'document_ready':\n          case 'ready_for_pickup':\n            targetRoute = await this.handleDocumentReadyNavigation(notificationData);\n            break;\n          case 'request_approved':\n          case 'request_rejected':\n            targetRoute = await this.handleRequestStatusNavigation(notificationData);\n            break;\n          case 'system_alert':\n          case 'maintenance_notice':\n            targetRoute = await this.handleSystemAlertNavigation(notificationData);\n            break;\n          default:\n            console.log('ü§∑ Unknown notification type, using default navigation');\n            targetRoute = await this.handleDefaultNavigation(notificationData);\n        }\n        if (targetRoute) {\n          console.log('üöÄ Navigating to:', targetRoute);\n\n          // Add timeout to prevent hanging navigation\n          const navigationPromise = this.$router.push(targetRoute);\n          const timeoutPromise = new Promise((_, reject) => {\n            setTimeout(() => reject(new Error('Navigation timeout')), 5000);\n          });\n          await Promise.race([navigationPromise, timeoutPromise]);\n        } else {\n          console.log('‚ÑπÔ∏è No navigation target determined for notification');\n        }\n      } catch (error) {\n        console.error('‚ùå Navigation error:', error);\n        throw new Error('Failed to navigate to notification target');\n      }\n    },\n    /**\n     * Handle navigation for request update notifications\n     */\n    async handleRequestUpdateNavigation(data) {\n      if (data.request_id) {\n        // Check if request still exists\n        const exists = await this.checkRequestExists(data.request_id);\n        if (exists) {\n          return {\n            name: 'RequestDetails',\n            params: {\n              id: data.request_id\n            }\n          };\n        } else {\n          this.showErrorToast('Request no longer exists');\n          return {\n            name: 'MyRequests'\n          };\n        }\n      }\n      return {\n        name: 'MyRequests'\n      };\n    },\n    /**\n     * Handle navigation for payment-related notifications\n     */\n    async handlePaymentNavigation(data) {\n      if (data.request_id) {\n        const exists = await this.checkRequestExists(data.request_id);\n        if (exists) {\n          return {\n            name: 'RequestDetails',\n            params: {\n              id: data.request_id\n            },\n            query: {\n              tab: 'payment'\n            } // Focus on payment section\n          };\n        }\n      }\n      // Fallback to requests page with payment filter\n      return {\n        name: 'MyRequests',\n        query: {\n          filter: 'payment_required'\n        }\n      };\n    },\n    /**\n     * Handle navigation for document ready notifications\n     */\n    async handleDocumentReadyNavigation(data) {\n      if (data.request_id) {\n        const exists = await this.checkRequestExists(data.request_id);\n        if (exists) {\n          return {\n            name: 'RequestDetails',\n            params: {\n              id: data.request_id\n            },\n            query: {\n              tab: 'status'\n            } // Focus on status/pickup info\n          };\n        }\n      }\n      // Fallback to requests page with ready filter\n      return {\n        name: 'MyRequests',\n        query: {\n          filter: 'ready'\n        }\n      };\n    },\n    /**\n     * Handle navigation for request status change notifications\n     */\n    async handleRequestStatusNavigation(data) {\n      if (data.request_id) {\n        const exists = await this.checkRequestExists(data.request_id);\n        if (exists) {\n          return {\n            name: 'RequestDetails',\n            params: {\n              id: data.request_id\n            }\n          };\n        }\n      }\n      return {\n        name: 'MyRequests'\n      };\n    },\n    /**\n     * Handle navigation for system alerts\n     */\n    async handleSystemAlertNavigation(data) {\n      // For system alerts, usually go to dashboard or help page\n      if (data.help_section) {\n        return {\n          name: 'HelpSupport',\n          query: {\n            section: data.help_section\n          }\n        };\n      }\n      return {\n        name: 'ClientDashboard'\n      };\n    },\n    /**\n     * Handle default navigation when type is unknown\n     */\n    async handleDefaultNavigation(data) {\n      // Priority order: request_id > dashboard\n      if (data.request_id) {\n        const exists = await this.checkRequestExists(data.request_id);\n        if (exists) {\n          return {\n            name: 'RequestDetails',\n            params: {\n              id: data.request_id\n            }\n          };\n        }\n      }\n      return {\n        name: 'ClientDashboard'\n      };\n    },\n    /**\n     * Check if a request still exists and belongs to the current user\n     */\n    async checkRequestExists(requestId) {\n      return await notificationNavigationService.checkRequestExists(requestId, 'client');\n    },\n    /**\n     * Show loading state for a notification\n     */\n    showLoadingState(notification) {\n      // Add loading class to notification item\n      const notificationElement = document.querySelector(`[data-notification-id=\"${notification.id}\"]`);\n      if (notificationElement) {\n        notificationElement.classList.add('loading');\n      }\n    },\n    /**\n     * Hide loading state for a notification\n     */\n    hideLoadingState(notification) {\n      const notificationElement = document.querySelector(`[data-notification-id=\"${notification.id}\"]`);\n      if (notificationElement) {\n        notificationElement.classList.remove('loading');\n      }\n    },\n    /**\n     * Show error toast message\n     */\n    showErrorToast(message) {\n      notificationNavigationService.showNavigationError(message, this.$emit.bind(this));\n    },\n    handleNewNotification(notification, context = null) {\n      // Validate this is a client notification\n      if (context && context.userType && context.userType !== 'client') {\n        console.log('üö´ ClientNotifications: Ignoring non-client notification:', context.userType);\n        return;\n      }\n\n      // Additional validation: check notification recipient type\n      if (notification.recipient_type && notification.recipient_type !== 'client') {\n        console.log('üö´ ClientNotifications: Ignoring notification for:', notification.recipient_type);\n        return;\n      }\n      console.log('üì¢ ClientNotifications: Processing client notification:', notification);\n\n      // Handle unread count updates from polling\n      if (notification.type === 'unread_count_update') {\n        this.unreadCount = notification.count || 0;\n        return;\n      }\n\n      // Handle notification read status updates\n      if (notification.type === 'notification_read') {\n        const notificationIndex = this.notifications.findIndex(n => n.id === notification.notification_id);\n        if (notificationIndex !== -1) {\n          this.notifications[notificationIndex].is_read = true;\n          this.unreadCount = Math.max(0, this.unreadCount - 1);\n        }\n        return;\n      }\n\n      // Handle all notifications marked as read\n      if (notification.type === 'all_notifications_read') {\n        this.notifications.forEach(n => n.is_read = true);\n        this.unreadCount = 0;\n        return;\n      }\n\n      // Add to beginning of list if panel is open\n      if (this.showPanel) {\n        this.notifications.unshift(notification);\n      }\n\n      // Update unread count for new notifications\n      if (!notification.is_read) {\n        this.unreadCount++;\n      }\n\n      // Emit event for parent components\n      this.$emit('new-notification', notification);\n    },\n    onConnected() {\n      console.log('Connected to client notification stream');\n      this.$emit('connected');\n    },\n    onError(error) {\n      console.error('Client notification stream error:', error);\n      this.$emit('error', 'Connection to notification stream failed');\n    },\n    getNotificationIcon(type) {\n      const icons = {\n        'status_change': 'fas fa-sync-alt text-info',\n        'payment_confirmed': 'fas fa-credit-card text-success',\n        'document_ready': 'fas fa-file-check text-success',\n        'request_update': 'fas fa-edit text-warning',\n        'system_alert': 'fas fa-exclamation-triangle text-danger',\n        'test': 'fas fa-vial text-secondary',\n        'connection': 'fas fa-plug text-success'\n      };\n      return icons[type] || 'fas fa-bell text-primary';\n    },\n    formatTime(timestamp) {\n      if (!timestamp) return '';\n      const date = new Date(timestamp);\n      const now = new Date();\n      const diffInMinutes = Math.floor((now - date) / (1000 * 60));\n      if (diffInMinutes < 1) return 'Just now';\n      if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n      const diffInHours = Math.floor(diffInMinutes / 60);\n      if (diffInHours < 24) return `${diffInHours}h ago`;\n      const diffInDays = Math.floor(diffInHours / 24);\n      if (diffInDays < 7) return `${diffInDays}d ago`;\n      return date.toLocaleDateString();\n    }\n  }\n};","map":{"version":3,"names":["getClientNotificationService","notificationNavigationService","name","emits","data","showPanel","notifications","unreadCount","loading","loadingMore","markingAllRead","error","currentPage","hasMore","pageSize","notificationService","mounted","initializeNotifications","document","addEventListener","handleOutsideClick","beforeUnmount","removeEventListener","off","handleNewNotification","onConnected","onError","methods","console","log","requestNotificationPermission","init","on","loadUnreadCount","message","toggleNotificationPanel","length","loadNotifications","event","target","closest","page","response","getNotifications","pagination","Array","isArray","push","pages","loadMore","getUnreadCount","markAllAsRead","forEach","notification","is_read","$emit","handleNotificationClick","id","showLoadingState","markAsRead","Math","max","navigateToRelevantPage","showErrorToast","hideLoadingState","type","notificationData","JSON","parse","targetRoute","handleRequestUpdateNavigation","handlePaymentNavigation","handleDocumentReadyNavigation","handleRequestStatusNavigation","handleSystemAlertNavigation","handleDefaultNavigation","navigationPromise","$router","timeoutPromise","Promise","_","reject","setTimeout","Error","race","request_id","exists","checkRequestExists","params","query","tab","filter","help_section","section","requestId","notificationElement","querySelector","classList","add","remove","showNavigationError","bind","context","userType","recipient_type","count","notificationIndex","findIndex","n","notification_id","unshift","getNotificationIcon","icons","formatTime","timestamp","date","Date","now","diffInMinutes","floor","diffInHours","diffInDays","toLocaleDateString"],"sources":["D:\\brgy_docu_hub\\BOSFDR\\src\\components\\client\\ClientNotifications.vue"],"sourcesContent":["<template>\n  <div class=\"client-notifications\">\n    <!-- Notification Bell Icon -->\n    <div class=\"notification-bell\" @click=\"toggleNotificationPanel\">\n      <i class=\"fas fa-bell\"></i>\n      <span v-if=\"unreadCount > 0\" class=\"notification-badge\">{{ unreadCount > 99 ? '99+' : unreadCount }}</span>\n    </div>\n\n    <!-- Notification Panel -->\n    <div v-if=\"showPanel\" class=\"notification-panel\" @click.stop>\n      <div class=\"notification-header\">\n        <h5>Notifications</h5>\n        <div class=\"notification-actions\">\n          <button \n            v-if=\"unreadCount > 0\" \n            @click=\"markAllAsRead\" \n            class=\"btn btn-sm btn-outline-primary\"\n            :disabled=\"markingAllRead\"\n          >\n            <i class=\"fas fa-check-double\"></i>\n            {{ markingAllRead ? 'Marking...' : 'Mark All Read' }}\n          </button>\n          <button @click=\"toggleNotificationPanel\" class=\"btn btn-sm btn-outline-secondary\">\n            <i class=\"fas fa-times\"></i>\n          </button>\n        </div>\n      </div>\n\n      <div class=\"notification-content\">\n        <div v-if=\"loading\" class=\"notification-loading\">\n          <div class=\"spinner-border spinner-border-sm\" role=\"status\">\n            <span class=\"visually-hidden\">Loading...</span>\n          </div>\n          <span class=\"ms-2\">Loading notifications...</span>\n        </div>\n\n        <div v-else-if=\"error\" class=\"notification-error\">\n          <i class=\"fas fa-exclamation-triangle\"></i>\n          <span>{{ error }}</span>\n          <button @click=\"loadNotifications(1)\" class=\"btn btn-sm btn-outline-primary ms-2\">\n            <i class=\"fas fa-redo\"></i> Retry\n          </button>\n        </div>\n\n        <div v-else-if=\"notifications.length === 0\" class=\"no-notifications\">\n          <i class=\"fas fa-bell-slash\"></i>\n          <p>No notifications yet</p>\n        </div>\n\n        <div v-else class=\"notification-list\">\n          <div\n            v-for=\"notification in notifications\"\n            :key=\"notification.id\"\n            :data-notification-id=\"notification.id\"\n            class=\"notification-item\"\n            :class=\"{\n              'unread': !notification.is_read,\n              'priority-high': notification.priority === 'high' || notification.priority === 'urgent',\n              'clickable': true\n            }\"\n            @click=\"handleNotificationClick(notification)\"\n          >\n            <div class=\"notification-icon\">\n              <i :class=\"getNotificationIcon(notification.type)\"></i>\n            </div>\n            <div class=\"notification-content\">\n              <div class=\"notification-title\">{{ notification.title }}</div>\n              <div class=\"notification-message\">{{ notification.message }}</div>\n              <div class=\"notification-time\">{{ formatTime(notification.created_at) }}</div>\n            </div>\n            <div v-if=\"!notification.is_read\" class=\"unread-indicator\"></div>\n          </div>\n\n          <!-- Load More Button -->\n          <div v-if=\"hasMore\" class=\"load-more-container\">\n            <button \n              @click=\"loadMore\" \n              class=\"btn btn-sm btn-outline-primary\"\n              :disabled=\"loadingMore\"\n            >\n              <i v-if=\"loadingMore\" class=\"fas fa-spinner fa-spin\"></i>\n              <i v-else class=\"fas fa-chevron-down\"></i>\n              {{ loadingMore ? 'Loading...' : 'Load More' }}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getClientNotificationService } from '../../services/notificationService';\nimport notificationNavigationService from '../../services/notificationNavigationService';\n\nexport default {\n  name: 'ClientNotifications',\n  \n  emits: [\n    'new-notification',\n    'notification-click', \n    'notification-read',\n    'notifications-read',\n    'connected',\n    'error'\n  ],\n\n  data() {\n    return {\n      showPanel: false,\n      notifications: [],\n      unreadCount: 0,\n      loading: false,\n      loadingMore: false,\n      markingAllRead: false,\n      error: null,\n      currentPage: 1,\n      hasMore: true,\n      pageSize: 20,\n      notificationService: null // Store the client-specific service instance\n    };\n  },\n\n  async mounted() {\n    await this.initializeNotifications();\n    \n    // Close panel when clicking outside\n    document.addEventListener('click', this.handleOutsideClick);\n  },\n\n  beforeUnmount() {\n    // Clean up event listeners\n    document.removeEventListener('click', this.handleOutsideClick);\n\n    // Remove notification service listeners\n    if (this.notificationService) {\n      this.notificationService.off('notification', this.handleNewNotification);\n      this.notificationService.off('connected', this.onConnected);\n      this.notificationService.off('error', this.onError);\n    }\n  },\n\n  methods: {\n    async initializeNotifications() {\n      try {\n        console.log('üöÄ ClientNotifications: Initializing client notification service');\n\n        // Get the client-specific notification service\n        this.notificationService = getClientNotificationService();\n\n        // Request notification permission\n        await this.notificationService.requestNotificationPermission();\n\n        // Initialize the client notification service\n        await this.notificationService.init();\n\n        // Set up event listeners\n        this.notificationService.on('notification', this.handleNewNotification);\n        this.notificationService.on('connected', this.onConnected);\n        this.notificationService.on('error', this.onError);\n\n        // Load initial data\n        await this.loadUnreadCount();\n\n        console.log('‚úÖ ClientNotifications: Client notification service initialized successfully');\n\n      } catch (error) {\n        console.error('‚ùå ClientNotifications: Failed to initialize client notifications:', error);\n        this.error = error.message || 'Failed to connect to notification service';\n      }\n    },\n\n    toggleNotificationPanel() {\n      this.showPanel = !this.showPanel;\n      \n      if (this.showPanel && this.notifications.length === 0) {\n        this.loadNotifications(1);\n      }\n    },\n\n    handleOutsideClick(event) {\n      if (!event.target.closest('.client-notifications')) {\n        this.showPanel = false;\n      }\n    },\n\n    async loadNotifications(page = 1) {\n      try {\n        if (page === 1) {\n          this.loading = true;\n          this.error = null;\n        } else {\n          this.loadingMore = true;\n        }\n\n        const response = await this.notificationService.getNotifications(page, this.pageSize);\n        console.log('Notifications response:', response);\n\n        // Handle the correct response structure from backend\n        let notifications = [];\n        let pagination = {};\n\n        if (response.data && response.data.notifications) {\n          // Backend returns: { success: true, data: { notifications: [...], pagination: {...} } }\n          if (Array.isArray(response.data.notifications)) {\n            notifications = response.data.notifications;\n            pagination = response.data.pagination || {};\n          }\n        }\n\n        if (page === 1) {\n          this.notifications = notifications;\n        } else {\n          this.notifications.push(...notifications);\n        }\n\n        this.currentPage = page;\n        this.hasMore = pagination.page < pagination.pages;\n\n        console.log('Loaded notifications:', this.notifications);\n\n      } catch (error) {\n        console.error('Failed to load notifications:', error);\n        this.error = 'Failed to load notifications';\n      } finally {\n        this.loading = false;\n        this.loadingMore = false;\n      }\n    },\n\n    async loadMore() {\n      if (this.hasMore && !this.loadingMore) {\n        await this.loadNotifications(this.currentPage + 1);\n      }\n    },\n\n    async loadUnreadCount() {\n      try {\n        this.unreadCount = await this.notificationService.getUnreadCount();\n      } catch (error) {\n        console.error('Failed to load unread count:', error);\n      }\n    },\n\n    async markAllAsRead() {\n      try {\n        this.markingAllRead = true;\n        await this.notificationService.markAllAsRead();\n        \n        // Update local state\n        this.notifications.forEach(notification => {\n          notification.is_read = true;\n        });\n        this.unreadCount = 0;\n        \n        this.$emit('notifications-read');\n        \n      } catch (error) {\n        console.error('Failed to mark all as read:', error);\n        this.$emit('error', 'Failed to mark notifications as read');\n      } finally {\n        this.markingAllRead = false;\n      }\n    },\n\n    async handleNotificationClick(notification) {\n      console.log('üîî Client notification clicked:', notification);\n\n      // Ensure we have a valid notification object with an ID\n      if (!notification || !notification.id) {\n        console.error('Invalid notification object:', notification);\n        return;\n      }\n\n      // Show loading state\n      this.showLoadingState(notification);\n\n      try {\n        // Mark as read if not already read\n        if (!notification.is_read) {\n          await this.notificationService.markAsRead(notification.id);\n          notification.is_read = true;\n          this.unreadCount = Math.max(0, this.unreadCount - 1);\n          this.$emit('notification-read', notification);\n        }\n\n        // Navigate based on notification type and data\n        await this.navigateToRelevantPage(notification);\n\n        // Close notification panel after successful navigation\n        this.showPanel = false;\n\n      } catch (error) {\n        console.error('‚ùå Failed to handle notification click:', error);\n        this.showErrorToast('Failed to process notification');\n      } finally {\n        this.hideLoadingState(notification);\n      }\n\n      // Emit click event for parent components to handle\n      this.$emit('notification-click', notification);\n    },\n\n    /**\n     * Navigate to the relevant page based on notification type and data\n     */\n    async navigateToRelevantPage(notification) {\n      console.log('üß≠ Determining navigation for notification:', notification.type, notification.data);\n\n      try {\n        const notificationData = typeof notification.data === 'string'\n          ? JSON.parse(notification.data)\n          : notification.data || {};\n\n        let targetRoute = null;\n\n        switch (notification.type) {\n          case 'status_change':\n          case 'request_update':\n            targetRoute = await this.handleRequestUpdateNavigation(notificationData);\n            break;\n\n          case 'payment_confirmed':\n          case 'payment_required':\n          case 'payment_update':\n            targetRoute = await this.handlePaymentNavigation(notificationData);\n            break;\n\n          case 'document_ready':\n          case 'ready_for_pickup':\n            targetRoute = await this.handleDocumentReadyNavigation(notificationData);\n            break;\n\n          case 'request_approved':\n          case 'request_rejected':\n            targetRoute = await this.handleRequestStatusNavigation(notificationData);\n            break;\n\n          case 'system_alert':\n          case 'maintenance_notice':\n            targetRoute = await this.handleSystemAlertNavigation(notificationData);\n            break;\n\n          default:\n            console.log('ü§∑ Unknown notification type, using default navigation');\n            targetRoute = await this.handleDefaultNavigation(notificationData);\n        }\n\n        if (targetRoute) {\n          console.log('üöÄ Navigating to:', targetRoute);\n\n          // Add timeout to prevent hanging navigation\n          const navigationPromise = this.$router.push(targetRoute);\n          const timeoutPromise = new Promise((_, reject) => {\n            setTimeout(() => reject(new Error('Navigation timeout')), 5000);\n          });\n\n          await Promise.race([navigationPromise, timeoutPromise]);\n        } else {\n          console.log('‚ÑπÔ∏è No navigation target determined for notification');\n        }\n\n      } catch (error) {\n        console.error('‚ùå Navigation error:', error);\n        throw new Error('Failed to navigate to notification target');\n      }\n    },\n\n    /**\n     * Handle navigation for request update notifications\n     */\n    async handleRequestUpdateNavigation(data) {\n      if (data.request_id) {\n        // Check if request still exists\n        const exists = await this.checkRequestExists(data.request_id);\n        if (exists) {\n          return {\n            name: 'RequestDetails',\n            params: { id: data.request_id }\n          };\n        } else {\n          this.showErrorToast('Request no longer exists');\n          return { name: 'MyRequests' };\n        }\n      }\n      return { name: 'MyRequests' };\n    },\n\n    /**\n     * Handle navigation for payment-related notifications\n     */\n    async handlePaymentNavigation(data) {\n      if (data.request_id) {\n        const exists = await this.checkRequestExists(data.request_id);\n        if (exists) {\n          return {\n            name: 'RequestDetails',\n            params: { id: data.request_id },\n            query: { tab: 'payment' } // Focus on payment section\n          };\n        }\n      }\n      // Fallback to requests page with payment filter\n      return {\n        name: 'MyRequests',\n        query: { filter: 'payment_required' }\n      };\n    },\n\n    /**\n     * Handle navigation for document ready notifications\n     */\n    async handleDocumentReadyNavigation(data) {\n      if (data.request_id) {\n        const exists = await this.checkRequestExists(data.request_id);\n        if (exists) {\n          return {\n            name: 'RequestDetails',\n            params: { id: data.request_id },\n            query: { tab: 'status' } // Focus on status/pickup info\n          };\n        }\n      }\n      // Fallback to requests page with ready filter\n      return {\n        name: 'MyRequests',\n        query: { filter: 'ready' }\n      };\n    },\n\n    /**\n     * Handle navigation for request status change notifications\n     */\n    async handleRequestStatusNavigation(data) {\n      if (data.request_id) {\n        const exists = await this.checkRequestExists(data.request_id);\n        if (exists) {\n          return {\n            name: 'RequestDetails',\n            params: { id: data.request_id }\n          };\n        }\n      }\n      return { name: 'MyRequests' };\n    },\n\n    /**\n     * Handle navigation for system alerts\n     */\n    async handleSystemAlertNavigation(data) {\n      // For system alerts, usually go to dashboard or help page\n      if (data.help_section) {\n        return {\n          name: 'HelpSupport',\n          query: { section: data.help_section }\n        };\n      }\n      return { name: 'ClientDashboard' };\n    },\n\n    /**\n     * Handle default navigation when type is unknown\n     */\n    async handleDefaultNavigation(data) {\n      // Priority order: request_id > dashboard\n      if (data.request_id) {\n        const exists = await this.checkRequestExists(data.request_id);\n        if (exists) {\n          return {\n            name: 'RequestDetails',\n            params: { id: data.request_id }\n          };\n        }\n      }\n\n      return { name: 'ClientDashboard' };\n    },\n\n    /**\n     * Check if a request still exists and belongs to the current user\n     */\n    async checkRequestExists(requestId) {\n      return await notificationNavigationService.checkRequestExists(requestId, 'client');\n    },\n\n    /**\n     * Show loading state for a notification\n     */\n    showLoadingState(notification) {\n      // Add loading class to notification item\n      const notificationElement = document.querySelector(`[data-notification-id=\"${notification.id}\"]`);\n      if (notificationElement) {\n        notificationElement.classList.add('loading');\n      }\n    },\n\n    /**\n     * Hide loading state for a notification\n     */\n    hideLoadingState(notification) {\n      const notificationElement = document.querySelector(`[data-notification-id=\"${notification.id}\"]`);\n      if (notificationElement) {\n        notificationElement.classList.remove('loading');\n      }\n    },\n\n    /**\n     * Show error toast message\n     */\n    showErrorToast(message) {\n      notificationNavigationService.showNavigationError(message, this.$emit.bind(this));\n    },\n\n    handleNewNotification(notification, context = null) {\n      // Validate this is a client notification\n      if (context && context.userType && context.userType !== 'client') {\n        console.log('üö´ ClientNotifications: Ignoring non-client notification:', context.userType);\n        return;\n      }\n\n      // Additional validation: check notification recipient type\n      if (notification.recipient_type && notification.recipient_type !== 'client') {\n        console.log('üö´ ClientNotifications: Ignoring notification for:', notification.recipient_type);\n        return;\n      }\n\n      console.log('üì¢ ClientNotifications: Processing client notification:', notification);\n\n      // Handle unread count updates from polling\n      if (notification.type === 'unread_count_update') {\n        this.unreadCount = notification.count || 0;\n        return;\n      }\n\n      // Handle notification read status updates\n      if (notification.type === 'notification_read') {\n        const notificationIndex = this.notifications.findIndex(n => n.id === notification.notification_id);\n        if (notificationIndex !== -1) {\n          this.notifications[notificationIndex].is_read = true;\n          this.unreadCount = Math.max(0, this.unreadCount - 1);\n        }\n        return;\n      }\n\n      // Handle all notifications marked as read\n      if (notification.type === 'all_notifications_read') {\n        this.notifications.forEach(n => n.is_read = true);\n        this.unreadCount = 0;\n        return;\n      }\n\n      // Add to beginning of list if panel is open\n      if (this.showPanel) {\n        this.notifications.unshift(notification);\n      }\n\n      // Update unread count for new notifications\n      if (!notification.is_read) {\n        this.unreadCount++;\n      }\n\n      // Emit event for parent components\n      this.$emit('new-notification', notification);\n    },\n\n    onConnected() {\n      console.log('Connected to client notification stream');\n      this.$emit('connected');\n    },\n\n    onError(error) {\n      console.error('Client notification stream error:', error);\n      this.$emit('error', 'Connection to notification stream failed');\n    },\n\n    getNotificationIcon(type) {\n      const icons = {\n        'status_change': 'fas fa-sync-alt text-info',\n        'payment_confirmed': 'fas fa-credit-card text-success',\n        'document_ready': 'fas fa-file-check text-success',\n        'request_update': 'fas fa-edit text-warning',\n        'system_alert': 'fas fa-exclamation-triangle text-danger',\n        'test': 'fas fa-vial text-secondary',\n        'connection': 'fas fa-plug text-success'\n      };\n      return icons[type] || 'fas fa-bell text-primary';\n    },\n\n    formatTime(timestamp) {\n      if (!timestamp) return '';\n      \n      const date = new Date(timestamp);\n      const now = new Date();\n      const diffInMinutes = Math.floor((now - date) / (1000 * 60));\n      \n      if (diffInMinutes < 1) return 'Just now';\n      if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n      \n      const diffInHours = Math.floor(diffInMinutes / 60);\n      if (diffInHours < 24) return `${diffInHours}h ago`;\n      \n      const diffInDays = Math.floor(diffInHours / 24);\n      if (diffInDays < 7) return `${diffInDays}d ago`;\n      \n      return date.toLocaleDateString();\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Client Notifications Styles */\n.client-notifications {\n  position: relative;\n  display: inline-block;\n}\n\n.notification-bell {\n  position: relative;\n  cursor: pointer;\n  padding: 0.5rem;\n  border-radius: 50%;\n  transition: all 0.3s ease;\n  color: #495057;\n  font-size: 1.2rem;\n}\n\n.notification-bell:hover {\n  background: rgba(0, 123, 255, 0.1);\n  color: #007bff;\n  transform: scale(1.05);\n}\n\n.notification-badge {\n  position: absolute;\n  top: 0;\n  right: 0;\n  background: #dc3545;\n  color: white;\n  border-radius: 50%;\n  padding: 2px 6px;\n  font-size: 0.75rem;\n  font-weight: bold;\n  min-width: 18px;\n  text-align: center;\n  animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n  0% { transform: scale(1); }\n  50% { transform: scale(1.1); }\n  100% { transform: scale(1); }\n}\n\n.notification-panel {\n  position: absolute;\n  top: 100%;\n  right: 0;\n  width: 400px;\n  max-height: 500px;\n  background: white;\n  border: 1px solid #dee2e6;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  z-index: 1050;\n  overflow: hidden;\n}\n\n.notification-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem;\n  border-bottom: 1px solid #dee2e6;\n  background: #f8f9fa;\n}\n\n.notification-header h5 {\n  margin: 0;\n  color: #1e3a8a;\n  font-weight: 600;\n}\n\n.notification-actions {\n  display: flex;\n  gap: 0.5rem;\n}\n\n.notification-content {\n  max-height: 400px;\n  overflow-y: auto;\n}\n\n.notification-loading,\n.notification-error {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 2rem;\n  color: #6c757d;\n}\n\n.notification-error {\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.no-notifications {\n  text-align: center;\n  padding: 2rem;\n  color: #6c757d;\n}\n\n.no-notifications i {\n  font-size: 2rem;\n  margin-bottom: 0.5rem;\n  opacity: 0.5;\n}\n\n.notification-list {\n  padding: 0;\n}\n\n.notification-item {\n  display: flex;\n  align-items: flex-start;\n  gap: 1rem;\n  padding: 1rem;\n  border-bottom: 1px solid #f1f3f4;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n  position: relative;\n}\n\n.notification-item:hover {\n  background: #f8f9fa;\n}\n\n.notification-item.unread {\n  background: #f0f8ff;\n  border-left: 3px solid #007bff;\n}\n\n.notification-item.priority-high {\n  border-left: 3px solid #dc3545;\n}\n\n.notification-item.clickable {\n  cursor: pointer;\n  position: relative;\n  transition: all 0.2s ease;\n}\n\n.notification-item.clickable:hover {\n  background: #f0f8ff;\n  transform: translateY(-1px);\n  box-shadow: 0 2px 8px rgba(0, 123, 255, 0.15);\n}\n\n.notification-item.loading {\n  opacity: 0.7;\n  pointer-events: none;\n}\n\n.notification-item.loading::after {\n  content: '';\n  position: absolute;\n  top: 50%;\n  right: 1rem;\n  width: 16px;\n  height: 16px;\n  border: 2px solid #f3f3f3;\n  border-top: 2px solid #007bff;\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n.notification-icon {\n  flex-shrink: 0;\n  width: 40px;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  background: #f8f9fa;\n}\n\n.notification-content {\n  flex: 1;\n  min-width: 0;\n}\n\n.notification-title {\n  font-weight: 600;\n  color: #212529;\n  margin-bottom: 0.25rem;\n  line-height: 1.4;\n}\n\n.notification-message {\n  color: #6c757d;\n  font-size: 0.9rem;\n  line-height: 1.4;\n  margin-bottom: 0.5rem;\n}\n\n.notification-time {\n  color: #adb5bd;\n  font-size: 0.8rem;\n}\n\n.unread-indicator {\n  position: absolute;\n  top: 1rem;\n  right: 1rem;\n  width: 8px;\n  height: 8px;\n  background: #007bff;\n  border-radius: 50%;\n}\n\n.load-more-container {\n  padding: 1rem;\n  text-align: center;\n  border-top: 1px solid #dee2e6;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .notification-bell {\n    padding: 0.4rem;\n    font-size: 1.1rem;\n  }\n\n  .notification-panel {\n    position: fixed;\n    top: 60px;\n    right: 0.5rem;\n    left: 0.5rem;\n    width: auto;\n    max-width: none;\n    margin: 0;\n    border-radius: 0.5rem;\n  }\n\n  .notification-header {\n    padding: 1rem;\n  }\n\n  .notification-header h5 {\n    font-size: 1.1rem;\n  }\n\n  .notification-item {\n    padding: 0.75rem;\n  }\n\n  .notification-title {\n    font-size: 0.9rem;\n  }\n\n  .notification-message {\n    font-size: 0.8rem;\n  }\n\n  .notification-time {\n    font-size: 0.75rem;\n  }\n\n  .notification-actions {\n    flex-direction: column;\n    gap: 0.25rem;\n  }\n\n  .btn-sm {\n    padding: 0.2rem 0.4rem;\n    font-size: 0.8rem;\n  }\n}\n\n@media (max-width: 480px) {\n  .notification-panel {\n    right: 0.25rem;\n    left: 0.25rem;\n    top: 55px;\n  }\n\n  .notification-header {\n    padding: 0.75rem;\n  }\n\n  .notification-item {\n    padding: 0.5rem;\n  }\n\n  .notification-title {\n    font-size: 0.85rem;\n  }\n\n  .notification-message {\n    font-size: 0.75rem;\n  }\n}\n\n/* Bootstrap utility classes */\n.btn {\n  display: inline-block;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #212529;\n  text-align: center;\n  text-decoration: none;\n  vertical-align: middle;\n  cursor: pointer;\n  user-select: none;\n  background-color: transparent;\n  border: 1px solid transparent;\n  padding: 0.375rem 0.75rem;\n  font-size: 1rem;\n  border-radius: 0.375rem;\n  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n}\n\n.btn-sm {\n  padding: 0.25rem 0.5rem;\n  font-size: 0.875rem;\n  border-radius: 0.25rem;\n}\n\n.btn-outline-primary {\n  color: #0d6efd;\n  border-color: #0d6efd;\n}\n\n.btn-outline-primary:hover {\n  color: #fff;\n  background-color: #0d6efd;\n  border-color: #0d6efd;\n}\n\n.btn-outline-secondary {\n  color: #6c757d;\n  border-color: #6c757d;\n}\n\n.btn-outline-secondary:hover {\n  color: #fff;\n  background-color: #6c757d;\n  border-color: #6c757d;\n}\n\n.btn:disabled {\n  pointer-events: none;\n  opacity: 0.65;\n}\n\n.spinner-border {\n  display: inline-block;\n  width: 2rem;\n  height: 2rem;\n  vertical-align: -0.125em;\n  border: 0.25em solid currentColor;\n  border-right-color: transparent;\n  border-radius: 50%;\n  animation: spinner-border 0.75s linear infinite;\n}\n\n.spinner-border-sm {\n  width: 1rem;\n  height: 1rem;\n  border-width: 0.2em;\n}\n\n@keyframes spinner-border {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.visually-hidden {\n  position: absolute !important;\n  width: 1px !important;\n  height: 1px !important;\n  padding: 0 !important;\n  margin: -1px !important;\n  overflow: hidden !important;\n  clip: rect(0, 0, 0, 0) !important;\n  white-space: nowrap !important;\n  border: 0 !important;\n}\n\n.ms-2 {\n  margin-left: 0.5rem !important;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}