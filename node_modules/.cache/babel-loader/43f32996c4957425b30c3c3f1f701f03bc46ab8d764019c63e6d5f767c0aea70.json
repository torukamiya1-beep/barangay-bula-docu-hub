{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport AdminHeader from './AdminHeader.vue';\nimport AdminSidebar from './AdminSidebar.vue';\nimport unifiedAuthService from '@/services/unifiedAuthService';\nexport default {\n  name: 'AdminProfile',\n  components: {\n    AdminHeader,\n    AdminSidebar\n  },\n  data() {\n    return {\n      // UI State\n      sidebarCollapsed: false,\n      showUserDropdown: false,\n      isMobile: false,\n      adminData: null,\n      // Component Data\n      profileForm: {\n        first_name: '',\n        last_name: '',\n        email: '',\n        phone_number: '',\n        position: '',\n        department: '',\n        profile_picture: null\n      }\n    };\n  },\n  async mounted() {\n    // Check authentication\n    if (!unifiedAuthService.isLoggedIn() || unifiedAuthService.getUserType() !== 'admin') {\n      this.$router.push('/login');\n      return;\n    }\n\n    // Initialize UI state\n    this.initializeUI();\n\n    // Load component data\n    await this.loadAdminProfile();\n    await this.loadProfile();\n  },\n  beforeUnmount() {\n    if (this.handleResize) {\n      window.removeEventListener('resize', this.handleResize);\n    }\n  },\n  computed: {\n    activeMenu() {\n      const path = this.$route.path;\n      if (path.includes('/admin/users')) return 'users';\n      if (path.includes('/admin/requests')) return 'requests';\n      if (path.includes('/admin/reports')) return 'reports';\n      if (path.includes('/admin/settings')) return 'settings';\n      if (path.includes('/admin/activity-logs')) return 'activity';\n      if (path.includes('/admin/profile')) return 'profile';\n      return 'dashboard';\n    }\n  },\n  methods: {\n    // Initialize UI state\n    initializeUI() {\n      this.isMobile = window.innerWidth <= 768;\n      if (!this.isMobile) {\n        const saved = localStorage.getItem('adminSidebarCollapsed');\n        this.sidebarCollapsed = saved ? JSON.parse(saved) : false;\n      } else {\n        this.sidebarCollapsed = true;\n      }\n      this.handleResize = () => {\n        const wasMobile = this.isMobile;\n        this.isMobile = window.innerWidth <= 768;\n        if (this.isMobile && !wasMobile) {\n          this.sidebarCollapsed = true;\n        } else if (!this.isMobile && wasMobile) {\n          const saved = localStorage.getItem('adminSidebarCollapsed');\n          this.sidebarCollapsed = saved ? JSON.parse(saved) : false;\n        }\n      };\n      window.addEventListener('resize', this.handleResize);\n    },\n    handleSidebarToggle() {\n      this.sidebarCollapsed = !this.sidebarCollapsed;\n      localStorage.setItem('adminSidebarCollapsed', JSON.stringify(this.sidebarCollapsed));\n    },\n    handleMenuChange(menu) {\n      const routes = {\n        'dashboard': '/admin/dashboard',\n        'users': '/admin/users',\n        'requests': '/admin/requests',\n        'reports': '/admin/reports',\n        'settings': '/admin/settings',\n        'activity': '/admin/activity-logs',\n        'profile': '/admin/profile'\n      };\n      if (this.isMobile) {\n        this.sidebarCollapsed = true;\n      }\n      if (routes[menu]) {\n        this.$router.push(routes[menu]);\n      }\n    },\n    handleUserDropdownToggle() {\n      this.showUserDropdown = !this.showUserDropdown;\n    },\n    handleMenuAction(action) {\n      if (action === 'profile') {\n        this.$router.push('/admin/profile');\n      } else if (action === 'settings') {\n        this.$router.push('/admin/settings');\n      }\n      this.showUserDropdown = false;\n    },\n    closeMobileSidebar() {\n      if (this.isMobile) {\n        this.sidebarCollapsed = true;\n      }\n    },\n    handleLogout() {\n      unifiedAuthService.logout();\n      this.$router.push('/login');\n    },\n    async loadAdminProfile() {\n      try {\n        const user = unifiedAuthService.getCurrentUser();\n        if (user && user.profile) {\n          this.adminData = user.profile;\n        } else {\n          this.adminData = {\n            first_name: user?.username || 'Admin',\n            role: user?.role || 'admin'\n          };\n        }\n      } catch (error) {\n        console.error('Failed to load admin profile:', error);\n        const user = unifiedAuthService.getCurrentUser();\n        this.adminData = {\n          first_name: user?.username || 'Admin',\n          role: user?.role || 'admin'\n        };\n      }\n    },\n    async loadProfile() {\n      this.loading = true;\n      try {\n        const user = unifiedAuthService.getCurrentUser();\n        if (user && user.profile) {\n          this.adminData = user.profile;\n          this.profileForm = {\n            ...user.profile\n          };\n        } else {\n          this.adminData = {\n            first_name: user?.username || 'Admin',\n            role: user?.role || 'admin'\n          };\n          this.profileForm = {\n            ...this.adminData\n          };\n        }\n      } catch (error) {\n        console.error('Failed to load profile:', error);\n        const user = unifiedAuthService.getCurrentUser();\n        this.adminData = {\n          first_name: user?.username || 'Admin',\n          role: user?.role || 'admin'\n        };\n        this.profileForm = {\n          ...this.adminData\n        };\n      } finally {\n        this.loading = false;\n      }\n    },\n    async updateProfile() {\n      this.loading = true;\n      try {\n        console.log('Updating profile:', this.profileForm);\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        alert('Profile updated successfully!');\n      } catch (error) {\n        console.error('Failed to update profile:', error);\n        alert('Failed to update profile. Please try again.');\n      } finally {\n        this.loading = false;\n      }\n    },\n    getInitials(firstName, lastName) {\n      const first = firstName ? firstName.charAt(0).toUpperCase() : '';\n      const last = lastName ? lastName.charAt(0).toUpperCase() : '';\n      return first + last || '?';\n    },\n    uploadPicture() {\n      alert('Profile picture upload functionality will be implemented soon.');\n    },\n    changePassword() {\n      alert('Change password functionality will be implemented soon.');\n    },\n    enableTwoFactor() {\n      alert('Two-factor authentication setup will be implemented soon.');\n    },\n    viewLoginHistory() {\n      alert('Login history view will be implemented soon.');\n    },\n    // Navigation handlers are now provided by the mixin\n\n    goBack() {\n      this.$router.push('/admin/dashboard');\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}