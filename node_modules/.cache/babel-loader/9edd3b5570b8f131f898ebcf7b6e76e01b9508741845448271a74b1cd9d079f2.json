{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport adminAuthService from '@/services/adminAuthService';\nimport AdminHeader from '../AdminHeader.vue';\nimport AdminSidebar from '../AdminSidebar.vue';\nexport default {\n  name: 'AdminDashboard',\n  components: {\n    AdminHeader,\n    AdminSidebar\n  },\n  data() {\n    return {\n      loading: true,\n      adminData: null,\n      stats: {\n        totalUsers: 0,\n        activeRequests: 0,\n        completedToday: 0,\n        pendingApproval: 0\n      },\n      recentActivity: [],\n      errorMessage: ''\n    };\n  },\n  async mounted() {\n    // Add dashboard layout class to body to prevent scrolling\n    document.body.classList.add('dashboard-layout');\n\n    // Check if admin is logged in\n    if (!adminAuthService.isLoggedIn()) {\n      this.$router.push('/admin/login');\n      return;\n    }\n    await this.loadDashboardData();\n  },\n  methods: {\n    // Load dashboard data\n    async loadDashboardData() {\n      this.loading = true;\n      try {\n        // Load admin profile\n        await this.loadAdminProfile();\n\n        // Load dashboard statistics\n        await this.loadDashboardStats();\n\n        // Load recent activity\n        await this.loadRecentActivity();\n      } catch (error) {\n        console.error('Failed to load dashboard data:', error);\n        const errorData = adminAuthService.parseError(error);\n        this.errorMessage = errorData.message || 'Failed to load dashboard data';\n\n        // If unauthorized, redirect to login\n        if (errorData.status === 401) {\n          adminAuthService.logout();\n          this.$router.push('/admin/login');\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    // Load admin profile\n    async loadAdminProfile() {\n      try {\n        const response = await adminAuthService.getProfile();\n        if (response.success) {\n          this.adminData = response.data;\n        }\n      } catch (error) {\n        console.error('Failed to load admin profile:', error);\n        // Use stored admin data as fallback\n        this.adminData = adminAuthService.getAdminData();\n      }\n    },\n    // Load dashboard statistics\n    async loadDashboardStats() {\n      try {\n        const response = await adminAuthService.getDashboardStats();\n        if (response.success) {\n          this.stats = {\n            totalUsers: response.data.totalUsers || 0,\n            activeRequests: response.data.activeRequests || 0,\n            completedToday: response.data.completedToday || 0,\n            pendingApproval: response.data.pendingApproval || 0\n          };\n        }\n      } catch (error) {\n        console.error('Failed to load dashboard stats:', error);\n        // Keep default stats values\n      }\n    },\n    // Load recent activity\n    async loadRecentActivity() {\n      try {\n        const response = await adminAuthService.getRecentActivity();\n        if (response.success) {\n          this.recentActivity = response.data || [];\n        }\n      } catch (error) {\n        console.error('Failed to load recent activity:', error);\n        this.recentActivity = [];\n      }\n    },\n    // Navigate to specific route\n    navigateTo(route) {\n      this.$router.push(route);\n    },\n    // Format date for display\n    formatDate(dateString) {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      const now = new Date();\n      const diffInMinutes = Math.floor((now - date) / (1000 * 60));\n      if (diffInMinutes < 1) {\n        return 'Just now';\n      } else if (diffInMinutes < 60) {\n        return `${diffInMinutes} minute${diffInMinutes > 1 ? 's' : ''} ago`;\n      } else if (diffInMinutes < 1440) {\n        const hours = Math.floor(diffInMinutes / 60);\n        return `${hours} hour${hours > 1 ? 's' : ''} ago`;\n      } else {\n        const days = Math.floor(diffInMinutes / 1440);\n        return `${days} day${days > 1 ? 's' : ''} ago`;\n      }\n    },\n    // Format time for display\n    formatTime(dateString) {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      return date.toLocaleTimeString('en-US', {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: true\n      });\n    },\n    // Refresh dashboard data\n    async refreshDashboard() {\n      await this.loadDashboardData();\n    },\n    // Handle logout\n    logout() {\n      adminAuthService.logout();\n      this.$router.push('/admin/login');\n    }\n  },\n  // Auto-refresh dashboard data every 5 minutes\n  created() {\n    this.refreshInterval = setInterval(() => {\n      this.loadDashboardStats();\n      this.loadRecentActivity();\n    }, 5 * 60 * 1000); // 5 minutes\n  },\n  // Clean up interval on component destroy\n  beforeUnmount() {\n    // Remove dashboard layout class from body\n    document.body.classList.remove('dashboard-layout');\n    if (this.refreshInterval) {\n      clearInterval(this.refreshInterval);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}