{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport AdminHeader from '../AdminHeader.vue';\nimport AdminSidebar from '../AdminSidebar.vue';\nimport adminAuthService from '@/services/adminAuthService';\nimport { Modal } from 'bootstrap';\nexport default {\n  name: 'AdminResidencyVerification',\n  components: {\n    AdminHeader,\n    AdminSidebar\n  },\n  data() {\n    return {\n      // Admin data\n      adminData: null,\n      // UI state\n      sidebarCollapsed: false,\n      showUserDropdown: false,\n      activeMenu: 'residency-verification',\n      isMobile: false,\n      // Loading states\n      loading: false,\n      actionLoading: false,\n      loadingDocuments: false,\n      // Data\n      pendingVerifications: [],\n      documents: [],\n      selectedVerification: null,\n      // Pagination\n      pagination: {\n        page: 1,\n        limit: 10,\n        total: 0,\n        totalPages: 0\n      },\n      // Statistics\n      statistics: {\n        pending: 0,\n        approved: 0,\n        rejected: 0,\n        total: 0\n      },\n      // Rejection modal\n      rejectionReason: '',\n      rejectionError: '',\n      // Messages\n      successMessage: '',\n      errorMessage: ''\n    };\n  },\n  async mounted() {\n    this.checkMobile();\n    window.addEventListener('resize', this.checkMobile);\n    try {\n      this.adminData = await adminAuthService.getCurrentAdmin();\n      await this.loadPendingVerifications();\n      await this.loadStatistics();\n    } catch (error) {\n      console.error('Failed to initialize admin residency verification:', error);\n      this.errorMessage = 'Failed to load admin data';\n    }\n  },\n  beforeUnmount() {\n    window.removeEventListener('resize', this.checkMobile);\n  },\n  methods: {\n    // UI Methods\n    checkMobile() {\n      this.isMobile = window.innerWidth < 768;\n      if (!this.isMobile) {\n        this.sidebarCollapsed = false;\n      }\n    },\n    handleSidebarToggle() {\n      this.sidebarCollapsed = !this.sidebarCollapsed;\n    },\n    closeMobileSidebar() {\n      if (this.isMobile) {\n        this.sidebarCollapsed = true;\n      }\n    },\n    handleUserDropdownToggle() {\n      this.showUserDropdown = !this.showUserDropdown;\n    },\n    handleMenuChange(menu) {\n      this.activeMenu = menu;\n      this.showUserDropdown = false;\n    },\n    handleMenuAction(action) {\n      if (action === 'profile') {\n        this.$router.push('/admin/profile');\n      } else if (action === 'settings') {\n        this.$router.push('/admin/settings');\n      }\n      this.showUserDropdown = false;\n    },\n    async handleLogout() {\n      try {\n        await adminAuthService.logout();\n        this.$router.push('/admin/login');\n      } catch (error) {\n        console.error('Logout failed:', error);\n      }\n    },\n    // Data Loading Methods\n    async loadPendingVerifications(page = 1) {\n      this.loading = true;\n      this.clearMessages();\n      try {\n        const response = await this.fetchPendingVerifications(page);\n        if (response.success) {\n          this.pendingVerifications = response.data;\n          this.pagination = response.pagination;\n        } else {\n          throw new Error(response.message || 'Failed to load pending verifications');\n        }\n      } catch (error) {\n        console.error('Failed to load pending verifications:', error);\n        this.errorMessage = error.message || 'Failed to load pending verifications';\n      } finally {\n        this.loading = false;\n      }\n    },\n    async loadStatistics() {\n      try {\n        // This would be implemented with actual API calls\n        // For now, calculate from current data\n        this.statistics = {\n          pending: this.pendingVerifications.length,\n          approved: 0,\n          // Would come from API\n          rejected: 0,\n          // Would come from API\n          total: this.pagination.total || this.pendingVerifications.length\n        };\n      } catch (error) {\n        console.error('Failed to load statistics:', error);\n      }\n    },\n    // API Methods\n    async fetchPendingVerifications(page = 1, limit = 10) {\n      const response = await fetch(`/api/residency/pending?page=${page}&limit=${limit}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to fetch pending verifications');\n      }\n      return data;\n    },\n    async fetchAccountDocuments(accountId) {\n      const response = await fetch(`/api/residency/documents/${accountId}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to fetch documents');\n      }\n      return data;\n    },\n    async approveVerificationAPI(accountId) {\n      const response = await fetch('/api/residency/approve', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          account_id: accountId\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to approve verification');\n      }\n      return data;\n    },\n    async rejectVerificationAPI(accountId, rejectionReason) {\n      const response = await fetch('/api/residency/reject', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          account_id: accountId,\n          rejection_reason: rejectionReason\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to reject verification');\n      }\n      return data;\n    },\n    // Action Methods\n    async viewDocuments(verification) {\n      this.selectedVerification = verification;\n      this.loadingDocuments = true;\n      this.documents = [];\n\n      // Show modal\n      const modal = new Modal(this.$refs.documentModal);\n      modal.show();\n      try {\n        const response = await this.fetchAccountDocuments(verification.account_id);\n        if (response.success) {\n          this.documents = response.data;\n        } else {\n          throw new Error(response.message || 'Failed to load documents');\n        }\n      } catch (error) {\n        console.error('Failed to load documents:', error);\n        this.errorMessage = error.message || 'Failed to load documents';\n      } finally {\n        this.loadingDocuments = false;\n      }\n    },\n    async approveVerification(verification) {\n      if (!confirm(`Are you sure you want to approve the residency verification for ${verification.first_name} ${verification.last_name}?`)) {\n        return;\n      }\n      this.actionLoading = true;\n      this.clearMessages();\n      try {\n        const response = await this.approveVerificationAPI(verification.account_id);\n        if (response.success) {\n          this.successMessage = `Residency verification approved for ${verification.first_name} ${verification.last_name}`;\n          await this.loadPendingVerifications(this.pagination.page);\n          await this.loadStatistics();\n        } else {\n          throw new Error(response.message || 'Failed to approve verification');\n        }\n      } catch (error) {\n        console.error('Failed to approve verification:', error);\n        this.errorMessage = error.message || 'Failed to approve verification';\n      } finally {\n        this.actionLoading = false;\n      }\n    },\n    showRejectModal(verification) {\n      this.selectedVerification = verification;\n      this.rejectionReason = '';\n      this.rejectionError = '';\n      const modal = new Modal(this.$refs.rejectModal);\n      modal.show();\n    },\n    async confirmRejectVerification() {\n      if (!this.rejectionReason.trim()) {\n        this.rejectionError = 'Rejection reason is required';\n        return;\n      }\n      if (this.rejectionReason.trim().length < 10) {\n        this.rejectionError = 'Rejection reason must be at least 10 characters';\n        return;\n      }\n      this.actionLoading = true;\n      this.rejectionError = '';\n      this.clearMessages();\n      try {\n        const response = await this.rejectVerificationAPI(this.selectedVerification.account_id, this.rejectionReason.trim());\n        if (response.success) {\n          this.successMessage = `Residency verification rejected for ${this.selectedVerification.first_name} ${this.selectedVerification.last_name}`;\n\n          // Close modal\n          const modal = Modal.getInstance(this.$refs.rejectModal);\n          modal.hide();\n          await this.loadPendingVerifications(this.pagination.page);\n          await this.loadStatistics();\n        } else {\n          throw new Error(response.message || 'Failed to reject verification');\n        }\n      } catch (error) {\n        console.error('Failed to reject verification:', error);\n        this.errorMessage = error.message || 'Failed to reject verification';\n      } finally {\n        this.actionLoading = false;\n      }\n    },\n    approveFromModal() {\n      // Close document modal first\n      const documentModal = Modal.getInstance(this.$refs.documentModal);\n      documentModal.hide();\n\n      // Approve the verification\n      this.approveVerification(this.selectedVerification);\n    },\n    showRejectModalFromDocuments() {\n      // Close document modal first\n      const documentModal = Modal.getInstance(this.$refs.documentModal);\n      documentModal.hide();\n\n      // Show reject modal\n      setTimeout(() => {\n        this.showRejectModal(this.selectedVerification);\n      }, 300);\n    },\n    viewDocument(document) {\n      // This would open the document in a new tab or modal\n      // For now, just show an alert\n      alert(`Viewing document: ${document.document_name}\\nThis feature would open the document file.`);\n    },\n    // Pagination Methods\n    changePage(page) {\n      if (page >= 1 && page <= this.pagination.totalPages && page !== this.pagination.page) {\n        this.loadPendingVerifications(page);\n      }\n    },\n    getPageNumbers() {\n      const pages = [];\n      const totalPages = this.pagination.totalPages;\n      const currentPage = this.pagination.page;\n\n      // Show up to 5 page numbers\n      let startPage = Math.max(1, currentPage - 2);\n      let endPage = Math.min(totalPages, startPage + 4);\n      if (endPage - startPage < 4) {\n        startPage = Math.max(1, endPage - 4);\n      }\n      for (let i = startPage; i <= endPage; i++) {\n        pages.push(i);\n      }\n      return pages;\n    },\n    // Utility Methods\n    getFullName(verification) {\n      const parts = [verification.first_name, verification.middle_name, verification.last_name].filter(Boolean);\n      return parts.join(' ');\n    },\n    formatDate(dateString) {\n      if (!dateString) return 'N/A';\n      try {\n        const date = new Date(dateString);\n        return date.toLocaleDateString('en-US', {\n          year: 'numeric',\n          month: 'short',\n          day: 'numeric',\n          hour: '2-digit',\n          minute: '2-digit'\n        });\n      } catch (error) {\n        return 'Invalid Date';\n      }\n    },\n    getTimeAgo(dateString) {\n      if (!dateString) return 'N/A';\n      try {\n        const date = new Date(dateString);\n        const now = new Date();\n        const diffInSeconds = Math.floor((now - date) / 1000);\n        if (diffInSeconds < 60) return 'Just now';\n        if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minutes ago`;\n        if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hours ago`;\n        if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)} days ago`;\n        return this.formatDate(dateString);\n      } catch (error) {\n        return 'N/A';\n      }\n    },\n    getDocumentTypeLabel(documentType) {\n      const labels = {\n        utility_bill: 'Utility Bill',\n        barangay_certificate: 'Barangay Certificate',\n        valid_id: 'Valid ID',\n        lease_contract: 'Lease Contract',\n        other: 'Other Document'\n      };\n      return labels[documentType] || documentType;\n    },\n    formatFileSize(bytes) {\n      if (!bytes) return 'N/A';\n      const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n      const i = Math.floor(Math.log(bytes) / Math.log(1024));\n      return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n    },\n    clearMessages() {\n      this.successMessage = '';\n      this.errorMessage = '';\n    }\n  }\n};","map":{"version":3,"names":["AdminHeader","AdminSidebar","adminAuthService","Modal","name","components","data","adminData","sidebarCollapsed","showUserDropdown","activeMenu","isMobile","loading","actionLoading","loadingDocuments","pendingVerifications","documents","selectedVerification","pagination","page","limit","total","totalPages","statistics","pending","approved","rejected","rejectionReason","rejectionError","successMessage","errorMessage","mounted","checkMobile","window","addEventListener","getCurrentAdmin","loadPendingVerifications","loadStatistics","error","console","beforeUnmount","removeEventListener","methods","innerWidth","handleSidebarToggle","closeMobileSidebar","handleUserDropdownToggle","handleMenuChange","menu","handleMenuAction","action","$router","push","handleLogout","logout","clearMessages","response","fetchPendingVerifications","success","Error","message","length","fetch","method","headers","localStorage","getItem","json","ok","fetchAccountDocuments","accountId","approveVerificationAPI","body","JSON","stringify","account_id","rejectVerificationAPI","rejection_reason","viewDocuments","verification","modal","$refs","documentModal","show","approveVerification","confirm","first_name","last_name","showRejectModal","rejectModal","confirmRejectVerification","trim","getInstance","hide","approveFromModal","showRejectModalFromDocuments","setTimeout","viewDocument","document","alert","document_name","changePage","getPageNumbers","pages","currentPage","startPage","Math","max","endPage","min","i","getFullName","parts","middle_name","filter","Boolean","join","formatDate","dateString","date","Date","toLocaleDateString","year","month","day","hour","minute","getTimeAgo","now","diffInSeconds","floor","getDocumentTypeLabel","documentType","labels","utility_bill","barangay_certificate","valid_id","lease_contract","other","formatFileSize","bytes","sizes","log","round","pow"],"sources":["D:/brgy_docu_hub/BOSFDR/src/components/admin/js/adminResidencyVerification.js"],"sourcesContent":["import AdminHeader from '../AdminHeader.vue';\nimport AdminSidebar from '../AdminSidebar.vue';\nimport adminAuthService from '@/services/adminAuthService';\nimport { Modal } from 'bootstrap';\n\nexport default {\n  name: 'AdminResidencyVerification',\n  components: {\n    AdminHeader,\n    AdminSidebar\n  },\n  data() {\n    return {\n      // Admin data\n      adminData: null,\n      \n      // UI state\n      sidebarCollapsed: false,\n      showUserDropdown: false,\n      activeMenu: 'residency-verification',\n      isMobile: false,\n      \n      // Loading states\n      loading: false,\n      actionLoading: false,\n      loadingDocuments: false,\n      \n      // Data\n      pendingVerifications: [],\n      documents: [],\n      selectedVerification: null,\n      \n      // Pagination\n      pagination: {\n        page: 1,\n        limit: 10,\n        total: 0,\n        totalPages: 0\n      },\n      \n      // Statistics\n      statistics: {\n        pending: 0,\n        approved: 0,\n        rejected: 0,\n        total: 0\n      },\n      \n      // Rejection modal\n      rejectionReason: '',\n      rejectionError: '',\n      \n      // Messages\n      successMessage: '',\n      errorMessage: ''\n    };\n  },\n  async mounted() {\n    this.checkMobile();\n    window.addEventListener('resize', this.checkMobile);\n    \n    try {\n      this.adminData = await adminAuthService.getCurrentAdmin();\n      await this.loadPendingVerifications();\n      await this.loadStatistics();\n    } catch (error) {\n      console.error('Failed to initialize admin residency verification:', error);\n      this.errorMessage = 'Failed to load admin data';\n    }\n  },\n  beforeUnmount() {\n    window.removeEventListener('resize', this.checkMobile);\n  },\n  methods: {\n    // UI Methods\n    checkMobile() {\n      this.isMobile = window.innerWidth < 768;\n      if (!this.isMobile) {\n        this.sidebarCollapsed = false;\n      }\n    },\n    \n    handleSidebarToggle() {\n      this.sidebarCollapsed = !this.sidebarCollapsed;\n    },\n    \n    closeMobileSidebar() {\n      if (this.isMobile) {\n        this.sidebarCollapsed = true;\n      }\n    },\n    \n    handleUserDropdownToggle() {\n      this.showUserDropdown = !this.showUserDropdown;\n    },\n    \n    handleMenuChange(menu) {\n      this.activeMenu = menu;\n      this.showUserDropdown = false;\n    },\n    \n    handleMenuAction(action) {\n      if (action === 'profile') {\n        this.$router.push('/admin/profile');\n      } else if (action === 'settings') {\n        this.$router.push('/admin/settings');\n      }\n      this.showUserDropdown = false;\n    },\n    \n    async handleLogout() {\n      try {\n        await adminAuthService.logout();\n        this.$router.push('/admin/login');\n      } catch (error) {\n        console.error('Logout failed:', error);\n      }\n    },\n    \n    // Data Loading Methods\n    async loadPendingVerifications(page = 1) {\n      this.loading = true;\n      this.clearMessages();\n      \n      try {\n        const response = await this.fetchPendingVerifications(page);\n        \n        if (response.success) {\n          this.pendingVerifications = response.data;\n          this.pagination = response.pagination;\n        } else {\n          throw new Error(response.message || 'Failed to load pending verifications');\n        }\n      } catch (error) {\n        console.error('Failed to load pending verifications:', error);\n        this.errorMessage = error.message || 'Failed to load pending verifications';\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    async loadStatistics() {\n      try {\n        // This would be implemented with actual API calls\n        // For now, calculate from current data\n        this.statistics = {\n          pending: this.pendingVerifications.length,\n          approved: 0, // Would come from API\n          rejected: 0, // Would come from API\n          total: this.pagination.total || this.pendingVerifications.length\n        };\n      } catch (error) {\n        console.error('Failed to load statistics:', error);\n      }\n    },\n    \n    // API Methods\n    async fetchPendingVerifications(page = 1, limit = 10) {\n      const response = await fetch(`/api/residency/pending?page=${page}&limit=${limit}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to fetch pending verifications');\n      }\n\n      return data;\n    },\n    \n    async fetchAccountDocuments(accountId) {\n      const response = await fetch(`/api/residency/documents/${accountId}`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to fetch documents');\n      }\n\n      return data;\n    },\n    \n    async approveVerificationAPI(accountId) {\n      const response = await fetch('/api/residency/approve', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          account_id: accountId\n        })\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to approve verification');\n      }\n\n      return data;\n    },\n    \n    async rejectVerificationAPI(accountId, rejectionReason) {\n      const response = await fetch('/api/residency/reject', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          account_id: accountId,\n          rejection_reason: rejectionReason\n        })\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to reject verification');\n      }\n\n      return data;\n    },\n    \n    // Action Methods\n    async viewDocuments(verification) {\n      this.selectedVerification = verification;\n      this.loadingDocuments = true;\n      this.documents = [];\n      \n      // Show modal\n      const modal = new Modal(this.$refs.documentModal);\n      modal.show();\n      \n      try {\n        const response = await this.fetchAccountDocuments(verification.account_id);\n        \n        if (response.success) {\n          this.documents = response.data;\n        } else {\n          throw new Error(response.message || 'Failed to load documents');\n        }\n      } catch (error) {\n        console.error('Failed to load documents:', error);\n        this.errorMessage = error.message || 'Failed to load documents';\n      } finally {\n        this.loadingDocuments = false;\n      }\n    },\n    \n    async approveVerification(verification) {\n      if (!confirm(`Are you sure you want to approve the residency verification for ${verification.first_name} ${verification.last_name}?`)) {\n        return;\n      }\n      \n      this.actionLoading = true;\n      this.clearMessages();\n      \n      try {\n        const response = await this.approveVerificationAPI(verification.account_id);\n        \n        if (response.success) {\n          this.successMessage = `Residency verification approved for ${verification.first_name} ${verification.last_name}`;\n          await this.loadPendingVerifications(this.pagination.page);\n          await this.loadStatistics();\n        } else {\n          throw new Error(response.message || 'Failed to approve verification');\n        }\n      } catch (error) {\n        console.error('Failed to approve verification:', error);\n        this.errorMessage = error.message || 'Failed to approve verification';\n      } finally {\n        this.actionLoading = false;\n      }\n    },\n    \n    showRejectModal(verification) {\n      this.selectedVerification = verification;\n      this.rejectionReason = '';\n      this.rejectionError = '';\n      \n      const modal = new Modal(this.$refs.rejectModal);\n      modal.show();\n    },\n    \n    async confirmRejectVerification() {\n      if (!this.rejectionReason.trim()) {\n        this.rejectionError = 'Rejection reason is required';\n        return;\n      }\n      \n      if (this.rejectionReason.trim().length < 10) {\n        this.rejectionError = 'Rejection reason must be at least 10 characters';\n        return;\n      }\n      \n      this.actionLoading = true;\n      this.rejectionError = '';\n      this.clearMessages();\n      \n      try {\n        const response = await this.rejectVerificationAPI(\n          this.selectedVerification.account_id,\n          this.rejectionReason.trim()\n        );\n        \n        if (response.success) {\n          this.successMessage = `Residency verification rejected for ${this.selectedVerification.first_name} ${this.selectedVerification.last_name}`;\n          \n          // Close modal\n          const modal = Modal.getInstance(this.$refs.rejectModal);\n          modal.hide();\n          \n          await this.loadPendingVerifications(this.pagination.page);\n          await this.loadStatistics();\n        } else {\n          throw new Error(response.message || 'Failed to reject verification');\n        }\n      } catch (error) {\n        console.error('Failed to reject verification:', error);\n        this.errorMessage = error.message || 'Failed to reject verification';\n      } finally {\n        this.actionLoading = false;\n      }\n    },\n\n    approveFromModal() {\n      // Close document modal first\n      const documentModal = Modal.getInstance(this.$refs.documentModal);\n      documentModal.hide();\n\n      // Approve the verification\n      this.approveVerification(this.selectedVerification);\n    },\n\n    showRejectModalFromDocuments() {\n      // Close document modal first\n      const documentModal = Modal.getInstance(this.$refs.documentModal);\n      documentModal.hide();\n\n      // Show reject modal\n      setTimeout(() => {\n        this.showRejectModal(this.selectedVerification);\n      }, 300);\n    },\n\n    viewDocument(document) {\n      // This would open the document in a new tab or modal\n      // For now, just show an alert\n      alert(`Viewing document: ${document.document_name}\\nThis feature would open the document file.`);\n    },\n\n    // Pagination Methods\n    changePage(page) {\n      if (page >= 1 && page <= this.pagination.totalPages && page !== this.pagination.page) {\n        this.loadPendingVerifications(page);\n      }\n    },\n\n    getPageNumbers() {\n      const pages = [];\n      const totalPages = this.pagination.totalPages;\n      const currentPage = this.pagination.page;\n\n      // Show up to 5 page numbers\n      let startPage = Math.max(1, currentPage - 2);\n      let endPage = Math.min(totalPages, startPage + 4);\n\n      if (endPage - startPage < 4) {\n        startPage = Math.max(1, endPage - 4);\n      }\n\n      for (let i = startPage; i <= endPage; i++) {\n        pages.push(i);\n      }\n\n      return pages;\n    },\n\n    // Utility Methods\n    getFullName(verification) {\n      const parts = [verification.first_name, verification.middle_name, verification.last_name].filter(Boolean);\n      return parts.join(' ');\n    },\n\n    formatDate(dateString) {\n      if (!dateString) return 'N/A';\n\n      try {\n        const date = new Date(dateString);\n        return date.toLocaleDateString('en-US', {\n          year: 'numeric',\n          month: 'short',\n          day: 'numeric',\n          hour: '2-digit',\n          minute: '2-digit'\n        });\n      } catch (error) {\n        return 'Invalid Date';\n      }\n    },\n\n    getTimeAgo(dateString) {\n      if (!dateString) return 'N/A';\n\n      try {\n        const date = new Date(dateString);\n        const now = new Date();\n        const diffInSeconds = Math.floor((now - date) / 1000);\n\n        if (diffInSeconds < 60) return 'Just now';\n        if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minutes ago`;\n        if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hours ago`;\n        if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)} days ago`;\n\n        return this.formatDate(dateString);\n      } catch (error) {\n        return 'N/A';\n      }\n    },\n\n    getDocumentTypeLabel(documentType) {\n      const labels = {\n        utility_bill: 'Utility Bill',\n        barangay_certificate: 'Barangay Certificate',\n        valid_id: 'Valid ID',\n        lease_contract: 'Lease Contract',\n        other: 'Other Document'\n      };\n\n      return labels[documentType] || documentType;\n    },\n\n    formatFileSize(bytes) {\n      if (!bytes) return 'N/A';\n\n      const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n      const i = Math.floor(Math.log(bytes) / Math.log(1024));\n\n      return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];\n    },\n\n    clearMessages() {\n      this.successMessage = '';\n      this.errorMessage = '';\n    }\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}