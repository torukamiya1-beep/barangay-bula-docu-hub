{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport AdminNotifications from './AdminNotifications.vue';\nexport default {\n  name: 'AdminHeader',\n  components: {\n    AdminNotifications\n  },\n  props: {\n    userName: {\n      type: String,\n      default: 'Admin'\n    },\n    showUserDropdown: {\n      type: Boolean,\n      default: false\n    },\n    sidebarCollapsed: {\n      type: Boolean,\n      default: false\n    },\n    activeMenu: {\n      type: String,\n      default: 'dashboard'\n    }\n  },\n  emits: ['sidebar-toggle', 'user-dropdown-toggle', 'menu-action', 'logout', 'error', 'new-notification'],\n  computed: {\n    // Get display name from admin data or fallback to prop\n    displayUserName() {\n      const adminData = this.$adminAuth?.getAdminData();\n      if (adminData) {\n        // Check if user has profile data\n        if (adminData.profile && adminData.profile.first_name) {\n          return adminData.profile.last_name ? `${adminData.profile.first_name} ${adminData.profile.last_name}` : adminData.profile.first_name;\n        }\n        // Fallback to username\n        return adminData.username || this.userName;\n      }\n      return this.userName || 'Admin';\n    },\n    // Get display role from admin data\n    displayUserRole() {\n      const adminData = this.$adminAuth?.getAdminData();\n      if (adminData && adminData.role) {\n        return adminData.role.charAt(0).toUpperCase() + adminData.role.slice(1);\n      }\n      return 'Admin';\n    }\n  },\n  mounted() {\n    // Setup event listeners for outside clicks\n    document.addEventListener('click', this.handleOutsideClick);\n  },\n  beforeUnmount() {\n    // Clean up event listeners\n    document.removeEventListener('click', this.handleOutsideClick);\n  },\n  methods: {\n    // Get page title based on current route\n    getPageTitle() {\n      const path = this.$route.path;\n      const routeTitles = {\n        '/admin/dashboard': 'Admin Dashboard',\n        '/admin/users': 'User Management',\n        '/admin/requests': 'Document Requests',\n        '/admin/reports': 'Reports & Analytics',\n        '/admin/settings': 'System Settings',\n        '/admin/activity-logs': 'Activity Logs',\n        '/admin/audit-logs': 'Audit Logs',\n        '/admin/profile': 'Admin Profile'\n      };\n\n      // Use route-based title first, then fall back to activeMenu prop, then default\n      return routeTitles[path] || this.$route.meta?.title || 'Admin Dashboard';\n    },\n    // Handle sidebar toggle\n    handleSidebarToggle() {\n      this.$emit('sidebar-toggle');\n    },\n    // Handle user dropdown toggle\n    handleUserDropdownToggle() {\n      this.$emit('user-dropdown-toggle');\n    },\n    // Handle menu actions (profile, settings, etc.)\n    handleMenuAction(action, event) {\n      // Prevent default link behavior\n      if (event) {\n        event.preventDefault();\n      }\n\n      // Navigate to the appropriate route\n      const routes = {\n        'profile': '/admin/profile',\n        'settings': '/admin/settings',\n        'account': '/admin/profile' // Account info redirects to profile\n      };\n      const route = routes[action];\n      if (route && this.$route.path !== route) {\n        this.$router.push(route).catch(err => {\n          // Handle navigation errors gracefully\n          if (err.name !== 'NavigationDuplicated') {\n            console.error('Navigation error:', err);\n          }\n        });\n      }\n\n      // Close dropdown after navigation\n      if (this.showUserDropdown) {\n        this.$emit('user-dropdown-toggle');\n      }\n\n      // Still emit for parent components that need to track actions\n      this.$emit('menu-action', action);\n    },\n    // Handle logout\n    handleLogout(event) {\n      // Prevent default link behavior\n      if (event) {\n        event.preventDefault();\n      }\n      this.$emit('logout');\n    },\n    // Handle outside clicks to close dropdowns\n    handleOutsideClick(event) {\n      // Check if click is outside user dropdown\n      if (!event.target.closest('.user-dropdown')) {\n        if (this.showUserDropdown) {\n          this.$emit('user-dropdown-toggle');\n        }\n      }\n    },\n    // Notification handlers\n    handleNewNotification(notification) {\n      console.log('New notification received:', notification);\n      // Emit to parent component if needed\n      this.$emit('new-notification', notification);\n    },\n    async handleNotificationClick(notification) {\n      console.log('üîî AdminHeader: Notification clicked:', notification);\n      try {\n        // The AdminNotifications component now handles navigation internally,\n        // but we can add additional logic here if needed\n\n        // Parse notification data\n        const notificationData = typeof notification.data === 'string' ? JSON.parse(notification.data) : notification.data || {};\n\n        // Log navigation for debugging\n        console.log('üìä AdminHeader: Notification data:', notificationData);\n\n        // Additional header-specific logic can go here\n        // For example, updating header state, showing badges, etc.\n\n        // The navigation is now handled by the AdminNotifications component\n        // This handler can focus on header-specific updates\n      } catch (error) {\n        console.error('‚ùå AdminHeader: Error handling notification click:', error);\n      }\n\n      // Always emit the event for other components that might need it\n      this.$emit('notification-click', notification);\n    },\n    handleOpenRequestModal(modalData) {\n      console.log('üîî AdminHeader: Request to open modal:', modalData);\n\n      // Emit event to parent component (likely AdminRequests or main layout)\n      // to handle opening the request details modal\n      this.$emit('open-request-modal', modalData);\n    },\n    handleOpenUserModal(modalData) {\n      console.log('üîî AdminHeader: Request to open user modal:', modalData);\n\n      // Emit event to parent component (likely AdminUsers or main layout)\n      // to handle opening the user details modal\n      this.$emit('open-user-modal', modalData);\n    },\n    handleNotificationError(error) {\n      console.error('Notification error:', error);\n      this.$emit('error', error);\n    }\n  }\n};","map":{"version":3,"names":["AdminNotifications","name","components","props","userName","type","String","default","showUserDropdown","Boolean","sidebarCollapsed","activeMenu","emits","computed","displayUserName","adminData","$adminAuth","getAdminData","profile","first_name","last_name","username","displayUserRole","role","charAt","toUpperCase","slice","mounted","document","addEventListener","handleOutsideClick","beforeUnmount","removeEventListener","methods","getPageTitle","path","$route","routeTitles","meta","title","handleSidebarToggle","$emit","handleUserDropdownToggle","handleMenuAction","action","event","preventDefault","routes","route","$router","push","catch","err","console","error","handleLogout","target","closest","handleNewNotification","notification","log","handleNotificationClick","notificationData","data","JSON","parse","handleOpenRequestModal","modalData","handleOpenUserModal","handleNotificationError"],"sources":["D:\\brgy_docu_hub\\BOSFDR\\src\\components\\admin\\AdminHeader.vue"],"sourcesContent":["<template>\n  <header class=\"dashboard-header\" :class=\"{ 'sidebar-collapsed': sidebarCollapsed }\">\n    <div class=\"header-content\">\n      <!-- Left Section -->\n      <div class=\"header-left\">\n        <button class=\"sidebar-toggle\" @click=\"handleSidebarToggle\">\n          <i class=\"fas fa-bars\"></i>\n        </button>\n        <div class=\"page-title\">\n          <h1>{{ getPageTitle() }}</h1>\n        </div>\n      </div>\n\n      <!-- Header Actions -->\n      <div class=\"header-actions\">\n        <!-- Notifications -->\n        <AdminNotifications\n          @new-notification=\"handleNewNotification\"\n          @notification-click=\"handleNotificationClick\"\n          @open-request-modal=\"handleOpenRequestModal\"\n          @open-user-modal=\"handleOpenUserModal\"\n          @error=\"handleNotificationError\"\n        />\n\n        <!-- User Profile -->\n        <div class=\"user-dropdown\" :class=\"{ active: showUserDropdown }\">\n          <button class=\"user-btn\" @click=\"handleUserDropdownToggle\">\n            <div class=\"user-avatar\">\n              <i class=\"fas fa-user-circle\"></i>\n            </div>\n            <div class=\"user-info\">\n              <span class=\"user-name\">{{ displayUserName }}</span>\n              <span class=\"user-role\">{{ displayUserRole }}</span>\n            </div>\n            <!-- <i class=\"fas fa-chevron-down dropdown-arrow\"></i> -->\n          </button>\n\n          <div v-if=\"showUserDropdown\" class=\"dropdown-menu\">\n            <a href=\"#\" class=\"dropdown-item\" @click=\"handleMenuAction('profile', $event)\">\n              <i class=\"fas fa-user me-2\"></i>\n              My Profile\n            </a>\n            <a href=\"#\" class=\"dropdown-item\" @click=\"handleMenuAction('settings', $event)\">\n              <i class=\"fas fa-cog me-2\"></i>\n              Settings\n            </a>\n            <a href=\"#\" class=\"dropdown-item\" @click=\"handleMenuAction('account', $event)\">\n              <i class=\"fas fa-id-card me-2\"></i>\n              Account Info\n            </a>\n            <div class=\"dropdown-divider\"></div>\n            <a href=\"#\" class=\"dropdown-item\" @click=\"handleLogout($event)\">\n              <i class=\"fas fa-sign-out-alt me-2\"></i>\n              Logout\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  </header>\n</template>\n\n<script>\nimport AdminNotifications from './AdminNotifications.vue';\n\nexport default {\n  name: 'AdminHeader',\n  components: {\n    AdminNotifications\n  },\n  props: {\n    userName: {\n      type: String,\n      default: 'Admin'\n    },\n    showUserDropdown: {\n      type: Boolean,\n      default: false\n    },\n    sidebarCollapsed: {\n      type: Boolean,\n      default: false\n    },\n    activeMenu: {\n      type: String,\n      default: 'dashboard'\n    }\n  },\n\n  emits: [\n    'sidebar-toggle',\n    'user-dropdown-toggle',\n    'menu-action',\n    'logout',\n    'error',\n    'new-notification'\n  ],\n\n  computed: {\n    // Get display name from admin data or fallback to prop\n    displayUserName() {\n      const adminData = this.$adminAuth?.getAdminData();\n      if (adminData) {\n        // Check if user has profile data\n        if (adminData.profile && adminData.profile.first_name) {\n          return adminData.profile.last_name\n            ? `${adminData.profile.first_name} ${adminData.profile.last_name}`\n            : adminData.profile.first_name;\n        }\n        // Fallback to username\n        return adminData.username || this.userName;\n      }\n      return this.userName || 'Admin';\n    },\n\n    // Get display role from admin data\n    displayUserRole() {\n      const adminData = this.$adminAuth?.getAdminData();\n      if (adminData && adminData.role) {\n        return adminData.role.charAt(0).toUpperCase() + adminData.role.slice(1);\n      }\n      return 'Admin';\n    }\n  },\n\n\n\n  mounted() {\n    // Setup event listeners for outside clicks\n    document.addEventListener('click', this.handleOutsideClick);\n  },\n\n  beforeUnmount() {\n    // Clean up event listeners\n    document.removeEventListener('click', this.handleOutsideClick);\n  },\n\n  methods: {\n    // Get page title based on current route\n    getPageTitle() {\n      const path = this.$route.path;\n      const routeTitles = {\n        '/admin/dashboard': 'Admin Dashboard',\n        '/admin/users': 'User Management',\n        '/admin/requests': 'Document Requests',\n        '/admin/reports': 'Reports & Analytics',\n        '/admin/settings': 'System Settings',\n        '/admin/activity-logs': 'Activity Logs',\n        '/admin/audit-logs': 'Audit Logs',\n        '/admin/profile': 'Admin Profile'\n      };\n\n      // Use route-based title first, then fall back to activeMenu prop, then default\n      return routeTitles[path] || this.$route.meta?.title || 'Admin Dashboard';\n    },\n\n    // Handle sidebar toggle\n    handleSidebarToggle() {\n      this.$emit('sidebar-toggle');\n    },\n\n\n\n    // Handle user dropdown toggle\n    handleUserDropdownToggle() {\n      this.$emit('user-dropdown-toggle');\n    },\n\n    // Handle menu actions (profile, settings, etc.)\n    handleMenuAction(action, event) {\n      // Prevent default link behavior\n      if (event) {\n        event.preventDefault();\n      }\n\n      // Navigate to the appropriate route\n      const routes = {\n        'profile': '/admin/profile',\n        'settings': '/admin/settings',\n        'account': '/admin/profile' // Account info redirects to profile\n      };\n\n      const route = routes[action];\n      if (route && this.$route.path !== route) {\n        this.$router.push(route).catch(err => {\n          // Handle navigation errors gracefully\n          if (err.name !== 'NavigationDuplicated') {\n            console.error('Navigation error:', err);\n          }\n        });\n      }\n\n      // Close dropdown after navigation\n      if (this.showUserDropdown) {\n        this.$emit('user-dropdown-toggle');\n      }\n\n      // Still emit for parent components that need to track actions\n      this.$emit('menu-action', action);\n    },\n\n    // Handle logout\n    handleLogout(event) {\n      // Prevent default link behavior\n      if (event) {\n        event.preventDefault();\n      }\n      this.$emit('logout');\n    },\n\n\n\n    // Handle outside clicks to close dropdowns\n    handleOutsideClick(event) {\n      // Check if click is outside user dropdown\n      if (!event.target.closest('.user-dropdown')) {\n        if (this.showUserDropdown) {\n          this.$emit('user-dropdown-toggle');\n        }\n      }\n    },\n\n    // Notification handlers\n    handleNewNotification(notification) {\n      console.log('New notification received:', notification);\n      // Emit to parent component if needed\n      this.$emit('new-notification', notification);\n    },\n\n    async handleNotificationClick(notification) {\n      console.log('üîî AdminHeader: Notification clicked:', notification);\n\n      try {\n        // The AdminNotifications component now handles navigation internally,\n        // but we can add additional logic here if needed\n\n        // Parse notification data\n        const notificationData = typeof notification.data === 'string'\n          ? JSON.parse(notification.data)\n          : notification.data || {};\n\n        // Log navigation for debugging\n        console.log('üìä AdminHeader: Notification data:', notificationData);\n\n        // Additional header-specific logic can go here\n        // For example, updating header state, showing badges, etc.\n\n        // The navigation is now handled by the AdminNotifications component\n        // This handler can focus on header-specific updates\n\n      } catch (error) {\n        console.error('‚ùå AdminHeader: Error handling notification click:', error);\n      }\n\n      // Always emit the event for other components that might need it\n      this.$emit('notification-click', notification);\n    },\n\n    handleOpenRequestModal(modalData) {\n      console.log('üîî AdminHeader: Request to open modal:', modalData);\n\n      // Emit event to parent component (likely AdminRequests or main layout)\n      // to handle opening the request details modal\n      this.$emit('open-request-modal', modalData);\n    },\n\n    handleOpenUserModal(modalData) {\n      console.log('üîî AdminHeader: Request to open user modal:', modalData);\n\n      // Emit event to parent component (likely AdminUsers or main layout)\n      // to handle opening the user details modal\n      this.$emit('open-user-modal', modalData);\n    },\n\n    handleNotificationError(error) {\n      console.error('Notification error:', error);\n      this.$emit('error', error);\n    }\n  }\n};\n</script>\n\n<style scoped src=\"./css/adminHeader.css\"></style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}