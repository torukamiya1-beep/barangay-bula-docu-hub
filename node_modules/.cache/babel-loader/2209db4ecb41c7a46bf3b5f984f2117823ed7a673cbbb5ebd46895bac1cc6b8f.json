{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * User Data Composable\n * Manages user data state and operations following Vue 3 Composition API best practices\n * Implements Google's software engineering principles: single responsibility, error handling\n */\n\nimport { reactive, computed } from 'vue';\nimport unifiedAuthService from '@/services/unifiedAuthService';\nexport function useUserData() {\n  // Reactive state\n  const userData = reactive({\n    userName: 'User',\n    userEmail: 'user@example.com',\n    userAvatar: null,\n    firstName: 'User',\n    lastName: '',\n    middleName: '',\n    suffix: '',\n    profile: null,\n    isLoading: false,\n    error: null\n  });\n\n  // Computed properties\n  const fullName = computed(() => {\n    return userData.firstName && userData.lastName ? `${userData.firstName} ${userData.lastName}`.trim() : userData.firstName || userData.userName;\n  });\n  const initials = computed(() => {\n    if (userData.firstName && userData.lastName) {\n      return `${userData.firstName[0]}${userData.lastName[0]}`.toUpperCase();\n    }\n    return userData.userName ? userData.userName.substring(0, 2).toUpperCase() : 'U';\n  });\n  const isAuthenticated = computed(() => {\n    return userData.userName !== 'User' && userData.userEmail !== 'user@example.com';\n  });\n\n  // Methods\n  const loadUserData = async () => {\n    try {\n      userData.isLoading = true;\n      userData.error = null;\n      const currentUser = unifiedAuthService.getCurrentUser();\n\n      // Debug: Log current user data structure\n      console.log('useUserData - currentUser:', currentUser);\n      if (currentUser) {\n        console.log('useUserData - processing currentUser:', currentUser);\n\n        // Update basic user data\n        userData.userName = currentUser.username || 'User';\n        userData.userEmail = currentUser.email || 'user@example.com';\n        userData.userAvatar = currentUser.avatar || null;\n\n        // Handle profile data - the correct structure has a profile object\n        if (currentUser.profile) {\n          console.log('useUserData - found profile object:', currentUser.profile);\n          userData.firstName = currentUser.profile.first_name || '';\n          userData.lastName = currentUser.profile.last_name || '';\n          userData.middleName = currentUser.profile.middle_name || '';\n          userData.suffix = currentUser.profile.suffix || '';\n          userData.profile = currentUser.profile;\n        } else {\n          // Fallback if no profile object (shouldn't happen with current backend)\n          userData.firstName = currentUser.username || 'User';\n          userData.lastName = '';\n          userData.middleName = '';\n          userData.suffix = '';\n          userData.profile = null;\n        }\n        console.log('useUserData - final userData:', {\n          firstName: userData.firstName,\n          lastName: userData.lastName,\n          middleName: userData.middleName,\n          suffix: userData.suffix,\n          profile: userData.profile\n        });\n      } else {\n        // Handle case where no user is found\n        console.warn('No current user found');\n        resetUserData();\n      }\n    } catch (error) {\n      console.error('Error loading user data:', error);\n      userData.error = 'Failed to load user information';\n      resetUserData();\n    } finally {\n      userData.isLoading = false;\n    }\n  };\n  const resetUserData = () => {\n    userData.userName = 'User';\n    userData.userEmail = 'user@example.com';\n    userData.userAvatar = null;\n    userData.firstName = 'User';\n    userData.lastName = '';\n    userData.middleName = '';\n    userData.suffix = '';\n    userData.profile = null;\n    userData.error = null;\n  };\n  const updateUserData = newData => {\n    try {\n      Object.assign(userData, {\n        ...userData,\n        ...newData,\n        error: null\n      });\n    } catch (error) {\n      console.error('Error updating user data:', error);\n      userData.error = 'Failed to update user information';\n    }\n  };\n\n  // Validation helpers\n  const validateUserData = () => {\n    const errors = [];\n    if (!userData.userName || userData.userName.trim().length < 2) {\n      errors.push('Username must be at least 2 characters long');\n    }\n    if (!userData.userEmail || !isValidEmail(userData.userEmail)) {\n      errors.push('Valid email address is required');\n    }\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  };\n  const isValidEmail = email => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  };\n\n  // Return public API\n  return {\n    // State\n    userData,\n    // Computed\n    fullName,\n    initials,\n    isAuthenticated,\n    // Methods\n    loadUserData,\n    resetUserData,\n    updateUserData,\n    validateUserData\n  };\n}","map":{"version":3,"names":["reactive","computed","unifiedAuthService","useUserData","userData","userName","userEmail","userAvatar","firstName","lastName","middleName","suffix","profile","isLoading","error","fullName","trim","initials","toUpperCase","substring","isAuthenticated","loadUserData","currentUser","getCurrentUser","console","log","username","email","avatar","first_name","last_name","middle_name","warn","resetUserData","updateUserData","newData","Object","assign","validateUserData","errors","length","push","isValidEmail","isValid","emailRegex","test"],"sources":["D:/brgy_docu_hub/BOSFDR/src/composables/useUserData.js"],"sourcesContent":["/**\n * User Data Composable\n * Manages user data state and operations following Vue 3 Composition API best practices\n * Implements Google's software engineering principles: single responsibility, error handling\n */\n\nimport { reactive, computed } from 'vue'\nimport unifiedAuthService from '@/services/unifiedAuthService'\n\nexport function useUserData() {\n  // Reactive state\n  const userData = reactive({\n    userName: 'User',\n    userEmail: 'user@example.com',\n    userAvatar: null,\n    firstName: 'User',\n    lastName: '',\n    middleName: '',\n    suffix: '',\n    profile: null,\n    isLoading: false,\n    error: null\n  })\n\n  // Computed properties\n  const fullName = computed(() => {\n    return userData.firstName && userData.lastName \n      ? `${userData.firstName} ${userData.lastName}`.trim()\n      : userData.firstName || userData.userName\n  })\n\n  const initials = computed(() => {\n    if (userData.firstName && userData.lastName) {\n      return `${userData.firstName[0]}${userData.lastName[0]}`.toUpperCase()\n    }\n    return userData.userName ? userData.userName.substring(0, 2).toUpperCase() : 'U'\n  })\n\n  const isAuthenticated = computed(() => {\n    return userData.userName !== 'User' && userData.userEmail !== 'user@example.com'\n  })\n\n  // Methods\n  const loadUserData = async () => {\n    try {\n      userData.isLoading = true\n      userData.error = null\n\n      const currentUser = unifiedAuthService.getCurrentUser()\n\n      // Debug: Log current user data structure\n      console.log('useUserData - currentUser:', currentUser)\n\n      if (currentUser) {\n        console.log('useUserData - processing currentUser:', currentUser)\n\n        // Update basic user data\n        userData.userName = currentUser.username || 'User'\n        userData.userEmail = currentUser.email || 'user@example.com'\n        userData.userAvatar = currentUser.avatar || null\n\n        // Handle profile data - the correct structure has a profile object\n        if (currentUser.profile) {\n          console.log('useUserData - found profile object:', currentUser.profile)\n          userData.firstName = currentUser.profile.first_name || ''\n          userData.lastName = currentUser.profile.last_name || ''\n          userData.middleName = currentUser.profile.middle_name || ''\n          userData.suffix = currentUser.profile.suffix || ''\n          userData.profile = currentUser.profile\n        } else {\n          // Fallback if no profile object (shouldn't happen with current backend)\n          userData.firstName = currentUser.username || 'User'\n          userData.lastName = ''\n          userData.middleName = ''\n          userData.suffix = ''\n          userData.profile = null\n        }\n\n        console.log('useUserData - final userData:', {\n          firstName: userData.firstName,\n          lastName: userData.lastName,\n          middleName: userData.middleName,\n          suffix: userData.suffix,\n          profile: userData.profile\n        })\n      } else {\n        // Handle case where no user is found\n        console.warn('No current user found')\n        resetUserData()\n      }\n    } catch (error) {\n      console.error('Error loading user data:', error)\n      userData.error = 'Failed to load user information'\n      resetUserData()\n    } finally {\n      userData.isLoading = false\n    }\n  }\n\n  const resetUserData = () => {\n    userData.userName = 'User'\n    userData.userEmail = 'user@example.com'\n    userData.userAvatar = null\n    userData.firstName = 'User'\n    userData.lastName = ''\n    userData.middleName = ''\n    userData.suffix = ''\n    userData.profile = null\n    userData.error = null\n  }\n\n  const updateUserData = (newData) => {\n    try {\n      Object.assign(userData, {\n        ...userData,\n        ...newData,\n        error: null\n      })\n    } catch (error) {\n      console.error('Error updating user data:', error)\n      userData.error = 'Failed to update user information'\n    }\n  }\n\n  // Validation helpers\n  const validateUserData = () => {\n    const errors = []\n    \n    if (!userData.userName || userData.userName.trim().length < 2) {\n      errors.push('Username must be at least 2 characters long')\n    }\n    \n    if (!userData.userEmail || !isValidEmail(userData.userEmail)) {\n      errors.push('Valid email address is required')\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    }\n  }\n\n  const isValidEmail = (email) => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n    return emailRegex.test(email)\n  }\n\n  // Return public API\n  return {\n    // State\n    userData,\n    \n    // Computed\n    fullName,\n    initials,\n    isAuthenticated,\n    \n    // Methods\n    loadUserData,\n    resetUserData,\n    updateUserData,\n    validateUserData\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}