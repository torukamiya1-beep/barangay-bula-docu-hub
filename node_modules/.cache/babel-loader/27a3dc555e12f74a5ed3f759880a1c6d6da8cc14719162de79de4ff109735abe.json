{"ast":null,"code":"import api from './api';\n\n/**\n * Service for handling residency verification status\n */\nclass ResidencyVerificationService {\n  /**\n   * Get the current user's residency verification status\n   * @returns {Promise<Object>} Verification status information\n   */\n  async getResidencyVerificationStatus() {\n    try {\n      const response = await api.get('/residency/verification-status');\n      if (response.data.success) {\n        return {\n          success: true,\n          status: response.data.data.status,\n          // 'pending', 'approved', 'rejected'\n          canRequestDocuments: response.data.data.canRequestDocuments,\n          message: response.data.data.message,\n          documents: response.data.data.documents || []\n        };\n      } else {\n        return {\n          success: false,\n          status: 'unknown',\n          canRequestDocuments: false,\n          message: response.data.message || 'Failed to get verification status',\n          documents: []\n        };\n      }\n    } catch (error) {\n      console.error('Error getting residency verification status:', error);\n\n      // If there's an error, assume user needs to upload residency documents\n      return {\n        success: false,\n        status: 'no_documents',\n        canRequestDocuments: false,\n        message: 'Please upload residency documents for verification',\n        documents: []\n      };\n    }\n  }\n\n  /**\n   * Check if user can request documents based on residency verification\n   * @returns {Promise<boolean>} True if user can request documents\n   */\n  async canRequestDocuments() {\n    const status = await this.getResidencyVerificationStatus();\n    return status.canRequestDocuments;\n  }\n\n  /**\n   * Get user-friendly status message\n   * @returns {Promise<string>} Status message for display\n   */\n  async getStatusMessage() {\n    const status = await this.getResidencyVerificationStatus();\n    switch (status.status) {\n      case 'approved':\n        return 'Your residency has been verified. You can now request documents.';\n      case 'pending':\n        return 'Your residency documents are under review. You cannot request documents yet.';\n      case 'rejected':\n        return 'Your residency document is rejected.';\n      case 'no_documents':\n        return 'Please upload residency documents for verification before requesting documents.';\n      default:\n        return 'Unable to determine residency verification status.';\n    }\n  }\n\n  /**\n   * Get the CSS class for status display\n   * @returns {Promise<string>} CSS class name\n   */\n  async getStatusClass() {\n    const status = await this.getResidencyVerificationStatus();\n    switch (status.status) {\n      case 'approved':\n        return 'status-approved';\n      case 'pending':\n        return 'status-pending';\n      case 'rejected':\n        return 'status-rejected';\n      case 'no_documents':\n        return 'status-no-documents';\n      default:\n        return 'status-unknown';\n    }\n  }\n}\nexport default new ResidencyVerificationService();","map":{"version":3,"names":["api","ResidencyVerificationService","getResidencyVerificationStatus","response","get","data","success","status","canRequestDocuments","message","documents","error","console","getStatusMessage","getStatusClass"],"sources":["D:/brgy_docu_hub/BOSFDR/src/services/residencyVerificationService.js"],"sourcesContent":["import api from './api'\n\n/**\n * Service for handling residency verification status\n */\nclass ResidencyVerificationService {\n  /**\n   * Get the current user's residency verification status\n   * @returns {Promise<Object>} Verification status information\n   */\n  async getResidencyVerificationStatus() {\n    try {\n      const response = await api.get('/residency/verification-status')\n\n      if (response.data.success) {\n        return {\n          success: true,\n          status: response.data.data.status, // 'pending', 'approved', 'rejected'\n          canRequestDocuments: response.data.data.canRequestDocuments,\n          message: response.data.data.message,\n          documents: response.data.data.documents || []\n        };\n      } else {\n        return {\n          success: false,\n          status: 'unknown',\n          canRequestDocuments: false,\n          message: response.data.message || 'Failed to get verification status',\n          documents: []\n        };\n      }\n    } catch (error) {\n      console.error('Error getting residency verification status:', error)\n\n      // If there's an error, assume user needs to upload residency documents\n      return {\n        success: false,\n        status: 'no_documents',\n        canRequestDocuments: false,\n        message: 'Please upload residency documents for verification',\n        documents: []\n      };\n    }\n  }\n\n  /**\n   * Check if user can request documents based on residency verification\n   * @returns {Promise<boolean>} True if user can request documents\n   */\n  async canRequestDocuments() {\n    const status = await this.getResidencyVerificationStatus()\n    return status.canRequestDocuments\n  }\n\n  /**\n   * Get user-friendly status message\n   * @returns {Promise<string>} Status message for display\n   */\n  async getStatusMessage() {\n    const status = await this.getResidencyVerificationStatus()\n    \n    switch (status.status) {\n      case 'approved':\n        return 'Your residency has been verified. You can now request documents.'\n      case 'pending':\n        return 'Your residency documents are under review. You cannot request documents yet.'\n      case 'rejected':\n        return 'Your residency document is rejected.'\n      case 'no_documents':\n        return 'Please upload residency documents for verification before requesting documents.'\n      default:\n        return 'Unable to determine residency verification status.'\n    }\n  }\n\n  /**\n   * Get the CSS class for status display\n   * @returns {Promise<string>} CSS class name\n   */\n  async getStatusClass() {\n    const status = await this.getResidencyVerificationStatus()\n    \n    switch (status.status) {\n      case 'approved':\n        return 'status-approved'\n      case 'pending':\n        return 'status-pending'\n      case 'rejected':\n        return 'status-rejected'\n      case 'no_documents':\n        return 'status-no-documents'\n      default:\n        return 'status-unknown'\n    }\n  }\n}\n\nexport default new ResidencyVerificationService()\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;;AAEvB;AACA;AACA;AACA,MAAMC,4BAA4B,CAAC;EACjC;AACF;AACA;AACA;EACE,MAAMC,8BAA8BA,CAAA,EAAG;IACrC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,gCAAgC,CAAC;MAEhE,IAAID,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACzB,OAAO;UACLA,OAAO,EAAE,IAAI;UACbC,MAAM,EAAEJ,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACE,MAAM;UAAE;UACnCC,mBAAmB,EAAEL,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACG,mBAAmB;UAC3DC,OAAO,EAAEN,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACI,OAAO;UACnCC,SAAS,EAAEP,QAAQ,CAACE,IAAI,CAACA,IAAI,CAACK,SAAS,IAAI;QAC7C,CAAC;MACH,CAAC,MAAM;QACL,OAAO;UACLJ,OAAO,EAAE,KAAK;UACdC,MAAM,EAAE,SAAS;UACjBC,mBAAmB,EAAE,KAAK;UAC1BC,OAAO,EAAEN,QAAQ,CAACE,IAAI,CAACI,OAAO,IAAI,mCAAmC;UACrEC,SAAS,EAAE;QACb,CAAC;MACH;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;;MAEpE;MACA,OAAO;QACLL,OAAO,EAAE,KAAK;QACdC,MAAM,EAAE,cAAc;QACtBC,mBAAmB,EAAE,KAAK;QAC1BC,OAAO,EAAE,oDAAoD;QAC7DC,SAAS,EAAE;MACb,CAAC;IACH;EACF;;EAEA;AACF;AACA;AACA;EACE,MAAMF,mBAAmBA,CAAA,EAAG;IAC1B,MAAMD,MAAM,GAAG,MAAM,IAAI,CAACL,8BAA8B,CAAC,CAAC;IAC1D,OAAOK,MAAM,CAACC,mBAAmB;EACnC;;EAEA;AACF;AACA;AACA;EACE,MAAMK,gBAAgBA,CAAA,EAAG;IACvB,MAAMN,MAAM,GAAG,MAAM,IAAI,CAACL,8BAA8B,CAAC,CAAC;IAE1D,QAAQK,MAAM,CAACA,MAAM;MACnB,KAAK,UAAU;QACb,OAAO,kEAAkE;MAC3E,KAAK,SAAS;QACZ,OAAO,8EAA8E;MACvF,KAAK,UAAU;QACb,OAAO,sCAAsC;MAC/C,KAAK,cAAc;QACjB,OAAO,iFAAiF;MAC1F;QACE,OAAO,oDAAoD;IAC/D;EACF;;EAEA;AACF;AACA;AACA;EACE,MAAMO,cAAcA,CAAA,EAAG;IACrB,MAAMP,MAAM,GAAG,MAAM,IAAI,CAACL,8BAA8B,CAAC,CAAC;IAE1D,QAAQK,MAAM,CAACA,MAAM;MACnB,KAAK,UAAU;QACb,OAAO,iBAAiB;MAC1B,KAAK,SAAS;QACZ,OAAO,gBAAgB;MACzB,KAAK,UAAU;QACb,OAAO,iBAAiB;MAC1B,KAAK,cAAc;QACjB,OAAO,qBAAqB;MAC9B;QACE,OAAO,gBAAgB;IAC3B;EACF;AACF;AAEA,eAAe,IAAIN,4BAA4B,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}