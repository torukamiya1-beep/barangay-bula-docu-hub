{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, vModelSelect as _vModelSelect, withDirectives as _withDirectives, toDisplayString as _toDisplayString, vModelText as _vModelText, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, renderList as _renderList, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  class: \"admin-reports\"\n};\nconst _hoisted_2 = {\n  class: \"dashboard-container\"\n};\nconst _hoisted_3 = {\n  class: \"container-fluid py-4\"\n};\nconst _hoisted_4 = {\n  class: \"row mb-4\"\n};\nconst _hoisted_5 = {\n  class: \"col-12\"\n};\nconst _hoisted_6 = {\n  class: \"card shadow\"\n};\nconst _hoisted_7 = {\n  class: \"card-header\"\n};\nconst _hoisted_8 = {\n  class: \"row align-items-center\"\n};\nconst _hoisted_9 = {\n  class: \"col-md-6\"\n};\nconst _hoisted_10 = {\n  class: \"d-flex justify-content-end align-items-center gap-3\"\n};\nconst _hoisted_11 = {\n  class: \"d-flex align-items-center\"\n};\nconst _hoisted_12 = [\"disabled\"];\nconst _hoisted_13 = {\n  class: \"card-header border-top\"\n};\nconst _hoisted_14 = {\n  class: \"row\"\n};\nconst _hoisted_15 = {\n  class: \"col-md-3 mb-3\"\n};\nconst _hoisted_16 = {\n  key: 0,\n  class: \"col-md-3 mb-3\"\n};\nconst _hoisted_17 = [\"max\"];\nconst _hoisted_18 = {\n  key: 1,\n  class: \"col-md-3 mb-3\"\n};\nconst _hoisted_19 = [\"max\"];\nconst _hoisted_20 = {\n  key: 2,\n  class: \"col-md-3 mb-3\"\n};\nconst _hoisted_21 = [\"max\"];\nconst _hoisted_22 = {\n  class: \"col-md-3 mb-3 d-flex align-items-end\"\n};\nconst _hoisted_23 = [\"disabled\"];\nconst _hoisted_24 = {\n  class: \"card-body\"\n};\nconst _hoisted_25 = {\n  key: 0,\n  class: \"text-center py-4\"\n};\nconst _hoisted_26 = {\n  key: 1,\n  class: \"row\"\n};\nconst _hoisted_27 = {\n  class: \"col-lg-8 mb-4\"\n};\nconst _hoisted_28 = {\n  class: \"card h-100\"\n};\nconst _hoisted_29 = {\n  class: \"card-body\"\n};\nconst _hoisted_30 = {\n  style: {\n    \"height\": \"300px\"\n  }\n};\nconst _hoisted_31 = {\n  class: \"col-lg-6 mb-4\"\n};\nconst _hoisted_32 = {\n  class: \"card h-100\"\n};\nconst _hoisted_33 = {\n  class: \"card-body\"\n};\nconst _hoisted_34 = {\n  style: {\n    \"height\": \"300px\"\n  }\n};\nconst _hoisted_35 = {\n  class: \"col-12 mb-4\"\n};\nconst _hoisted_36 = {\n  class: \"card\"\n};\nconst _hoisted_37 = {\n  class: \"card-body\"\n};\nconst _hoisted_38 = {\n  class: \"table-responsive\"\n};\nconst _hoisted_39 = {\n  class: \"table table-hover\"\n};\nexport function render(_ctx, _cache) {\n  const _component_AdminHeader = _resolveComponent(\"AdminHeader\");\n  const _component_AdminSidebar = _resolveComponent(\"AdminSidebar\");\n  const _component_Bar = _resolveComponent(\"Bar\");\n  const _component_Doughnut = _resolveComponent(\"Doughnut\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_AdminHeader, {\n    userName: _ctx.adminData?.first_name || 'Admin',\n    notificationCount: _ctx.unreadNotifications,\n    showNotifications: _ctx.showNotifications,\n    showUserDropdown: _ctx.showUserDropdown,\n    sidebarCollapsed: _ctx.sidebarCollapsed,\n    activeMenu: _ctx.activeMenu,\n    onSidebarToggle: _ctx.handleSidebarToggle,\n    onNotificationToggle: _ctx.handleNotificationToggle,\n    onUserDropdownToggle: _ctx.handleUserDropdownToggle,\n    onMenuAction: _ctx.handleMenuAction,\n    onLogout: _ctx.handleLogout,\n    onViewAllNotifications: _ctx.handleViewAllNotifications\n  }, null, 8 /* PROPS */, [\"userName\", \"notificationCount\", \"showNotifications\", \"showUserDropdown\", \"sidebarCollapsed\", \"activeMenu\", \"onSidebarToggle\", \"onNotificationToggle\", \"onUserDropdownToggle\", \"onMenuAction\", \"onLogout\", \"onViewAllNotifications\"]), _createCommentVNode(\" Mobile Overlay \"), _createElementVNode(\"div\", {\n    class: _normalizeClass([\"mobile-overlay\", {\n      active: !_ctx.sidebarCollapsed && _ctx.isMobile\n    }]),\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.closeMobileSidebar && _ctx.closeMobileSidebar(...args))\n  }, null, 2 /* CLASS */), _createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_AdminSidebar, {\n    collapsed: _ctx.sidebarCollapsed,\n    activeMenu: _ctx.activeMenu,\n    onMenuChange: _ctx.handleMenuChange,\n    onLogout: _ctx.handleLogout,\n    onToggleSidebar: _ctx.handleSidebarToggle\n  }, null, 8 /* PROPS */, [\"collapsed\", \"activeMenu\", \"onMenuChange\", \"onLogout\", \"onToggleSidebar\"]), _createElementVNode(\"main\", {\n    class: _normalizeClass([\"main-content\", {\n      'sidebar-collapsed': _ctx.sidebarCollapsed\n    }])\n  }, [_createElementVNode(\"div\", _hoisted_3, [_createCommentVNode(\" Report Controls \"), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"div\", _hoisted_8, [_cache[11] || (_cache[11] = _createElementVNode(\"div\", {\n    class: \"col-md-6\"\n  }, [_createElementVNode(\"h5\", {\n    class: \"card-title mb-0\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-chart-line me-2\"\n  }), _createTextVNode(\" Analytics Reports \")])], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"div\", _hoisted_10, [_createCommentVNode(\" Period Selection \"), _createElementVNode(\"div\", _hoisted_11, [_cache[10] || (_cache[10] = _createElementVNode(\"label\", {\n    class: \"form-label mb-0 me-2\"\n  }, \"Period:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.selectedPeriod = $event),\n    onChange: _cache[2] || (_cache[2] = (...args) => _ctx.onPeriodChange && _ctx.onPeriodChange(...args)),\n    class: \"form-select form-select-sm\",\n    style: {\n      \"width\": \"auto\"\n    }\n  }, _cache[9] || (_cache[9] = [_createElementVNode(\"option\", {\n    value: \"day\"\n  }, \"Daily\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"week\"\n  }, \"Weekly\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"month\"\n  }, \"Monthly\", -1 /* HOISTED */)]), 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, _ctx.selectedPeriod]])]), _createCommentVNode(\" PDF Export Button \"), _createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn btn-danger btn-sm\",\n    onClick: _cache[3] || (_cache[3] = (...args) => _ctx.exportToPDF && _ctx.exportToPDF(...args)),\n    disabled: !_ctx.isPDFExportValid() || _ctx.pdfExportForm.loading\n  }, [_createElementVNode(\"i\", {\n    class: _normalizeClass([\"fas fa-file-pdf me-1\", {\n      'fa-spin': _ctx.pdfExportForm.loading\n    }])\n  }, null, 2 /* CLASS */), _createTextVNode(\" \" + _toDisplayString(_ctx.pdfExportForm.loading ? 'Generating...' : 'Export PDF'), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_12)])])])]), _createCommentVNode(\" PDF Export Configuration \"), _createElementVNode(\"div\", _hoisted_13, [_cache[17] || (_cache[17] = _createElementVNode(\"h6\", {\n    class: \"mb-3\"\n  }, [_createElementVNode(\"i\", {\n    class: \"fas fa-file-pdf text-danger me-2\"\n  }), _createTextVNode(\" PDF Export Configuration \")], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"div\", _hoisted_15, [_cache[13] || (_cache[13] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Report Type\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-select\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => _ctx.pdfExportForm.reportType = $event)\n  }, _cache[12] || (_cache[12] = [_createElementVNode(\"option\", {\n    value: \"daily\"\n  }, \"Daily Report\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"weekly\"\n  }, \"Weekly Report\", -1 /* HOISTED */), _createElementVNode(\"option\", {\n    value: \"monthly\"\n  }, \"Monthly Report\", -1 /* HOISTED */)]), 512 /* NEED_PATCH */), [[_vModelSelect, _ctx.pdfExportForm.reportType]])]), _ctx.pdfExportForm.reportType === 'daily' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_16, [_cache[14] || (_cache[14] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Select Date\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    class: \"form-control\",\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => _ctx.pdfExportForm.selectedDate = $event),\n    max: _ctx.getCurrentDate()\n  }, null, 8 /* PROPS */, _hoisted_17), [[_vModelText, _ctx.pdfExportForm.selectedDate]])])) : _createCommentVNode(\"v-if\", true), _ctx.pdfExportForm.reportType === 'weekly' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_18, [_cache[15] || (_cache[15] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Select Week\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"week\",\n    class: \"form-control\",\n    \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => _ctx.pdfExportForm.selectedWeek = $event),\n    max: _ctx.getCurrentWeek()\n  }, null, 8 /* PROPS */, _hoisted_19), [[_vModelText, _ctx.pdfExportForm.selectedWeek]])])) : _createCommentVNode(\"v-if\", true), _ctx.pdfExportForm.reportType === 'monthly' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_20, [_cache[16] || (_cache[16] = _createElementVNode(\"label\", {\n    class: \"form-label\"\n  }, \"Select Month\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"month\",\n    class: \"form-control\",\n    \"onUpdate:modelValue\": _cache[7] || (_cache[7] = $event => _ctx.pdfExportForm.selectedMonth = $event),\n    max: _ctx.getCurrentMonth()\n  }, null, 8 /* PROPS */, _hoisted_21), [[_vModelText, _ctx.pdfExportForm.selectedMonth]])])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_22, [_createElementVNode(\"button\", {\n    class: \"btn btn-danger\",\n    onClick: _cache[8] || (_cache[8] = (...args) => _ctx.exportToPDF && _ctx.exportToPDF(...args)),\n    disabled: !_ctx.isPDFExportValid() || _ctx.pdfExportForm.loading\n  }, [_createElementVNode(\"i\", {\n    class: _normalizeClass([\"fas fa-file-pdf me-1\", {\n      'fa-spin': _ctx.pdfExportForm.loading\n    }])\n  }, null, 2 /* CLASS */), _createTextVNode(\" \" + _toDisplayString(_ctx.pdfExportForm.loading ? 'Generating...' : 'Export PDF'), 1 /* TEXT */)], 8 /* PROPS */, _hoisted_23)])])]), _createElementVNode(\"div\", _hoisted_24, [_ctx.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_25, _cache[18] || (_cache[18] = [_createElementVNode(\"div\", {\n    class: \"spinner-border text-primary\",\n    role: \"status\"\n  }, [_createElementVNode(\"span\", {\n    class: \"visually-hidden\"\n  }, \"Loading...\")], -1 /* HOISTED */)]))) : _ctx.analyticsData ? (_openBlock(), _createElementBlock(\"div\", _hoisted_26, [_createCommentVNode(\" Request Trends Chart \"), _createElementVNode(\"div\", _hoisted_27, [_createElementVNode(\"div\", _hoisted_28, [_createElementVNode(\"div\", _hoisted_29, [_createElementVNode(\"div\", _hoisted_30, [_ctx.trendsChartData ? (_openBlock(), _createBlock(_component_Bar, {\n    key: 0,\n    data: _ctx.trendsChartData,\n    options: _ctx.chartOptions\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])) : _createCommentVNode(\"v-if\", true)])])])]), _createCommentVNode(\" Status Distribution \"), _createElementVNode(\"div\", _hoisted_31, [_createElementVNode(\"div\", _hoisted_32, [_cache[19] || (_cache[19] = _createElementVNode(\"div\", {\n    class: \"card-header\"\n  }, [_createElementVNode(\"h6\", {\n    class: \"card-title mb-0\"\n  }, \"Status Distribution\")], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_33, [_createElementVNode(\"div\", _hoisted_34, [_ctx.statusDistributionChartData ? (_openBlock(), _createBlock(_component_Doughnut, {\n    key: 0,\n    data: _ctx.statusDistributionChartData,\n    options: _ctx.chartOptions\n  }, null, 8 /* PROPS */, [\"data\", \"options\"])) : _createCommentVNode(\"v-if\", true)])])])]), _createCommentVNode(\" Top Clients \"), _createElementVNode(\"div\", _hoisted_35, [_createElementVNode(\"div\", _hoisted_36, [_cache[21] || (_cache[21] = _createElementVNode(\"div\", {\n    class: \"card-header\"\n  }, [_createElementVNode(\"h6\", {\n    class: \"card-title mb-0\"\n  }, \"Clients\")], -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_37, [_createElementVNode(\"div\", _hoisted_38, [_createElementVNode(\"table\", _hoisted_39, [_cache[20] || (_cache[20] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Client Name\"), _createElementVNode(\"th\", null, \"Total Requests\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.analyticsData.topClients, client => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: client.client_name\n    }, [_createElementVNode(\"td\", null, _toDisplayString(client.client_name), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(client.request_count), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])])])])])])) : _createCommentVNode(\"v-if\", true)])])])])])], 2 /* CLASS */)])]);\n}","map":{"version":3,"names":["class","style","_createElementBlock","_hoisted_1","_createVNode","_component_AdminHeader","userName","_ctx","adminData","first_name","notificationCount","unreadNotifications","showNotifications","showUserDropdown","sidebarCollapsed","activeMenu","onSidebarToggle","handleSidebarToggle","onNotificationToggle","handleNotificationToggle","onUserDropdownToggle","handleUserDropdownToggle","onMenuAction","handleMenuAction","onLogout","handleLogout","onViewAllNotifications","handleViewAllNotifications","_createCommentVNode","_createElementVNode","_normalizeClass","active","isMobile","onClick","_cache","args","closeMobileSidebar","_hoisted_2","_component_AdminSidebar","collapsed","onMenuChange","handleMenuChange","onToggleSidebar","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","selectedPeriod","$event","onChange","onPeriodChange","value","type","exportToPDF","disabled","isPDFExportValid","pdfExportForm","loading","_toDisplayString","_hoisted_13","_hoisted_14","_hoisted_15","reportType","_hoisted_16","selectedDate","max","getCurrentDate","_hoisted_18","selectedWeek","getCurrentWeek","_hoisted_20","selectedMonth","getCurrentMonth","_hoisted_22","_hoisted_24","_hoisted_25","role","analyticsData","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","trendsChartData","_createBlock","_component_Bar","data","options","chartOptions","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","statusDistributionChartData","_component_Doughnut","_hoisted_35","_hoisted_36","_hoisted_37","_hoisted_38","_hoisted_39","_Fragment","_renderList","topClients","client","key","client_name","request_count"],"sources":["D:\\brgy_docu_hub\\BOSFDR\\src\\components\\admin\\AdminReports.vue"],"sourcesContent":["<template>\n  <div class=\"admin-reports\">\n    <AdminHeader\n      :userName=\"adminData?.first_name || 'Admin'\"\n      :notificationCount=\"unreadNotifications\"\n      :showNotifications=\"showNotifications\"\n      :showUserDropdown=\"showUserDropdown\"\n      :sidebarCollapsed=\"sidebarCollapsed\"\n      :activeMenu=\"activeMenu\"\n      @sidebar-toggle=\"handleSidebarToggle\"\n      @notification-toggle=\"handleNotificationToggle\"\n      @user-dropdown-toggle=\"handleUserDropdownToggle\"\n      @menu-action=\"handleMenuAction\"\n      @logout=\"handleLogout\"\n      @view-all-notifications=\"handleViewAllNotifications\"\n    />\n\n    <!-- Mobile Overlay -->\n    <div\n      class=\"mobile-overlay\"\n      :class=\"{ active: !sidebarCollapsed && isMobile }\"\n      @click=\"closeMobileSidebar\"\n    ></div>\n\n    <div class=\"dashboard-container\">\n      <AdminSidebar\n        :collapsed=\"sidebarCollapsed\"\n        :activeMenu=\"activeMenu\"\n        @menu-change=\"handleMenuChange\"\n        @logout=\"handleLogout\"\n        @toggle-sidebar=\"handleSidebarToggle\"\n      />\n\n      <main class=\"main-content\" :class=\"{ 'sidebar-collapsed': sidebarCollapsed }\">\n        <div class=\"container-fluid py-4\">\n          <!-- Report Controls -->\n          <div class=\"row mb-4\">\n            <div class=\"col-12\">\n              <div class=\"card shadow\">\n                <div class=\"card-header\">\n                  <div class=\"row align-items-center\">\n                    <div class=\"col-md-6\">\n                      <h5 class=\"card-title mb-0\">\n                        <i class=\"fas fa-chart-line me-2\"></i>\n                        Analytics Reports\n                      </h5>\n                    </div>\n                    <div class=\"col-md-6\">\n                      <div class=\"d-flex justify-content-end align-items-center gap-3\">\n                        <!-- Period Selection -->\n                        <div class=\"d-flex align-items-center\">\n                          <label class=\"form-label mb-0 me-2\">Period:</label>\n                          <select\n                            v-model=\"selectedPeriod\"\n                            @change=\"onPeriodChange\"\n                            class=\"form-select form-select-sm\"\n                            style=\"width: auto;\"\n                          >\n                            <option value=\"day\">Daily</option>\n                            <option value=\"week\">Weekly</option>\n                            <option value=\"month\">Monthly</option>\n                          </select>\n                        </div>\n\n                        <!-- PDF Export Button -->\n                        <button\n                          type=\"button\"\n                          class=\"btn btn-danger btn-sm\"\n                          @click=\"exportToPDF\"\n                          :disabled=\"!isPDFExportValid() || pdfExportForm.loading\"\n                        >\n                          <i class=\"fas fa-file-pdf me-1\" :class=\"{ 'fa-spin': pdfExportForm.loading }\"></i>\n                          {{ pdfExportForm.loading ? 'Generating...' : 'Export PDF' }}\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <!-- PDF Export Configuration -->\n                <div class=\"card-header border-top\">\n                  <h6 class=\"mb-3\">\n                    <i class=\"fas fa-file-pdf text-danger me-2\"></i>\n                    PDF Export Configuration\n                  </h6>\n\n                  <div class=\"row\">\n                    <div class=\"col-md-3 mb-3\">\n                      <label class=\"form-label\">Report Type</label>\n                      <select class=\"form-select\" v-model=\"pdfExportForm.reportType\">\n                        <option value=\"daily\">Daily Report</option>\n                        <option value=\"weekly\">Weekly Report</option>\n                        <option value=\"monthly\">Monthly Report</option>\n                      </select>\n                    </div>\n                    <div class=\"col-md-3 mb-3\" v-if=\"pdfExportForm.reportType === 'daily'\">\n                      <label class=\"form-label\">Select Date</label>\n                      <input\n                        type=\"date\"\n                        class=\"form-control\"\n                        v-model=\"pdfExportForm.selectedDate\"\n                        :max=\"getCurrentDate()\"\n                      >\n                    </div>\n                    <div class=\"col-md-3 mb-3\" v-if=\"pdfExportForm.reportType === 'weekly'\">\n                      <label class=\"form-label\">Select Week</label>\n                      <input\n                        type=\"week\"\n                        class=\"form-control\"\n                        v-model=\"pdfExportForm.selectedWeek\"\n                        :max=\"getCurrentWeek()\"\n                      >\n                    </div>\n                    <div class=\"col-md-3 mb-3\" v-if=\"pdfExportForm.reportType === 'monthly'\">\n                      <label class=\"form-label\">Select Month</label>\n                      <input\n                        type=\"month\"\n                        class=\"form-control\"\n                        v-model=\"pdfExportForm.selectedMonth\"\n                        :max=\"getCurrentMonth()\"\n                      >\n                    </div>\n                    <div class=\"col-md-3 mb-3 d-flex align-items-end\">\n                      <button\n                        class=\"btn btn-danger\"\n                        @click=\"exportToPDF\"\n                        :disabled=\"!isPDFExportValid() || pdfExportForm.loading\"\n                      >\n                        <i class=\"fas fa-file-pdf me-1\" :class=\"{ 'fa-spin': pdfExportForm.loading }\"></i>\n                        {{ pdfExportForm.loading ? 'Generating...' : 'Export PDF' }}\n                      </button>\n                    </div>\n                  </div>\n                </div>\n\n                <div class=\"card-body\">\n                  <div v-if=\"loading\" class=\"text-center py-4\">\n                    <div class=\"spinner-border text-primary\" role=\"status\">\n                      <span class=\"visually-hidden\">Loading...</span>\n                    </div>\n                  </div>\n\n                  <div v-else-if=\"analyticsData\" class=\"row\">\n                    <!-- Request Trends Chart -->\n                    <div class=\"col-lg-8 mb-4\">\n                      <div class=\"card h-100\">\n                        <div class=\"card-body\">\n                          <div style=\"height: 300px;\">\n                            <Bar\n                              v-if=\"trendsChartData\"\n                              :data=\"trendsChartData\"\n                              :options=\"chartOptions\"\n                            />\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    <!-- Status Distribution -->\n                    <div class=\"col-lg-6 mb-4\">\n                      <div class=\"card h-100\">\n                        <div class=\"card-header\">\n                          <h6 class=\"card-title mb-0\">Status Distribution</h6>\n                        </div>\n                        <div class=\"card-body\">\n                          <div style=\"height: 300px;\">\n                            <Doughnut\n                              v-if=\"statusDistributionChartData\"\n                              :data=\"statusDistributionChartData\"\n                              :options=\"chartOptions\"\n                            />\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    <!-- Top Clients -->\n                    <div class=\"col-12 mb-4\">\n                      <div class=\"card\">\n                        <div class=\"card-header\">\n                          <h6 class=\"card-title mb-0\">Clients</h6>\n                        </div>\n                        <div class=\"card-body\">\n                          <div class=\"table-responsive\">\n                            <table class=\"table table-hover\">\n                              <thead>\n                                <tr>\n                                  <th>Client Name</th>\n                                  <th>Total Requests</th>\n                                </tr>\n                              </thead>\n                              <tbody>\n                                <tr v-for=\"client in analyticsData.topClients\" :key=\"client.client_name\">\n                                  <td>{{ client.client_name }}</td>\n                                  <td>{{ client.request_count }}</td>\n                                </tr>\n                              </tbody>\n                            </table>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n        </div>\n      </main>\n    </div>\n  </div>\n</template>\n\n<script>\nimport AdminHeader from './AdminHeader.vue';\nimport AdminSidebar from './AdminSidebar.vue';\nimport adminDocumentService from '../../services/adminDocumentService';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, ArcElement, LineElement, PointElement } from 'chart.js';\nimport { Bar, Doughnut } from 'vue-chartjs';\n\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend, ArcElement, LineElement, PointElement);\nimport unifiedAuthService from '@/services/unifiedAuthService';\nimport { jsPDF } from 'jspdf';\n// Import jspdf-autotable plugin - v5.x uses named export\nimport autoTable from 'jspdf-autotable';\n\n// Verify autoTable plugin is loaded at module level\nconsole.log('📦 Module loading - jsPDF autoTable check (v5.x):', {\n  jsPDFAvailable: typeof jsPDF !== 'undefined',\n  jsPDFVersion: jsPDF.version || 'unknown',\n  autoTableAvailable: typeof autoTable === 'function',\n  autoTableOnPrototype: jsPDF.prototype && typeof jsPDF.prototype.autoTable === 'function'\n});\n\nexport default {\n  name: 'AdminReports',\n  components: {\n    AdminHeader,\n    AdminSidebar,\n    Bar,\n    Doughnut\n  },\n\n  data() {\n    return {\n      // UI State\n      sidebarCollapsed: false,\n      showUserDropdown: false,\n      isMobile: false,\n      adminData: null,\n      // Component Data\n      loading: false,\n      analyticsData: null,\n      selectedPeriod: 'month',\n      reportFilters: {\n        reportType: 'daily',\n        date_from: '',\n        date_to: '',\n        format: 'json'\n      },\n      chartOptions: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: 'top',\n          },\n          title: {\n            display: true,\n            text: 'Document Request Analytics'\n          }\n        }\n      },\n\n      // PDF Export Form (copied from RequestHistory.vue)\n      pdfExportForm: {\n        reportType: 'daily',\n        selectedDate: '',\n        selectedWeek: '',\n        selectedMonth: '',\n        loading: false\n      }\n    };\n  },\n\n  computed: {\n    activeMenu() {\n      const path = this.$route.path;\n      if (path.includes('/admin/users')) return 'users';\n      if (path.includes('/admin/requests')) return 'requests';\n      if (path.includes('/admin/reports')) return 'reports';\n      if (path.includes('/admin/settings')) return 'settings';\n      if (path.includes('/admin/activity-logs')) return 'activity';\n      if (path.includes('/admin/profile')) return 'profile';\n      return 'dashboard';\n    },\n    trendsChartData() {\n      if (!this.analyticsData?.trends) return null;\n\n      return {\n        labels: this.analyticsData.trends.map(item => item.period),\n        datasets: [\n          {\n            label: 'Completed Requests',\n            backgroundColor: '#28a745',\n            data: this.analyticsData.trends.map(item => item.completed_requests)\n          },\n          {\n            label: 'Rejected Requests',\n            backgroundColor: '#dc3545',\n            data: this.analyticsData.trends.map(item => item.rejected_requests)\n          },\n          {\n            label: 'Cancelled Requests',\n            backgroundColor: '#6c757d',\n            data: this.analyticsData.trends.map(item => item.cancelled_requests || 0)\n          }\n        ]\n      };\n    },\n    documentTypesChartData() {\n      if (!this.analyticsData?.documentTypes) return null;\n\n      return {\n        labels: this.analyticsData.documentTypes.map(item => item.type_name),\n        datasets: [{\n          data: this.analyticsData.documentTypes.map(item => item.request_count),\n          backgroundColor: [\n            '#007bff',\n            '#28a745',\n            '#ffc107',\n            '#dc3545',\n            '#6f42c1',\n            '#fd7e14'\n          ]\n        }]\n      };\n    },\n    statusDistributionChartData() {\n      if (!this.analyticsData?.statusDistribution) return null;\n\n      return {\n        labels: this.analyticsData.statusDistribution.map(item => item.status_name),\n        datasets: [{\n          data: this.analyticsData.statusDistribution.map(item => item.percentage),\n          backgroundColor: [\n            '#ffc107', // Pending\n            '#17a2b8', // Under Review\n            '#007bff', // Processing\n            '#28a745', // Completed\n            '#dc3545', // Rejected\n            '#6c757d', // Cancelled\n            '#fd7e14', // Ready for Pickup\n            '#20c997', // Additional Info Required\n            '#e83e8c'  // Other\n          ]\n        }]\n      };\n    },\n    revenueChartData() {\n      if (!this.analyticsData?.trends) return null;\n\n      return {\n        labels: this.analyticsData.trends.map(item => item.period),\n        datasets: [{\n          label: 'Revenue (₱)',\n          borderColor: '#28a745',\n          backgroundColor: 'rgba(40, 167, 69, 0.1)',\n          data: this.analyticsData.trends.map(item => parseFloat(item.total_revenue || 0))\n        }]\n      };\n    }\n  },\n\n  async mounted() {\n    // Check authentication\n    if (!unifiedAuthService.isLoggedIn() || unifiedAuthService.getUserType() !== 'admin') {\n      this.$router.push('/login');\n      return;\n    }\n\n    // Ensure jsPDF autoTable plugin is available\n    this.ensureAutoTablePlugin();\n\n    // Initialize UI state\n    this.initializeUI();\n\n    // Load component data\n    await this.loadAdminProfile();\n    await this.loadAnalyticsData();\n    this.setDefaultDateRange();\n\n    // Initialize PDF export form with default values\n    this.initializePDFExportForm();\n  },\n\n  beforeUnmount() {\n    if (this.handleResize) {\n      window.removeEventListener('resize', this.handleResize);\n    }\n  },\n\n\n\n  methods: {\n    // Initialize UI state\n    initializeUI() {\n      this.isMobile = window.innerWidth <= 768;\n\n      if (!this.isMobile) {\n        const saved = localStorage.getItem('adminSidebarCollapsed');\n        this.sidebarCollapsed = saved ? JSON.parse(saved) : false;\n      } else {\n        this.sidebarCollapsed = true;\n      }\n\n      this.handleResize = () => {\n        const wasMobile = this.isMobile;\n        this.isMobile = window.innerWidth <= 768;\n\n        if (this.isMobile && !wasMobile) {\n          this.sidebarCollapsed = true;\n        } else if (!this.isMobile && wasMobile) {\n          const saved = localStorage.getItem('adminSidebarCollapsed');\n          this.sidebarCollapsed = saved ? JSON.parse(saved) : false;\n        }\n      };\n      window.addEventListener('resize', this.handleResize);\n    },\n\n    handleSidebarToggle() {\n      this.sidebarCollapsed = !this.sidebarCollapsed;\n      localStorage.setItem('adminSidebarCollapsed', JSON.stringify(this.sidebarCollapsed));\n    },\n\n    handleMenuChange(menu) {\n      const routes = {\n        'dashboard': '/admin/dashboard',\n        'users': '/admin/users',\n        'requests': '/admin/requests',\n        'reports': '/admin/reports',\n        'settings': '/admin/settings',\n        'activity': '/admin/activity-logs',\n        'profile': '/admin/profile'\n      };\n\n      if (this.isMobile) {\n        this.sidebarCollapsed = true;\n      }\n\n      if (routes[menu]) {\n        this.$router.push(routes[menu]);\n      }\n    },\n\n    handleUserDropdownToggle() {\n      this.showUserDropdown = !this.showUserDropdown;\n    },\n\n    handleMenuAction(action) {\n      if (action === 'profile') {\n        this.$router.push('/admin/profile');\n      } else if (action === 'settings') {\n        this.$router.push('/admin/settings');\n      }\n      this.showUserDropdown = false;\n    },\n\n    closeMobileSidebar() {\n      if (this.isMobile) {\n        this.sidebarCollapsed = true;\n      }\n    },\n\n    handleLogout() {\n      unifiedAuthService.logout();\n      this.$router.push('/login');\n    },\n\n    async loadAdminProfile() {\n      try {\n        const user = unifiedAuthService.getCurrentUser();\n        if (user && user.profile) {\n          this.adminData = user.profile;\n        } else {\n          this.adminData = {\n            first_name: user?.username || 'Admin',\n            role: user?.role || 'admin'\n          };\n        }\n      } catch (error) {\n        console.error('Failed to load admin profile:', error);\n        const user = unifiedAuthService.getCurrentUser();\n        this.adminData = {\n          first_name: user?.username || 'Admin',\n          role: user?.role || 'admin'\n        };\n      }\n    },\n\n    setDefaultDateRange() {\n      const today = new Date();\n      const lastMonth = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());\n\n      this.reportFilters.date_to = today.toISOString().split('T')[0];\n      this.reportFilters.date_from = lastMonth.toISOString().split('T')[0];\n    },\n\n    async loadAnalyticsData() {\n      try {\n        this.loading = true;\n        const response = await adminDocumentService.getAnalyticsData(this.selectedPeriod);\n        this.analyticsData = response.data;\n      } catch (error) {\n        console.error('Failed to load analytics data:', error);\n        this.$toast.error('Failed to load analytics data');\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    async onPeriodChange() {\n      await this.loadAnalyticsData();\n    },\n\n    async generateReport() {\n      try {\n        this.loading = true;\n        const response = await adminDocumentService.generateReport(\n          this.reportFilters.reportType,\n          this.reportFilters\n        );\n\n        if (this.reportFilters.format === 'csv') {\n          // CSV download is handled by the service\n          this.$toast.success('Report downloaded successfully');\n        } else {\n          // Display JSON data (could open in modal or new tab)\n          console.log('Report data:', response.data);\n          this.$toast.success('Report generated successfully');\n        }\n      } catch (error) {\n        console.error('Failed to generate report:', error);\n        this.$toast.error('Failed to generate report');\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    async downloadReport() {\n      try {\n        this.loading = true;\n        await adminDocumentService.downloadReport(\n          this.reportFilters.reportType,\n          this.reportFilters\n        );\n        this.$toast.success('Report downloaded successfully');\n      } catch (error) {\n        console.error('Failed to download report:', error);\n        this.$toast.error('Failed to download report');\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    // PDF Export functionality (copied from RequestHistory.vue)\n    async exportToPDF() {\n      if (!this.isPDFExportValid()) {\n        this.$toast.error('Please select a valid date range for the report');\n        return;\n      }\n\n      try {\n        this.pdfExportForm.loading = true;\n\n        // Get filtered data based on report type\n        const reportData = await this.getReportData();\n\n        if (!reportData || !Array.isArray(reportData) || reportData.length === 0) {\n          this.$toast.warning('No data found for the selected date range');\n          return;\n        }\n\n        // Generate PDF\n        const pdf = new jsPDF();\n\n        // Debug: Check autoTable availability\n        console.log('🔧 PDF Debug Info:', {\n          autoTableAvailable: typeof autoTable === 'function',\n          reportDataLength: reportData.length,\n          sampleData: reportData.length > 0 ? reportData[0] : null\n        });\n\n        // Verify autoTable is available\n        if (typeof autoTable !== 'function') {\n          console.error('❌ autoTable function not available!');\n\n          // Safe toast notification with fallback\n          if (this.$toast && this.$toast.error) {\n            this.$toast.error('PDF table plugin failed to load. Please refresh the page.');\n          } else {\n            alert('PDF table plugin failed to load. Please refresh the page.');\n          }\n          return;\n        }\n\n        console.log('✅ autoTable function is available');\n\n        this.generatePDFReport(pdf, reportData);\n\n        // Download PDF\n        const filename = this.getPDFFilename();\n        pdf.save(filename);\n\n        // Check if toast is available before using it\n        if (this.$toast && this.$toast.success) {\n          this.$toast.success('PDF report generated successfully');\n        } else {\n          console.log('✅ PDF report generated successfully');\n        }\n      } catch (error) {\n        console.error('Failed to generate PDF report:', error);\n\n        // Safe toast notification with fallback\n        if (this.$toast && this.$toast.error) {\n          this.$toast.error('Failed to generate PDF report');\n        } else {\n          alert('Failed to generate PDF report. Check console for details.');\n        }\n      } finally {\n        this.pdfExportForm.loading = false;\n      }\n    },\n\n    // Get client requests data for the selected period\n    async getClientRequestsData() {\n      try {\n        // Calculate date range based on selected period\n        const dateRange = this.getDateRangeForPeriod();\n\n        const response = await adminDocumentService.getAllRequests({\n          date_from: dateRange.from,\n          date_to: dateRange.to,\n          page: 1,\n          limit: 1000 // Get all data for the report\n        });\n\n        if (response.success && response.data.requests) {\n          return response.data.requests;\n        }\n\n        return [];\n      } catch (error) {\n        console.error('Failed to fetch client requests data:', error);\n        return [];\n      }\n    },\n\n    // Get date range based on selected period\n    getDateRangeForPeriod() {\n      const today = new Date();\n      let fromDate;\n\n      switch (this.selectedPeriod) {\n        case 'day':\n          fromDate = new Date(today.getTime() - (30 * 24 * 60 * 60 * 1000)); // Last 30 days\n          break;\n        case 'week':\n          fromDate = new Date(today.getTime() - (12 * 7 * 24 * 60 * 60 * 1000)); // Last 12 weeks\n          break;\n        case 'month':\n        default:\n          fromDate = new Date(today.getTime() - (12 * 30 * 24 * 60 * 60 * 1000)); // Last 12 months\n          break;\n      }\n\n      return {\n        from: fromDate.toISOString().split('T')[0],\n        to: today.toISOString().split('T')[0]\n      };\n    },\n\n    // Generate PDF content for analytics report\n    generateAnalyticsPDF(pdf, clientRequestsData = []) {\n      // Document Header\n      pdf.setFontSize(20);\n      pdf.setFont('helvetica', 'bold');\n      pdf.setTextColor(44, 62, 80);\n      pdf.text('BARANGAY ANALYTICS REPORT', 105, 25, { align: 'center' });\n\n      // Decorative line\n      pdf.setDrawColor(52, 152, 219);\n      pdf.setLineWidth(1);\n      pdf.line(20, 30, 190, 30);\n\n      // Report metadata\n      pdf.setFontSize(12);\n      pdf.setFont('helvetica', 'normal');\n      pdf.setTextColor(0, 0, 0);\n\n      const periodText = this.selectedPeriod.charAt(0).toUpperCase() + this.selectedPeriod.slice(1);\n      const generatedDate = new Date().toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n\n      pdf.text(`Report Period: ${periodText}`, 20, 45);\n      pdf.text(`Generated: ${generatedDate}`, 20, 55);\n\n      let yPosition = 75;\n\n      // Request Trends Section\n      if (this.analyticsData.trends && this.analyticsData.trends.length > 0) {\n        pdf.setFontSize(16);\n        pdf.setFont('helvetica', 'bold');\n        pdf.setTextColor(52, 152, 219);\n        pdf.text('REQUEST TRENDS', 20, yPosition);\n        yPosition += 15;\n\n        // Prepare trends data for table\n        const trendsHeaders = ['Period', 'Total Requests', 'Completed', 'Pending', 'Revenue (₱)'];\n        const trendsData = this.analyticsData.trends.map(trend => [\n          trend.period || 'N/A',\n          trend.total_requests || '0',\n          trend.completed_requests || '0',\n          trend.pending_requests || '0',\n          this.formatCurrency(trend.total_revenue || 0)\n        ]);\n\n        // Add trends table\n        pdf.autoTable({\n          head: [trendsHeaders],\n          body: trendsData,\n          startY: yPosition,\n          theme: 'grid',\n          headStyles: {\n            fillColor: [52, 152, 219],\n            textColor: 255,\n            fontStyle: 'bold'\n          },\n          styles: {\n            fontSize: 10,\n            cellPadding: 4\n          },\n          columnStyles: {\n            0: { cellWidth: 40 },\n            1: { cellWidth: 30, halign: 'center' },\n            2: { cellWidth: 30, halign: 'center' },\n            3: { cellWidth: 30, halign: 'center' },\n            4: { cellWidth: 40, halign: 'right' }\n          }\n        });\n\n        yPosition = pdf.lastAutoTable.finalY + 20;\n      }\n\n      // Status Distribution Section\n      if (this.analyticsData.statusDistribution && this.analyticsData.statusDistribution.length > 0) {\n        // Check if we need a new page\n        if (yPosition > 200) {\n          pdf.addPage();\n          yPosition = 20;\n        }\n\n        pdf.setFontSize(16);\n        pdf.setFont('helvetica', 'bold');\n        pdf.setTextColor(52, 152, 219);\n        pdf.text('STATUS DISTRIBUTION', 20, yPosition);\n        yPosition += 15;\n\n        // Prepare status distribution data for table\n        const statusHeaders = ['Status', 'Count', 'Percentage'];\n        const totalRequests = this.analyticsData.statusDistribution.reduce((sum, status) => sum + (parseInt(status.count) || 0), 0);\n\n        const statusData = this.analyticsData.statusDistribution.map(status => {\n          const count = parseInt(status.count) || 0;\n          const percentage = totalRequests > 0 ? ((count / totalRequests) * 100).toFixed(1) + '%' : '0%';\n          return [\n            status.status_name || 'Unknown',\n            count.toString(),\n            percentage\n          ];\n        });\n\n        // Add status distribution table\n        pdf.autoTable({\n          head: [statusHeaders],\n          body: statusData,\n          startY: yPosition,\n          theme: 'grid',\n          headStyles: {\n            fillColor: [52, 152, 219],\n            textColor: 255,\n            fontStyle: 'bold'\n          },\n          styles: {\n            fontSize: 10,\n            cellPadding: 4\n          },\n          columnStyles: {\n            0: { cellWidth: 80 },\n            1: { cellWidth: 40, halign: 'center' },\n            2: { cellWidth: 40, halign: 'center' }\n          }\n        });\n\n        yPosition = pdf.lastAutoTable.finalY + 20;\n      }\n\n      // Top Clients Section\n      if (this.analyticsData.topClients && this.analyticsData.topClients.length > 0) {\n        // Check if we need a new page\n        if (yPosition > 200) {\n          pdf.addPage();\n          yPosition = 20;\n        }\n\n        pdf.setFontSize(16);\n        pdf.setFont('helvetica', 'bold');\n        pdf.setTextColor(52, 152, 219);\n        pdf.text('TOP CLIENTS', 20, yPosition);\n        yPosition += 15;\n\n        // Prepare top clients data for table\n        const clientsHeaders = ['Client Name', 'Email', 'Total Requests', 'Total Spent (₱)'];\n        const clientsData = this.analyticsData.topClients.map(client => [\n          client.client_name || 'N/A',\n          client.email || 'N/A',\n          client.request_count || '0',\n          this.formatCurrency(client.total_spent || 0)\n        ]);\n\n        // Add top clients table\n        pdf.autoTable({\n          head: [clientsHeaders],\n          body: clientsData,\n          startY: yPosition,\n          theme: 'grid',\n          headStyles: {\n            fillColor: [52, 152, 219],\n            textColor: 255,\n            fontStyle: 'bold'\n          },\n          styles: {\n            fontSize: 10,\n            cellPadding: 4\n          },\n          columnStyles: {\n            0: { cellWidth: 60 },\n            1: { cellWidth: 60 },\n            2: { cellWidth: 30, halign: 'center' },\n            3: { cellWidth: 40, halign: 'right' }\n          }\n        });\n      }\n\n      // Client Requests Section\n      if (clientRequestsData && clientRequestsData.length > 0) {\n        // Check if we need a new page\n        if (yPosition > 150) {\n          pdf.addPage();\n          yPosition = 20;\n        }\n\n        pdf.setFontSize(16);\n        pdf.setFont('helvetica', 'bold');\n        pdf.setTextColor(52, 152, 219);\n        pdf.text('CLIENT REQUESTS', 20, yPosition);\n        yPosition += 15;\n\n        // Prepare client requests data for table\n        const requestsHeaders = ['Request #', 'Client Name', 'Document Type', 'Status', 'Amount (₱)', 'Date'];\n        const requestsData = clientRequestsData.slice(0, 50).map(request => [ // Limit to 50 requests to avoid huge PDFs\n          request.request_number || 'N/A',\n          this.getClientFullName(request) || 'N/A',\n          request.document_type || 'N/A',\n          this.formatStatus(request.status_name) || 'N/A',\n          this.formatCurrency(request.total_document_fee || request.total_fee || 0),\n          this.formatDate(request.requested_at) || 'N/A'\n        ]);\n\n        // Add client requests table\n        pdf.autoTable({\n          head: [requestsHeaders],\n          body: requestsData,\n          startY: yPosition,\n          theme: 'grid',\n          headStyles: {\n            fillColor: [52, 152, 219],\n            textColor: 255,\n            fontStyle: 'bold'\n          },\n          styles: {\n            fontSize: 9,\n            cellPadding: 3\n          },\n          columnStyles: {\n            0: { cellWidth: 25 },\n            1: { cellWidth: 40 },\n            2: { cellWidth: 35 },\n            3: { cellWidth: 25 },\n            4: { cellWidth: 25, halign: 'right' },\n            5: { cellWidth: 25, halign: 'center' }\n          }\n        });\n\n        // Add note if there are more requests\n        if (clientRequestsData.length > 50) {\n          const finalY = pdf.lastAutoTable.finalY + 10;\n          pdf.setFontSize(10);\n          pdf.setFont('helvetica', 'italic');\n          pdf.setTextColor(100, 100, 100);\n          pdf.text(`Note: Showing first 50 of ${clientRequestsData.length} total requests for this period.`, 20, finalY);\n        }\n      }\n\n      // Add footer\n      this.addAnalyticsPDFFooter(pdf);\n    },\n\n    // Add professional footer to analytics PDF\n    addAnalyticsPDFFooter(pdf) {\n      const pageCount = pdf.internal.getNumberOfPages();\n\n      for (let i = 1; i <= pageCount; i++) {\n        pdf.setPage(i);\n\n        // Footer line\n        pdf.setDrawColor(200, 200, 200);\n        pdf.setLineWidth(0.5);\n        pdf.line(20, 280, 190, 280);\n\n        // Footer text\n        pdf.setFontSize(9);\n        pdf.setFont('helvetica', 'normal');\n        pdf.setTextColor(100, 100, 100);\n\n        // Left side - Generated info\n        const generatedDate = new Date().toLocaleDateString('en-US', {\n          year: 'numeric',\n          month: 'long',\n          day: 'numeric',\n          hour: '2-digit',\n          minute: '2-digit'\n        });\n        pdf.text(`Generated on: ${generatedDate}`, 20, 285);\n\n        // Right side - Page number\n        pdf.text(`Page ${i} of ${pageCount}`, 190, 285, { align: 'right' });\n      }\n    },\n\n    // Format currency for display\n    formatCurrency(amount) {\n      const numAmount = parseFloat(amount) || 0;\n      return `₱${numAmount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n    },\n\n    // Helper methods for formatting data in PDF\n    getClientFullName(request) {\n      if (request.client_name) return request.client_name;\n\n      const firstName = request.client_first_name || request.first_name || '';\n      const lastName = request.client_last_name || request.last_name || '';\n\n      return `${firstName} ${lastName}`.trim() || 'N/A';\n    },\n\n    formatStatus(status) {\n      if (!status) return 'N/A';\n\n      // Capitalize first letter of each word\n      return status.toLowerCase().replace(/\\b\\w/g, l => l.toUpperCase());\n    },\n\n    formatDate(dateString) {\n      if (!dateString) return 'N/A';\n\n      try {\n        const date = new Date(dateString);\n        return date.toLocaleDateString('en-US', {\n          year: 'numeric',\n          month: 'short',\n          day: 'numeric'\n        });\n      } catch (error) {\n        return 'N/A';\n      }\n    },\n\n    // Generate PDF report content (copied from RequestHistory.vue)\n    generatePDFReport(pdf, data) {\n      const dateRange = this.getDateRangeForReport();\n\n      // Document Header with improved styling\n      pdf.setFontSize(24);\n      pdf.setFont('helvetica', 'bold');\n      pdf.setTextColor(44, 62, 80);\n      pdf.text('BARANGAY BULA', 105, 25, { align: 'center' });\n\n      pdf.setFontSize(18);\n      pdf.setTextColor(52, 152, 219);\n      pdf.text('DOCUMENT MANAGEMENT SYSTEM', 105, 35, { align: 'center' });\n\n      // Decorative line\n      pdf.setDrawColor(52, 152, 219);\n      pdf.setLineWidth(1);\n      pdf.line(20, 40, 190, 40);\n\n      // Report title\n      pdf.setFontSize(16);\n      pdf.setFont('helvetica', 'bold');\n      pdf.setTextColor(44, 62, 80);\n      const reportTitle = this.getReportTitle();\n      pdf.text(reportTitle, 20, 55);\n\n      // Date range with improved formatting\n      pdf.setFontSize(11);\n      pdf.setFont('helvetica', 'normal');\n      const dateRangeText = this.getDateRangeText(dateRange);\n      pdf.text(`Report Period: ${dateRangeText}`, 20, 65);\n\n      // Generated date\n      const generatedDate = new Date().toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n      pdf.text(`Generated on: ${generatedDate}`, 20, 75);\n\n      // Summary statistics\n      const stats = this.calculateReportStats(data);\n      pdf.setFontSize(12);\n      pdf.setFont('helvetica', 'bold');\n      pdf.text('REPORT SUMMARY', 20, 90);\n\n      pdf.setFontSize(10);\n      pdf.setFont('helvetica', 'normal');\n      pdf.text(`Total Requests: ${stats.total}`, 20, 100);\n      pdf.text(`Completed: ${stats.completed}`, 20, 110);\n      pdf.text(`Pending: ${stats.pending}`, 20, 120);\n      pdf.text(`Rejected: ${stats.rejected}`, 20, 130);\n      pdf.text(`Total Revenue: ${this.formatCurrencyForPDF(stats.totalRevenue)}`, 20, 140);\n\n      // Requests table\n      if (data && data.length > 0) {\n        const tableData = data.slice(0, 100).map(request => [\n          request.request_number || 'N/A',\n          this.getClientFullName(request) || 'N/A',\n          this.getBeneficiaryName(request) || 'N/A',\n          this.getPickupPersonName(request) || 'N/A',\n          request.document_type || 'N/A',\n          this.formatStatus(request.status_name) || 'N/A',\n          this.formatCurrencyForPDF(request.total_document_fee || request.total_fee || 0),\n          this.formatDate(request.requested_at) || 'N/A'\n        ]);\n\n        // Use autoTable function (v5.x syntax)\n        try {\n          console.log('🔧 Calling autoTable function');\n          autoTable(pdf, {\n            head: [['Request #', 'Client Name', 'Beneficiary', 'Pickup Person', 'Document Type', 'Status', 'Amount', 'Date']],\n            body: tableData,\n            startY: 155,\n            theme: 'grid',\n            headStyles: {\n              fillColor: [52, 152, 219],\n              textColor: 255,\n              fontStyle: 'bold',\n              fontSize: 8\n            },\n            styles: {\n              fontSize: 7,\n              cellPadding: 3,\n              overflow: 'linebreak',\n              cellWidth: 'wrap'\n            },\n            columnStyles: {\n              0: { cellWidth: 20 },                    // Request #\n              1: { cellWidth: 25, overflow: 'linebreak' },  // Client Name (wrappable)\n              2: { cellWidth: 25, overflow: 'linebreak' },  // Beneficiary (wrappable)\n              3: { cellWidth: 22, overflow: 'linebreak' },  // Pickup Person (wrappable)\n              4: { cellWidth: 22 },                    // Document Type\n              5: { cellWidth: 18 },                    // Status\n              6: { cellWidth: 20, halign: 'right' },   // Amount\n              7: { cellWidth: 18, halign: 'center' }   // Date\n            }\n          });\n          console.log('✅ AutoTable completed successfully');\n        } catch (autoTableError) {\n          console.error('❌ AutoTable call failed:', autoTableError);\n          throw new Error(`AutoTable failed: ${autoTableError.message}`);\n        }\n\n          pdf.setFontSize(10);\n          pdf.setFont('helvetica', 'normal');\n          pdf.text(`Total requests found: ${tableData.length}`, 20, 170);\n\n          // Show first few requests in text format\n          let yPos = 185;\n          const maxRequests = Math.min(5, tableData.length);\n\n          for (let i = 0; i < maxRequests; i++) {\n            const row = tableData[i];\n            pdf.text(`${i + 1}. ${row[0]} - ${row[1]} (${row[2]}) - ${row[6]}`, 20, yPos);\n            yPos += 15;\n\n            if (yPos > 260) break; // Prevent overflow\n          }\n\n          if (tableData.length > maxRequests) {\n            pdf.text(`... and ${tableData.length - maxRequests} more requests`, 20, yPos + 10);\n          }\n\n          console.warn('jsPDF autoTable plugin not available, using enhanced fallback display');\n        }\n      }\n\n      // Add footer\n      this.addAnalyticsPDFFooter(pdf);\n    },\n\n    // Calculate report statistics (copied from RequestHistory.vue)\n    calculateReportStats(data) {\n      if (!data || !Array.isArray(data) || data.length === 0) {\n        return {\n          total: 0,\n          completed: 0,\n          pending: 0,\n          rejected: 0,\n          totalRevenue: 0\n        };\n      }\n\n      const stats = {\n        total: data.length,\n        completed: 0,\n        pending: 0,\n        rejected: 0,\n        totalRevenue: 0\n      };\n\n      data.forEach(request => {\n        const status = (request.status_name || '').toLowerCase();\n\n        if (status === 'completed') {\n          stats.completed++;\n          const fee = parseFloat(request.total_document_fee || request.total_fee || 0);\n          stats.totalRevenue += fee;\n        } else if (status === 'rejected' || status === 'cancelled') {\n          stats.rejected++;\n        } else {\n          stats.pending++;\n        }\n      });\n\n      return stats;\n    },\n\n    formatCurrencyForPDF(amount) {\n      const numAmount = parseFloat(amount) || 0;\n      return `PHP ${numAmount.toLocaleString('en-US', {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n      })}`;\n    },\n\n    // Get beneficiary name for third-party requests\n    getBeneficiaryName(request) {\n      console.log('🔍 getBeneficiaryName called with:', {\n        is_third_party_request: request.is_third_party_request,\n        beneficiary_name: request.beneficiary_name,\n        beneficiary: request.beneficiary\n      });\n\n      if (!request.is_third_party_request) {\n        return 'Self';\n      }\n\n      // Try different possible field names for beneficiary\n      if (request.beneficiary_name) {\n        return request.beneficiary_name;\n      }\n\n      if (request.beneficiary && request.beneficiary.full_name) {\n        return request.beneficiary.full_name;\n      }\n\n      if (request.beneficiary) {\n        const firstName = request.beneficiary.first_name || '';\n        const lastName = request.beneficiary.last_name || '';\n        const fullName = `${firstName} ${lastName}`.trim();\n        if (fullName) return fullName;\n      }\n\n      return 'N/A';\n    },\n\n    // Get pickup person name\n    getPickupPersonName(request) {\n      console.log('🔍 getPickupPersonName called with:', {\n        pickup_person_name: request.pickup_person_name,\n        authorized_pickup: request.authorized_pickup\n      });\n\n      // Check for pickup person name field\n      if (request.pickup_person_name) {\n        return request.pickup_person_name;\n      }\n\n      // Check for authorized pickup object\n      if (request.authorized_pickup && request.authorized_pickup.full_name) {\n        return request.authorized_pickup.full_name;\n      }\n\n      // Default to client pickup\n      return 'Client';\n    },\n\n    // Ensure jsPDF autoTable plugin is available (v5.x uses function export)\n    ensureAutoTablePlugin() {\n      try {\n        if (typeof autoTable === 'function') {\n          console.log('✅ jsPDF autoTable function is available (v5.x)');\n          return true;\n        } else {\n          console.error('❌ autoTable function not available');\n          return false;\n        }\n      } catch (error) {\n        console.error('❌ Error checking autoTable plugin:', error);\n        return false;\n      }\n    },\n\n    // Initialize PDF export form with default values (copied from RequestHistory.vue)\n    initializePDFExportForm() {\n      // Set default date to today\n      this.pdfExportForm.selectedDate = this.getCurrentDate();\n\n      // Set default week to current week\n      this.pdfExportForm.selectedWeek = this.getCurrentWeek();\n\n      // Set default month to current month\n      this.pdfExportForm.selectedMonth = this.getCurrentMonth();\n    },\n\n    // Get report data based on selected filters (copied from RequestHistory.vue)\n    async getReportData() {\n      const reportFilters = {\n        status: '', // Get all statuses\n        document_type: '',\n        priority: '',\n        search: ''\n      };\n\n      // Set date range based on report type\n      const dateRange = this.getDateRangeForReport();\n      reportFilters.date_from = dateRange.from;\n      reportFilters.date_to = dateRange.to;\n\n      try {\n        console.log('📊 Fetching report data with filters:', reportFilters);\n        console.log('📊 Date range details:', {\n          reportType: this.pdfExportForm.reportType,\n          selectedDate: this.pdfExportForm.selectedDate,\n          selectedWeek: this.pdfExportForm.selectedWeek,\n          selectedMonth: this.pdfExportForm.selectedMonth,\n          calculatedRange: dateRange\n        });\n        const response = await adminDocumentService.getAllRequests({\n          ...reportFilters,\n          page: 1,\n          limit: 1000 // Get all data for the report\n        });\n\n        if (response.success && response.data && response.data.requests) {\n          console.log(`📊 Retrieved ${response.data.requests.length} requests for report`);\n\n          // Debug: Log sample request data to check fields\n          if (response.data.requests.length > 0) {\n            console.log('📊 Sample request data:', response.data.requests[0]);\n            console.log('📊 Available fields:', Object.keys(response.data.requests[0]));\n            console.log('📊 Beneficiary fields check:', {\n              is_third_party_request: response.data.requests[0].is_third_party_request,\n              beneficiary_name: response.data.requests[0].beneficiary_name,\n              pickup_person_name: response.data.requests[0].pickup_person_name\n            });\n          }\n\n          return response.data.requests;\n        } else {\n          console.warn('📊 No data returned from API');\n          return [];\n        }\n      } catch (error) {\n        console.error('📊 Failed to fetch report data:', error);\n        throw error;\n      }\n    },\n\n    // Get date range based on report type and selected values (copied from RequestHistory.vue)\n    getDateRangeForReport() {\n      const { reportType, selectedDate, selectedWeek, selectedMonth } = this.pdfExportForm;\n\n      switch (reportType) {\n        case 'daily':\n          return {\n            from: selectedDate,\n            to: selectedDate\n          };\n\n        case 'weekly':\n          if (selectedWeek) {\n            const [year, week] = selectedWeek.split('-W');\n            const startDate = this.getDateFromWeek(parseInt(year), parseInt(week));\n            const endDate = new Date(startDate);\n            endDate.setDate(startDate.getDate() + 6);\n\n            return {\n              from: startDate.toISOString().split('T')[0],\n              to: endDate.toISOString().split('T')[0]\n            };\n          }\n          break;\n\n        case 'monthly':\n          if (selectedMonth) {\n            const [year, month] = selectedMonth.split('-');\n            const startDate = new Date(parseInt(year), parseInt(month) - 1, 1);\n            const endDate = new Date(parseInt(year), parseInt(month), 0);\n\n            return {\n              from: startDate.toISOString().split('T')[0],\n              to: endDate.toISOString().split('T')[0]\n            };\n          }\n          break;\n      }\n\n      // Fallback to today\n      const today = new Date().toISOString().split('T')[0];\n      return { from: today, to: today };\n    },\n\n    // Helper methods for PDF export (copied from RequestHistory.vue)\n    isPDFExportValid() {\n      const { reportType, selectedDate, selectedWeek, selectedMonth } = this.pdfExportForm;\n\n      switch (reportType) {\n        case 'daily':\n          return selectedDate !== '';\n        case 'weekly':\n          return selectedWeek !== '';\n        case 'monthly':\n          return selectedMonth !== '';\n        default:\n          return false;\n      }\n    },\n\n    getPDFFilename() {\n      const { reportType, selectedDate, selectedWeek, selectedMonth } = this.pdfExportForm;\n      const timestamp = new Date().toISOString().split('T')[0];\n\n      switch (reportType) {\n        case 'daily':\n          return `daily_report_${selectedDate}_${timestamp}.pdf`;\n        case 'weekly':\n          return `weekly_report_${selectedWeek}_${timestamp}.pdf`;\n        case 'monthly':\n          return `monthly_report_${selectedMonth}_${timestamp}.pdf`;\n        default:\n          return `report_${timestamp}.pdf`;\n      }\n    },\n\n    getReportTitle() {\n      const { reportType } = this.pdfExportForm;\n\n      switch (reportType) {\n        case 'daily':\n          return 'Daily Document Request Report';\n        case 'weekly':\n          return 'Weekly Document Request Report';\n        case 'monthly':\n          return 'Monthly Document Request Report';\n        default:\n          return 'Document Request Report';\n      }\n    },\n\n    getDateRangeText(dateRange) {\n      if (dateRange.from === dateRange.to) {\n        return this.formatDate(dateRange.from);\n      }\n      return `${this.formatDate(dateRange.from)} to ${this.formatDate(dateRange.to)}`;\n    },\n\n    // Helper methods for date handling (copied from RequestHistory.vue)\n    getCurrentDate() {\n      return new Date().toISOString().split('T')[0];\n    },\n\n    getCurrentWeek() {\n      const now = new Date();\n      const year = now.getFullYear();\n      const week = this.getWeekNumber(now);\n      return `${year}-W${week.toString().padStart(2, '0')}`;\n    },\n\n    getCurrentMonth() {\n      const now = new Date();\n      const year = now.getFullYear();\n      const month = (now.getMonth() + 1).toString().padStart(2, '0');\n      return `${year}-${month}`;\n    },\n\n    getWeekNumber(date) {\n      const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n      const dayNum = d.getUTCDay() || 7;\n      d.setUTCDate(d.getUTCDate() + 4 - dayNum);\n      const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));\n      return Math.ceil((((d - yearStart) / 86400000) + 1) / 7);\n    },\n\n    getDateFromWeek(year, week) {\n      const simple = new Date(year, 0, 1 + (week - 1) * 7);\n      const dow = simple.getDay();\n      const ISOweekStart = simple;\n      if (dow <= 4) {\n        ISOweekStart.setDate(simple.getDate() - simple.getDay() + 1);\n      } else {\n        ISOweekStart.setDate(simple.getDate() + 8 - simple.getDay());\n      }\n      return ISOweekStart;\n    }\n  }\n};\n</script>\n\n<style scoped>\n@import './css/adminDashboard.css';\n\n/* Report card styles */\n.report-card {\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.report-card:hover {\n  transform: translateY(-3px);\n  box-shadow: 0 0.5rem 2rem 0 rgba(58, 59, 69, 0.3);\n}\n\n.report-card:active {\n  transform: translateY(-1px);\n}\n\n/* Icon circle for reports */\n.icon-circle {\n  width: 3rem;\n  height: 3rem;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.2rem;\n}\n\n/* Table improvements */\n.table-sm th,\n.table-sm td {\n  padding: 0.5rem;\n  font-size: 0.875rem;\n}\n\n/* Form improvements */\n.form-control-sm,\n.form-select-sm {\n  font-size: 0.875rem;\n}\n\n/* Badge improvements */\n.badge {\n  font-size: 0.75rem;\n  padding: 0.375rem 0.75rem;\n}\n\n/* Responsive improvements */\n@media (max-width: 768px) {\n  .report-card .card-body {\n    padding: 1rem;\n  }\n\n  .icon-circle {\n    width: 2.5rem;\n    height: 2.5rem;\n    font-size: 1rem;\n  }\n\n  .btn-group {\n    flex-direction: column;\n  }\n\n  .btn-group .btn {\n    border-radius: 0.375rem !important;\n    margin-bottom: 0.25rem;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}