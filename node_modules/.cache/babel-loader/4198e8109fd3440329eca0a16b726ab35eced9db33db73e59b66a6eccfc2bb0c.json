{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport addressService from '@/services/addressService';\nexport default {\n  name: 'AddressSelector',\n  props: {\n    // Initial values\n    initialRegion: {\n      type: String,\n      default: ''\n    },\n    initialProvince: {\n      type: String,\n      default: ''\n    },\n    initialCity: {\n      type: String,\n      default: ''\n    },\n    initialBarangay: {\n      type: String,\n      default: ''\n    },\n    // Custom validation errors\n    validationErrors: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    return {\n      // Selected values - set to default General Santos City values\n      selectedRegion: this.initialRegion || '12',\n      selectedProvince: this.initialProvince || '1263',\n      selectedCity: this.initialCity || '126303',\n      selectedBarangay: this.initialBarangay || '126303005',\n      // Data arrays\n      regions: [],\n      provinces: [],\n      cities: [],\n      barangays: [],\n      // Loading states\n      loading: {\n        regions: false,\n        provinces: false,\n        cities: false,\n        barangays: false\n      },\n      // Errors\n      errors: {},\n      generalError: '',\n      // Hide dropdowns flag\n      hideDropdowns: true\n    };\n  },\n  computed: {\n    // Generate unique IDs for form elements\n    regionId() {\n      return `region-${this._uid}`;\n    },\n    provinceId() {\n      return `province-${this._uid}`;\n    },\n    cityId() {\n      return `city-${this._uid}`;\n    },\n    barangayId() {\n      return `barangay-${this._uid}`;\n    }\n  },\n  watch: {\n    // Watch for external validation errors\n    validationErrors: {\n      handler(newErrors) {\n        this.errors = {\n          ...newErrors\n        };\n      },\n      deep: true\n    }\n  },\n  async mounted() {\n    await this.loadRegions();\n\n    // Load default address data for General Santos City\n    if (this.hideDropdowns) {\n      await this.loadProvinces('12'); // Region XII\n      await this.loadCities('1263'); // South Cotabato\n      await this.loadBarangays('126303'); // General Santos City\n\n      // Emit the default address data\n      this.emitChange();\n    } else {\n      // Load initial data if provided\n      if (this.initialRegion) {\n        await this.loadProvinces(this.initialRegion);\n        if (this.initialProvince) {\n          await this.loadCities(this.initialProvince);\n          if (this.initialCity) {\n            await this.loadBarangays(this.initialCity);\n          }\n        }\n      }\n    }\n  },\n  methods: {\n    // Load regions\n    async loadRegions() {\n      this.loading.regions = true;\n      this.generalError = '';\n      try {\n        const response = await addressService.getRegions();\n        // Handle both direct array and API response format\n        this.regions = Array.isArray(response) ? response : response.data || [];\n        console.log('Loaded regions:', this.regions.length, 'items');\n      } catch (error) {\n        this.generalError = 'Failed to load regions. Please try again.';\n        console.error('Error loading regions:', error);\n        this.regions = [];\n      } finally {\n        this.loading.regions = false;\n      }\n    },\n    // Load provinces by region\n    async loadProvinces(regionCode) {\n      this.loading.provinces = true;\n      this.provinces = [];\n      this.cities = [];\n      this.barangays = [];\n      try {\n        const response = await addressService.getProvincesByRegion(regionCode);\n        this.provinces = Array.isArray(response) ? response : response.data || [];\n        console.log('Loaded provinces:', this.provinces.length, 'items for region', regionCode);\n      } catch (error) {\n        this.generalError = 'Failed to load provinces. Please try again.';\n        console.error('Error loading provinces:', error);\n        this.provinces = [];\n      } finally {\n        this.loading.provinces = false;\n      }\n    },\n    // Load cities by province\n    async loadCities(provinceCode) {\n      this.loading.cities = true;\n      this.cities = [];\n      this.barangays = [];\n      try {\n        const response = await addressService.getCitiesByProvince(provinceCode);\n        this.cities = Array.isArray(response) ? response : response.data || [];\n        console.log('Loaded cities:', this.cities.length, 'items for province', provinceCode);\n      } catch (error) {\n        this.generalError = 'Failed to load cities. Please try again.';\n        console.error('Error loading cities:', error);\n        this.cities = [];\n      } finally {\n        this.loading.cities = false;\n      }\n    },\n    // Load barangays by city\n    async loadBarangays(cityCode) {\n      this.loading.barangays = true;\n      this.barangays = [];\n      try {\n        const response = await addressService.getBarangaysByCity(cityCode);\n        this.barangays = Array.isArray(response) ? response : response.data || [];\n        console.log('Loaded barangays:', this.barangays.length, 'items for city', cityCode);\n      } catch (error) {\n        this.generalError = 'Failed to load barangays. Please try again.';\n        console.error('Error loading barangays:', error);\n        this.barangays = [];\n      } finally {\n        this.loading.barangays = false;\n      }\n    },\n    // Event handlers\n    async onRegionChange() {\n      this.clearError('region');\n      this.selectedProvince = '';\n      this.selectedCity = '';\n      this.selectedBarangay = '';\n      if (this.selectedRegion) {\n        await this.loadProvinces(this.selectedRegion);\n      }\n      this.emitChange();\n    },\n    async onProvinceChange() {\n      this.clearError('province');\n      this.selectedCity = '';\n      this.selectedBarangay = '';\n      if (this.selectedProvince) {\n        await this.loadCities(this.selectedProvince);\n      }\n      this.emitChange();\n    },\n    async onCityChange() {\n      this.clearError('city');\n      this.selectedBarangay = '';\n      if (this.selectedCity) {\n        await this.loadBarangays(this.selectedCity);\n      }\n      this.emitChange();\n    },\n    onBarangayChange() {\n      this.clearError('barangay');\n      this.emitChange();\n    },\n    // Helper text methods\n    getProvinceOptionText() {\n      if (!this.selectedRegion) return 'Select region first';\n      if (this.loading.provinces) return 'Loading provinces...';\n      return 'Select Province';\n    },\n    getCityOptionText() {\n      if (!this.selectedProvince) return 'Select province first';\n      if (this.loading.cities) return 'Loading cities...';\n      return 'Select City/Municipality';\n    },\n    getBarangayOptionText() {\n      if (!this.selectedCity) return 'Select city first';\n      if (this.loading.barangays) return 'Loading barangays...';\n      return 'Select Barangay';\n    },\n    // Emit change event\n    emitChange() {\n      const addressData = {\n        region: {\n          code: this.selectedRegion,\n          name: Array.isArray(this.regions) ? this.regions.find(r => r.region_code === this.selectedRegion)?.region_name || '' : ''\n        },\n        province: {\n          code: this.selectedProvince,\n          name: Array.isArray(this.provinces) ? this.provinces.find(p => p.province_code === this.selectedProvince)?.province_name || '' : ''\n        },\n        city: {\n          code: this.selectedCity,\n          name: Array.isArray(this.cities) ? this.cities.find(c => c.city_code === this.selectedCity)?.city_name || '' : ''\n        },\n        barangay: {\n          code: this.selectedBarangay,\n          name: Array.isArray(this.barangays) ? this.barangays.find(b => b.brgy_code === this.selectedBarangay)?.brgy_name || '' : ''\n        }\n      };\n      this.$emit('address-change', addressData);\n    },\n    // Clear specific error\n    clearError(field) {\n      if (this.errors[field]) {\n        this.errors = {\n          ...this.errors\n        };\n        delete this.errors[field];\n      }\n    },\n    // Validate the component\n    validate() {\n      const errors = {};\n      if (!this.selectedRegion) {\n        errors.region = 'Region is required';\n      }\n      if (!this.selectedProvince) {\n        errors.province = 'Province is required';\n      }\n      if (!this.selectedCity) {\n        errors.city = 'City/Municipality is required';\n      }\n      if (!this.selectedBarangay) {\n        errors.barangay = 'Barangay is required';\n      }\n      this.errors = errors;\n      return Object.keys(errors).length === 0;\n    },\n    // Get current address data\n    getAddressData() {\n      return {\n        region_code: this.selectedRegion,\n        province_code: this.selectedProvince,\n        city_code: this.selectedCity,\n        barangay_code: this.selectedBarangay,\n        region_name: this.regions.find(r => r.region_code === this.selectedRegion)?.region_name || '',\n        province_name: this.provinces.find(p => p.province_code === this.selectedProvince)?.province_name || '',\n        city_name: this.cities.find(c => c.city_code === this.selectedCity)?.city_name || '',\n        barangay_name: this.barangays.find(b => b.brgy_code === this.selectedBarangay)?.brgy_name || ''\n      };\n    },\n    // Reset the component\n    reset() {\n      this.selectedRegion = '';\n      this.selectedProvince = '';\n      this.selectedCity = '';\n      this.selectedBarangay = '';\n      this.provinces = [];\n      this.cities = [];\n      this.barangays = [];\n      this.errors = {};\n      this.generalError = '';\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}